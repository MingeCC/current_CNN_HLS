// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] c5_weight_address0;
reg    c5_weight_ce0;
wire   [31:0] c5_weight_q0;
wire   [3:0] c5_bias_address0;
reg    c5_bias_ce0;
wire   [31:0] c5_bias_q0;
reg   [6:0] indvar_flatten5_reg_172;
reg   [6:0] cin_reg_183;
reg   [1:0] indvar_flatten_reg_194;
reg   [0:0] y_reg_205;
reg   [31:0] output_buffer_2_reg_216;
reg   [0:0] x_reg_228;
wire   [3:0] indvar_flatten_next4_fu_259_p2;
reg   [3:0] indvar_flatten_next4_reg_511;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_265_p2;
reg   [0:0] exitcond_flatten_reg_516;
wire   [0:0] exitcond_flatten4_fu_253_p2;
wire   [3:0] tmp_25_mid2_v_v_fu_277_p3;
reg   [3:0] tmp_25_mid2_v_v_reg_524;
wire   [9:0] tmp_25_mid2_fu_310_p2;
reg   [9:0] tmp_25_mid2_reg_536;
wire    ap_CS_fsm_state3;
reg   [31:0] c5_bias_load_reg_541;
wire   [3:0] h_cast9_mid2_cast_fu_346_p1;
reg   [3:0] h_cast9_mid2_cast_reg_546;
wire   [0:0] h_mid2_fu_350_p3;
reg   [0:0] h_mid2_reg_551;
wire   [0:0] exitcond_flatten5_fu_358_p2;
reg   [0:0] exitcond_flatten5_reg_557;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] indvar_flatten_next5_fu_364_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] tmp4_mid2_v_v_fu_400_p3;
reg   [6:0] tmp4_mid2_v_v_reg_566;
wire   [0:0] tmp1_cast_mid2_v_v_fu_429_p3;
reg   [0:0] tmp1_cast_mid2_v_v_reg_571;
wire   [1:0] indvar_flatten_next_fu_478_p3;
wire   [31:0] grp_fu_240_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [1:0] indvar_flatten_next3_fu_501_p3;
wire    ap_CS_fsm_state6;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [3:0] indvar_flatten3_reg_112;
reg   [3:0] cout_reg_123;
reg   [1:0] indvar_flatten4_reg_134;
reg   [0:0] h_reg_146;
reg   [0:0] w_reg_158;
reg   [6:0] ap_phi_mux_cin_phi_fu_187_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_y_phi_fu_209_p4;
reg   [0:0] ap_phi_mux_x_phi_fu_232_p4;
wire   [63:0] c5_bias_load_mid2_fu_285_p1;
wire   [63:0] tmp_30_fu_452_p1;
wire   [63:0] tmp_32_fu_467_p1;
wire   [63:0] tmp_27_fu_490_p1;
reg   [31:0] grp_fu_240_p0;
wire   [31:0] tmp_33_fu_246_p2;
wire   [3:0] cout_s_fu_271_p2;
wire   [0:0] not_exitcond_flatten_2_fu_290_p2;
wire   [3:0] tmp_25_mid2_fu_310_p0;
wire   [0:0] not_exitcond_flatten_3_fu_316_p2;
wire   [0:0] h_not_fu_327_p2;
wire   [0:0] w_mid_fu_301_p2;
wire   [0:0] h_1_fu_333_p2;
wire   [0:0] h_cast9_mid_fu_321_p2;
wire   [0:0] h_cast9_mid2_fu_338_p3;
wire   [0:0] h_mid_fu_295_p2;
wire   [0:0] exitcond_flatten1_fu_370_p2;
wire   [0:0] not_exitcond_flatten_fu_376_p2;
wire   [6:0] cin_s_fu_394_p2;
wire   [9:0] tmp4_mid2_v_fu_408_p1;
wire   [0:0] y_not_fu_417_p2;
wire   [0:0] x_mid_fu_388_p2;
wire   [0:0] y_1_fu_423_p2;
wire   [0:0] y_mid_fu_382_p2;
wire   [0:0] tmp1_cast_mid2_v_fu_437_p2;
wire   [6:0] tmp1_cast_mid2_fu_442_p1;
wire   [6:0] tmp_29_fu_446_p2;
wire   [9:0] tmp5_cast_fu_457_p1;
wire   [9:0] tmp4_mid2_fu_412_p2;
wire   [9:0] tmp_31_fu_461_p2;
wire   [1:0] indvar_flatten_op_fu_472_p2;
wire   [3:0] tmp_26_fu_486_p2;
wire   [1:0] indvar_flatten23_op_fu_495_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] tmp_25_mid2_fu_310_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv1_5_c5_weight #(
    .DataWidth( 32 ),
    .AddressRange( 840 ),
    .AddressWidth( 10 ))
c5_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c5_weight_address0),
    .ce0(c5_weight_ce0),
    .q0(c5_weight_q0)
);

conv1_5_c5_bias #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
c5_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c5_bias_address0),
    .ce0(c5_bias_ce0),
    .q0(c5_bias_q0)
);

top_net_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fadd_32nsbkb_U35(
    .din0(grp_fu_240_p0),
    .din1(output_buffer_2_reg_216),
    .dout(grp_fu_240_p2)
);

top_net_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fmul_32nscud_U36(
    .din0(in_r_q0),
    .din1(c5_weight_q0),
    .dout(tmp_33_fu_246_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cin_reg_183 <= tmp4_mid2_v_v_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cin_reg_183 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cout_reg_123 <= tmp_25_mid2_v_v_reg_524;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cout_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_reg_146 <= h_mid2_reg_551;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_146 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten3_reg_112 <= indvar_flatten_next4_reg_511;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten3_reg_112 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten4_reg_134 <= indvar_flatten_next3_fu_501_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten4_reg_134 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten5_reg_172 <= indvar_flatten_next5_fu_364_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten5_reg_172 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_194 <= indvar_flatten_next_fu_478_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_194 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_2_reg_216 <= grp_fu_240_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_2_reg_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_158 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_reg_158 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_228 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_228 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_reg_205 <= tmp1_cast_mid2_v_v_reg_571;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_205 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c5_bias_load_reg_541 <= c5_bias_q0;
        h_cast9_mid2_cast_reg_546[0] <= h_cast9_mid2_cast_fu_346_p1[0];
        h_mid2_reg_551 <= h_mid2_fu_350_p3;
        tmp_25_mid2_reg_536[9 : 2] <= tmp_25_mid2_fu_310_p2[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten5_reg_557 <= exitcond_flatten5_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond_flatten_reg_516 <= exitcond_flatten_fu_265_p2;
        tmp_25_mid2_v_v_reg_524 <= tmp_25_mid2_v_v_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next4_reg_511 <= indvar_flatten_next4_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_cast_mid2_v_v_reg_571 <= tmp1_cast_mid2_v_v_fu_429_p3;
        tmp4_mid2_v_v_reg_566 <= tmp4_mid2_v_v_fu_400_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten5_fu_358_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten4_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cin_phi_fu_187_p4 = tmp4_mid2_v_v_reg_566;
    end else begin
        ap_phi_mux_cin_phi_fu_187_p4 = cin_reg_183;
    end
end

always @ (*) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_x_phi_fu_232_p4 = 1'd1;
    end else begin
        ap_phi_mux_x_phi_fu_232_p4 = x_reg_228;
    end
end

always @ (*) begin
    if (((exitcond_flatten5_reg_557 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_209_p4 = tmp1_cast_mid2_v_v_reg_571;
    end else begin
        ap_phi_mux_y_phi_fu_209_p4 = y_reg_205;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c5_bias_ce0 = 1'b1;
    end else begin
        c5_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c5_weight_ce0 = 1'b1;
    end else begin
        c5_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_240_p0 = c5_bias_load_reg_541;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_240_p0 = tmp_33_fu_246_p2;
    end else begin
        grp_fu_240_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten4_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten5_fu_358_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten5_fu_358_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c5_bias_address0 = c5_bias_load_mid2_fu_285_p1;

assign c5_bias_load_mid2_fu_285_p1 = tmp_25_mid2_v_v_fu_277_p3;

assign c5_weight_address0 = tmp_32_fu_467_p1;

assign cin_s_fu_394_p2 = (ap_phi_mux_cin_phi_fu_187_p4 + 7'd1);

assign cout_s_fu_271_p2 = (cout_reg_123 + 4'd1);

assign exitcond_flatten1_fu_370_p2 = ((indvar_flatten_reg_194 == 2'd1) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_253_p2 = ((indvar_flatten3_reg_112 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_flatten5_fu_358_p2 = ((indvar_flatten5_reg_172 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_265_p2 = ((indvar_flatten4_reg_134 == 2'd1) ? 1'b1 : 1'b0);

assign h_1_fu_333_p2 = (h_not_fu_327_p2 | exitcond_flatten_reg_516);

assign h_cast9_mid2_cast_fu_346_p1 = h_cast9_mid2_fu_338_p3;

assign h_cast9_mid2_fu_338_p3 = ((w_mid_fu_301_p2[0:0] === 1'b1) ? h_1_fu_333_p2 : h_cast9_mid_fu_321_p2);

assign h_cast9_mid_fu_321_p2 = (not_exitcond_flatten_3_fu_316_p2 & h_reg_146);

assign h_mid2_fu_350_p3 = ((w_mid_fu_301_p2[0:0] === 1'b1) ? h_1_fu_333_p2 : h_mid_fu_295_p2);

assign h_mid_fu_295_p2 = (not_exitcond_flatten_2_fu_290_p2 & h_reg_146);

assign h_not_fu_327_p2 = (h_reg_146 ^ 1'd1);

assign in_r_address0 = tmp_30_fu_452_p1;

assign indvar_flatten23_op_fu_495_p2 = (indvar_flatten4_reg_134 + 2'd1);

assign indvar_flatten_next3_fu_501_p3 = ((exitcond_flatten_reg_516[0:0] === 1'b1) ? 2'd1 : indvar_flatten23_op_fu_495_p2);

assign indvar_flatten_next4_fu_259_p2 = (indvar_flatten3_reg_112 + 4'd1);

assign indvar_flatten_next5_fu_364_p2 = (indvar_flatten5_reg_172 + 7'd1);

assign indvar_flatten_next_fu_478_p3 = ((exitcond_flatten1_fu_370_p2[0:0] === 1'b1) ? 2'd1 : indvar_flatten_op_fu_472_p2);

assign indvar_flatten_op_fu_472_p2 = (indvar_flatten_reg_194 + 2'd1);

assign not_exitcond_flatten_2_fu_290_p2 = (exitcond_flatten_reg_516 ^ 1'd1);

assign not_exitcond_flatten_3_fu_316_p2 = (exitcond_flatten_reg_516 ^ 1'd1);

assign not_exitcond_flatten_fu_376_p2 = (exitcond_flatten1_fu_370_p2 ^ 1'd1);

assign output_r_address0 = tmp_27_fu_490_p1;

assign output_r_d0 = grp_fu_240_p2;

assign tmp1_cast_mid2_fu_442_p1 = tmp1_cast_mid2_v_fu_437_p2;

assign tmp1_cast_mid2_v_fu_437_p2 = (tmp1_cast_mid2_v_v_fu_429_p3 ^ h_mid2_reg_551);

assign tmp1_cast_mid2_v_v_fu_429_p3 = ((x_mid_fu_388_p2[0:0] === 1'b1) ? y_1_fu_423_p2 : y_mid_fu_382_p2);

assign tmp4_mid2_fu_412_p2 = (tmp4_mid2_v_fu_408_p1 + tmp_25_mid2_reg_536);

assign tmp4_mid2_v_fu_408_p1 = tmp4_mid2_v_v_fu_400_p3;

assign tmp4_mid2_v_v_fu_400_p3 = ((exitcond_flatten1_fu_370_p2[0:0] === 1'b1) ? cin_s_fu_394_p2 : ap_phi_mux_cin_phi_fu_187_p4);

assign tmp5_cast_fu_457_p1 = tmp1_cast_mid2_v_v_fu_429_p3;

assign tmp_25_mid2_fu_310_p0 = tmp_25_mid2_fu_310_p00;

assign tmp_25_mid2_fu_310_p00 = tmp_25_mid2_v_v_reg_524;

assign tmp_25_mid2_fu_310_p2 = (tmp_25_mid2_fu_310_p0 * $signed('h54));

assign tmp_25_mid2_v_v_fu_277_p3 = ((exitcond_flatten_fu_265_p2[0:0] === 1'b1) ? cout_s_fu_271_p2 : cout_reg_123);

assign tmp_26_fu_486_p2 = (tmp_25_mid2_v_v_reg_524 + h_cast9_mid2_cast_reg_546);

assign tmp_27_fu_490_p1 = tmp_26_fu_486_p2;

assign tmp_29_fu_446_p2 = (tmp4_mid2_v_v_fu_400_p3 + tmp1_cast_mid2_fu_442_p1);

assign tmp_30_fu_452_p1 = tmp_29_fu_446_p2;

assign tmp_31_fu_461_p2 = (tmp5_cast_fu_457_p1 + tmp4_mid2_fu_412_p2);

assign tmp_32_fu_467_p1 = tmp_31_fu_461_p2;

assign w_mid_fu_301_p2 = (w_reg_158 & not_exitcond_flatten_2_fu_290_p2);

assign x_mid_fu_388_p2 = (not_exitcond_flatten_fu_376_p2 & ap_phi_mux_x_phi_fu_232_p4);

assign y_1_fu_423_p2 = (y_not_fu_417_p2 | exitcond_flatten1_fu_370_p2);

assign y_mid_fu_382_p2 = (not_exitcond_flatten_fu_376_p2 & ap_phi_mux_y_phi_fu_209_p4);

assign y_not_fu_417_p2 = (ap_phi_mux_y_phi_fu_209_p4 ^ 1'd1);

always @ (posedge ap_clk) begin
    tmp_25_mid2_reg_536[1:0] <= 2'b00;
    h_cast9_mid2_cast_reg_546[3:1] <= 3'b000;
end

endmodule //conv1_5
