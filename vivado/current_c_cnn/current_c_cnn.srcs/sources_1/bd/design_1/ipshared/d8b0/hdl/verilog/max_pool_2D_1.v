// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2D_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [12:0] in_r_address1;
output   in_r_ce1;
input  [31:0] in_r_q1;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] in_r_address0;
reg in_r_ce0;
reg[12:0] in_r_address1;
reg in_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten1_reg_151;
reg   [3:0] i_reg_162;
reg   [6:0] indvar_flatten_reg_173;
reg   [3:0] j_reg_184;
reg   [2:0] n_reg_195;
wire   [0:0] exitcond_flatten1_fu_228_p2;
reg   [0:0] exitcond_flatten1_reg_687;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] indvar_flatten_next1_fu_234_p2;
reg   [10:0] indvar_flatten_next1_reg_691;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] i_cast1_mid2_v_fu_260_p3;
reg   [3:0] i_cast1_mid2_v_reg_696;
wire   [2:0] n_mid2_fu_336_p3;
reg   [2:0] n_mid2_reg_702;
wire   [3:0] j_cast9_mid2_fu_344_p3;
reg   [3:0] j_cast9_mid2_reg_709;
wire  signed [13:0] tmp_6_fu_452_p2;
reg  signed [13:0] tmp_6_reg_715;
wire  signed [13:0] tmp_4_fu_467_p2;
reg  signed [13:0] tmp_4_reg_725;
wire  signed [13:0] tmp_12_fu_514_p2;
reg  signed [13:0] tmp_12_reg_735;
wire  signed [13:0] tmp_14_fu_520_p2;
reg  signed [13:0] tmp_14_reg_741;
wire   [6:0] indvar_flatten_next_fu_532_p3;
reg   [6:0] indvar_flatten_next_reg_747;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire  signed [13:0] max_val_1_fu_548_p3;
reg  signed [13:0] max_val_1_reg_757;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire  signed [13:0] max_val_2_fu_571_p3;
reg  signed [13:0] max_val_2_reg_772;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [2:0] n_1_fu_601_p2;
reg   [2:0] n_1_reg_787;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten1_phi_fu_155_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i_phi_fu_166_p4;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_177_p4;
reg   [3:0] ap_phi_mux_j_phi_fu_188_p4;
reg   [2:0] ap_phi_mux_n_phi_fu_199_p4;
wire   [63:0] tmp_1_fu_462_p1;
wire   [63:0] tmp_5_fu_477_p1;
wire   [63:0] tmp_13_fu_543_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] max_val_1_cast_fu_558_p1;
wire   [63:0] tmp_15_fu_566_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] max_val_2_cast_fu_581_p1;
wire   [63:0] max_val_3_cast_fu_596_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_19_fu_682_p1;
reg   [31:0] grp_fu_206_p0;
reg   [31:0] grp_fu_206_p1;
wire   [4:0] tmp_7_fu_214_p3;
wire   [0:0] exitcond_flatten_fu_240_p2;
wire   [3:0] i_s_fu_254_p2;
wire   [4:0] tmp_4_cast_mid2_v_fu_268_p3;
wire   [4:0] tmp_5_cast_mid2_v_fu_280_p2;
wire   [4:0] tmp_8_fu_222_p2;
wire   [0:0] exitcond_fu_312_p2;
wire   [0:0] not_exitcond_flatten_fu_306_p2;
wire   [3:0] j_mid_fu_246_p3;
wire   [0:0] exitcond_mid_fu_318_p2;
wire   [0:0] tmp_fu_330_p2;
wire   [3:0] j_1_fu_324_p2;
wire   [4:0] tmp_7_mid1_fu_352_p3;
wire   [4:0] tmp_7_cast_mid_fu_290_p3;
wire   [4:0] tmp_7_cast_mid2_fu_360_p3;
wire   [4:0] tmp_8_mid1_fu_372_p2;
wire   [4:0] tmp_8_cast_mid_fu_298_p3;
wire   [4:0] tmp_8_cast_mid2_fu_378_p3;
wire   [7:0] p_shl4_fu_390_p3;
wire   [4:0] p_shl5_fu_402_p3;
wire   [8:0] p_shl4_cast_fu_398_p1;
wire   [8:0] p_shl5_cast_fu_410_p1;
wire   [8:0] tmp_9_fu_414_p2;
wire   [8:0] tmp_4_cast_mid2_fu_276_p1;
wire   [8:0] tmp_s_fu_420_p2;
wire   [10:0] p_shl3_fu_434_p3;
wire   [13:0] p_shl2_fu_426_p3;
wire  signed [13:0] p_shl3_cast_fu_442_p1;
wire   [13:0] tmp_3_fu_446_p2;
wire   [13:0] tmp_7_cast_mid2_cast_fu_368_p1;
wire  signed [31:0] tmp_6_cast_fu_458_p1;
wire   [13:0] tmp_8_cast_mid2_cast_fu_386_p1;
wire  signed [31:0] tmp_11_cast_fu_473_p1;
wire   [8:0] tmp_5_cast_mid2_fu_286_p1;
wire   [8:0] tmp_10_fu_482_p2;
wire   [10:0] p_shl1_fu_496_p3;
wire   [13:0] p_shl_fu_488_p3;
wire  signed [13:0] p_shl1_cast_fu_504_p1;
wire   [13:0] tmp_11_fu_508_p2;
wire   [6:0] indvar_flatten_op_fu_526_p2;
wire  signed [31:0] tmp_15_cast_fu_540_p1;
wire   [0:0] grp_fu_206_p2;
wire  signed [31:0] max_val_1_cast1_fu_554_p1;
wire  signed [31:0] tmp_17_cast_fu_563_p1;
wire  signed [31:0] max_val_2_cast1_fu_577_p1;
wire   [13:0] max_val_3_fu_586_p3;
wire  signed [31:0] max_val_3_cast1_fu_592_p1;
wire   [6:0] p_shl8_fu_612_p3;
wire   [3:0] p_shl9_fu_623_p3;
wire   [7:0] p_shl8_cast_fu_619_p1;
wire   [7:0] p_shl9_cast_fu_630_p1;
wire   [7:0] tmp_17_fu_634_p2;
wire   [7:0] i_cast1_mid2_fu_606_p1;
wire   [7:0] tmp5_fu_640_p2;
wire   [8:0] p_shl7_fu_654_p3;
wire   [11:0] p_shl6_fu_646_p3;
wire  signed [11:0] p_shl7_cast_fu_662_p1;
wire   [11:0] tmp6_fu_666_p2;
wire   [11:0] j_cast9_mid2_cast_fu_609_p1;
wire   [11:0] tmp_18_fu_672_p2;
wire  signed [31:0] tmp_21_cast_fu_678_p1;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

top_net_fcmp_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_net_fcmp_32nsdEe_U10(
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .opcode(5'd2),
    .dout(grp_fu_206_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_162 <= i_cast1_mid2_v_reg_696;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_162 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten1_reg_151 <= indvar_flatten_next1_reg_691;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten1_reg_151 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_173 <= indvar_flatten_next_reg_747;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_173 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_184 <= j_cast9_mid2_reg_709;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n_reg_195 <= n_1_reg_787;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_reg_195 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_687 <= exitcond_flatten1_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_228_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast1_mid2_v_reg_696 <= i_cast1_mid2_v_fu_260_p3;
        indvar_flatten_next_reg_747 <= indvar_flatten_next_fu_532_p3;
        j_cast9_mid2_reg_709 <= j_cast9_mid2_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next1_reg_691 <= indvar_flatten_next1_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_val_1_reg_757 <= max_val_1_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        max_val_2_reg_772 <= max_val_2_fu_571_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        n_1_reg_787 <= n_1_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_mid2_reg_702 <= n_mid2_fu_336_p3;
        tmp_12_reg_735[13 : 1] <= tmp_12_fu_514_p2[13 : 1];
        tmp_14_reg_741[13 : 1] <= tmp_14_fu_520_p2[13 : 1];
        tmp_4_reg_725[13 : 1] <= tmp_4_fu_467_p2[13 : 1];
        tmp_6_reg_715[13 : 1] <= tmp_6_fu_452_p2[13 : 1];
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_228_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_166_p4 = i_cast1_mid2_v_reg_696;
    end else begin
        ap_phi_mux_i_phi_fu_166_p4 = i_reg_162;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten1_phi_fu_155_p4 = indvar_flatten_next1_reg_691;
    end else begin
        ap_phi_mux_indvar_flatten1_phi_fu_155_p4 = indvar_flatten1_reg_151;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_177_p4 = indvar_flatten_next_reg_747;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_177_p4 = indvar_flatten_reg_173;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_188_p4 = j_cast9_mid2_reg_709;
    end else begin
        ap_phi_mux_j_phi_fu_188_p4 = j_reg_184;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_n_phi_fu_199_p4 = n_1_reg_787;
    end else begin
        ap_phi_mux_n_phi_fu_199_p4 = n_reg_195;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_206_p0 = in_r_q0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_206_p0 = in_r_q1;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_206_p1 = in_r_q1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_206_p1 = in_r_q0;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            in_r_address0 = max_val_3_cast_fu_596_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            in_r_address0 = tmp_15_fu_566_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            in_r_address0 = tmp_13_fu_543_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            in_r_address0 = tmp_1_fu_462_p1;
        end else begin
            in_r_address0 = 'bx;
        end
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            in_r_address1 = max_val_2_cast_fu_581_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            in_r_address1 = max_val_1_cast_fu_558_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            in_r_address1 = tmp_5_fu_477_p1;
        end else begin
            in_r_address1 = 'bx;
        end
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_687 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten1_fu_228_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten1_fu_228_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten1_fu_228_p2 = ((ap_phi_mux_indvar_flatten1_phi_fu_155_p4 == 11'd1176) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_240_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_177_p4 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_312_p2 = ((ap_phi_mux_n_phi_fu_199_p4 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_318_p2 = (not_exitcond_flatten_fu_306_p2 & exitcond_fu_312_p2);

assign i_cast1_mid2_fu_606_p1 = i_cast1_mid2_v_reg_696;

assign i_cast1_mid2_v_fu_260_p3 = ((exitcond_flatten_fu_240_p2[0:0] === 1'b1) ? i_s_fu_254_p2 : ap_phi_mux_i_phi_fu_166_p4);

assign i_s_fu_254_p2 = (ap_phi_mux_i_phi_fu_166_p4 + 4'd1);

assign indvar_flatten_next1_fu_234_p2 = (ap_phi_mux_indvar_flatten1_phi_fu_155_p4 + 11'd1);

assign indvar_flatten_next_fu_532_p3 = ((exitcond_flatten_fu_240_p2[0:0] === 1'b1) ? 7'd1 : indvar_flatten_op_fu_526_p2);

assign indvar_flatten_op_fu_526_p2 = (ap_phi_mux_indvar_flatten_phi_fu_177_p4 + 7'd1);

assign j_1_fu_324_p2 = (j_mid_fu_246_p3 + 4'd1);

assign j_cast9_mid2_cast_fu_609_p1 = j_cast9_mid2_reg_709;

assign j_cast9_mid2_fu_344_p3 = ((exitcond_mid_fu_318_p2[0:0] === 1'b1) ? j_1_fu_324_p2 : j_mid_fu_246_p3);

assign j_mid_fu_246_p3 = ((exitcond_flatten_fu_240_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j_phi_fu_188_p4);

assign max_val_1_cast1_fu_554_p1 = max_val_1_fu_548_p3;

assign max_val_1_cast_fu_558_p1 = $unsigned(max_val_1_cast1_fu_554_p1);

assign max_val_1_fu_548_p3 = ((grp_fu_206_p2[0:0] === 1'b1) ? tmp_4_reg_725 : tmp_6_reg_715);

assign max_val_2_cast1_fu_577_p1 = max_val_2_fu_571_p3;

assign max_val_2_cast_fu_581_p1 = $unsigned(max_val_2_cast1_fu_577_p1);

assign max_val_2_fu_571_p3 = ((grp_fu_206_p2[0:0] === 1'b1) ? tmp_12_reg_735 : max_val_1_reg_757);

assign max_val_3_cast1_fu_592_p1 = $signed(max_val_3_fu_586_p3);

assign max_val_3_cast_fu_596_p1 = $unsigned(max_val_3_cast1_fu_592_p1);

assign max_val_3_fu_586_p3 = ((grp_fu_206_p2[0:0] === 1'b1) ? tmp_14_reg_741 : max_val_2_reg_772);

assign n_1_fu_601_p2 = (n_mid2_reg_702 + 3'd1);

assign n_mid2_fu_336_p3 = ((tmp_fu_330_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_n_phi_fu_199_p4);

assign not_exitcond_flatten_fu_306_p2 = (exitcond_flatten_fu_240_p2 ^ 1'd1);

assign output_r_address0 = tmp_19_fu_682_p1;

assign output_r_d0 = in_r_q0;

assign p_shl1_cast_fu_504_p1 = $signed(p_shl1_fu_496_p3);

assign p_shl1_fu_496_p3 = {{tmp_10_fu_482_p2}, {2'd0}};

assign p_shl2_fu_426_p3 = {{tmp_s_fu_420_p2}, {5'd0}};

assign p_shl3_cast_fu_442_p1 = $signed(p_shl3_fu_434_p3);

assign p_shl3_fu_434_p3 = {{tmp_s_fu_420_p2}, {2'd0}};

assign p_shl4_cast_fu_398_p1 = p_shl4_fu_390_p3;

assign p_shl4_fu_390_p3 = {{n_mid2_fu_336_p3}, {5'd0}};

assign p_shl5_cast_fu_410_p1 = p_shl5_fu_402_p3;

assign p_shl5_fu_402_p3 = {{n_mid2_fu_336_p3}, {2'd0}};

assign p_shl6_fu_646_p3 = {{tmp5_fu_640_p2}, {4'd0}};

assign p_shl7_cast_fu_662_p1 = $signed(p_shl7_fu_654_p3);

assign p_shl7_fu_654_p3 = {{tmp5_fu_640_p2}, {1'd0}};

assign p_shl8_cast_fu_619_p1 = p_shl8_fu_612_p3;

assign p_shl8_fu_612_p3 = {{n_mid2_reg_702}, {4'd0}};

assign p_shl9_cast_fu_630_p1 = p_shl9_fu_623_p3;

assign p_shl9_fu_623_p3 = {{n_mid2_reg_702}, {1'd0}};

assign p_shl_fu_488_p3 = {{tmp_10_fu_482_p2}, {5'd0}};

assign tmp5_fu_640_p2 = (tmp_17_fu_634_p2 + i_cast1_mid2_fu_606_p1);

assign tmp6_fu_666_p2 = ($signed(p_shl6_fu_646_p3) - $signed(p_shl7_cast_fu_662_p1));

assign tmp_10_fu_482_p2 = (tmp_9_fu_414_p2 + tmp_5_cast_mid2_fu_286_p1);

assign tmp_11_cast_fu_473_p1 = tmp_4_fu_467_p2;

assign tmp_11_fu_508_p2 = ($signed(p_shl_fu_488_p3) - $signed(p_shl1_cast_fu_504_p1));

assign tmp_12_fu_514_p2 = (tmp_11_fu_508_p2 + tmp_7_cast_mid2_cast_fu_368_p1);

assign tmp_13_fu_543_p1 = $unsigned(tmp_15_cast_fu_540_p1);

assign tmp_14_fu_520_p2 = (tmp_11_fu_508_p2 + tmp_8_cast_mid2_cast_fu_386_p1);

assign tmp_15_cast_fu_540_p1 = tmp_12_reg_735;

assign tmp_15_fu_566_p1 = $unsigned(tmp_17_cast_fu_563_p1);

assign tmp_17_cast_fu_563_p1 = tmp_14_reg_741;

assign tmp_17_fu_634_p2 = (p_shl8_cast_fu_619_p1 - p_shl9_cast_fu_630_p1);

assign tmp_18_fu_672_p2 = (tmp6_fu_666_p2 + j_cast9_mid2_cast_fu_609_p1);

assign tmp_19_fu_682_p1 = $unsigned(tmp_21_cast_fu_678_p1);

assign tmp_1_fu_462_p1 = $unsigned(tmp_6_cast_fu_458_p1);

assign tmp_21_cast_fu_678_p1 = $signed(tmp_18_fu_672_p2);

assign tmp_3_fu_446_p2 = ($signed(p_shl2_fu_426_p3) - $signed(p_shl3_cast_fu_442_p1));

assign tmp_4_cast_mid2_fu_276_p1 = tmp_4_cast_mid2_v_fu_268_p3;

assign tmp_4_cast_mid2_v_fu_268_p3 = {{i_cast1_mid2_v_fu_260_p3}, {1'd0}};

assign tmp_4_fu_467_p2 = (tmp_3_fu_446_p2 + tmp_8_cast_mid2_cast_fu_386_p1);

assign tmp_5_cast_mid2_fu_286_p1 = tmp_5_cast_mid2_v_fu_280_p2;

assign tmp_5_cast_mid2_v_fu_280_p2 = (tmp_4_cast_mid2_v_fu_268_p3 | 5'd1);

assign tmp_5_fu_477_p1 = $unsigned(tmp_11_cast_fu_473_p1);

assign tmp_6_cast_fu_458_p1 = tmp_6_fu_452_p2;

assign tmp_6_fu_452_p2 = (tmp_3_fu_446_p2 + tmp_7_cast_mid2_cast_fu_368_p1);

assign tmp_7_cast_mid2_cast_fu_368_p1 = tmp_7_cast_mid2_fu_360_p3;

assign tmp_7_cast_mid2_fu_360_p3 = ((exitcond_mid_fu_318_p2[0:0] === 1'b1) ? tmp_7_mid1_fu_352_p3 : tmp_7_cast_mid_fu_290_p3);

assign tmp_7_cast_mid_fu_290_p3 = ((exitcond_flatten_fu_240_p2[0:0] === 1'b1) ? 5'd0 : tmp_7_fu_214_p3);

assign tmp_7_fu_214_p3 = {{ap_phi_mux_j_phi_fu_188_p4}, {1'd0}};

assign tmp_7_mid1_fu_352_p3 = {{j_1_fu_324_p2}, {1'd0}};

assign tmp_8_cast_mid2_cast_fu_386_p1 = tmp_8_cast_mid2_fu_378_p3;

assign tmp_8_cast_mid2_fu_378_p3 = ((exitcond_mid_fu_318_p2[0:0] === 1'b1) ? tmp_8_mid1_fu_372_p2 : tmp_8_cast_mid_fu_298_p3);

assign tmp_8_cast_mid_fu_298_p3 = ((exitcond_flatten_fu_240_p2[0:0] === 1'b1) ? 5'd1 : tmp_8_fu_222_p2);

assign tmp_8_fu_222_p2 = (tmp_7_fu_214_p3 | 5'd1);

assign tmp_8_mid1_fu_372_p2 = (tmp_7_mid1_fu_352_p3 | 5'd1);

assign tmp_9_fu_414_p2 = (p_shl4_cast_fu_398_p1 - p_shl5_cast_fu_410_p1);

assign tmp_fu_330_p2 = (exitcond_mid_fu_318_p2 | exitcond_flatten_fu_240_p2);

assign tmp_s_fu_420_p2 = (tmp_9_fu_414_p2 + tmp_4_cast_mid2_fu_276_p1);

always @ (posedge ap_clk) begin
    tmp_6_reg_715[0] <= 1'b0;
    tmp_4_reg_725[0] <= 1'b1;
    tmp_12_reg_735[0] <= 1'b0;
    tmp_14_reg_741[0] <= 1'b1;
end

endmodule //max_pool_2D_1
