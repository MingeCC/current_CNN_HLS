// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] c4_weight_address0;
reg    c4_weight_ce0;
wire   [31:0] c4_weight_q0;
wire   [6:0] c4_bias_address0;
reg    c4_bias_ce0;
wire   [31:0] c4_bias_q0;
reg   [6:0] indvar_flatten8_reg_172;
reg   [6:0] cin_reg_183;
reg   [1:0] indvar_flatten_reg_194;
reg   [0:0] y_reg_205;
reg   [31:0] output_buffer_2_reg_216;
reg   [0:0] x_reg_228;
wire   [6:0] indvar_flatten_next7_fu_289_p2;
reg   [6:0] indvar_flatten_next7_reg_574;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_295_p2;
reg   [0:0] exitcond_flatten_reg_579;
wire   [0:0] exitcond_flatten7_fu_283_p2;
wire   [14:0] tmp_32_mid2_fu_337_p3;
reg   [14:0] tmp_32_mid2_reg_587;
wire   [6:0] c4_bias_load_mid2_v_fu_345_p3;
reg   [6:0] c4_bias_load_mid2_v_reg_592;
reg   [31:0] c4_bias_load_reg_603;
wire    ap_CS_fsm_state3;
wire   [6:0] h_cast9_mid2_cast_fu_405_p1;
reg   [6:0] h_cast9_mid2_cast_reg_608;
wire   [0:0] h_mid2_fu_409_p3;
reg   [0:0] h_mid2_reg_613;
wire   [0:0] exitcond_flatten8_fu_417_p2;
reg   [0:0] exitcond_flatten8_reg_619;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] indvar_flatten_next8_fu_423_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] tmp4_mid2_v_v_fu_459_p3;
reg   [6:0] tmp4_mid2_v_v_reg_628;
wire   [0:0] tmp1_cast_mid2_v_v_fu_488_p3;
reg   [0:0] tmp1_cast_mid2_v_v_reg_633;
wire   [1:0] indvar_flatten_next_fu_541_p3;
wire   [31:0] grp_fu_240_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [1:0] indvar_flatten_next6_fu_564_p3;
wire    ap_CS_fsm_state6;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [6:0] indvar_flatten6_reg_112;
reg   [6:0] cout_reg_123;
reg   [1:0] indvar_flatten7_reg_134;
reg   [0:0] h_reg_146;
reg   [0:0] w_reg_158;
reg   [6:0] ap_phi_mux_cin_phi_fu_187_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_y_phi_fu_209_p4;
reg   [0:0] ap_phi_mux_x_phi_fu_232_p4;
wire   [63:0] c4_bias_load_mid2_fu_353_p1;
wire   [63:0] tmp_39_fu_511_p1;
wire   [63:0] tmp_41_fu_530_p1;
wire   [63:0] tmp_36_fu_553_p1;
reg   [31:0] grp_fu_240_p0;
wire   [31:0] tmp_42_fu_246_p2;
wire   [13:0] p_shl_fu_253_p3;
wire   [9:0] p_shl1_fu_265_p3;
wire   [14:0] p_shl_cast_fu_261_p1;
wire   [14:0] p_shl1_cast_fu_273_p1;
wire   [6:0] cout_s_fu_301_p2;
wire   [13:0] p_shl_mid1_fu_307_p3;
wire   [9:0] p_shl1_mid1_fu_319_p3;
wire   [14:0] p_shl_cast_mid1_fu_315_p1;
wire   [14:0] p_shl1_cast_mid1_fu_327_p1;
wire   [14:0] tmp_32_mid1_fu_331_p2;
wire   [14:0] tmp_32_fu_277_p2;
wire   [0:0] not_exitcond_flatten_4_fu_358_p2;
wire   [0:0] not_exitcond_flatten_5_fu_375_p2;
wire   [0:0] h_not_fu_386_p2;
wire   [0:0] w_mid_fu_369_p2;
wire   [0:0] h_1_fu_392_p2;
wire   [0:0] h_cast9_mid_fu_380_p2;
wire   [0:0] h_cast9_mid2_fu_397_p3;
wire   [0:0] h_mid_fu_363_p2;
wire   [0:0] exitcond_flatten2_fu_429_p2;
wire   [0:0] not_exitcond_flatten_fu_435_p2;
wire   [6:0] cin_s_fu_453_p2;
wire   [14:0] tmp4_mid2_v_fu_467_p1;
wire   [0:0] y_not_fu_476_p2;
wire   [0:0] x_mid_fu_447_p2;
wire   [0:0] y_1_fu_482_p2;
wire   [0:0] y_mid_fu_441_p2;
wire   [0:0] tmp1_cast_mid2_v_fu_496_p2;
wire   [6:0] tmp1_cast_mid2_fu_501_p1;
wire   [6:0] tmp_38_fu_505_p2;
wire   [14:0] tmp5_cast_fu_516_p1;
wire   [14:0] tmp4_mid2_fu_471_p2;
wire   [14:0] tmp_40_fu_520_p2;
wire  signed [31:0] tmp_55_cast_fu_526_p1;
wire   [1:0] indvar_flatten_op_fu_535_p2;
wire   [6:0] tmp_35_fu_549_p2;
wire   [1:0] indvar_flatten23_op_fu_558_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv1_4_c4_weight #(
    .DataWidth( 32 ),
    .AddressRange( 10080 ),
    .AddressWidth( 14 ))
c4_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c4_weight_address0),
    .ce0(c4_weight_ce0),
    .q0(c4_weight_q0)
);

conv1_4_c4_bias #(
    .DataWidth( 32 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
c4_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c4_bias_address0),
    .ce0(c4_bias_ce0),
    .q0(c4_bias_q0)
);

top_net_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fadd_32nsbkb_U29(
    .din0(grp_fu_240_p0),
    .din1(output_buffer_2_reg_216),
    .dout(grp_fu_240_p2)
);

top_net_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fmul_32nscud_U30(
    .din0(in_r_q0),
    .din1(c4_weight_q0),
    .dout(tmp_42_fu_246_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cin_reg_183 <= tmp4_mid2_v_v_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cin_reg_183 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cout_reg_123 <= c4_bias_load_mid2_v_reg_592;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cout_reg_123 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_reg_146 <= h_mid2_reg_613;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_146 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten6_reg_112 <= indvar_flatten_next7_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten6_reg_112 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten7_reg_134 <= indvar_flatten_next6_fu_564_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_134 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten8_reg_172 <= indvar_flatten_next8_fu_423_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten8_reg_172 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_194 <= indvar_flatten_next_fu_541_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_194 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_2_reg_216 <= grp_fu_240_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_2_reg_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_158 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_reg_158 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_228 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_228 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_reg_205 <= tmp1_cast_mid2_v_v_reg_633;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_205 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c4_bias_load_mid2_v_reg_592 <= c4_bias_load_mid2_v_fu_345_p3;
        exitcond_flatten_reg_579 <= exitcond_flatten_fu_295_p2;
        tmp_32_mid2_reg_587[14 : 3] <= tmp_32_mid2_fu_337_p3[14 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c4_bias_load_reg_603 <= c4_bias_q0;
        h_cast9_mid2_cast_reg_608[0] <= h_cast9_mid2_cast_fu_405_p1[0];
        h_mid2_reg_613 <= h_mid2_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten8_reg_619 <= exitcond_flatten8_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next7_reg_574 <= indvar_flatten_next7_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_cast_mid2_v_v_reg_633 <= tmp1_cast_mid2_v_v_fu_488_p3;
        tmp4_mid2_v_v_reg_628 <= tmp4_mid2_v_v_fu_459_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_417_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten7_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cin_phi_fu_187_p4 = tmp4_mid2_v_v_reg_628;
    end else begin
        ap_phi_mux_cin_phi_fu_187_p4 = cin_reg_183;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_x_phi_fu_232_p4 = 1'd1;
    end else begin
        ap_phi_mux_x_phi_fu_232_p4 = x_reg_228;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_619 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_209_p4 = tmp1_cast_mid2_v_v_reg_633;
    end else begin
        ap_phi_mux_y_phi_fu_209_p4 = y_reg_205;
    end
end

always @ (*) begin
    if (((exitcond_flatten7_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c4_bias_ce0 = 1'b1;
    end else begin
        c4_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c4_weight_ce0 = 1'b1;
    end else begin
        c4_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_240_p0 = c4_bias_load_reg_603;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_240_p0 = tmp_42_fu_246_p2;
    end else begin
        grp_fu_240_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten7_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten8_fu_417_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten8_fu_417_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c4_bias_address0 = c4_bias_load_mid2_fu_353_p1;

assign c4_bias_load_mid2_fu_353_p1 = c4_bias_load_mid2_v_fu_345_p3;

assign c4_bias_load_mid2_v_fu_345_p3 = ((exitcond_flatten_fu_295_p2[0:0] === 1'b1) ? cout_s_fu_301_p2 : cout_reg_123);

assign c4_weight_address0 = tmp_41_fu_530_p1;

assign cin_s_fu_453_p2 = (ap_phi_mux_cin_phi_fu_187_p4 + 7'd1);

assign cout_s_fu_301_p2 = (cout_reg_123 + 7'd1);

assign exitcond_flatten2_fu_429_p2 = ((indvar_flatten_reg_194 == 2'd1) ? 1'b1 : 1'b0);

assign exitcond_flatten7_fu_283_p2 = ((indvar_flatten6_reg_112 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_417_p2 = ((indvar_flatten8_reg_172 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_295_p2 = ((indvar_flatten7_reg_134 == 2'd1) ? 1'b1 : 1'b0);

assign h_1_fu_392_p2 = (h_not_fu_386_p2 | exitcond_flatten_reg_579);

assign h_cast9_mid2_cast_fu_405_p1 = h_cast9_mid2_fu_397_p3;

assign h_cast9_mid2_fu_397_p3 = ((w_mid_fu_369_p2[0:0] === 1'b1) ? h_1_fu_392_p2 : h_cast9_mid_fu_380_p2);

assign h_cast9_mid_fu_380_p2 = (not_exitcond_flatten_5_fu_375_p2 & h_reg_146);

assign h_mid2_fu_409_p3 = ((w_mid_fu_369_p2[0:0] === 1'b1) ? h_1_fu_392_p2 : h_mid_fu_363_p2);

assign h_mid_fu_363_p2 = (not_exitcond_flatten_4_fu_358_p2 & h_reg_146);

assign h_not_fu_386_p2 = (h_reg_146 ^ 1'd1);

assign in_r_address0 = tmp_39_fu_511_p1;

assign indvar_flatten23_op_fu_558_p2 = (indvar_flatten7_reg_134 + 2'd1);

assign indvar_flatten_next6_fu_564_p3 = ((exitcond_flatten_reg_579[0:0] === 1'b1) ? 2'd1 : indvar_flatten23_op_fu_558_p2);

assign indvar_flatten_next7_fu_289_p2 = (indvar_flatten6_reg_112 + 7'd1);

assign indvar_flatten_next8_fu_423_p2 = (indvar_flatten8_reg_172 + 7'd1);

assign indvar_flatten_next_fu_541_p3 = ((exitcond_flatten2_fu_429_p2[0:0] === 1'b1) ? 2'd1 : indvar_flatten_op_fu_535_p2);

assign indvar_flatten_op_fu_535_p2 = (indvar_flatten_reg_194 + 2'd1);

assign not_exitcond_flatten_4_fu_358_p2 = (exitcond_flatten_reg_579 ^ 1'd1);

assign not_exitcond_flatten_5_fu_375_p2 = (exitcond_flatten_reg_579 ^ 1'd1);

assign not_exitcond_flatten_fu_435_p2 = (exitcond_flatten2_fu_429_p2 ^ 1'd1);

assign output_r_address0 = tmp_36_fu_553_p1;

assign output_r_d0 = grp_fu_240_p2;

assign p_shl1_cast_fu_273_p1 = p_shl1_fu_265_p3;

assign p_shl1_cast_mid1_fu_327_p1 = p_shl1_mid1_fu_319_p3;

assign p_shl1_fu_265_p3 = {{cout_reg_123}, {3'd0}};

assign p_shl1_mid1_fu_319_p3 = {{cout_s_fu_301_p2}, {3'd0}};

assign p_shl_cast_fu_261_p1 = p_shl_fu_253_p3;

assign p_shl_cast_mid1_fu_315_p1 = p_shl_mid1_fu_307_p3;

assign p_shl_fu_253_p3 = {{cout_reg_123}, {7'd0}};

assign p_shl_mid1_fu_307_p3 = {{cout_s_fu_301_p2}, {7'd0}};

assign tmp1_cast_mid2_fu_501_p1 = tmp1_cast_mid2_v_fu_496_p2;

assign tmp1_cast_mid2_v_fu_496_p2 = (tmp1_cast_mid2_v_v_fu_488_p3 ^ h_mid2_reg_613);

assign tmp1_cast_mid2_v_v_fu_488_p3 = ((x_mid_fu_447_p2[0:0] === 1'b1) ? y_1_fu_482_p2 : y_mid_fu_441_p2);

assign tmp4_mid2_fu_471_p2 = (tmp4_mid2_v_fu_467_p1 + tmp_32_mid2_reg_587);

assign tmp4_mid2_v_fu_467_p1 = tmp4_mid2_v_v_fu_459_p3;

assign tmp4_mid2_v_v_fu_459_p3 = ((exitcond_flatten2_fu_429_p2[0:0] === 1'b1) ? cin_s_fu_453_p2 : ap_phi_mux_cin_phi_fu_187_p4);

assign tmp5_cast_fu_516_p1 = tmp1_cast_mid2_v_v_fu_488_p3;

assign tmp_32_fu_277_p2 = (p_shl_cast_fu_261_p1 - p_shl1_cast_fu_273_p1);

assign tmp_32_mid1_fu_331_p2 = (p_shl_cast_mid1_fu_315_p1 - p_shl1_cast_mid1_fu_327_p1);

assign tmp_32_mid2_fu_337_p3 = ((exitcond_flatten_fu_295_p2[0:0] === 1'b1) ? tmp_32_mid1_fu_331_p2 : tmp_32_fu_277_p2);

assign tmp_35_fu_549_p2 = (c4_bias_load_mid2_v_reg_592 + h_cast9_mid2_cast_reg_608);

assign tmp_36_fu_553_p1 = tmp_35_fu_549_p2;

assign tmp_38_fu_505_p2 = (tmp4_mid2_v_v_fu_459_p3 + tmp1_cast_mid2_fu_501_p1);

assign tmp_39_fu_511_p1 = tmp_38_fu_505_p2;

assign tmp_40_fu_520_p2 = (tmp5_cast_fu_516_p1 + tmp4_mid2_fu_471_p2);

assign tmp_41_fu_530_p1 = $unsigned(tmp_55_cast_fu_526_p1);

assign tmp_55_cast_fu_526_p1 = $signed(tmp_40_fu_520_p2);

assign w_mid_fu_369_p2 = (w_reg_158 & not_exitcond_flatten_4_fu_358_p2);

assign x_mid_fu_447_p2 = (not_exitcond_flatten_fu_435_p2 & ap_phi_mux_x_phi_fu_232_p4);

assign y_1_fu_482_p2 = (y_not_fu_476_p2 | exitcond_flatten2_fu_429_p2);

assign y_mid_fu_441_p2 = (not_exitcond_flatten_fu_435_p2 & ap_phi_mux_y_phi_fu_209_p4);

assign y_not_fu_476_p2 = (ap_phi_mux_y_phi_fu_209_p4 ^ 1'd1);

always @ (posedge ap_clk) begin
    tmp_32_mid2_reg_587[2:0] <= 3'b000;
    h_cast9_mid2_cast_reg_608[6:1] <= 6'b000000;
end

endmodule //conv1_4
