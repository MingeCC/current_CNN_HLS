// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] c2_weight_address0;
reg    c2_weight_ce0;
wire   [31:0] c2_weight_q0;
wire   [3:0] c2_bias_address0;
reg    c2_bias_ce0;
wire   [31:0] c2_bias_q0;
reg   [7:0] indvar_flatten5_reg_210;
reg   [2:0] cin_reg_221;
reg   [5:0] indvar_flatten_reg_232;
reg   [2:0] y_reg_243;
reg   [31:0] output_buffer_2_reg_254;
reg   [2:0] x_reg_266;
wire   [10:0] indvar_flatten_next1_3_fu_352_p2;
reg   [10:0] indvar_flatten_next1_3_reg_1105;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten6_fu_358_p2;
reg   [0:0] exitcond_flatten6_reg_1110;
wire   [0:0] exitcond_flatten_fu_346_p2;
wire   [7:0] tmp_32_mid2_fu_434_p3;
reg   [7:0] tmp_32_mid2_reg_1115;
wire   [4:0] c2_bias_load_mid2_v_fu_442_p3;
reg   [4:0] c2_bias_load_mid2_v_reg_1121;
wire   [3:0] w_mid2_fu_499_p3;
reg   [3:0] w_mid2_reg_1131;
wire   [3:0] h_cast_mid2_fu_507_p3;
reg   [3:0] h_cast_mid2_reg_1138;
wire   [7:0] p_shl4_mid2_v_v_fu_535_p3;
reg   [7:0] p_shl4_mid2_v_v_reg_1144;
reg   [31:0] c2_bias_load_reg_1150;
wire    ap_CS_fsm_state3;
wire   [7:0] h_cast_mid2_cast_fu_543_p1;
reg   [7:0] h_cast_mid2_cast_reg_1155;
wire   [10:0] p_shl4_mid2_fu_546_p3;
reg   [10:0] p_shl4_mid2_reg_1162;
wire   [8:0] p_shl5_mid2_fu_553_p3;
reg   [8:0] p_shl5_mid2_reg_1167;
wire   [8:0] w_cast_fu_560_p1;
reg   [8:0] w_cast_reg_1172;
wire   [11:0] w_cast2_fu_563_p1;
reg   [11:0] w_cast2_reg_1177;
wire   [0:0] exitcond_flatten7_fu_682_p2;
reg   [0:0] exitcond_flatten7_reg_1182;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] indvar_flatten_next1_fu_688_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] cin_mid2_fu_872_p3;
wire   [2:0] y_mid2_fu_985_p3;
wire   [2:0] x_1_fu_1046_p2;
wire   [5:0] indvar_flatten_next_fu_1058_p3;
wire   [31:0] grp_fu_277_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [3:0] w_1_fu_1084_p2;
wire    ap_CS_fsm_state6;
wire   [7:0] indvar_flatten_next1_2_fu_1095_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [10:0] indvar_flatten3_reg_154;
reg   [4:0] cout_reg_165;
reg   [7:0] indvar_flatten4_reg_176;
reg   [3:0] h_reg_188;
reg   [3:0] w_reg_199;
wire    ap_block_pp0_stage0;
wire   [63:0] c2_bias_load_mid2_fu_450_p1;
wire   [63:0] tmp_57_fu_1016_p1;
wire   [63:0] tmp_59_fu_1041_p1;
wire   [63:0] tmp_47_fu_1079_p1;
reg   [31:0] grp_fu_277_p0;
wire   [31:0] tmp_s_fu_283_p2;
wire   [3:0] tmp_5_fu_290_p1;
wire   [6:0] p_shl2_fu_294_p3;
wire   [4:0] tmp_6_fu_306_p2;
wire   [7:0] p_shl2_cast_fu_302_p1;
wire   [7:0] p_shl3_cast_fu_316_p1;
wire   [5:0] p_shl3_cast1_fu_312_p1;
wire   [5:0] h_cast2_fu_326_p1;
wire   [5:0] tmp2_fu_330_p2;
wire   [7:0] tmp2_cast_fu_336_p1;
wire   [4:0] cout_s_fu_372_p2;
wire   [3:0] tmp_7_fu_378_p1;
wire   [6:0] p_shl2_mid1_fu_382_p3;
wire   [6:0] p_shl2_cast_mid2_fu_394_p3;
wire   [4:0] tmp_8_fu_406_p2;
wire   [4:0] p_shl3_cast1_mid2_fu_412_p3;
wire   [7:0] p_shl2_cast_mid1_fu_390_p1;
wire   [7:0] p_shl3_cast_mid1_fu_424_p1;
wire   [7:0] tmp_32_mid1_fu_428_p2;
wire   [7:0] tmp_32_fu_320_p2;
wire   [7:0] tmp_37_mid_fu_455_p2;
wire   [7:0] tmp_37_fu_340_p2;
wire   [0:0] exitcond_fu_475_p2;
wire   [0:0] not_exitcond_flatten_8_fu_469_p2;
wire   [3:0] h_mid_fu_364_p3;
wire   [0:0] exitcond5_mid_fu_481_p2;
wire   [0:0] tmp_12_fu_493_p2;
wire   [3:0] h_1_fu_487_p2;
wire   [5:0] h_cast2_mid1_fu_515_p1;
wire   [5:0] p_shl3_cast1_mid2_cas_fu_420_p1;
wire   [5:0] tmp2_mid1_fu_519_p2;
wire   [7:0] p_shl2_cast_mid2_cast_fu_402_p1;
wire   [7:0] tmp2_cast_mid1_fu_525_p1;
wire   [7:0] tmp_37_mid1_fu_529_p2;
wire   [7:0] p_shl4_mid277_v_v_fu_461_p3;
wire   [6:0] p_shl7_fu_570_p3;
wire   [3:0] p_shl8_fu_582_p3;
wire   [7:0] p_shl7_cast_fu_578_p1;
wire   [7:0] p_shl8_cast_fu_590_p1;
wire   [7:0] cin_cast3_fu_566_p1;
wire  signed [7:0] tmp_43_fu_600_p2;
wire  signed [9:0] p_shl6_fu_609_p3;
wire   [7:0] y_cast1_fu_625_p1;
wire   [7:0] tmp_42_fu_594_p2;
wire   [7:0] tmp3_fu_629_p2;
wire   [7:0] tmp_51_fu_635_p2;
wire   [8:0] p_shl1_fu_648_p3;
wire   [11:0] p_shl_fu_640_p3;
wire  signed [11:0] p_shl1_cast_fu_656_p1;
wire  signed [8:0] tmp_43_cast_fu_605_p1;
wire   [8:0] y_cast_fu_621_p1;
wire   [8:0] tmp4_fu_666_p2;
wire  signed [10:0] tmp4_cast_fu_672_p1;
wire  signed [10:0] p_shl6_cast_fu_617_p1;
wire   [0:0] exitcond_flatten8_fu_694_p2;
wire   [2:0] cin_s_fu_708_p2;
wire   [6:0] p_shl7_mid1_fu_718_p3;
wire   [3:0] p_shl8_mid1_fu_730_p3;
wire   [7:0] p_shl7_cast_mid1_fu_726_p1;
wire   [7:0] p_shl8_cast_mid1_fu_738_p1;
wire   [7:0] tmp_42_mid1_fu_742_p2;
wire   [7:0] cin_cast3_mid1_fu_714_p1;
wire  signed [7:0] tmp_43_mid1_fu_756_p2;
wire   [7:0] tmp_43_cast_mid2_fu_761_p3;
wire  signed [9:0] p_shl6_mid1_fu_773_p3;
wire   [9:0] p_shl6_cast_mid2_fu_785_p3;
wire   [7:0] tmp_51_mid_fu_797_p2;
wire   [8:0] p_shl1_mid_fu_810_p3;
wire   [11:0] p_shl_mid_fu_802_p3;
wire  signed [11:0] p_shl1_cast_mid_fu_818_p1;
wire   [11:0] tmp_52_mid_fu_822_p2;
wire   [11:0] tmp_52_fu_660_p2;
wire  signed [10:0] tmp4_cast_mid_fu_836_p1;
wire  signed [10:0] p_shl6_cast_mid1_fu_781_p1;
wire   [10:0] tmp_mid_fu_840_p2;
wire   [10:0] tmp_fu_676_p2;
wire   [0:0] exitcond1_fu_860_p2;
wire   [0:0] not_exitcond_flatten_fu_854_p2;
wire   [2:0] y_mid_fu_700_p3;
wire   [0:0] exitcond_mid_fu_866_p2;
wire   [0:0] tmp_13_fu_886_p2;
wire   [2:0] y_1_fu_880_p2;
wire   [7:0] y_cast1_mid1_fu_904_p1;
wire   [7:0] tmp_42_mid2_fu_748_p3;
wire   [7:0] tmp3_mid1_fu_908_p2;
wire   [7:0] tmp_51_mid1_fu_914_p2;
wire   [8:0] p_shl1_mid1_fu_927_p3;
wire   [11:0] p_shl_mid1_fu_919_p3;
wire  signed [11:0] p_shl1_cast_mid1_fu_935_p1;
wire   [11:0] tmp_52_mid1_fu_939_p2;
wire   [11:0] tmp_52_mid3_fu_828_p3;
wire  signed [8:0] tmp_43_cast_mid2_cas_fu_769_p1;
wire   [8:0] y_cast_mid1_fu_900_p1;
wire   [8:0] tmp4_mid1_fu_953_p2;
wire  signed [10:0] tmp4_cast_mid1_fu_959_p1;
wire  signed [10:0] p_shl6_cast_mid2_cast_fu_793_p1;
wire   [10:0] tmp_mid1_fu_963_p2;
wire   [10:0] tmp_mid4_fu_846_p3;
wire   [10:0] tmp_mid2_fu_969_p3;
wire   [2:0] x_mid2_fu_892_p3;
wire   [11:0] x_cast8_fu_997_p1;
wire   [11:0] tmp_52_mid2_fu_945_p3;
wire   [11:0] tmp5_fu_1001_p2;
wire   [11:0] tmp_56_fu_1007_p2;
wire  signed [31:0] tmp_56_cast_fu_1012_p1;
wire   [10:0] x_cast9_fu_993_p1;
wire   [10:0] tmp6_fu_1021_p2;
wire  signed [12:0] tmp6_cast_fu_1027_p1;
wire   [12:0] p_shl9_mid2_fu_977_p3;
wire   [12:0] tmp_58_fu_1031_p2;
wire  signed [31:0] tmp_58_cast_fu_1037_p1;
wire   [5:0] indvar_flatten_op_fu_1052_p2;
wire   [8:0] tmp7_fu_1066_p2;
wire   [10:0] tmp7_cast_fu_1070_p1;
wire   [10:0] tmp_46_fu_1074_p2;
wire   [7:0] indvar_flatten51_op_fu_1089_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv1_2_c2_weight #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
c2_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c2_weight_address0),
    .ce0(c2_weight_ce0),
    .q0(c2_weight_q0)
);

conv1_2_c2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
c2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c2_bias_address0),
    .ce0(c2_bias_ce0),
    .q0(c2_bias_q0)
);

top_net_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fadd_32nsbkb_U14(
    .din0(grp_fu_277_p0),
    .din1(output_buffer_2_reg_254),
    .dout(grp_fu_277_p2)
);

top_net_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fmul_32nscud_U15(
    .din0(in_r_q0),
    .din1(c2_weight_q0),
    .dout(tmp_s_fu_283_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_682_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cin_reg_221 <= cin_mid2_fu_872_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cin_reg_221 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cout_reg_165 <= c2_bias_load_mid2_v_reg_1121;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cout_reg_165 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_reg_188 <= h_cast_mid2_reg_1138;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_188 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten3_reg_154 <= indvar_flatten_next1_3_reg_1105;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten3_reg_154 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten4_reg_176 <= indvar_flatten_next1_2_fu_1095_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten4_reg_176 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_682_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten5_reg_210 <= indvar_flatten_next1_fu_688_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten5_reg_210 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_682_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_232 <= indvar_flatten_next_fu_1058_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_232 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_reg_1182 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_2_reg_254 <= grp_fu_277_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_2_reg_254 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_199 <= w_1_fu_1084_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_reg_199 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_682_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_266 <= x_1_fu_1046_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_266 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_682_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_reg_243 <= y_mid2_fu_985_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_243 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c2_bias_load_mid2_v_reg_1121 <= c2_bias_load_mid2_v_fu_442_p3;
        exitcond_flatten6_reg_1110 <= exitcond_flatten6_fu_358_p2;
        h_cast_mid2_reg_1138 <= h_cast_mid2_fu_507_p3;
        p_shl4_mid2_v_v_reg_1144 <= p_shl4_mid2_v_v_fu_535_p3;
        tmp_32_mid2_reg_1115[7 : 1] <= tmp_32_mid2_fu_434_p3[7 : 1];
        w_mid2_reg_1131 <= w_mid2_fu_499_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c2_bias_load_reg_1150 <= c2_bias_q0;
        h_cast_mid2_cast_reg_1155[3 : 0] <= h_cast_mid2_cast_fu_543_p1[3 : 0];
        p_shl4_mid2_reg_1162[10 : 3] <= p_shl4_mid2_fu_546_p3[10 : 3];
        p_shl5_mid2_reg_1167[8 : 1] <= p_shl5_mid2_fu_553_p3[8 : 1];
        w_cast2_reg_1177[3 : 0] <= w_cast2_fu_563_p1[3 : 0];
        w_cast_reg_1172[3 : 0] <= w_cast_fu_560_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten7_reg_1182 <= exitcond_flatten7_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next1_3_reg_1105 <= indvar_flatten_next1_3_fu_352_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten7_fu_682_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c2_bias_ce0 = 1'b1;
    end else begin
        c2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c2_weight_ce0 = 1'b1;
    end else begin
        c2_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_277_p0 = c2_bias_load_reg_1150;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_277_p0 = tmp_s_fu_283_p2;
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten7_fu_682_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten7_fu_682_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c2_bias_address0 = c2_bias_load_mid2_fu_450_p1;

assign c2_bias_load_mid2_fu_450_p1 = c2_bias_load_mid2_v_fu_442_p3;

assign c2_bias_load_mid2_v_fu_442_p3 = ((exitcond_flatten6_fu_358_p2[0:0] === 1'b1) ? cout_s_fu_372_p2 : cout_reg_165);

assign c2_weight_address0 = tmp_59_fu_1041_p1;

assign cin_cast3_fu_566_p1 = cin_reg_221;

assign cin_cast3_mid1_fu_714_p1 = cin_s_fu_708_p2;

assign cin_mid2_fu_872_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? cin_s_fu_708_p2 : cin_reg_221);

assign cin_s_fu_708_p2 = (cin_reg_221 + 3'd1);

assign cout_s_fu_372_p2 = (5'd1 + cout_reg_165);

assign exitcond1_fu_860_p2 = ((x_reg_266 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond5_mid_fu_481_p2 = (not_exitcond_flatten_8_fu_469_p2 & exitcond_fu_475_p2);

assign exitcond_flatten6_fu_358_p2 = ((indvar_flatten4_reg_176 == 8'd100) ? 1'b1 : 1'b0);

assign exitcond_flatten7_fu_682_p2 = ((indvar_flatten5_reg_210 == 8'd150) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_694_p2 = ((indvar_flatten_reg_232 == 6'd25) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_346_p2 = ((indvar_flatten3_reg_154 == 11'd1600) ? 1'b1 : 1'b0);

assign exitcond_fu_475_p2 = ((w_reg_199 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_866_p2 = (not_exitcond_flatten_fu_854_p2 & exitcond1_fu_860_p2);

assign h_1_fu_487_p2 = (4'd1 + h_mid_fu_364_p3);

assign h_cast2_fu_326_p1 = h_reg_188;

assign h_cast2_mid1_fu_515_p1 = h_1_fu_487_p2;

assign h_cast_mid2_cast_fu_543_p1 = h_cast_mid2_reg_1138;

assign h_cast_mid2_fu_507_p3 = ((exitcond5_mid_fu_481_p2[0:0] === 1'b1) ? h_1_fu_487_p2 : h_mid_fu_364_p3);

assign h_mid_fu_364_p3 = ((exitcond_flatten6_fu_358_p2[0:0] === 1'b1) ? 4'd0 : h_reg_188);

assign in_r_address0 = tmp_57_fu_1016_p1;

assign indvar_flatten51_op_fu_1089_p2 = (indvar_flatten4_reg_176 + 8'd1);

assign indvar_flatten_next1_2_fu_1095_p3 = ((exitcond_flatten6_reg_1110[0:0] === 1'b1) ? 8'd1 : indvar_flatten51_op_fu_1089_p2);

assign indvar_flatten_next1_3_fu_352_p2 = (11'd1 + indvar_flatten3_reg_154);

assign indvar_flatten_next1_fu_688_p2 = (indvar_flatten5_reg_210 + 8'd1);

assign indvar_flatten_next_fu_1058_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_1052_p2);

assign indvar_flatten_op_fu_1052_p2 = (indvar_flatten_reg_232 + 6'd1);

assign not_exitcond_flatten_8_fu_469_p2 = (exitcond_flatten6_fu_358_p2 ^ 1'd1);

assign not_exitcond_flatten_fu_854_p2 = (exitcond_flatten8_fu_694_p2 ^ 1'd1);

assign output_r_address0 = tmp_47_fu_1079_p1;

assign output_r_d0 = grp_fu_277_p2;

assign p_shl1_cast_fu_656_p1 = $signed(p_shl1_fu_648_p3);

assign p_shl1_cast_mid1_fu_935_p1 = $signed(p_shl1_mid1_fu_927_p3);

assign p_shl1_cast_mid_fu_818_p1 = $signed(p_shl1_mid_fu_810_p3);

assign p_shl1_fu_648_p3 = {{tmp_51_fu_635_p2}, {1'd0}};

assign p_shl1_mid1_fu_927_p3 = {{tmp_51_mid1_fu_914_p2}, {1'd0}};

assign p_shl1_mid_fu_810_p3 = {{tmp_51_mid_fu_797_p2}, {1'd0}};

assign p_shl2_cast_fu_302_p1 = p_shl2_fu_294_p3;

assign p_shl2_cast_mid1_fu_390_p1 = p_shl2_mid1_fu_382_p3;

assign p_shl2_cast_mid2_cast_fu_402_p1 = p_shl2_cast_mid2_fu_394_p3;

assign p_shl2_cast_mid2_fu_394_p3 = ((exitcond_flatten6_fu_358_p2[0:0] === 1'b1) ? p_shl2_mid1_fu_382_p3 : p_shl2_fu_294_p3);

assign p_shl2_fu_294_p3 = {{tmp_5_fu_290_p1}, {3'd0}};

assign p_shl2_mid1_fu_382_p3 = {{tmp_7_fu_378_p1}, {3'd0}};

assign p_shl3_cast1_fu_312_p1 = tmp_6_fu_306_p2;

assign p_shl3_cast1_mid2_cas_fu_420_p1 = p_shl3_cast1_mid2_fu_412_p3;

assign p_shl3_cast1_mid2_fu_412_p3 = ((exitcond_flatten6_fu_358_p2[0:0] === 1'b1) ? tmp_8_fu_406_p2 : tmp_6_fu_306_p2);

assign p_shl3_cast_fu_316_p1 = tmp_6_fu_306_p2;

assign p_shl3_cast_mid1_fu_424_p1 = tmp_8_fu_406_p2;

assign p_shl4_mid277_v_v_fu_461_p3 = ((exitcond_flatten6_fu_358_p2[0:0] === 1'b1) ? tmp_37_mid_fu_455_p2 : tmp_37_fu_340_p2);

assign p_shl4_mid2_fu_546_p3 = {{p_shl4_mid2_v_v_reg_1144}, {3'd0}};

assign p_shl4_mid2_v_v_fu_535_p3 = ((exitcond5_mid_fu_481_p2[0:0] === 1'b1) ? tmp_37_mid1_fu_529_p2 : p_shl4_mid277_v_v_fu_461_p3);

assign p_shl5_mid2_fu_553_p3 = {{p_shl4_mid2_v_v_reg_1144}, {1'd0}};

assign p_shl6_cast_fu_617_p1 = p_shl6_fu_609_p3;

assign p_shl6_cast_mid1_fu_781_p1 = p_shl6_mid1_fu_773_p3;

assign p_shl6_cast_mid2_cast_fu_793_p1 = $signed(p_shl6_cast_mid2_fu_785_p3);

assign p_shl6_cast_mid2_fu_785_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? p_shl6_mid1_fu_773_p3 : p_shl6_fu_609_p3);

assign p_shl6_fu_609_p3 = {{tmp_43_fu_600_p2}, {2'd0}};

assign p_shl6_mid1_fu_773_p3 = {{tmp_43_mid1_fu_756_p2}, {2'd0}};

assign p_shl7_cast_fu_578_p1 = p_shl7_fu_570_p3;

assign p_shl7_cast_mid1_fu_726_p1 = p_shl7_mid1_fu_718_p3;

assign p_shl7_fu_570_p3 = {{cin_reg_221}, {4'd0}};

assign p_shl7_mid1_fu_718_p3 = {{cin_s_fu_708_p2}, {4'd0}};

assign p_shl8_cast_fu_590_p1 = p_shl8_fu_582_p3;

assign p_shl8_cast_mid1_fu_738_p1 = p_shl8_mid1_fu_730_p3;

assign p_shl8_fu_582_p3 = {{cin_reg_221}, {1'd0}};

assign p_shl8_mid1_fu_730_p3 = {{cin_s_fu_708_p2}, {1'd0}};

assign p_shl9_mid2_fu_977_p3 = {{tmp_mid2_fu_969_p3}, {2'd0}};

assign p_shl_fu_640_p3 = {{tmp_51_fu_635_p2}, {4'd0}};

assign p_shl_mid1_fu_919_p3 = {{tmp_51_mid1_fu_914_p2}, {4'd0}};

assign p_shl_mid_fu_802_p3 = {{tmp_51_mid_fu_797_p2}, {4'd0}};

assign tmp2_cast_fu_336_p1 = tmp2_fu_330_p2;

assign tmp2_cast_mid1_fu_525_p1 = tmp2_mid1_fu_519_p2;

assign tmp2_fu_330_p2 = (p_shl3_cast1_fu_312_p1 + h_cast2_fu_326_p1);

assign tmp2_mid1_fu_519_p2 = (h_cast2_mid1_fu_515_p1 + p_shl3_cast1_mid2_cas_fu_420_p1);

assign tmp3_fu_629_p2 = (y_cast1_fu_625_p1 + tmp_42_fu_594_p2);

assign tmp3_mid1_fu_908_p2 = (y_cast1_mid1_fu_904_p1 + tmp_42_mid2_fu_748_p3);

assign tmp4_cast_fu_672_p1 = $signed(tmp4_fu_666_p2);

assign tmp4_cast_mid1_fu_959_p1 = $signed(tmp4_mid1_fu_953_p2);

assign tmp4_cast_mid_fu_836_p1 = tmp_43_mid1_fu_756_p2;

assign tmp4_fu_666_p2 = ($signed(tmp_43_cast_fu_605_p1) + $signed(y_cast_fu_621_p1));

assign tmp4_mid1_fu_953_p2 = ($signed(tmp_43_cast_mid2_cas_fu_769_p1) + $signed(y_cast_mid1_fu_900_p1));

assign tmp5_fu_1001_p2 = (x_cast8_fu_997_p1 + tmp_52_mid2_fu_945_p3);

assign tmp6_cast_fu_1027_p1 = $signed(tmp6_fu_1021_p2);

assign tmp6_fu_1021_p2 = (tmp_mid2_fu_969_p3 + x_cast9_fu_993_p1);

assign tmp7_cast_fu_1070_p1 = tmp7_fu_1066_p2;

assign tmp7_fu_1066_p2 = (p_shl5_mid2_reg_1167 + w_cast_reg_1172);

assign tmp_12_fu_493_p2 = (exitcond_flatten6_fu_358_p2 | exitcond5_mid_fu_481_p2);

assign tmp_13_fu_886_p2 = (exitcond_mid_fu_866_p2 | exitcond_flatten8_fu_694_p2);

assign tmp_32_fu_320_p2 = (p_shl2_cast_fu_302_p1 - p_shl3_cast_fu_316_p1);

assign tmp_32_mid1_fu_428_p2 = (p_shl2_cast_mid1_fu_390_p1 - p_shl3_cast_mid1_fu_424_p1);

assign tmp_32_mid2_fu_434_p3 = ((exitcond_flatten6_fu_358_p2[0:0] === 1'b1) ? tmp_32_mid1_fu_428_p2 : tmp_32_fu_320_p2);

assign tmp_37_fu_340_p2 = (tmp2_cast_fu_336_p1 + p_shl2_cast_fu_302_p1);

assign tmp_37_mid1_fu_529_p2 = (p_shl2_cast_mid2_cast_fu_402_p1 + tmp2_cast_mid1_fu_525_p1);

assign tmp_37_mid_fu_455_p2 = (p_shl2_cast_mid1_fu_390_p1 + p_shl3_cast_mid1_fu_424_p1);

assign tmp_42_fu_594_p2 = (p_shl7_cast_fu_578_p1 - p_shl8_cast_fu_590_p1);

assign tmp_42_mid1_fu_742_p2 = (p_shl7_cast_mid1_fu_726_p1 - p_shl8_cast_mid1_fu_738_p1);

assign tmp_42_mid2_fu_748_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? tmp_42_mid1_fu_742_p2 : tmp_42_fu_594_p2);

assign tmp_43_cast_fu_605_p1 = tmp_43_fu_600_p2;

assign tmp_43_cast_mid2_cas_fu_769_p1 = $signed(tmp_43_cast_mid2_fu_761_p3);

assign tmp_43_cast_mid2_fu_761_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? tmp_43_mid1_fu_756_p2 : tmp_43_fu_600_p2);

assign tmp_43_fu_600_p2 = (tmp_32_mid2_reg_1115 + cin_cast3_fu_566_p1);

assign tmp_43_mid1_fu_756_p2 = (tmp_32_mid2_reg_1115 + cin_cast3_mid1_fu_714_p1);

assign tmp_46_fu_1074_p2 = (tmp7_cast_fu_1070_p1 + p_shl4_mid2_reg_1162);

assign tmp_47_fu_1079_p1 = tmp_46_fu_1074_p2;

assign tmp_51_fu_635_p2 = (tmp3_fu_629_p2 + h_cast_mid2_cast_reg_1155);

assign tmp_51_mid1_fu_914_p2 = (tmp3_mid1_fu_908_p2 + h_cast_mid2_cast_reg_1155);

assign tmp_51_mid_fu_797_p2 = (tmp_42_mid1_fu_742_p2 + h_cast_mid2_cast_reg_1155);

assign tmp_52_fu_660_p2 = ($signed(p_shl_fu_640_p3) - $signed(p_shl1_cast_fu_656_p1));

assign tmp_52_mid1_fu_939_p2 = ($signed(p_shl_mid1_fu_919_p3) - $signed(p_shl1_cast_mid1_fu_935_p1));

assign tmp_52_mid2_fu_945_p3 = ((exitcond_mid_fu_866_p2[0:0] === 1'b1) ? tmp_52_mid1_fu_939_p2 : tmp_52_mid3_fu_828_p3);

assign tmp_52_mid3_fu_828_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? tmp_52_mid_fu_822_p2 : tmp_52_fu_660_p2);

assign tmp_52_mid_fu_822_p2 = ($signed(p_shl_mid_fu_802_p3) - $signed(p_shl1_cast_mid_fu_818_p1));

assign tmp_56_cast_fu_1012_p1 = $signed(tmp_56_fu_1007_p2);

assign tmp_56_fu_1007_p2 = (tmp5_fu_1001_p2 + w_cast2_reg_1177);

assign tmp_57_fu_1016_p1 = $unsigned(tmp_56_cast_fu_1012_p1);

assign tmp_58_cast_fu_1037_p1 = $signed(tmp_58_fu_1031_p2);

assign tmp_58_fu_1031_p2 = ($signed(tmp6_cast_fu_1027_p1) + $signed(p_shl9_mid2_fu_977_p3));

assign tmp_59_fu_1041_p1 = $unsigned(tmp_58_cast_fu_1037_p1);

assign tmp_5_fu_290_p1 = cout_reg_165[3:0];

assign tmp_6_fu_306_p2 = cout_reg_165 << 5'd1;

assign tmp_7_fu_378_p1 = cout_s_fu_372_p2[3:0];

assign tmp_8_fu_406_p2 = cout_s_fu_372_p2 << 5'd1;

assign tmp_fu_676_p2 = ($signed(tmp4_cast_fu_672_p1) + $signed(p_shl6_cast_fu_617_p1));

assign tmp_mid1_fu_963_p2 = ($signed(tmp4_cast_mid1_fu_959_p1) + $signed(p_shl6_cast_mid2_cast_fu_793_p1));

assign tmp_mid2_fu_969_p3 = ((exitcond_mid_fu_866_p2[0:0] === 1'b1) ? tmp_mid1_fu_963_p2 : tmp_mid4_fu_846_p3);

assign tmp_mid4_fu_846_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? tmp_mid_fu_840_p2 : tmp_fu_676_p2);

assign tmp_mid_fu_840_p2 = ($signed(tmp4_cast_mid_fu_836_p1) + $signed(p_shl6_cast_mid1_fu_781_p1));

assign w_1_fu_1084_p2 = (w_mid2_reg_1131 + 4'd1);

assign w_cast2_fu_563_p1 = w_mid2_reg_1131;

assign w_cast_fu_560_p1 = w_mid2_reg_1131;

assign w_mid2_fu_499_p3 = ((tmp_12_fu_493_p2[0:0] === 1'b1) ? 4'd0 : w_reg_199);

assign x_1_fu_1046_p2 = (x_mid2_fu_892_p3 + 3'd1);

assign x_cast8_fu_997_p1 = x_mid2_fu_892_p3;

assign x_cast9_fu_993_p1 = x_mid2_fu_892_p3;

assign x_mid2_fu_892_p3 = ((tmp_13_fu_886_p2[0:0] === 1'b1) ? 3'd0 : x_reg_266);

assign y_1_fu_880_p2 = (y_mid_fu_700_p3 + 3'd1);

assign y_cast1_fu_625_p1 = y_reg_243;

assign y_cast1_mid1_fu_904_p1 = y_1_fu_880_p2;

assign y_cast_fu_621_p1 = y_reg_243;

assign y_cast_mid1_fu_900_p1 = y_1_fu_880_p2;

assign y_mid2_fu_985_p3 = ((exitcond_mid_fu_866_p2[0:0] === 1'b1) ? y_1_fu_880_p2 : y_mid_fu_700_p3);

assign y_mid_fu_700_p3 = ((exitcond_flatten8_fu_694_p2[0:0] === 1'b1) ? 3'd0 : y_reg_243);

always @ (posedge ap_clk) begin
    tmp_32_mid2_reg_1115[0] <= 1'b0;
    h_cast_mid2_cast_reg_1155[7:4] <= 4'b0000;
    p_shl4_mid2_reg_1162[2:0] <= 3'b000;
    p_shl5_mid2_reg_1167[0] <= 1'b0;
    w_cast_reg_1172[8:4] <= 5'b00000;
    w_cast2_reg_1177[11:4] <= 8'b00000000;
end

endmodule //conv1_2
