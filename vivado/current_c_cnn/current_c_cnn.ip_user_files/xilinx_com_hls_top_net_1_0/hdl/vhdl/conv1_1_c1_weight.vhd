-- ==============================================================
-- File generated on Mon May 13 17:05:59 +0800 2024
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv1_1_c1_weight_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 150
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv1_1_c1_weight_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011110100100011110001110011", 
    1 => "10111110001111011001011110000010", 
    2 => "10111110010100101101100011100110", 
    3 => "10111110000011101100111000011010", 
    4 => "10111110000010101110110010101011", 
    5 => "00111100111010001001101001011001", 
    6 => "00111101110010001011111001001001", 
    7 => "10111110000110001000110101010110", 
    8 => "10111110011101100101000100010101", 
    9 => "10111101100110011111110101010000", 
    10 => "10111101100101110001100101100100", 
    11 => "10111101100101000010011010111100", 
    12 => "00111101001110100111111101011111", 
    13 => "10111110000101110110101011000011", 
    14 => "10111100110001100100011100011000", 
    15 => "10111101101100010011100011001100", 
    16 => "00111101010110011101111000001111", 
    17 => "00111110010101111000101111100010", 
    18 => "00111101011001000001110101011101", 
    19 => "00111101011100010111011110100110", 
    20 => "00111110100000011001101111111011", 
    21 => "00111101000100001101101001111111", 
    22 => "00111110001001010011110000100011", 
    23 => "00111110101001100001101110001101", 
    24 => "00111110000111100000010110010011", 
    25 => "00111101000000001010100101110110", 
    26 => "10111101101011000000010100010011", 
    27 => "00111101110010111111010100010011", 
    28 => "10111101010010101101010000101000", 
    29 => "00111100101010100001100100000101", 
    30 => "10111110000010000101100111000110", 
    31 => "10111101010111101010000001111011", 
    32 => "10111110001010100011011101100111", 
    33 => "10111101000110101110110100010000", 
    34 => "00111110010010111111110011111111", 
    35 => "10111110001000101010100100100000", 
    36 => "10111101000001111001000010100010", 
    37 => "10111110010111101101000010100101", 
    38 => "10111110010000110110101110001100", 
    39 => "00111110011010100000001011011100", 
    40 => "10111110000010101000010000010100", 
    41 => "10111101001110101011100000101101", 
    42 => "10111110010000010101000111011011", 
    43 => "10111101000110001010001101101000", 
    44 => "00111110101000001111000000011001", 
    45 => "00111100101110011110011100100001", 
    46 => "10111110000010101110010010111010", 
    47 => "10111101000101111000011000101101", 
    48 => "00111110001001101010010011010101", 
    49 => "00111110100010010110011001100000", 
    50 => "00111110000011011100001010101010", 
    51 => "10111101101011010010001001001010", 
    52 => "00111101111011001111010010111100", 
    53 => "10111101111000011110101000101000", 
    54 => "10111100111010001011100001011101", 
    55 => "10111101101000100100111000110100", 
    56 => "00111110100101110000001011011100", 
    57 => "00111110001001111110011001101000", 
    58 => "10111110101000010110000010001011", 
    59 => "10111110100100100011101100001000", 
    60 => "00111101010100100011110100100001", 
    61 => "00111101101001001100011100010100", 
    62 => "00111110101110101111011010111011", 
    63 => "00111101011100101010000111101010", 
    64 => "10111110101010001001101001011111", 
    65 => "10111110001100110100111110100000", 
    66 => "00111101010110000010111011111001", 
    67 => "00111101111001100111100111110001", 
    68 => "00111110100001101100100101000111", 
    69 => "10111110010110001100001011000001", 
    70 => "00111101001000010111101011111000", 
    71 => "10111110000010110111001001011010", 
    72 => "00111110001100010101010110001010", 
    73 => "00111110100100100010010110011000", 
    74 => "00111110010000000111111101010101", 
    75 => "00111110010001101101100011100000", 
    76 => "10111101000000000100000011000101", 
    77 => "00111101110110110101110010110111", 
    78 => "10111110010011000000110001000100", 
    79 => "00111100010110000010001101001101", 
    80 => "10111100111101010011001000011101", 
    81 => "00111110001000011111001011011100", 
    82 => "00111101101111111010111000111010", 
    83 => "00111110101000101000101110111000", 
    84 => "10111101001001111000010001010100", 
    85 => "00111101111111110101111100010110", 
    86 => "00111110010011110111110010101001", 
    87 => "00111110101001100110011010000111", 
    88 => "00111110011111011011000110000000", 
    89 => "00111110011100110111010111101000", 
    90 => "10111101100110010110011110000010", 
    91 => "10111110001101110010000000101100", 
    92 => "10111101011001100001101111000111", 
    93 => "10111101111100000011101110010110", 
    94 => "00111101101111000001111111011101", 
    95 => "10111110101010100110011011101010", 
    96 => "10111110100100100101000101100011", 
    97 => "10111110100101001100111111111101", 
    98 => "10111110010100011100101100000100", 
    99 => "00111101010111110001100001111010", 
    100 => "00111101100011010011111101010100", 
    101 => "00111100101011001000111011011010", 
    102 => "10111101011110011101100010101110", 
    103 => "10111100101101011110111111010111", 
    104 => "00111110000100110001101001101111", 
    105 => "10111110100100010010100100111010", 
    106 => "10111110100100001001010100010010", 
    107 => "10111110011111001000000111101000", 
    108 => "00111101101110001011010101000101", 
    109 => "00111110001010000111101101010011", 
    110 => "10111101111010101101000101101011", 
    111 => "00111101101011101111000110101110", 
    112 => "00111110010000000100000111101101", 
    113 => "00111101000010001011101101000100", 
    114 => "10111101101011000001010110101110", 
    115 => "00111110100100000001110100011001", 
    116 => "00111110000111101100111001110010", 
    117 => "00111110010011101111111100000010", 
    118 => "10111101001111100010011100111001", 
    119 => "10111100010000111000101011110001", 
    120 => "00111100111001001000011000100010", 
    121 => "00111101001011101111100100011100", 
    122 => "10111110001010001010010111011111", 
    123 => "10111110001101100010111000110100", 
    124 => "00111101100100010001011000101111", 
    125 => "10111101011000101010011100000011", 
    126 => "00111110010000011111000000011011", 
    127 => "00111110011101011101001000001111", 
    128 => "00111110010101000100001110110101", 
    129 => "10111101000101000011101110110011", 
    130 => "00111110001001100101111010001010", 
    131 => "00111101110001000100101010010111", 
    132 => "00111110001110101111001010011010", 
    133 => "10111101000100111000000100000111", 
    134 => "10111100111101010100011110101100", 
    135 => "00111100011110100010100101111000", 
    136 => "00111110011011100000111111110101", 
    137 => "00111110001000001110101001110000", 
    138 => "10111110001111010001000000001010", 
    139 => "10111110011101001000001011000110", 
    140 => "00111110010110100000011110000101", 
    141 => "10111101010110110011111110000010", 
    142 => "00111100101111111110111011101011", 
    143 => "10111101100101101001110100001010", 
    144 => "10111101010001101000010100000000", 
    145 => "10111101000011110101101010011101", 
    146 => "00111101011110100011011000011011", 
    147 => "00111011110101110001001001110100", 
    148 => "10111101100011001111001010101010", 
    149 => "10111110100011010110011001001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv1_1_c1_weight is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv1_1_c1_weight is
    component conv1_1_c1_weight_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv1_1_c1_weight_rom_U :  component conv1_1_c1_weight_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


