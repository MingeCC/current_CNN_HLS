-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c2_weight_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal c2_weight_ce0 : STD_LOGIC;
    signal c2_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c2_bias_ce0 : STD_LOGIC;
    signal c2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten5_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal cin_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_buffer_2_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next1_3_fu_352_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next1_3_reg_1105 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten6_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten6_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_mid2_fu_434_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_mid2_reg_1115 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_bias_load_mid2_v_fu_442_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal c2_bias_load_mid2_v_reg_1121 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_fu_499_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_mid2_reg_1131 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_cast_mid2_fu_507_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_cast_mid2_reg_1138 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_mid2_v_v_fu_535_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_mid2_v_v_reg_1144 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_bias_load_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal h_cast_mid2_cast_fu_543_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_cast_mid2_cast_reg_1155 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_mid2_fu_546_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_mid2_reg_1162 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_mid2_fu_553_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_mid2_reg_1167 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_cast_fu_560_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_cast_reg_1172 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_cast2_fu_563_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_cast2_reg_1177 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_flatten7_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten7_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal cin_mid2_fu_872_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_mid2_fu_985_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_fu_1046_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_fu_1058_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal w_1_fu_1084_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvar_flatten_next1_2_fu_1095_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal indvar_flatten3_reg_154 : STD_LOGIC_VECTOR (10 downto 0);
    signal cout_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten4_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_reg_188 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal c2_bias_load_mid2_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_fu_294_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_306_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_302_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast1_fu_312_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_cast2_fu_326_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_cast_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cout_s_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_378_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_mid1_fu_382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_mid2_fu_394_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast1_mid2_fu_412_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_mid1_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_mid1_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_mid1_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_mid_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_340_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_8_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid_fu_364_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_mid_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_cast2_mid1_fu_515_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast1_mid2_cas_fu_420_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_mid1_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_mid2_cast_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_cast_mid1_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_mid1_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_mid277_v_v_fu_461_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_fu_570_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_fu_582_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl7_cast_fu_578_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cin_cast3_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_609_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_cast1_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_648_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_640_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_656_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_cast_fu_605_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_cast_fu_621_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_666_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_fu_672_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_617_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten8_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_s_fu_708_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl7_mid1_fu_718_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_mid1_fu_730_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl7_cast_mid1_fu_726_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_mid1_fu_738_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_mid1_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cin_cast3_mid1_fu_714_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_mid1_fu_756_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_cast_mid2_fu_761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_mid1_fu_773_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_mid2_fu_785_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_mid_fu_797_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid_fu_810_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_mid_fu_802_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_mid_fu_818_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_mid_fu_822_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_fu_660_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp4_cast_mid_fu_836_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_mid1_fu_781_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid_fu_840_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_676_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_mid_fu_700_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_880_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_cast1_mid1_fu_904_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_mid2_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_mid1_fu_908_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_mid1_fu_914_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid1_fu_927_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_mid1_fu_919_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_mid1_fu_935_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_mid1_fu_939_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_mid3_fu_828_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_cast_mid2_cas_fu_769_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_cast_mid1_fu_900_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_mid1_fu_953_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_mid1_fu_959_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_mid2_cast_fu_793_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid1_fu_963_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid4_fu_846_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid2_fu_969_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_mid2_fu_892_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_cast8_fu_997_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_mid2_fu_945_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_1001_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_56_fu_1007_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_56_cast_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_cast9_fu_993_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_fu_1021_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_cast_fu_1027_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl9_mid2_fu_977_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_58_fu_1031_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_58_cast_fu_1037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_op_fu_1052_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_fu_1066_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_cast_fu_1070_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_fu_1074_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten51_op_fu_1089_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component top_net_fadd_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_fmul_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_2_c2_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_2_c2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c2_weight_U : component conv1_2_c2_weight
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c2_weight_address0,
        ce0 => c2_weight_ce0,
        q0 => c2_weight_q0);

    c2_bias_U : component conv1_2_c2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c2_bias_address0,
        ce0 => c2_bias_ce0,
        q0 => c2_bias_q0);

    top_net_fadd_32nsbkb_U14 : component top_net_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_277_p0,
        din1 => output_buffer_2_reg_254,
        dout => grp_fu_277_p2);

    top_net_fmul_32nscud_U15 : component top_net_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => in_r_q0,
        din1 => c2_weight_q0,
        dout => tmp_s_fu_283_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cin_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_682_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                cin_reg_221 <= cin_mid2_fu_872_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cin_reg_221 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    cout_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                cout_reg_165 <= c2_bias_load_mid2_v_reg_1121;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cout_reg_165 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                h_reg_188 <= h_cast_mid2_reg_1138;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_188 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten3_reg_154 <= indvar_flatten_next1_3_reg_1105;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten3_reg_154 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten4_reg_176 <= indvar_flatten_next1_2_fu_1095_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten4_reg_176 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten5_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_682_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten5_reg_210 <= indvar_flatten_next1_fu_688_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten5_reg_210 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_682_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_232 <= indvar_flatten_next_fu_1058_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_232 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    output_buffer_2_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_reg_1182 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                output_buffer_2_reg_254 <= grp_fu_277_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                output_buffer_2_reg_254 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                w_reg_199 <= w_1_fu_1084_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_reg_199 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_682_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_266 <= x_1_fu_1046_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_reg_266 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_682_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_reg_243 <= y_mid2_fu_985_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_reg_243 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                c2_bias_load_mid2_v_reg_1121 <= c2_bias_load_mid2_v_fu_442_p3;
                exitcond_flatten6_reg_1110 <= exitcond_flatten6_fu_358_p2;
                h_cast_mid2_reg_1138 <= h_cast_mid2_fu_507_p3;
                p_shl4_mid2_v_v_reg_1144 <= p_shl4_mid2_v_v_fu_535_p3;
                    tmp_32_mid2_reg_1115(7 downto 1) <= tmp_32_mid2_fu_434_p3(7 downto 1);
                w_mid2_reg_1131 <= w_mid2_fu_499_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c2_bias_load_reg_1150 <= c2_bias_q0;
                    h_cast_mid2_cast_reg_1155(3 downto 0) <= h_cast_mid2_cast_fu_543_p1(3 downto 0);
                    p_shl4_mid2_reg_1162(10 downto 3) <= p_shl4_mid2_fu_546_p3(10 downto 3);
                    p_shl5_mid2_reg_1167(8 downto 1) <= p_shl5_mid2_fu_553_p3(8 downto 1);
                    w_cast2_reg_1177(3 downto 0) <= w_cast2_fu_563_p1(3 downto 0);
                    w_cast_reg_1172(3 downto 0) <= w_cast_fu_560_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten7_reg_1182 <= exitcond_flatten7_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next1_3_reg_1105 <= indvar_flatten_next1_3_fu_352_p2;
            end if;
        end if;
    end process;
    tmp_32_mid2_reg_1115(0) <= '0';
    h_cast_mid2_cast_reg_1155(7 downto 4) <= "0000";
    p_shl4_mid2_reg_1162(2 downto 0) <= "000";
    p_shl5_mid2_reg_1167(0) <= '0';
    w_cast_reg_1172(8 downto 4) <= "00000";
    w_cast2_reg_1177(11 downto 4) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten_fu_346_p2, exitcond_flatten7_fu_682_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten7_fu_682_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten7_fu_682_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten7_fu_682_p2)
    begin
        if ((exitcond_flatten7_fu_682_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten_fu_346_p2)
    begin
        if ((((exitcond_flatten_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_346_p2)
    begin
        if (((exitcond_flatten_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c2_bias_address0 <= c2_bias_load_mid2_fu_450_p1(4 - 1 downto 0);

    c2_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c2_bias_ce0 <= ap_const_logic_1;
        else 
            c2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c2_bias_load_mid2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_bias_load_mid2_v_fu_442_p3),64));
    c2_bias_load_mid2_v_fu_442_p3 <= 
        cout_s_fu_372_p2 when (exitcond_flatten6_fu_358_p2(0) = '1') else 
        cout_reg_165;
    c2_weight_address0 <= tmp_59_fu_1041_p1(12 - 1 downto 0);

    c2_weight_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            c2_weight_ce0 <= ap_const_logic_1;
        else 
            c2_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_cast3_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_reg_221),8));
    cin_cast3_mid1_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_s_fu_708_p2),8));
    cin_mid2_fu_872_p3 <= 
        cin_s_fu_708_p2 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        cin_reg_221;
    cin_s_fu_708_p2 <= std_logic_vector(unsigned(cin_reg_221) + unsigned(ap_const_lv3_1));
    cout_s_fu_372_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(cout_reg_165));
    exitcond1_fu_860_p2 <= "1" when (x_reg_266 = ap_const_lv3_5) else "0";
    exitcond5_mid_fu_481_p2 <= (not_exitcond_flatten_8_fu_469_p2 and exitcond_fu_475_p2);
    exitcond_flatten6_fu_358_p2 <= "1" when (indvar_flatten4_reg_176 = ap_const_lv8_64) else "0";
    exitcond_flatten7_fu_682_p2 <= "1" when (indvar_flatten5_reg_210 = ap_const_lv8_96) else "0";
    exitcond_flatten8_fu_694_p2 <= "1" when (indvar_flatten_reg_232 = ap_const_lv6_19) else "0";
    exitcond_flatten_fu_346_p2 <= "1" when (indvar_flatten3_reg_154 = ap_const_lv11_640) else "0";
    exitcond_fu_475_p2 <= "1" when (w_reg_199 = ap_const_lv4_A) else "0";
    exitcond_mid_fu_866_p2 <= (not_exitcond_flatten_fu_854_p2 and exitcond1_fu_860_p2);

    grp_fu_277_p0_assign_proc : process(c2_bias_load_reg_1150, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_block_pp0_stage0, tmp_s_fu_283_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_277_p0 <= c2_bias_load_reg_1150;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_277_p0 <= tmp_s_fu_283_p2;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_487_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(h_mid_fu_364_p3));
    h_cast2_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_188),6));
    h_cast2_mid1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_fu_487_p2),6));
    h_cast_mid2_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_cast_mid2_reg_1138),8));
    h_cast_mid2_fu_507_p3 <= 
        h_1_fu_487_p2 when (exitcond5_mid_fu_481_p2(0) = '1') else 
        h_mid_fu_364_p3;
    h_mid_fu_364_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten6_fu_358_p2(0) = '1') else 
        h_reg_188;
    in_r_address0 <= tmp_57_fu_1016_p1(11 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten51_op_fu_1089_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_176) + unsigned(ap_const_lv8_1));
    indvar_flatten_next1_2_fu_1095_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten6_reg_1110(0) = '1') else 
        indvar_flatten51_op_fu_1089_p2;
    indvar_flatten_next1_3_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten3_reg_154));
    indvar_flatten_next1_fu_688_p2 <= std_logic_vector(unsigned(indvar_flatten5_reg_210) + unsigned(ap_const_lv8_1));
    indvar_flatten_next_fu_1058_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        indvar_flatten_op_fu_1052_p2;
    indvar_flatten_op_fu_1052_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_232) + unsigned(ap_const_lv6_1));
    not_exitcond_flatten_8_fu_469_p2 <= (exitcond_flatten6_fu_358_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_fu_854_p2 <= (exitcond_flatten8_fu_694_p2 xor ap_const_lv1_1);
    output_r_address0 <= tmp_47_fu_1079_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= grp_fu_277_p2;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_shl1_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_648_p3),12));

        p_shl1_cast_mid1_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_mid1_fu_927_p3),12));

        p_shl1_cast_mid_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_mid_fu_810_p3),12));

    p_shl1_fu_648_p3 <= (tmp_51_fu_635_p2 & ap_const_lv1_0);
    p_shl1_mid1_fu_927_p3 <= (tmp_51_mid1_fu_914_p2 & ap_const_lv1_0);
    p_shl1_mid_fu_810_p3 <= (tmp_51_mid_fu_797_p2 & ap_const_lv1_0);
    p_shl2_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_294_p3),8));
    p_shl2_cast_mid1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_382_p3),8));
    p_shl2_cast_mid2_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_cast_mid2_fu_394_p3),8));
    p_shl2_cast_mid2_fu_394_p3 <= 
        p_shl2_mid1_fu_382_p3 when (exitcond_flatten6_fu_358_p2(0) = '1') else 
        p_shl2_fu_294_p3;
    p_shl2_fu_294_p3 <= (tmp_5_fu_290_p1 & ap_const_lv3_0);
    p_shl2_mid1_fu_382_p3 <= (tmp_7_fu_378_p1 & ap_const_lv3_0);
    p_shl3_cast1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_306_p2),6));
    p_shl3_cast1_mid2_cas_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_cast1_mid2_fu_412_p3),6));
    p_shl3_cast1_mid2_fu_412_p3 <= 
        tmp_8_fu_406_p2 when (exitcond_flatten6_fu_358_p2(0) = '1') else 
        tmp_6_fu_306_p2;
    p_shl3_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_306_p2),8));
    p_shl3_cast_mid1_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_406_p2),8));
    p_shl4_mid277_v_v_fu_461_p3 <= 
        tmp_37_mid_fu_455_p2 when (exitcond_flatten6_fu_358_p2(0) = '1') else 
        tmp_37_fu_340_p2;
    p_shl4_mid2_fu_546_p3 <= (p_shl4_mid2_v_v_reg_1144 & ap_const_lv3_0);
    p_shl4_mid2_v_v_fu_535_p3 <= 
        tmp_37_mid1_fu_529_p2 when (exitcond5_mid_fu_481_p2(0) = '1') else 
        p_shl4_mid277_v_v_fu_461_p3;
    p_shl5_mid2_fu_553_p3 <= (p_shl4_mid2_v_v_reg_1144 & ap_const_lv1_0);
        p_shl6_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_fu_609_p3),11));

        p_shl6_cast_mid1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_mid1_fu_773_p3),11));

        p_shl6_cast_mid2_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_cast_mid2_fu_785_p3),11));

    p_shl6_cast_mid2_fu_785_p3 <= 
        p_shl6_mid1_fu_773_p3 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        p_shl6_fu_609_p3;
    p_shl6_fu_609_p3 <= (tmp_43_fu_600_p2 & ap_const_lv2_0);
    p_shl6_mid1_fu_773_p3 <= (tmp_43_mid1_fu_756_p2 & ap_const_lv2_0);
    p_shl7_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_570_p3),8));
    p_shl7_cast_mid1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_mid1_fu_718_p3),8));
    p_shl7_fu_570_p3 <= (cin_reg_221 & ap_const_lv4_0);
    p_shl7_mid1_fu_718_p3 <= (cin_s_fu_708_p2 & ap_const_lv4_0);
    p_shl8_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_582_p3),8));
    p_shl8_cast_mid1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_mid1_fu_730_p3),8));
    p_shl8_fu_582_p3 <= (cin_reg_221 & ap_const_lv1_0);
    p_shl8_mid1_fu_730_p3 <= (cin_s_fu_708_p2 & ap_const_lv1_0);
    p_shl9_mid2_fu_977_p3 <= (tmp_mid2_fu_969_p3 & ap_const_lv2_0);
    p_shl_fu_640_p3 <= (tmp_51_fu_635_p2 & ap_const_lv4_0);
    p_shl_mid1_fu_919_p3 <= (tmp_51_mid1_fu_914_p2 & ap_const_lv4_0);
    p_shl_mid_fu_802_p3 <= (tmp_51_mid_fu_797_p2 & ap_const_lv4_0);
    tmp2_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_330_p2),8));
    tmp2_cast_mid1_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_mid1_fu_519_p2),8));
    tmp2_fu_330_p2 <= std_logic_vector(unsigned(p_shl3_cast1_fu_312_p1) + unsigned(h_cast2_fu_326_p1));
    tmp2_mid1_fu_519_p2 <= std_logic_vector(unsigned(h_cast2_mid1_fu_515_p1) + unsigned(p_shl3_cast1_mid2_cas_fu_420_p1));
    tmp3_fu_629_p2 <= std_logic_vector(unsigned(y_cast1_fu_625_p1) + unsigned(tmp_42_fu_594_p2));
    tmp3_mid1_fu_908_p2 <= std_logic_vector(unsigned(y_cast1_mid1_fu_904_p1) + unsigned(tmp_42_mid2_fu_748_p3));
        tmp4_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_666_p2),11));

        tmp4_cast_mid1_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_mid1_fu_953_p2),11));

        tmp4_cast_mid_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_mid1_fu_756_p2),11));

    tmp4_fu_666_p2 <= std_logic_vector(signed(tmp_43_cast_fu_605_p1) + signed(y_cast_fu_621_p1));
    tmp4_mid1_fu_953_p2 <= std_logic_vector(signed(tmp_43_cast_mid2_cas_fu_769_p1) + signed(y_cast_mid1_fu_900_p1));
    tmp5_fu_1001_p2 <= std_logic_vector(unsigned(x_cast8_fu_997_p1) + unsigned(tmp_52_mid2_fu_945_p3));
        tmp6_cast_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_1021_p2),13));

    tmp6_fu_1021_p2 <= std_logic_vector(unsigned(tmp_mid2_fu_969_p3) + unsigned(x_cast9_fu_993_p1));
    tmp7_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_1066_p2),11));
    tmp7_fu_1066_p2 <= std_logic_vector(unsigned(p_shl5_mid2_reg_1167) + unsigned(w_cast_reg_1172));
    tmp_12_fu_493_p2 <= (exitcond_flatten6_fu_358_p2 or exitcond5_mid_fu_481_p2);
    tmp_13_fu_886_p2 <= (exitcond_mid_fu_866_p2 or exitcond_flatten8_fu_694_p2);
    tmp_32_fu_320_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_302_p1) - unsigned(p_shl3_cast_fu_316_p1));
    tmp_32_mid1_fu_428_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_390_p1) - unsigned(p_shl3_cast_mid1_fu_424_p1));
    tmp_32_mid2_fu_434_p3 <= 
        tmp_32_mid1_fu_428_p2 when (exitcond_flatten6_fu_358_p2(0) = '1') else 
        tmp_32_fu_320_p2;
    tmp_37_fu_340_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_336_p1) + unsigned(p_shl2_cast_fu_302_p1));
    tmp_37_mid1_fu_529_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid2_cast_fu_402_p1) + unsigned(tmp2_cast_mid1_fu_525_p1));
    tmp_37_mid_fu_455_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_390_p1) + unsigned(p_shl3_cast_mid1_fu_424_p1));
    tmp_42_fu_594_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_578_p1) - unsigned(p_shl8_cast_fu_590_p1));
    tmp_42_mid1_fu_742_p2 <= std_logic_vector(unsigned(p_shl7_cast_mid1_fu_726_p1) - unsigned(p_shl8_cast_mid1_fu_738_p1));
    tmp_42_mid2_fu_748_p3 <= 
        tmp_42_mid1_fu_742_p2 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        tmp_42_fu_594_p2;
        tmp_43_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_600_p2),9));

        tmp_43_cast_mid2_cas_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_cast_mid2_fu_761_p3),9));

    tmp_43_cast_mid2_fu_761_p3 <= 
        tmp_43_mid1_fu_756_p2 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        tmp_43_fu_600_p2;
    tmp_43_fu_600_p2 <= std_logic_vector(unsigned(tmp_32_mid2_reg_1115) + unsigned(cin_cast3_fu_566_p1));
    tmp_43_mid1_fu_756_p2 <= std_logic_vector(unsigned(tmp_32_mid2_reg_1115) + unsigned(cin_cast3_mid1_fu_714_p1));
    tmp_46_fu_1074_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_1070_p1) + unsigned(p_shl4_mid2_reg_1162));
    tmp_47_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_1074_p2),64));
    tmp_51_fu_635_p2 <= std_logic_vector(unsigned(tmp3_fu_629_p2) + unsigned(h_cast_mid2_cast_reg_1155));
    tmp_51_mid1_fu_914_p2 <= std_logic_vector(unsigned(tmp3_mid1_fu_908_p2) + unsigned(h_cast_mid2_cast_reg_1155));
    tmp_51_mid_fu_797_p2 <= std_logic_vector(unsigned(tmp_42_mid1_fu_742_p2) + unsigned(h_cast_mid2_cast_reg_1155));
    tmp_52_fu_660_p2 <= std_logic_vector(unsigned(p_shl_fu_640_p3) - unsigned(p_shl1_cast_fu_656_p1));
    tmp_52_mid1_fu_939_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_919_p3) - unsigned(p_shl1_cast_mid1_fu_935_p1));
    tmp_52_mid2_fu_945_p3 <= 
        tmp_52_mid1_fu_939_p2 when (exitcond_mid_fu_866_p2(0) = '1') else 
        tmp_52_mid3_fu_828_p3;
    tmp_52_mid3_fu_828_p3 <= 
        tmp_52_mid_fu_822_p2 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        tmp_52_fu_660_p2;
    tmp_52_mid_fu_822_p2 <= std_logic_vector(unsigned(p_shl_mid_fu_802_p3) - unsigned(p_shl1_cast_mid_fu_818_p1));
        tmp_56_cast_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_1007_p2),32));

    tmp_56_fu_1007_p2 <= std_logic_vector(unsigned(tmp5_fu_1001_p2) + unsigned(w_cast2_reg_1177));
    tmp_57_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_cast_fu_1012_p1),64));
        tmp_58_cast_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_fu_1031_p2),32));

    tmp_58_fu_1031_p2 <= std_logic_vector(signed(tmp6_cast_fu_1027_p1) + signed(p_shl9_mid2_fu_977_p3));
    tmp_59_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_cast_fu_1037_p1),64));
    tmp_5_fu_290_p1 <= cout_reg_165(4 - 1 downto 0);
    tmp_6_fu_306_p2 <= std_logic_vector(shift_left(unsigned(cout_reg_165),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_7_fu_378_p1 <= cout_s_fu_372_p2(4 - 1 downto 0);
    tmp_8_fu_406_p2 <= std_logic_vector(shift_left(unsigned(cout_s_fu_372_p2),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_fu_676_p2 <= std_logic_vector(signed(tmp4_cast_fu_672_p1) + signed(p_shl6_cast_fu_617_p1));
    tmp_mid1_fu_963_p2 <= std_logic_vector(signed(tmp4_cast_mid1_fu_959_p1) + signed(p_shl6_cast_mid2_cast_fu_793_p1));
    tmp_mid2_fu_969_p3 <= 
        tmp_mid1_fu_963_p2 when (exitcond_mid_fu_866_p2(0) = '1') else 
        tmp_mid4_fu_846_p3;
    tmp_mid4_fu_846_p3 <= 
        tmp_mid_fu_840_p2 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        tmp_fu_676_p2;
    tmp_mid_fu_840_p2 <= std_logic_vector(signed(tmp4_cast_mid_fu_836_p1) + signed(p_shl6_cast_mid1_fu_781_p1));
    w_1_fu_1084_p2 <= std_logic_vector(unsigned(w_mid2_reg_1131) + unsigned(ap_const_lv4_1));
    w_cast2_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_mid2_reg_1131),12));
    w_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_mid2_reg_1131),9));
    w_mid2_fu_499_p3 <= 
        ap_const_lv4_0 when (tmp_12_fu_493_p2(0) = '1') else 
        w_reg_199;
    x_1_fu_1046_p2 <= std_logic_vector(unsigned(x_mid2_fu_892_p3) + unsigned(ap_const_lv3_1));
    x_cast8_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_mid2_fu_892_p3),12));
    x_cast9_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_mid2_fu_892_p3),11));
    x_mid2_fu_892_p3 <= 
        ap_const_lv3_0 when (tmp_13_fu_886_p2(0) = '1') else 
        x_reg_266;
    y_1_fu_880_p2 <= std_logic_vector(unsigned(y_mid_fu_700_p3) + unsigned(ap_const_lv3_1));
    y_cast1_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_243),8));
    y_cast1_mid1_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_fu_880_p2),8));
    y_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_243),9));
    y_cast_mid1_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_fu_880_p2),9));
    y_mid2_fu_985_p3 <= 
        y_1_fu_880_p2 when (exitcond_mid_fu_866_p2(0) = '1') else 
        y_mid_fu_700_p3;
    y_mid_fu_700_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten8_fu_694_p2(0) = '1') else 
        y_reg_243;
end behav;
