-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c3_weight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c3_weight_ce0 : STD_LOGIC;
    signal c3_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c3_bias_ce0 : STD_LOGIC;
    signal c3_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten2_reg_196 : STD_LOGIC_VECTOR (8 downto 0);
    signal cin_reg_207 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_reg_229 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_buffer_2_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_252 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next1_1_fu_282_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next1_1_reg_856 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten3_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_mid2_v_v_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_mid2_v_v_reg_866 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_cast_mid2_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_cast_mid2_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid2_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid2_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_mid2_fu_371_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_mid2_reg_889 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c3_bias_load_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_cast_mid2_cast_fu_378_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_cast_mid2_cast_reg_900 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_cast1_mid2_cast_fu_381_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_cast1_mid2_cast_reg_906 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten4_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal cin_mid2_fu_658_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_mid2_fu_763_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_fu_811_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_fu_823_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar_flatten_next9_fu_846_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal indvar_flatten9_reg_138 : STD_LOGIC_VECTOR (6 downto 0);
    signal cout_reg_149 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten1_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal h_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal c3_bias_load_mid2_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_exitcond_flatten_6_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_s_fu_312_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal not_exitcond_flatten_7_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_not_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_mid_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_cast_mid_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_392_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_fu_396_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal cin_cast2_fu_388_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_408_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_413_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal cin_cast1_fu_384_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_404_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_435_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_fu_425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_cast_fu_440_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_cast_fu_431_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_fu_462_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_421_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_cast_fu_468_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_cast_fu_450_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_fu_454_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_flatten5_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_s_fu_510_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_524_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_mid1_fu_528_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal cin_cast2_mid1_fu_520_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_mid1_fu_540_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_mid1_fu_553_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_mid2_fu_565_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal cin_cast1_mid1_fu_516_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_mid1_fu_536_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_mid1_fu_577_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_mid_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_mid1_fu_561_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_cast_mid_fu_608_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_mid_fu_612_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_472_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_cast_mid_fu_596_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_mid_fu_600_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_mid_fu_626_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_fu_478_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_mid_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_666_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp3_mid1_fu_690_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_mid2_fu_583_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_cast_mid1_fu_695_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_mid1_fu_699_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_cast_mid1_fu_686_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_mid2_fu_545_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_mid1_fu_717_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_mid2_cast_fu_573_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_cast_mid1_fu_723_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_mid1_fu_727_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_mid3_fu_618_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_mid2_fu_733_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_cast_mid1_fu_705_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_mid1_fu_709_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_mid1_fu_749_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_mid3_fu_632_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_mid2_fu_678_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp5_mid2_fu_755_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_cast_fu_775_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_fu_779_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_cast9_fu_771_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_fu_790_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_mid2_fu_741_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_cast_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_800_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_op_fu_817_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_831_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten45_op_fu_840_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component top_net_fadd_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_fmul_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_3_c3_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_3_c3_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c3_weight_U : component conv1_3_c3_weight
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c3_weight_address0,
        ce0 => c3_weight_ce0,
        q0 => c3_weight_q0);

    c3_bias_U : component conv1_3_c3_bias
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c3_bias_address0,
        ce0 => c3_bias_ce0,
        q0 => c3_bias_q0);

    top_net_fadd_32nsbkb_U23 : component top_net_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_263_p0,
        din1 => output_buffer_2_reg_240,
        dout => grp_fu_263_p2);

    top_net_fmul_32nscud_U24 : component top_net_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => in_r_q0,
        din1 => c3_weight_q0,
        dout => tmp_s_fu_269_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cin_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                cin_reg_207 <= cin_mid2_fu_658_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cin_reg_207 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    cout_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                cout_reg_149 <= tmp_32_mid2_v_v_reg_866;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cout_reg_149 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                h_reg_172 <= h_mid2_reg_884;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_172 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten1_reg_160 <= indvar_flatten_next9_fu_846_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten1_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten2_reg_196 <= indvar_flatten_next1_fu_490_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten2_reg_196 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten9_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten9_reg_138 <= indvar_flatten_next1_1_reg_856;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten9_reg_138 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_218 <= indvar_flatten_next_fu_823_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_218 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    output_buffer_2_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_912 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                output_buffer_2_reg_240 <= grp_fu_263_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                output_buffer_2_reg_240 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                w_reg_183 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_reg_183 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_252 <= x_1_fu_811_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_reg_252 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_reg_229 <= y_mid2_fu_763_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_reg_229 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c3_bias_load_reg_895 <= c3_bias_q0;
                    h_cast1_mid2_cast_reg_906(0) <= h_cast1_mid2_cast_fu_381_p1(0);
                    h_cast_mid2_cast_reg_900(0) <= h_cast_mid2_cast_fu_378_p1(0);
                    tmp_32_mid2_reg_889(10 downto 4) <= tmp_32_mid2_fu_371_p3(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                exitcond_flatten3_reg_861 <= exitcond_flatten3_fu_288_p2;
                h_cast_mid2_reg_878 <= h_cast_mid2_fu_355_p3;
                h_mid2_reg_884 <= h_mid2_fu_363_p3;
                tmp_32_mid2_v_v_reg_866 <= tmp_32_mid2_v_v_fu_318_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten4_reg_912 <= exitcond_flatten4_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next1_1_reg_856 <= indvar_flatten_next1_1_fu_282_p2;
            end if;
        end if;
    end process;
    tmp_32_mid2_reg_889(3 downto 0) <= "0000";
    h_cast_mid2_cast_reg_900(6 downto 1) <= "000000";
    h_cast1_mid2_cast_reg_906(2 downto 1) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten_fu_276_p2, exitcond_flatten4_fu_484_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_flatten4_fu_484_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_flatten4_fu_484_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten4_fu_484_p2)
    begin
        if ((exitcond_flatten4_fu_484_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten_fu_276_p2)
    begin
        if ((((exitcond_flatten_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_276_p2)
    begin
        if (((exitcond_flatten_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c3_bias_address0 <= c3_bias_load_mid2_fu_326_p1(7 - 1 downto 0);

    c3_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c3_bias_ce0 <= ap_const_logic_1;
        else 
            c3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c3_bias_load_mid2_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_mid2_v_v_fu_318_p3),64));
    c3_weight_address0 <= tmp_53_fu_806_p1(16 - 1 downto 0);

    c3_weight_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            c3_weight_ce0 <= ap_const_logic_1;
        else 
            c3_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_cast1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_reg_207),7));
    cin_cast1_mid1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_s_fu_510_p2),7));
    cin_cast2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_reg_207),11));
    cin_cast2_mid1_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_s_fu_510_p2),11));
    cin_mid2_fu_658_p3 <= 
        cin_s_fu_510_p2 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        cin_reg_207;
    cin_s_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(cin_reg_207));
    cout_s_fu_312_p2 <= std_logic_vector(unsigned(cout_reg_149) + unsigned(ap_const_lv7_1));
    exitcond_flatten3_fu_288_p2 <= "1" when (indvar_flatten1_reg_160 = ap_const_lv2_1) else "0";
    exitcond_flatten4_fu_484_p2 <= "1" when (indvar_flatten2_reg_196 = ap_const_lv9_190) else "0";
    exitcond_flatten5_fu_496_p2 <= "1" when (indvar_flatten_reg_218 = ap_const_lv6_19) else "0";
    exitcond_flatten_fu_276_p2 <= "1" when (indvar_flatten9_reg_138 = ap_const_lv7_78) else "0";
    exitcond_fu_646_p2 <= "1" when (x_reg_252 = ap_const_lv3_5) else "0";
    exitcond_mid_fu_652_p2 <= (not_exitcond_flatten_fu_640_p2 and exitcond_fu_646_p2);

    grp_fu_263_p0_assign_proc : process(c3_bias_load_reg_895, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_block_pp0_stage0, tmp_s_fu_269_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_263_p0 <= c3_bias_load_reg_895;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_263_p0 <= tmp_s_fu_269_p2;
        else 
            grp_fu_263_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_349_p2 <= (h_not_fu_343_p2 or exitcond_flatten3_fu_288_p2);
    h_cast1_mid2_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_cast_mid2_reg_878),3));
    h_cast_mid2_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_cast_mid2_reg_878),7));
    h_cast_mid2_fu_355_p3 <= 
        h_1_fu_349_p2 when (w_mid_fu_306_p2(0) = '1') else 
        h_cast_mid_fu_337_p2;
    h_cast_mid_fu_337_p2 <= (not_exitcond_flatten_7_fu_331_p2 and h_reg_172);
    h_mid2_fu_363_p3 <= 
        h_1_fu_349_p2 when (w_mid_fu_306_p2(0) = '1') else 
        h_mid_fu_300_p2;
    h_mid_fu_300_p2 <= (not_exitcond_flatten_6_fu_294_p2 and h_reg_172);
    h_not_fu_343_p2 <= (h_reg_172 xor ap_const_lv1_1);
    in_r_address0 <= tmp_51_fu_785_p1(9 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten45_op_fu_840_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_160) + unsigned(ap_const_lv2_1));
    indvar_flatten_next1_1_fu_282_p2 <= std_logic_vector(unsigned(indvar_flatten9_reg_138) + unsigned(ap_const_lv7_1));
    indvar_flatten_next1_fu_490_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten2_reg_196));
    indvar_flatten_next9_fu_846_p3 <= 
        ap_const_lv2_1 when (exitcond_flatten3_reg_861(0) = '1') else 
        indvar_flatten45_op_fu_840_p2;
    indvar_flatten_next_fu_823_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        indvar_flatten_op_fu_817_p2;
    indvar_flatten_op_fu_817_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten_reg_218));
    not_exitcond_flatten_6_fu_294_p2 <= (exitcond_flatten3_fu_288_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_7_fu_331_p2 <= (exitcond_flatten3_fu_288_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_fu_640_p2 <= (exitcond_flatten5_fu_496_p2 xor ap_const_lv1_1);
    output_r_address0 <= tmp_47_fu_835_p1(7 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= grp_fu_263_p2;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_396_p3),7));
    p_shl1_cast_mid1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_528_p3),7));
    p_shl1_fu_396_p3 <= (tmp_3_fu_392_p1 & ap_const_lv2_0);
    p_shl1_mid1_fu_528_p3 <= (tmp_4_fu_524_p1 & ap_const_lv2_0);
    p_shl2_mid2_fu_741_p3 <= (tmp_mid2_fu_733_p3 & ap_const_lv2_0);
    p_shl3_fu_454_p3 <= (tmp_48_fu_444_p2 & ap_const_lv2_0);
    p_shl3_mid1_fu_709_p3 <= (tmp_51_mid1_fu_699_p2 & ap_const_lv2_0);
    p_shl3_mid_fu_600_p3 <= (tmp_51_mid_fu_591_p2 & ap_const_lv2_0);
    p_shl_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_413_p3),14));
    p_shl_cast_mid1_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_553_p3),14));
    p_shl_cast_mid2_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_cast_mid2_fu_565_p3),14));
    p_shl_cast_mid2_fu_565_p3 <= 
        p_shl_mid1_fu_553_p3 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        p_shl_fu_413_p3;
    p_shl_fu_413_p3 <= (tmp_43_fu_408_p2 & ap_const_lv2_0);
    p_shl_mid1_fu_553_p3 <= (tmp_43_mid1_fu_540_p2 & ap_const_lv2_0);
    tmp2_fu_425_p2 <= std_logic_vector(unsigned(cin_cast1_fu_384_p1) + unsigned(p_shl1_cast_fu_404_p1));
    tmp2_mid1_fu_577_p2 <= std_logic_vector(unsigned(cin_cast1_mid1_fu_516_p1) + unsigned(p_shl1_cast_mid1_fu_536_p1));
    tmp2_mid2_fu_583_p3 <= 
        tmp2_mid1_fu_577_p2 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        tmp2_fu_425_p2;
    tmp3_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_435_p2),7));
    tmp3_cast_mid1_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_mid1_fu_690_p2),7));
    tmp3_fu_435_p2 <= std_logic_vector(unsigned(h_cast1_mid2_cast_reg_906) + unsigned(y_reg_229));
    tmp3_mid1_fu_690_p2 <= std_logic_vector(unsigned(h_cast1_mid2_cast_reg_906) + unsigned(y_1_fu_666_p2));
    tmp4_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_462_p2),14));
    tmp4_cast_mid1_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_mid1_fu_717_p2),14));
    tmp4_cast_mid_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_mid1_fu_540_p2),14));
    tmp4_fu_462_p2 <= std_logic_vector(unsigned(y_cast_fu_431_p1) + unsigned(tmp_43_fu_408_p2));
    tmp4_mid1_fu_717_p2 <= std_logic_vector(unsigned(y_cast_mid1_fu_686_p1) + unsigned(tmp_43_mid2_fu_545_p3));
    tmp5_fu_478_p2 <= std_logic_vector(unsigned(tmp_51_cast_fu_450_p1) + unsigned(p_shl3_fu_454_p3));
    tmp5_mid1_fu_749_p2 <= std_logic_vector(unsigned(tmp_51_cast_mid1_fu_705_p1) + unsigned(p_shl3_mid1_fu_709_p3));
    tmp5_mid2_fu_755_p3 <= 
        tmp5_mid1_fu_749_p2 when (exitcond_mid_fu_652_p2(0) = '1') else 
        tmp5_mid3_fu_632_p3;
    tmp5_mid3_fu_632_p3 <= 
        tmp5_mid_fu_626_p2 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        tmp5_fu_478_p2;
    tmp5_mid_fu_626_p2 <= std_logic_vector(unsigned(tmp_51_cast_mid_fu_596_p1) + unsigned(p_shl3_mid_fu_600_p3));
    tmp6_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_mid2_fu_678_p3),9));
    tmp7_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_790_p2),16));
    tmp7_fu_790_p2 <= std_logic_vector(unsigned(x_cast9_fu_771_p1) + unsigned(tmp_mid2_fu_733_p3));
    tmp_32_mid2_fu_371_p3 <= (tmp_32_mid2_v_v_reg_866 & ap_const_lv4_0);
    tmp_32_mid2_v_v_fu_318_p3 <= 
        cout_s_fu_312_p2 when (exitcond_flatten3_fu_288_p2(0) = '1') else 
        cout_reg_149;
    tmp_3_fu_392_p1 <= cin_reg_207(4 - 1 downto 0);
    tmp_43_fu_408_p2 <= std_logic_vector(unsigned(cin_cast2_fu_388_p1) + unsigned(tmp_32_mid2_reg_889));
    tmp_43_mid1_fu_540_p2 <= std_logic_vector(unsigned(cin_cast2_mid1_fu_520_p1) + unsigned(tmp_32_mid2_reg_889));
    tmp_43_mid2_fu_545_p3 <= 
        tmp_43_mid1_fu_540_p2 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        tmp_43_fu_408_p2;
    tmp_46_fu_831_p2 <= std_logic_vector(unsigned(tmp_32_mid2_v_v_reg_866) + unsigned(h_cast_mid2_cast_reg_900));
    tmp_47_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_831_p2),64));
    tmp_48_fu_444_p2 <= std_logic_vector(unsigned(tmp2_fu_425_p2) + unsigned(tmp3_cast_fu_440_p1));
    tmp_4_fu_524_p1 <= cin_s_fu_510_p2(4 - 1 downto 0);
    tmp_50_fu_779_p2 <= std_logic_vector(unsigned(tmp5_mid2_fu_755_p3) + unsigned(tmp6_cast_fu_775_p1));
    tmp_51_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_444_p2),9));
    tmp_51_cast_mid1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_mid1_fu_699_p2),9));
    tmp_51_cast_mid_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_mid_fu_591_p2),9));
    tmp_51_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_779_p2),64));
    tmp_51_mid1_fu_699_p2 <= std_logic_vector(unsigned(tmp2_mid2_fu_583_p3) + unsigned(tmp3_cast_mid1_fu_695_p1));
    tmp_51_mid_fu_591_p2 <= std_logic_vector(unsigned(tmp2_mid1_fu_577_p2) + unsigned(h_cast_mid2_cast_reg_900));
    tmp_52_fu_800_p2 <= std_logic_vector(unsigned(p_shl2_mid2_fu_741_p3) + unsigned(tmp7_cast_fu_796_p1));
    tmp_53_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_800_p2),64));
    tmp_7_fu_672_p2 <= (exitcond_mid_fu_652_p2 or exitcond_flatten5_fu_496_p2);
    tmp_fu_472_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_421_p1) + unsigned(tmp4_cast_fu_468_p1));
    tmp_mid1_fu_727_p2 <= std_logic_vector(unsigned(p_shl_cast_mid2_cast_fu_573_p1) + unsigned(tmp4_cast_mid1_fu_723_p1));
    tmp_mid2_fu_733_p3 <= 
        tmp_mid1_fu_727_p2 when (exitcond_mid_fu_652_p2(0) = '1') else 
        tmp_mid3_fu_618_p3;
    tmp_mid3_fu_618_p3 <= 
        tmp_mid_fu_612_p2 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        tmp_fu_472_p2;
    tmp_mid_fu_612_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_561_p1) + unsigned(tmp4_cast_mid_fu_608_p1));
    w_mid_fu_306_p2 <= (w_reg_183 and not_exitcond_flatten_6_fu_294_p2);
    x_1_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(x_mid2_fu_678_p3));
    x_cast9_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_mid2_fu_678_p3),14));
    x_mid2_fu_678_p3 <= 
        ap_const_lv3_0 when (tmp_7_fu_672_p2(0) = '1') else 
        x_reg_252;
    y_1_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(y_mid_fu_502_p3));
    y_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_229),11));
    y_cast_mid1_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_fu_666_p2),11));
    y_mid2_fu_763_p3 <= 
        y_1_fu_666_p2 when (exitcond_mid_fu_652_p2(0) = '1') else 
        y_mid_fu_502_p3;
    y_mid_fu_502_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten5_fu_496_p2(0) = '1') else 
        y_reg_229;
end behav;
