-- ==============================================================
-- File generated on Mon May 13 17:06:02 +0800 2024
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv1_4_c4_bias_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv1_4_c4_bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100000111000000101001", 
    1 => "00111101000110111110011000010011", 
    2 => "10111101100011000000001110000000", 
    3 => "00111101100110101010100110101011", 
    4 => "10111101100110101111100100111011", 
    5 => "10111101000101010011001010011100", 
    6 => "10111101000001111011011001001011", 
    7 => "00111100100111110001100101000011", 
    8 => "10111101110000011011011011111010", 
    9 => "00111100110011100110010111100000", 
    10 => "10111010000010111101010111011100", 
    11 => "10111100111100101110010001110100", 
    12 => "10111011011010010011101110100110", 
    13 => "00111101101110001110111011000010", 
    14 => "00111100100100111001011001000001", 
    15 => "00111010110011110001100101010001", 
    16 => "10111101010001101111001010011111", 
    17 => "10111101000001101011101100111000", 
    18 => "10111100100100100101001001011001", 
    19 => "10111011100111001100111110101100", 
    20 => "00111101011100001100101010101111", 
    21 => "00111110000001100110010010100100", 
    22 => "00111100101100111110000110010010", 
    23 => "10111100101110010101010101001001", 
    24 => "00111101001101010100110011010001", 
    25 => "00111011101010101110110001000011", 
    26 => "00111101000001110111000011001000", 
    27 => "00111101010000111000101110001000", 
    28 => "10111101011010111001111110011010", 
    29 => "10111101011101011010111111100100", 
    30 => "00111101000001101100101111010001", 
    31 => "00111100011000000110101100010111", 
    32 => "10111101000000000101000001011111", 
    33 => "10111100010111100000100110111111", 
    34 => "10111011111111001000000101110001", 
    35 => "10111100010100000011101111011110", 
    36 => "10111101000100100000111011111101", 
    37 => "00111100110001000101000011001100", 
    38 => "10111101000100011011101110101010", 
    39 => "10111101000000100000100010110011", 
    40 => "10111100101000001011111010111000", 
    41 => "10111100111100000011000001010110", 
    42 => "10111101000101001000100001010011", 
    43 => "00111100100110110100011100100110", 
    44 => "00111101011111110000000101011111", 
    45 => "10111101101010110111011110010010", 
    46 => "10111101000111000000001001000111", 
    47 => "10111101101000101011110000101100", 
    48 => "00111100111001011010101110010010", 
    49 => "00111101011001111000001010010101", 
    50 => "00111010100101010111000000000011", 
    51 => "10111100101110010111011001000000", 
    52 => "00111101000101110101010011100011", 
    53 => "10111101010011100100001101011110", 
    54 => "10111101110100111100101001000000", 
    55 => "10111100101100100110011100111000", 
    56 => "00111100100100100011100011001111", 
    57 => "10111101001011100010011000001100", 
    58 => "00111101000101000000001110010100", 
    59 => "00111100000111101000010101110100", 
    60 => "10111101011111010110111000011111", 
    61 => "10111101011011111111011011111000", 
    62 => "10111101001111110001000110101101", 
    63 => "00111101011000000010000000000111", 
    64 => "10111100101101000110010110100000", 
    65 => "00111011110100100011011000110010", 
    66 => "10111101010000100001010101000101", 
    67 => "00111100100110110100111101000111", 
    68 => "00111101100000010101100110111111", 
    69 => "10111011001101111001100100101000", 
    70 => "10111101001001111100011111111110", 
    71 => "10111101011010110000101101001101", 
    72 => "00111101100001110111101110111111", 
    73 => "10111101100000001011010000111000", 
    74 => "10111101010011011100010011110111", 
    75 => "10111101010000100010001100001101", 
    76 => "00111011111011000110010100001001", 
    77 => "00111101000001011010111101010011", 
    78 => "10111010101010000101001011010011", 
    79 => "00111100110101001011110101101110", 
    80 => "00111101100110111000011011110111", 
    81 => "00111100110101011110111001111110", 
    82 => "00111101001101000100000000010010", 
    83 => "00111101001000011000100010101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv1_4_c4_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv1_4_c4_bias is
    component conv1_4_c4_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv1_4_c4_bias_rom_U :  component conv1_4_c4_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


