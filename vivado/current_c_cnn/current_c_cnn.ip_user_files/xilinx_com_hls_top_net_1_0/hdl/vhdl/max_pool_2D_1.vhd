-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2D_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2D_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_151 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_195 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten1_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_234_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next1_reg_691 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_cast1_mid2_v_fu_260_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast1_mid2_v_reg_696 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_mid2_fu_336_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_mid2_reg_702 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_cast9_mid2_fu_344_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast9_mid2_reg_709 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_452_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_reg_715 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_467_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_reg_725 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_514_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_735 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_fu_520_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_reg_741 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_next_fu_532_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_747 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal max_val_1_fu_548_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_val_1_reg_757 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal max_val_2_fu_571_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_val_2_reg_772 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal n_1_fu_601_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_reg_787 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten1_phi_fu_155_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_166_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_177_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_j_phi_fu_188_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_n_phi_fu_199_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal max_val_1_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal max_val_2_cast_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_3_cast_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_19_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_214_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_254_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_cast_mid2_v_fu_268_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast_mid2_v_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_222_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid_fu_246_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_mid_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_324_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_mid1_fu_352_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_mid_fu_290_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_mid2_fu_360_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_mid1_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_mid_fu_298_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_mid2_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_390_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_402_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_cast_fu_398_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_mid2_fu_276_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_420_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_fu_434_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_426_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_442_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_446_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_mid2_cast_fu_368_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_cast_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_mid2_cast_fu_386_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_cast_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_mid2_fu_286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_482_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_496_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_488_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_504_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_fu_508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_op_fu_526_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_cast_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_1_cast1_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_2_cast1_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_3_fu_586_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_val_3_cast1_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl8_fu_612_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_fu_623_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_619_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_cast_fu_630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast1_mid2_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_640_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_fu_654_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_fu_646_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_fu_666_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast9_mid2_cast_fu_609_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_672_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_cast_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component top_net_fcmp_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_net_fcmp_32nsdEe_U10 : component top_net_fcmp_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_206_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_162 <= i_cast1_mid2_v_reg_696;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_162 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten1_reg_151 <= indvar_flatten_next1_reg_691;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten1_reg_151 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_173 <= indvar_flatten_next_reg_747;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_173 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_184 <= j_cast9_mid2_reg_709;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_184 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    n_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n_reg_195 <= n_1_reg_787;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_reg_195 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_687 <= exitcond_flatten1_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_228_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_cast1_mid2_v_reg_696 <= i_cast1_mid2_v_fu_260_p3;
                indvar_flatten_next_reg_747 <= indvar_flatten_next_fu_532_p3;
                j_cast9_mid2_reg_709 <= j_cast9_mid2_fu_344_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next1_reg_691 <= indvar_flatten_next1_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                max_val_1_reg_757 <= max_val_1_fu_548_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                max_val_2_reg_772 <= max_val_2_fu_571_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                n_1_reg_787 <= n_1_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                n_mid2_reg_702 <= n_mid2_fu_336_p3;
                    tmp_12_reg_735(13 downto 1) <= tmp_12_fu_514_p2(13 downto 1);
                    tmp_14_reg_741(13 downto 1) <= tmp_14_fu_520_p2(13 downto 1);
                    tmp_4_reg_725(13 downto 1) <= tmp_4_fu_467_p2(13 downto 1);
                    tmp_6_reg_715(13 downto 1) <= tmp_6_fu_452_p2(13 downto 1);
            end if;
        end if;
    end process;
    tmp_6_reg_715(0) <= '0';
    tmp_4_reg_725(0) <= '1';
    tmp_12_reg_735(0) <= '0';
    tmp_14_reg_741(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten1_fu_228_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten1_fu_228_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten1_fu_228_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten1_fu_228_p2)
    begin
        if ((exitcond_flatten1_fu_228_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_166_p4_assign_proc : process(i_reg_162, exitcond_flatten1_reg_687, ap_CS_fsm_pp0_stage0, i_cast1_mid2_v_reg_696, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_166_p4 <= i_cast1_mid2_v_reg_696;
        else 
            ap_phi_mux_i_phi_fu_166_p4 <= i_reg_162;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten1_phi_fu_155_p4_assign_proc : process(indvar_flatten1_reg_151, exitcond_flatten1_reg_687, ap_CS_fsm_pp0_stage0, indvar_flatten_next1_reg_691, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten1_phi_fu_155_p4 <= indvar_flatten_next1_reg_691;
        else 
            ap_phi_mux_indvar_flatten1_phi_fu_155_p4 <= indvar_flatten1_reg_151;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_177_p4_assign_proc : process(indvar_flatten_reg_173, exitcond_flatten1_reg_687, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_747, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_177_p4 <= indvar_flatten_next_reg_747;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_177_p4 <= indvar_flatten_reg_173;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_188_p4_assign_proc : process(j_reg_184, exitcond_flatten1_reg_687, ap_CS_fsm_pp0_stage0, j_cast9_mid2_reg_709, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_188_p4 <= j_cast9_mid2_reg_709;
        else 
            ap_phi_mux_j_phi_fu_188_p4 <= j_reg_184;
        end if; 
    end process;


    ap_phi_mux_n_phi_fu_199_p4_assign_proc : process(n_reg_195, exitcond_flatten1_reg_687, ap_CS_fsm_pp0_stage0, n_1_reg_787, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_n_phi_fu_199_p4 <= n_1_reg_787;
        else 
            ap_phi_mux_n_phi_fu_199_p4 <= n_reg_195;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten1_fu_228_p2 <= "1" when (ap_phi_mux_indvar_flatten1_phi_fu_155_p4 = ap_const_lv11_498) else "0";
    exitcond_flatten_fu_240_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_177_p4 = ap_const_lv7_54) else "0";
    exitcond_fu_312_p2 <= "1" when (ap_phi_mux_n_phi_fu_199_p4 = ap_const_lv3_6) else "0";
    exitcond_mid_fu_318_p2 <= (not_exitcond_flatten_fu_306_p2 and exitcond_fu_312_p2);

    grp_fu_206_p0_assign_proc : process(in_r_q0, in_r_q1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            grp_fu_206_p0 <= in_r_q0;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_206_p0 <= in_r_q1;
        else 
            grp_fu_206_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_206_p1_assign_proc : process(in_r_q0, in_r_q1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            grp_fu_206_p1 <= in_r_q1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_206_p1 <= in_r_q0;
        else 
            grp_fu_206_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_cast1_mid2_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast1_mid2_v_reg_696),8));
    i_cast1_mid2_v_fu_260_p3 <= 
        i_s_fu_254_p2 when (exitcond_flatten_fu_240_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_166_p4;
    i_s_fu_254_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_166_p4) + unsigned(ap_const_lv4_1));

    in_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, tmp_1_fu_462_p1, tmp_13_fu_543_p1, ap_block_pp0_stage1, tmp_15_fu_566_p1, ap_block_pp0_stage2, max_val_3_cast_fu_596_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                in_r_address0 <= max_val_3_cast_fu_596_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                in_r_address0 <= tmp_15_fu_566_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                in_r_address0 <= tmp_13_fu_543_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                in_r_address0 <= tmp_1_fu_462_p1(13 - 1 downto 0);
            else 
                in_r_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            in_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, tmp_5_fu_477_p1, ap_block_pp0_stage1, max_val_1_cast_fu_558_p1, ap_block_pp0_stage2, max_val_2_cast_fu_581_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                in_r_address1 <= max_val_2_cast_fu_581_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                in_r_address1 <= max_val_1_cast_fu_558_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                in_r_address1 <= tmp_5_fu_477_p1(13 - 1 downto 0);
            else 
                in_r_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            in_r_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next1_fu_234_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten1_phi_fu_155_p4) + unsigned(ap_const_lv11_1));
    indvar_flatten_next_fu_532_p3 <= 
        ap_const_lv7_1 when (exitcond_flatten_fu_240_p2(0) = '1') else 
        indvar_flatten_op_fu_526_p2;
    indvar_flatten_op_fu_526_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_177_p4) + unsigned(ap_const_lv7_1));
    j_1_fu_324_p2 <= std_logic_vector(unsigned(j_mid_fu_246_p3) + unsigned(ap_const_lv4_1));
    j_cast9_mid2_cast_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast9_mid2_reg_709),12));
    j_cast9_mid2_fu_344_p3 <= 
        j_1_fu_324_p2 when (exitcond_mid_fu_318_p2(0) = '1') else 
        j_mid_fu_246_p3;
    j_mid_fu_246_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_240_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_188_p4;
        max_val_1_cast1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(max_val_1_fu_548_p3),32));

    max_val_1_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_1_cast1_fu_554_p1),64));
    max_val_1_fu_548_p3 <= 
        tmp_4_reg_725 when (grp_fu_206_p2(0) = '1') else 
        tmp_6_reg_715;
        max_val_2_cast1_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(max_val_2_fu_571_p3),32));

    max_val_2_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_2_cast1_fu_577_p1),64));
    max_val_2_fu_571_p3 <= 
        tmp_12_reg_735 when (grp_fu_206_p2(0) = '1') else 
        max_val_1_reg_757;
        max_val_3_cast1_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(max_val_3_fu_586_p3),32));

    max_val_3_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_3_cast1_fu_592_p1),64));
    max_val_3_fu_586_p3 <= 
        tmp_14_reg_741 when (grp_fu_206_p2(0) = '1') else 
        max_val_2_reg_772;
    n_1_fu_601_p2 <= std_logic_vector(unsigned(n_mid2_reg_702) + unsigned(ap_const_lv3_1));
    n_mid2_fu_336_p3 <= 
        ap_const_lv3_0 when (tmp_fu_330_p2(0) = '1') else 
        ap_phi_mux_n_phi_fu_199_p4;
    not_exitcond_flatten_fu_306_p2 <= (exitcond_flatten_fu_240_p2 xor ap_const_lv1_1);
    output_r_address0 <= tmp_19_fu_682_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= in_r_q0;

    output_r_we0_assign_proc : process(exitcond_flatten1_reg_687, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_687 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_shl1_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_496_p3),14));

    p_shl1_fu_496_p3 <= (tmp_10_fu_482_p2 & ap_const_lv2_0);
    p_shl2_fu_426_p3 <= (tmp_s_fu_420_p2 & ap_const_lv5_0);
        p_shl3_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_fu_434_p3),14));

    p_shl3_fu_434_p3 <= (tmp_s_fu_420_p2 & ap_const_lv2_0);
    p_shl4_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_390_p3),9));
    p_shl4_fu_390_p3 <= (n_mid2_fu_336_p3 & ap_const_lv5_0);
    p_shl5_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_402_p3),9));
    p_shl5_fu_402_p3 <= (n_mid2_fu_336_p3 & ap_const_lv2_0);
    p_shl6_fu_646_p3 <= (tmp5_fu_640_p2 & ap_const_lv4_0);
        p_shl7_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_654_p3),12));

    p_shl7_fu_654_p3 <= (tmp5_fu_640_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_612_p3),8));
    p_shl8_fu_612_p3 <= (n_mid2_reg_702 & ap_const_lv4_0);
    p_shl9_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_623_p3),8));
    p_shl9_fu_623_p3 <= (n_mid2_reg_702 & ap_const_lv1_0);
    p_shl_fu_488_p3 <= (tmp_10_fu_482_p2 & ap_const_lv5_0);
    tmp5_fu_640_p2 <= std_logic_vector(unsigned(tmp_17_fu_634_p2) + unsigned(i_cast1_mid2_fu_606_p1));
    tmp6_fu_666_p2 <= std_logic_vector(unsigned(p_shl6_fu_646_p3) - unsigned(p_shl7_cast_fu_662_p1));
    tmp_10_fu_482_p2 <= std_logic_vector(unsigned(tmp_9_fu_414_p2) + unsigned(tmp_5_cast_mid2_fu_286_p1));
        tmp_11_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_467_p2),32));

    tmp_11_fu_508_p2 <= std_logic_vector(unsigned(p_shl_fu_488_p3) - unsigned(p_shl1_cast_fu_504_p1));
    tmp_12_fu_514_p2 <= std_logic_vector(unsigned(tmp_11_fu_508_p2) + unsigned(tmp_7_cast_mid2_cast_fu_368_p1));
    tmp_13_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_cast_fu_540_p1),64));
    tmp_14_fu_520_p2 <= std_logic_vector(unsigned(tmp_11_fu_508_p2) + unsigned(tmp_8_cast_mid2_cast_fu_386_p1));
        tmp_15_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_reg_735),32));

    tmp_15_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_cast_fu_563_p1),64));
        tmp_17_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_reg_741),32));

    tmp_17_fu_634_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_619_p1) - unsigned(p_shl9_cast_fu_630_p1));
    tmp_18_fu_672_p2 <= std_logic_vector(unsigned(tmp6_fu_666_p2) + unsigned(j_cast9_mid2_cast_fu_609_p1));
    tmp_19_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_cast_fu_678_p1),64));
    tmp_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_cast_fu_458_p1),64));
        tmp_21_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_672_p2),32));

    tmp_3_fu_446_p2 <= std_logic_vector(unsigned(p_shl2_fu_426_p3) - unsigned(p_shl3_cast_fu_442_p1));
    tmp_4_cast_mid2_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_cast_mid2_v_fu_268_p3),9));
    tmp_4_cast_mid2_v_fu_268_p3 <= (i_cast1_mid2_v_fu_260_p3 & ap_const_lv1_0);
    tmp_4_fu_467_p2 <= std_logic_vector(unsigned(tmp_3_fu_446_p2) + unsigned(tmp_8_cast_mid2_cast_fu_386_p1));
    tmp_5_cast_mid2_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_cast_mid2_v_fu_280_p2),9));
    tmp_5_cast_mid2_v_fu_280_p2 <= (tmp_4_cast_mid2_v_fu_268_p3 or ap_const_lv5_1);
    tmp_5_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_cast_fu_473_p1),64));
        tmp_6_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_452_p2),32));

    tmp_6_fu_452_p2 <= std_logic_vector(unsigned(tmp_3_fu_446_p2) + unsigned(tmp_7_cast_mid2_cast_fu_368_p1));
    tmp_7_cast_mid2_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_mid2_fu_360_p3),14));
    tmp_7_cast_mid2_fu_360_p3 <= 
        tmp_7_mid1_fu_352_p3 when (exitcond_mid_fu_318_p2(0) = '1') else 
        tmp_7_cast_mid_fu_290_p3;
    tmp_7_cast_mid_fu_290_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_240_p2(0) = '1') else 
        tmp_7_fu_214_p3;
    tmp_7_fu_214_p3 <= (ap_phi_mux_j_phi_fu_188_p4 & ap_const_lv1_0);
    tmp_7_mid1_fu_352_p3 <= (j_1_fu_324_p2 & ap_const_lv1_0);
    tmp_8_cast_mid2_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast_mid2_fu_378_p3),14));
    tmp_8_cast_mid2_fu_378_p3 <= 
        tmp_8_mid1_fu_372_p2 when (exitcond_mid_fu_318_p2(0) = '1') else 
        tmp_8_cast_mid_fu_298_p3;
    tmp_8_cast_mid_fu_298_p3 <= 
        ap_const_lv5_1 when (exitcond_flatten_fu_240_p2(0) = '1') else 
        tmp_8_fu_222_p2;
    tmp_8_fu_222_p2 <= (tmp_7_fu_214_p3 or ap_const_lv5_1);
    tmp_8_mid1_fu_372_p2 <= (tmp_7_mid1_fu_352_p3 or ap_const_lv5_1);
    tmp_9_fu_414_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_398_p1) - unsigned(p_shl5_cast_fu_410_p1));
    tmp_fu_330_p2 <= (exitcond_mid_fu_318_p2 or exitcond_flatten_fu_240_p2);
    tmp_s_fu_420_p2 <= std_logic_vector(unsigned(tmp_9_fu_414_p2) + unsigned(tmp_4_cast_mid2_fu_276_p1));
end behav;
