// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] c3_weight_address0;
reg    c3_weight_ce0;
wire   [31:0] c3_weight_q0;
wire   [6:0] c3_bias_address0;
reg    c3_bias_ce0;
wire   [31:0] c3_bias_q0;
reg   [8:0] indvar_flatten2_reg_196;
reg   [4:0] cin_reg_207;
reg   [5:0] indvar_flatten_reg_218;
reg   [2:0] y_reg_229;
reg   [31:0] output_buffer_2_reg_240;
reg   [2:0] x_reg_252;
wire   [6:0] indvar_flatten_next1_1_fu_282_p2;
reg   [6:0] indvar_flatten_next1_1_reg_856;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten3_fu_288_p2;
reg   [0:0] exitcond_flatten3_reg_861;
wire   [0:0] exitcond_flatten_fu_276_p2;
wire   [6:0] tmp_32_mid2_v_v_fu_318_p3;
reg   [6:0] tmp_32_mid2_v_v_reg_866;
wire   [0:0] h_cast_mid2_fu_355_p3;
reg   [0:0] h_cast_mid2_reg_878;
wire   [0:0] h_mid2_fu_363_p3;
reg   [0:0] h_mid2_reg_884;
wire   [10:0] tmp_32_mid2_fu_371_p3;
reg   [10:0] tmp_32_mid2_reg_889;
wire    ap_CS_fsm_state3;
reg   [31:0] c3_bias_load_reg_895;
wire   [6:0] h_cast_mid2_cast_fu_378_p1;
reg   [6:0] h_cast_mid2_cast_reg_900;
wire   [2:0] h_cast1_mid2_cast_fu_381_p1;
reg   [2:0] h_cast1_mid2_cast_reg_906;
wire   [0:0] exitcond_flatten4_fu_484_p2;
reg   [0:0] exitcond_flatten4_reg_912;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] indvar_flatten_next1_fu_490_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] cin_mid2_fu_658_p3;
wire   [2:0] y_mid2_fu_763_p3;
wire   [2:0] x_1_fu_811_p2;
wire   [5:0] indvar_flatten_next_fu_823_p3;
wire   [31:0] grp_fu_263_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [1:0] indvar_flatten_next9_fu_846_p3;
wire    ap_CS_fsm_state6;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [6:0] indvar_flatten9_reg_138;
reg   [6:0] cout_reg_149;
reg   [1:0] indvar_flatten1_reg_160;
reg   [0:0] h_reg_172;
reg   [0:0] w_reg_183;
wire    ap_block_pp0_stage0;
wire   [63:0] c3_bias_load_mid2_fu_326_p1;
wire   [63:0] tmp_51_fu_785_p1;
wire   [63:0] tmp_53_fu_806_p1;
wire   [63:0] tmp_47_fu_835_p1;
reg   [31:0] grp_fu_263_p0;
wire   [31:0] tmp_s_fu_269_p2;
wire   [0:0] not_exitcond_flatten_6_fu_294_p2;
wire   [6:0] cout_s_fu_312_p2;
wire   [0:0] not_exitcond_flatten_7_fu_331_p2;
wire   [0:0] h_not_fu_343_p2;
wire   [0:0] w_mid_fu_306_p2;
wire   [0:0] h_1_fu_349_p2;
wire   [0:0] h_cast_mid_fu_337_p2;
wire   [0:0] h_mid_fu_300_p2;
wire   [3:0] tmp_3_fu_392_p1;
wire   [5:0] p_shl1_fu_396_p3;
wire   [10:0] cin_cast2_fu_388_p1;
wire   [10:0] tmp_43_fu_408_p2;
wire   [12:0] p_shl_fu_413_p3;
wire   [6:0] cin_cast1_fu_384_p1;
wire   [6:0] p_shl1_cast_fu_404_p1;
wire   [2:0] tmp3_fu_435_p2;
wire   [6:0] tmp2_fu_425_p2;
wire   [6:0] tmp3_cast_fu_440_p1;
wire   [6:0] tmp_48_fu_444_p2;
wire   [10:0] y_cast_fu_431_p1;
wire   [10:0] tmp4_fu_462_p2;
wire   [13:0] p_shl_cast_fu_421_p1;
wire   [13:0] tmp4_cast_fu_468_p1;
wire   [8:0] tmp_51_cast_fu_450_p1;
wire   [8:0] p_shl3_fu_454_p3;
wire   [0:0] exitcond_flatten5_fu_496_p2;
wire   [4:0] cin_s_fu_510_p2;
wire   [3:0] tmp_4_fu_524_p1;
wire   [5:0] p_shl1_mid1_fu_528_p3;
wire   [10:0] cin_cast2_mid1_fu_520_p1;
wire   [10:0] tmp_43_mid1_fu_540_p2;
wire   [12:0] p_shl_mid1_fu_553_p3;
wire   [12:0] p_shl_cast_mid2_fu_565_p3;
wire   [6:0] cin_cast1_mid1_fu_516_p1;
wire   [6:0] p_shl1_cast_mid1_fu_536_p1;
wire   [6:0] tmp2_mid1_fu_577_p2;
wire   [6:0] tmp_51_mid_fu_591_p2;
wire   [13:0] p_shl_cast_mid1_fu_561_p1;
wire   [13:0] tmp4_cast_mid_fu_608_p1;
wire   [13:0] tmp_mid_fu_612_p2;
wire   [13:0] tmp_fu_472_p2;
wire   [8:0] tmp_51_cast_mid_fu_596_p1;
wire   [8:0] p_shl3_mid_fu_600_p3;
wire   [8:0] tmp5_mid_fu_626_p2;
wire   [8:0] tmp5_fu_478_p2;
wire   [0:0] exitcond_fu_646_p2;
wire   [0:0] not_exitcond_flatten_fu_640_p2;
wire   [2:0] y_mid_fu_502_p3;
wire   [0:0] exitcond_mid_fu_652_p2;
wire   [0:0] tmp_7_fu_672_p2;
wire   [2:0] y_1_fu_666_p2;
wire   [2:0] tmp3_mid1_fu_690_p2;
wire   [6:0] tmp2_mid2_fu_583_p3;
wire   [6:0] tmp3_cast_mid1_fu_695_p1;
wire   [6:0] tmp_51_mid1_fu_699_p2;
wire   [10:0] y_cast_mid1_fu_686_p1;
wire   [10:0] tmp_43_mid2_fu_545_p3;
wire   [10:0] tmp4_mid1_fu_717_p2;
wire   [13:0] p_shl_cast_mid2_cast_fu_573_p1;
wire   [13:0] tmp4_cast_mid1_fu_723_p1;
wire   [13:0] tmp_mid1_fu_727_p2;
wire   [13:0] tmp_mid3_fu_618_p3;
wire   [13:0] tmp_mid2_fu_733_p3;
wire   [8:0] tmp_51_cast_mid1_fu_705_p1;
wire   [8:0] p_shl3_mid1_fu_709_p3;
wire   [8:0] tmp5_mid1_fu_749_p2;
wire   [8:0] tmp5_mid3_fu_632_p3;
wire   [2:0] x_mid2_fu_678_p3;
wire   [8:0] tmp5_mid2_fu_755_p3;
wire   [8:0] tmp6_cast_fu_775_p1;
wire   [8:0] tmp_50_fu_779_p2;
wire   [13:0] x_cast9_fu_771_p1;
wire   [13:0] tmp7_fu_790_p2;
wire   [15:0] p_shl2_mid2_fu_741_p3;
wire   [15:0] tmp7_cast_fu_796_p1;
wire   [15:0] tmp_52_fu_800_p2;
wire   [5:0] indvar_flatten_op_fu_817_p2;
wire   [6:0] tmp_46_fu_831_p2;
wire   [1:0] indvar_flatten45_op_fu_840_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv1_3_c3_weight #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
c3_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c3_weight_address0),
    .ce0(c3_weight_ce0),
    .q0(c3_weight_q0)
);

conv1_3_c3_bias #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c3_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c3_bias_address0),
    .ce0(c3_bias_ce0),
    .q0(c3_bias_q0)
);

top_net_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fadd_32nsbkb_U23(
    .din0(grp_fu_263_p0),
    .din1(output_buffer_2_reg_240),
    .dout(grp_fu_263_p2)
);

top_net_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fmul_32nscud_U24(
    .din0(in_r_q0),
    .din1(c3_weight_q0),
    .dout(tmp_s_fu_269_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cin_reg_207 <= cin_mid2_fu_658_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cin_reg_207 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cout_reg_149 <= tmp_32_mid2_v_v_reg_866;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cout_reg_149 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_reg_172 <= h_mid2_reg_884;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_172 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten1_reg_160 <= indvar_flatten_next9_fu_846_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten1_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten2_reg_196 <= indvar_flatten_next1_fu_490_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten2_reg_196 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten9_reg_138 <= indvar_flatten_next1_1_reg_856;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten9_reg_138 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_218 <= indvar_flatten_next_fu_823_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_218 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_912 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_2_reg_240 <= grp_fu_263_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_2_reg_240 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_183 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_reg_183 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_reg_252 <= x_1_fu_811_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_252 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_reg_229 <= y_mid2_fu_763_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_229 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c3_bias_load_reg_895 <= c3_bias_q0;
        h_cast1_mid2_cast_reg_906[0] <= h_cast1_mid2_cast_fu_381_p1[0];
        h_cast_mid2_cast_reg_900[0] <= h_cast_mid2_cast_fu_378_p1[0];
        tmp_32_mid2_reg_889[10 : 4] <= tmp_32_mid2_fu_371_p3[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond_flatten3_reg_861 <= exitcond_flatten3_fu_288_p2;
        h_cast_mid2_reg_878 <= h_cast_mid2_fu_355_p3;
        h_mid2_reg_884 <= h_mid2_fu_363_p3;
        tmp_32_mid2_v_v_reg_866 <= tmp_32_mid2_v_v_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten4_reg_912 <= exitcond_flatten4_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next1_1_reg_856 <= indvar_flatten_next1_1_fu_282_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_484_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c3_bias_ce0 = 1'b1;
    end else begin
        c3_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c3_weight_ce0 = 1'b1;
    end else begin
        c3_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_263_p0 = c3_bias_load_reg_895;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_263_p0 = tmp_s_fu_269_p2;
    end else begin
        grp_fu_263_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten4_fu_484_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten4_fu_484_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c3_bias_address0 = c3_bias_load_mid2_fu_326_p1;

assign c3_bias_load_mid2_fu_326_p1 = tmp_32_mid2_v_v_fu_318_p3;

assign c3_weight_address0 = tmp_53_fu_806_p1;

assign cin_cast1_fu_384_p1 = cin_reg_207;

assign cin_cast1_mid1_fu_516_p1 = cin_s_fu_510_p2;

assign cin_cast2_fu_388_p1 = cin_reg_207;

assign cin_cast2_mid1_fu_520_p1 = cin_s_fu_510_p2;

assign cin_mid2_fu_658_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? cin_s_fu_510_p2 : cin_reg_207);

assign cin_s_fu_510_p2 = (5'd1 + cin_reg_207);

assign cout_s_fu_312_p2 = (cout_reg_149 + 7'd1);

assign exitcond_flatten3_fu_288_p2 = ((indvar_flatten1_reg_160 == 2'd1) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_484_p2 = ((indvar_flatten2_reg_196 == 9'd400) ? 1'b1 : 1'b0);

assign exitcond_flatten5_fu_496_p2 = ((indvar_flatten_reg_218 == 6'd25) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_276_p2 = ((indvar_flatten9_reg_138 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_646_p2 = ((x_reg_252 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_652_p2 = (not_exitcond_flatten_fu_640_p2 & exitcond_fu_646_p2);

assign h_1_fu_349_p2 = (h_not_fu_343_p2 | exitcond_flatten3_fu_288_p2);

assign h_cast1_mid2_cast_fu_381_p1 = h_cast_mid2_reg_878;

assign h_cast_mid2_cast_fu_378_p1 = h_cast_mid2_reg_878;

assign h_cast_mid2_fu_355_p3 = ((w_mid_fu_306_p2[0:0] === 1'b1) ? h_1_fu_349_p2 : h_cast_mid_fu_337_p2);

assign h_cast_mid_fu_337_p2 = (not_exitcond_flatten_7_fu_331_p2 & h_reg_172);

assign h_mid2_fu_363_p3 = ((w_mid_fu_306_p2[0:0] === 1'b1) ? h_1_fu_349_p2 : h_mid_fu_300_p2);

assign h_mid_fu_300_p2 = (not_exitcond_flatten_6_fu_294_p2 & h_reg_172);

assign h_not_fu_343_p2 = (h_reg_172 ^ 1'd1);

assign in_r_address0 = tmp_51_fu_785_p1;

assign indvar_flatten45_op_fu_840_p2 = (indvar_flatten1_reg_160 + 2'd1);

assign indvar_flatten_next1_1_fu_282_p2 = (indvar_flatten9_reg_138 + 7'd1);

assign indvar_flatten_next1_fu_490_p2 = (9'd1 + indvar_flatten2_reg_196);

assign indvar_flatten_next9_fu_846_p3 = ((exitcond_flatten3_reg_861[0:0] === 1'b1) ? 2'd1 : indvar_flatten45_op_fu_840_p2);

assign indvar_flatten_next_fu_823_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_817_p2);

assign indvar_flatten_op_fu_817_p2 = (6'd1 + indvar_flatten_reg_218);

assign not_exitcond_flatten_6_fu_294_p2 = (exitcond_flatten3_fu_288_p2 ^ 1'd1);

assign not_exitcond_flatten_7_fu_331_p2 = (exitcond_flatten3_fu_288_p2 ^ 1'd1);

assign not_exitcond_flatten_fu_640_p2 = (exitcond_flatten5_fu_496_p2 ^ 1'd1);

assign output_r_address0 = tmp_47_fu_835_p1;

assign output_r_d0 = grp_fu_263_p2;

assign p_shl1_cast_fu_404_p1 = p_shl1_fu_396_p3;

assign p_shl1_cast_mid1_fu_536_p1 = p_shl1_mid1_fu_528_p3;

assign p_shl1_fu_396_p3 = {{tmp_3_fu_392_p1}, {2'd0}};

assign p_shl1_mid1_fu_528_p3 = {{tmp_4_fu_524_p1}, {2'd0}};

assign p_shl2_mid2_fu_741_p3 = {{tmp_mid2_fu_733_p3}, {2'd0}};

assign p_shl3_fu_454_p3 = {{tmp_48_fu_444_p2}, {2'd0}};

assign p_shl3_mid1_fu_709_p3 = {{tmp_51_mid1_fu_699_p2}, {2'd0}};

assign p_shl3_mid_fu_600_p3 = {{tmp_51_mid_fu_591_p2}, {2'd0}};

assign p_shl_cast_fu_421_p1 = p_shl_fu_413_p3;

assign p_shl_cast_mid1_fu_561_p1 = p_shl_mid1_fu_553_p3;

assign p_shl_cast_mid2_cast_fu_573_p1 = p_shl_cast_mid2_fu_565_p3;

assign p_shl_cast_mid2_fu_565_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? p_shl_mid1_fu_553_p3 : p_shl_fu_413_p3);

assign p_shl_fu_413_p3 = {{tmp_43_fu_408_p2}, {2'd0}};

assign p_shl_mid1_fu_553_p3 = {{tmp_43_mid1_fu_540_p2}, {2'd0}};

assign tmp2_fu_425_p2 = (cin_cast1_fu_384_p1 + p_shl1_cast_fu_404_p1);

assign tmp2_mid1_fu_577_p2 = (cin_cast1_mid1_fu_516_p1 + p_shl1_cast_mid1_fu_536_p1);

assign tmp2_mid2_fu_583_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? tmp2_mid1_fu_577_p2 : tmp2_fu_425_p2);

assign tmp3_cast_fu_440_p1 = tmp3_fu_435_p2;

assign tmp3_cast_mid1_fu_695_p1 = tmp3_mid1_fu_690_p2;

assign tmp3_fu_435_p2 = (h_cast1_mid2_cast_reg_906 + y_reg_229);

assign tmp3_mid1_fu_690_p2 = (h_cast1_mid2_cast_reg_906 + y_1_fu_666_p2);

assign tmp4_cast_fu_468_p1 = tmp4_fu_462_p2;

assign tmp4_cast_mid1_fu_723_p1 = tmp4_mid1_fu_717_p2;

assign tmp4_cast_mid_fu_608_p1 = tmp_43_mid1_fu_540_p2;

assign tmp4_fu_462_p2 = (y_cast_fu_431_p1 + tmp_43_fu_408_p2);

assign tmp4_mid1_fu_717_p2 = (y_cast_mid1_fu_686_p1 + tmp_43_mid2_fu_545_p3);

assign tmp5_fu_478_p2 = (tmp_51_cast_fu_450_p1 + p_shl3_fu_454_p3);

assign tmp5_mid1_fu_749_p2 = (tmp_51_cast_mid1_fu_705_p1 + p_shl3_mid1_fu_709_p3);

assign tmp5_mid2_fu_755_p3 = ((exitcond_mid_fu_652_p2[0:0] === 1'b1) ? tmp5_mid1_fu_749_p2 : tmp5_mid3_fu_632_p3);

assign tmp5_mid3_fu_632_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? tmp5_mid_fu_626_p2 : tmp5_fu_478_p2);

assign tmp5_mid_fu_626_p2 = (tmp_51_cast_mid_fu_596_p1 + p_shl3_mid_fu_600_p3);

assign tmp6_cast_fu_775_p1 = x_mid2_fu_678_p3;

assign tmp7_cast_fu_796_p1 = tmp7_fu_790_p2;

assign tmp7_fu_790_p2 = (x_cast9_fu_771_p1 + tmp_mid2_fu_733_p3);

assign tmp_32_mid2_fu_371_p3 = {{tmp_32_mid2_v_v_reg_866}, {4'd0}};

assign tmp_32_mid2_v_v_fu_318_p3 = ((exitcond_flatten3_fu_288_p2[0:0] === 1'b1) ? cout_s_fu_312_p2 : cout_reg_149);

assign tmp_3_fu_392_p1 = cin_reg_207[3:0];

assign tmp_43_fu_408_p2 = (cin_cast2_fu_388_p1 + tmp_32_mid2_reg_889);

assign tmp_43_mid1_fu_540_p2 = (cin_cast2_mid1_fu_520_p1 + tmp_32_mid2_reg_889);

assign tmp_43_mid2_fu_545_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? tmp_43_mid1_fu_540_p2 : tmp_43_fu_408_p2);

assign tmp_46_fu_831_p2 = (tmp_32_mid2_v_v_reg_866 + h_cast_mid2_cast_reg_900);

assign tmp_47_fu_835_p1 = tmp_46_fu_831_p2;

assign tmp_48_fu_444_p2 = (tmp2_fu_425_p2 + tmp3_cast_fu_440_p1);

assign tmp_4_fu_524_p1 = cin_s_fu_510_p2[3:0];

assign tmp_50_fu_779_p2 = (tmp5_mid2_fu_755_p3 + tmp6_cast_fu_775_p1);

assign tmp_51_cast_fu_450_p1 = tmp_48_fu_444_p2;

assign tmp_51_cast_mid1_fu_705_p1 = tmp_51_mid1_fu_699_p2;

assign tmp_51_cast_mid_fu_596_p1 = tmp_51_mid_fu_591_p2;

assign tmp_51_fu_785_p1 = tmp_50_fu_779_p2;

assign tmp_51_mid1_fu_699_p2 = (tmp2_mid2_fu_583_p3 + tmp3_cast_mid1_fu_695_p1);

assign tmp_51_mid_fu_591_p2 = (tmp2_mid1_fu_577_p2 + h_cast_mid2_cast_reg_900);

assign tmp_52_fu_800_p2 = (p_shl2_mid2_fu_741_p3 + tmp7_cast_fu_796_p1);

assign tmp_53_fu_806_p1 = tmp_52_fu_800_p2;

assign tmp_7_fu_672_p2 = (exitcond_mid_fu_652_p2 | exitcond_flatten5_fu_496_p2);

assign tmp_fu_472_p2 = (p_shl_cast_fu_421_p1 + tmp4_cast_fu_468_p1);

assign tmp_mid1_fu_727_p2 = (p_shl_cast_mid2_cast_fu_573_p1 + tmp4_cast_mid1_fu_723_p1);

assign tmp_mid2_fu_733_p3 = ((exitcond_mid_fu_652_p2[0:0] === 1'b1) ? tmp_mid1_fu_727_p2 : tmp_mid3_fu_618_p3);

assign tmp_mid3_fu_618_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? tmp_mid_fu_612_p2 : tmp_fu_472_p2);

assign tmp_mid_fu_612_p2 = (p_shl_cast_mid1_fu_561_p1 + tmp4_cast_mid_fu_608_p1);

assign w_mid_fu_306_p2 = (w_reg_183 & not_exitcond_flatten_6_fu_294_p2);

assign x_1_fu_811_p2 = (3'd1 + x_mid2_fu_678_p3);

assign x_cast9_fu_771_p1 = x_mid2_fu_678_p3;

assign x_mid2_fu_678_p3 = ((tmp_7_fu_672_p2[0:0] === 1'b1) ? 3'd0 : x_reg_252);

assign y_1_fu_666_p2 = (3'd1 + y_mid_fu_502_p3);

assign y_cast_fu_431_p1 = y_reg_229;

assign y_cast_mid1_fu_686_p1 = y_1_fu_666_p2;

assign y_mid2_fu_763_p3 = ((exitcond_mid_fu_652_p2[0:0] === 1'b1) ? y_1_fu_666_p2 : y_mid_fu_502_p3);

assign y_mid_fu_502_p3 = ((exitcond_flatten5_fu_496_p2[0:0] === 1'b1) ? 3'd0 : y_reg_229);

always @ (posedge ap_clk) begin
    tmp_32_mid2_reg_889[3:0] <= 4'b0000;
    h_cast_mid2_cast_reg_900[6:1] <= 6'b000000;
    h_cast1_mid2_cast_reg_906[2:1] <= 2'b00;
end

endmodule //conv1_3
