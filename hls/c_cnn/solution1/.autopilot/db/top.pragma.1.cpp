# 1 "c_cnn/top.cpp"
# 1 "c_cnn/top.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 152 "<built-in>" 3
# 1 "<command line>" 1







# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 157 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "c_cnn/top.cpp" 2
# 1 "c_cnn/utils.h" 1



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 275 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 276 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 279 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 1 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 1 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3



namespace std {

  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 82 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3
}
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 1 3
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 31 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3




namespace std {

  using ::ptrdiff_t;
  using ::size_t;

}
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 1 3








# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 10 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/_mingw_mac.h" 1 3
# 10 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 277 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 1 3
# 13 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 674 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_directx.h" 1 3
# 674 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 675 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 13 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
}


#pragma pack(pop)
# 277 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3


#pragma pack(push,_CRT_PACKING)
# 370 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long size_t;
# 380 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ssize_t;
# 392 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long intptr_t;
# 405 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 418 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ptrdiff_t;
# 436 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
# 456 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;







typedef __time64_t time_t;
# 607 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;



extern "C" {



const char *__mingw_get_crt_info (void);


}


#pragma pack(pop)
# 9 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 27 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;





  __attribute__ ((__dllimport__)) FILE * __iob_func(void);
# 66 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };
# 164 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 178 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 193 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 217 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  int iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswalpha_l(wint_t _C,_locale_t _Locale);
  int iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswupper_l(wint_t _C,_locale_t _Locale);
  int iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswlower_l(wint_t _C,_locale_t _Locale);
  int iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswdigit_l(wint_t _C,_locale_t _Locale);
  int iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswspace_l(wint_t _C,_locale_t _Locale);
  int iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswpunct_l(wint_t _C,_locale_t _Locale);
  int iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswalnum_l(wint_t _C,_locale_t _Locale);
  int iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswprint_l(wint_t _C,_locale_t _Locale);
  int iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswgraph_l(wint_t _C,_locale_t _Locale);
  int iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int iswascii(wint_t _C);
  int isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t _towlower_l(wint_t _C,_locale_t _Locale);
  int iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcsym_l(wint_t _C,_locale_t _Locale);
  int is_wctype(wint_t _C,wctype_t _Type);


  int iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t * _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t * _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  wchar_t * _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) int _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int _wrename(const wchar_t *_NewFilename,const wchar_t *_OldFilename);
  __attribute__ ((__dllimport__)) wchar_t * _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t * _wsetlocale(int _Category,const wchar_t *_Locale);





  __attribute__ ((__dllimport__)) intptr_t _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);


  __attribute__ ((__dllimport__)) int _wsystem(const wchar_t *_Command);
# 360 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;







  typedef long _off_t;

  typedef long off_t;






  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 412 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  struct _stat32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 493 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) int _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 507 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t _getwch(void);
  __attribute__ ((__dllimport__)) wint_t _getwche(void);
  __attribute__ ((__dllimport__)) wint_t _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  wint_t _putwch_nolock(wchar_t _WCh);
  wint_t _getwch_nolock(void);
  wint_t _getwche_nolock(void);
  wint_t _ungetwch_nolock(wint_t _WCh);
# 540 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) FILE * _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fgetwchar(void);
  wint_t fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwchar(wchar_t _Ch);
  wint_t getwc(FILE *_File);
  wint_t getwchar(void);
  wint_t putwc(wchar_t _Ch,FILE *_File);
  wint_t putwchar(wchar_t _Ch);
  wint_t ungetwc(wint_t _Ch,FILE *_File);
  wchar_t * fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t * _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int _putws(const wchar_t *_Str);
  int fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int wprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _scwprintf(const wchar_t * __restrict__ _Format,...);
  int vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...) ;
  __attribute__ ((__dllimport__)) int _swprintf_l(wchar_t * __restrict__ ,size_t _SizeInWords,const wchar_t * __restrict__ _Format,_locale_t _Locale,... ) ;
  __attribute__ ((__dllimport__)) int vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list) ;
  __attribute__ ((__dllimport__)) int _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;

  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);






  int vwscanf (const wchar_t * __restrict__ , va_list);
  int vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  __attribute__ ((__dllimport__)) int _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int _vswprintf_l(wchar_t * __restrict__ _Dest,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;
# 621 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  int fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  int swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  int wscanf(const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE * _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE * _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE * _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE * _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  __attribute__ ((__dllimport__)) int _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t * _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 669 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t * _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t * _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  double wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  __attribute__ ((__dllimport__)) double _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  float wcstof( const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);

  float wcstof (const wchar_t * __restrict__, wchar_t ** __restrict__);
  long double wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);

  long wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wgetenv(const wchar_t *_VarName) ;




  __attribute__ ((__dllimport__)) double _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t * _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t * _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long _wcstoui64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);





  __attribute__ ((__dllimport__)) wchar_t * _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) int _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;





  __attribute__ ((__dllimport__)) wchar_t * _wcsdup(const wchar_t *_Str);
  wchar_t * wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t * wcschr(const wchar_t *_Str,wchar_t _Ch);
  int wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t * wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t wcslen(const wchar_t *_Str);
  size_t wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t * wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t * wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t * _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t * wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t * wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t * wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t * wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t * __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t * _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t * wcsdup(const wchar_t *_Str) ;

  int wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t * wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t * wcsrev(wchar_t *_Str) ;
  wchar_t * wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t * wcslwr(wchar_t *_Str) ;
  wchar_t * wcsupr(wchar_t *_Str) ;
  int wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t * _wasctime(const struct tm *_Tm);
  wchar_t * _wctime32(const __time32_t *_Time) ;
  size_t wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wstrdate(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t * _wstrtime(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t * _wctime64(const __time64_t *_Time) ;



  wchar_t * _wctime(const time_t *_Time) ;
# 816 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef int mbstate_t;
  typedef wchar_t _Wint_t;

  wint_t btowc(int);
  size_t mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int wctob(wint_t _WCh);


  wchar_t * wmemset(wchar_t *s, wchar_t c, size_t n);
                wchar_t * wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t * wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int fwide(FILE *stream,int mode);
  int mbsinit(const mbstate_t *ps);
  __extension__ long long wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void * memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void * memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 876 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
}


#pragma pack(pop)


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/wchar_s.h" 1 3








# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 1 3
# 9 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/wchar_s.h" 2 3
# 881 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 2 3
# 47 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3
# 64 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
namespace std {

  using ::mbstate_t;

}
# 138 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
namespace std {

  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;



  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;





  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }


}







namespace __gnu_cxx {






  using ::wcstold;
# 257 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
  using ::wcstoll;
  using ::wcstoull;


}

namespace std {

  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;

}
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 2 3
# 69 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
namespace std {
# 89 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 110 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 132 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 238 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
}
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 2 3

namespace std {
# 73 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;




  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;


  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;



}
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 1 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx {
# 140 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 1 3
# 61 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 62 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception_defines.h" 1 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 2 3

namespace std {


  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));

}
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 1 3
# 36 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
# 36 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
# 68 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
namespace __gnu_cxx {

  template<typename _Iterator, typename _Container>
    class __normal_iterator;

}

namespace std {

  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 193 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 416 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    class __is_iterator_helper
    {
      typedef char __one;
      typedef struct { char __arr[2]; } __two;

      template<typename _Up>
        struct _Wrap_type
 { };

      template<typename _Up>
        static __one __test(_Wrap_type<typename _Up::iterator_category>*);

      template<typename _Up>
        static __two __test(...);

    public:
      static const bool __value = (sizeof(__test<_Tp>(0)) == 1
       || __is_pointer<_Tp>::__value);
    };

  template<typename _Tp>
    struct __is_iterator
    {
      enum { __value = __is_iterator_helper<_Tp>::__value };
      typedef typename __truth_type<__value>::__type __type;
    };

}
# 64 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 1 3
# 32 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 3
# 32 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 3




namespace __gnu_cxx {


  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  template<typename _Tp>
    struct __promote<_Tp, false>
    { typedef _Tp __type; };

  template<typename _Tp, typename _Up>
    struct __promote_2
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;

    public:
      typedef __typeof__(__type1() + __type2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp>
    struct __promote_3
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;

    public:
      typedef __typeof__(__type1() + __type2() + __type3()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    struct __promote_4
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;
      typedef typename __promote<_Wp>::__type __type4;

    public:
      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;
    };

}
# 65 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 1 3
# 32 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
# 32 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3




namespace __gnu_cxx {
# 51 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 96 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 3010 / 10000);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };

}
# 66 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 1 3
# 60 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 1 3
# 34 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 1 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 3
# 36 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 2 3
# 95 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
namespace std {
# 104 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }

}
# 61 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 2 3






namespace std {


  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 113 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first),
   second(__p.second) { }
# 149 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 211 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }
# 257 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
}
# 67 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 1 3
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 66 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 2 3

namespace std {
# 84 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 111 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 135 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }



}
# 68 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 1 3
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3



namespace std {

  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 108 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 166 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }

}
# 69 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 1 3
# 68 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
namespace std {
# 94 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 281 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 393 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 420 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 443 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 469 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 484 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 510 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 533 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 559 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 578 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 621 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 647 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 673 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }



}

namespace __gnu_cxx {
# 694 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 792 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }

}
# 70 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\debug/debug.h" 1 3
# 47 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 72 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3


namespace std {




  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 115 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 134 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 156 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 184 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 207 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 230 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 251 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }




  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type
      _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type
      _S_base(_Iterator __it)
      { return __it.base(); }
    };



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 339 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 377 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 462 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 514 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 542 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 572 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 631 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 689 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 733 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 791 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 952 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

}

namespace std {
# 1028 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1060 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1091 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1125 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1165 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1202 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }

}
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 2 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 2 3








namespace __gnu_cxx {
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 88 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }

}

namespace std {
# 229 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((wint_t)(0xFFFF)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };


}
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 1 3
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 3
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 1 3








# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 3
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
  };
# 75 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 3
  int _configthreadlocale(int _Flag);
  char * setlocale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) struct lconv * localeconv(void);
  _locale_t _get_current_locale(void);
  _locale_t _create_locale(int _Category,const char *_Locale);
  void _free_locale(_locale_t _Locale);
  _locale_t __get_current_locale(void);
  _locale_t __create_locale(int _Category,const char *_Locale);
  void __free_locale(_locale_t _Locale);







}


#pragma pack(pop)
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 2 3








namespace std {

  using ::lconv;
  using ::setlocale;
  using ::localeconv;

}
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 2 3



namespace std {

  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, __null);
    char* __sav = __null;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }

}
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 2 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 1 3








# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 2 3



extern "C" {
# 72 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __updatetlocinfo(void);
  pthreadmbcinfo __updatetmbcinfo(void);
# 100 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  __attribute__ ((__dllimport__)) int _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isalpha(int _C);
  __attribute__ ((__dllimport__)) int _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isupper(int _C);
  __attribute__ ((__dllimport__)) int _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int islower(int _C);
  __attribute__ ((__dllimport__)) int _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isdigit(int _C);
  __attribute__ ((__dllimport__)) int _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isxdigit(int _C);
  __attribute__ ((__dllimport__)) int _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isspace(int _C);
  __attribute__ ((__dllimport__)) int _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int ispunct(int _C);
  __attribute__ ((__dllimport__)) int _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isalnum(int _C);
  __attribute__ ((__dllimport__)) int _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isprint(int _C);
  __attribute__ ((__dllimport__)) int _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isgraph(int _C);
  __attribute__ ((__dllimport__)) int _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int iscntrl(int _C);
  __attribute__ ((__dllimport__)) int _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int toupper(int _C);
  __attribute__ ((__dllimport__)) int tolower(int _C);
  __attribute__ ((__dllimport__)) int _tolower(int _C);
  __attribute__ ((__dllimport__)) int _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _toupper(int _C);
  __attribute__ ((__dllimport__)) int _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __isascii(int _C);
  __attribute__ ((__dllimport__)) int __toascii(int _C);
  __attribute__ ((__dllimport__)) int __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __iscsym(int _C);


int isblank(int _C);
# 193 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  extern int * __imp___mb_cur_max;
# 275 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
}
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 2 3
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
namespace std {

  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;

}
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 2 3

namespace std {
# 54 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;

}
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 1 3
# 34 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 1 3
# 30 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 3
#pragma GCC visibility push(default)
# 162 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 1 3
# 70 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 1 3








# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 2 3



extern "C" {




__attribute__ ((__dllimport__)) extern int * _errno(void);


errno_t _set_errno(int _Value);
errno_t _get_errno(int *_Value);
# 74 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 3
}
# 71 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 2 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 73 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 2 3
# 340 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef struct {
  long counter;
  void *sema;
} __gthread_mutex_t;

typedef struct {
  long counter;
  long depth;
  unsigned long owner;
  void *sema;
} __gthread_recursive_mutex_t;
# 374 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));
# 401 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}







extern int __gthr_win32_once (__gthread_once_t *, void (*) (void));
extern int __gthr_win32_key_create (__gthread_key_t *, void (*) (void*));
extern int __gthr_win32_key_delete (__gthread_key_t);
extern void * __gthr_win32_getspecific (__gthread_key_t);
extern int __gthr_win32_setspecific (__gthread_key_t, const void *);
extern void __gthr_win32_mutex_init_function (__gthread_mutex_t *);
extern int __gthr_win32_mutex_lock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_trylock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);
extern void
  __gthr_win32_recursive_mutex_init_function (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_lock (__gthread_recursive_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_trylock (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_unlock (__gthread_recursive_mutex_t *);
extern void __gthr_win32_mutex_destroy (__gthread_mutex_t *);

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthr_win32_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthr_win32_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthr_win32_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthr_win32_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthr_win32_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_init_function (__mutex);
}

static inline void
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_destroy (__mutex);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_unlock (__mutex);
  else
    return 0;
}

static inline void
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
   __gthr_win32_recursive_mutex_init_function (__mutex);
}

static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_unlock (__mutex);
  else
    return 0;
}
# 767 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
}
# 163 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/atomic_word.h" 1 3
# 32 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 2 3

namespace __gnu_cxx {






  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 61 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }

}
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 2 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 1 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 3




# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 1 3
# 48 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 1 3
# 34 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 1 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 34 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 2 3



namespace __gnu_cxx {

  using std::size_t;
  using std::ptrdiff_t;
# 50 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return &__x; }

      const_pointer
      address(const_reference __x) const { return &__x; }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 114 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }

}
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 2 3
# 49 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 2 3

namespace std {
# 59 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 85 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 204 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
}
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 1 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 1 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 2 3

namespace std {

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }





  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);



}
# 46 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 1 3
# 60 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
namespace std {
# 99 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {
      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {
      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;
      typedef _Result result_type;
    };
# 134 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 198 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 262 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 345 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 416 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 523 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }



}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 1 3
# 60 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 3
namespace std {
# 97 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }


}
# 713 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 2 3
# 50 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 1 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 3
# 33 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 3
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 2 3

namespace std {
# 103 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 140 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 165 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {



     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {



     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
             -1) <= 0)
       _M_destroy(__a);
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {



            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()



      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }





      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 468 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 516 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 549 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 589 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 695 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 724 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 737 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 757 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 778 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 807 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 824 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 845 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 864 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 920 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 935 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 967 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 989 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1045 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1061 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1073 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1089 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1101 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1129 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1144 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1175 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1197 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1220 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1238 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1261 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1278 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1302 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1318 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1338 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1357 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1379 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1403 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1422 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1445 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1463 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1481 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1502 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1523 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1545 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1620 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1701 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1711 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1721 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1753 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1766 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1780 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1797 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1810 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1825 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1838 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1855 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1868 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1883 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1896 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1915 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1929 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1944 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1957 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 1976 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 1990 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2005 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2019 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2036 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2049 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2065 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2078 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2095 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2110 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2128 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2158 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2182 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2200 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2223 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2248 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2260 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2331 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2377 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2414 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2451 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2488 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2525 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2562 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2579 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2597 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2620 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2638 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);


}
# 53 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 1 3
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {





 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {





 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct NULL not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {





      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 239 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {




      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 576 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }





  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);



}
# 56 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 2 3


namespace std {
# 61 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 97 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 116 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale() throw();
# 125 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 135 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 150 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 163 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 175 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 189 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 204 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 223 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 251 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 267 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 302 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 336 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 367 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 431 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 574 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 591 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 608 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 635 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 649 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 666 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 685 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 699 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 728 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 744 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 757 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };

}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 3

namespace std {

  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }





  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);



}
# 815 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 2 3
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 2 3
# 53 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
namespace std {





  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 206 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 262 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 337 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 368 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 400 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 426 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 443 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 455 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      { return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1); }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 559 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 575 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 592 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 618 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 669 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 681 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 692 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 703 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 722 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    static int
    xalloc() throw();
# 738 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 759 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 776 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }

}
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3








namespace std {

  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 113 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 179 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 203 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 233 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 260 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 274 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 292 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 314 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 333 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 348 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 373 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 400 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 426 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 440 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 458 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 474 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 485 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 505 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 521 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 531 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 552 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 567 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 578 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 590 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 603 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int
      sync() { return 0; }
# 625 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 641 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 663 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 676 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 700 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 718 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 744 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 759 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }


    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);


}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 1 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 3

namespace std {

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }





  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);



}
# 799 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 2 3
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 1 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3




# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 1 3
# 13 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 13 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 166 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 3
  typedef wchar_t wctrans_t;
  wint_t towctrans(wint_t,wctrans_t);
  wctrans_t wctrans(const char *);
  wctype_t wctype(const char *);


}


#pragma pack(pop)
# 46 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 2 3
# 75 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3
namespace std {

  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;

}
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 42 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_base.h" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_base.h" 3
namespace std {


  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);
  };

}
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3






# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 1 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3




namespace std {
# 48 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }



}
# 50 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3

namespace std {
# 63 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 141 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 159 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 176 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 192 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 208 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 222 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 237 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 251 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 266 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 283 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 302 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 321 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 343 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 368 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 387 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 406 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 425 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 443 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 460 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 476 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 493 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 512 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 533 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 555 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 579 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 602 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 671 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 708 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 721 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 734 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 749 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 763 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 777 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 792 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 809 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 825 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 842 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 862 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 889 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 920 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 953 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1002 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1019 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1035 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1052 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1072 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1095 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1121 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1147 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1172 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1205 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1216 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1240 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1259 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1277 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1295 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1312 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1329 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1345 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1362 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1382 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1404 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1427 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1453 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_inline.h" 1 3
# 37 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_inline.h" 3
namespace std {

  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }

}
# 1509 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3

namespace std {


  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_truename(__null), _M_truename_size(0), _M_falsename(__null),
      _M_falsename_size(0), _M_decimal_point(_CharT()),
      _M_thousands_sep(_CharT()), _M_allocated(false)
      { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1634 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(); }
# 1671 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1685 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(__cloc); }
# 1699 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1712 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1743 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1756 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1769 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1786 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1798 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1811 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1824 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1837 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1907 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1928 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1954 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1990 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2049 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2227 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2245 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2266 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2284 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2326 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2389 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2414 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2462 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2520 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }

}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 1 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
# 35 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3

namespace std {



  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = __null;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 135 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 729 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 965 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1026 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1151 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1188 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }





  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);



}
# 2601 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 2 3


namespace std {

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 60 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 125 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 136 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 189 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 210 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 245 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 283 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 295 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 335 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 349 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 378 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 398 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 418 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 437 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };

}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 1 3
# 34 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3
# 34 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3

namespace std {

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 144 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }





  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;



}
# 471 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 2 3
# 45 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 2 3


namespace std {
# 53 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 80 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 106 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 163 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 248 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 281 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 309 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 322 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      flush();
# 333 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      pos_type
      tellp();
# 344 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      seekp(pos_type);
# 356 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 375 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 394 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 404 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 446 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 488 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 538 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 582 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }





  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);



}
# 586 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 2 3
# 40 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 1 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3




namespace std {
# 53 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 89 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 118 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 165 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 237 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 247 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 279 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int_type
      get();
# 293 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type& __c);
# 320 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 331 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 354 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 364 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 393 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 404 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 428 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 445 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int_type
      peek();
# 463 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 482 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 498 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      putback(char_type __c);
# 513 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      unget();
# 531 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int
      sync();
# 545 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      pos_type
      tellg();
# 560 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      seekg(pos_type);
# 576 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 631 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 667 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 680 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 697 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 739 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 767 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 828 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 850 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
}



# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 1 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3
# 39 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 512 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
           ios_base::in);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {


      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {


      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }





  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;



}
# 854 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 2 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3

namespace std {
# 58 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;

}
# 5 "c_cnn/utils.h" 2
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\hls_stream.h" 1
# 66 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\hls_stream.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "D:/Vivado/Vivado/2018.3/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\hls_stream.h" 2


namespace hls {
# 78 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:


    inline __attribute__((always_inline)) bool empty() const {
        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;
    }

    inline __attribute__((always_inline)) bool full() const {
        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;
    }



    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        return tmp;





    }



    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;
    }



    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }



    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {
        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;
    }


    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V;
};


}
# 6 "c_cnn/utils.h" 2
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 1
# 54 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h" 1
# 56 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_decl.h" 1
# 100 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 232 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 57 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h" 2
# 156 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\climits" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\climits" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\climits" 3

# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\limits.h" 1 3 4
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\limits.h" 3 4
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\limits.h" 1 3 4





# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3 4
# 6 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\limits.h" 2 3 4
# 38 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\limits.h" 2 3 4
# 43 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\climits" 2 3
# 157 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h" 2
enum { CHAR_IS_SIGNED = (-127 -1) < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h" 2
# 562 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 2
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h" 1
# 72 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Vivado/Vivado/2018.3/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 73 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h" 2
# 82 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 239 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 393 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 484 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 588 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 701 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 719 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 830 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 879 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 988 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1055 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1295 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1354 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1373 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1401 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { std::ptrdiff_t op2 = op.to_long(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { std::ptrdiff_t op2 = op.to_long(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { std::ptrdiff_t op2 = op.to_long(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { std::ptrdiff_t op2 = op.to_long(); return op2 - i_op; }
# 1429 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1463 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1502 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1526 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1557 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1594 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1631 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1661 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 &= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp &= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 |= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp |= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp ^= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1716 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1743 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1772 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 &= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp &= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 |= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp |= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp ^= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1798 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1906 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 2
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h" 1
# 72 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 115 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 303 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 384 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 732 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 771 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 809 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 831 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1029 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1088 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1111 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1139 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1188 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1335 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1359 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 341 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_special.h" 1
# 60 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 88 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
struct complex<ap_int<_AP_W> > {
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 220 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 342 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 2







# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h" 1
# 55 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h" 1
# 61 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 1
# 62 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h" 2
# 132 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 153 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 332 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 476 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 534 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 687 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 847 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1073 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1143 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1176 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }
# 1191 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1209 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1327 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1349 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1493 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1579 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1762 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2212 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2300 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h" 2
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h" 1
# 69 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 256 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 286 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 298 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
  }
# 310 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 632 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 695 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 741 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 136 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 267 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 289 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 380 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_special.h" 1
# 60 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 88 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 219 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 381 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_fixed.h" 2
# 350 "D:/Vivado/Vivado/2018.3/common/technology/autopilot\\ap_int.h" 2
# 7 "c_cnn/utils.h" 2

typedef float data_t;






const int S = 1 ;

const int CONV1_CHIN = 1 ;
const int CONV1_CHOUT = 6 ;
const int CONV2_CHIN = 6 ;
const int CONV2_CHOUT = 16 ;
const int CONV3_CHIN = 16 ;
const int CONV3_CHOUT = 120 ;

const int FC1_CHIN = 120 ;
const int FC1_CHOUT = 84 ;
const int FC2_CHIN = 84 ;
const int FC2_CHOUT = 10 ;

const int CONV1_WIN = 28 ;
const int CONV1_HIN = 28 ;
const int CONV2_WIN = 14 ;
const int CONV2_HIN = 14 ;
const int CONV3_WIN = 5 ;
const int CONV3_HIN = 5 ;

const int CONV1_SIZE = 5 ;
const int CONV2_SIZE = 5 ;
const int CONV3_SIZE = 5 ;
const int FC_CONV_SIZE = 1 ;

const int MAXP1_CHIN = 6 ;
const int MAXP2_CHIN = 16 ;

const int MAXP1_WIN = 28 ;
const int MAXP1_HIN = 28 ;
const int MAXP2_WIN = 10 ;
const int MAXP2_HIN = 10 ;

const int C1_P = 2 ;
const int C2_P = 0 ;
const int C3_P = 0 ;
const int FC_P = 0 ;


const int C1_OUTPUT_SIZE = 6*28*28 ;
const int P1_OUTPUT_SIZE = 6*14*14 ;
const int C2_OUTPUT_SIZE = 16*10*10 ;
const int P2_OUTPUT_SIZE = 16*5*5 ;
const int C3_OUTPUT_SIZE = 120*1*1 ;

const int C4_OUTPUT_SIZE = 84 ;
const int C5_OUTPUT_SIZE = 10 ;




void conv(data_t in[], const data_t weight[], const data_t bias[], data_t output[], int win, int hin,
  int chin, int chout, int kx, int ky, int stride, int padding);

void max_pool_2D(data_t in[], data_t output[], int chin, int hin, int win);
void avg_pool_2D(data_t in[], data_t output[], int chin, int hin, int win);
int find_index(data_t *arr, int size);

void top_net(data_t in[],int &result);



int main_load();
int main_conv_test_output();
int main_img();
int main_c();
# 2 "c_cnn/top.cpp" 2



void top_net(data_t in[], int &result){

_ssdm_op_SpecInterface(0, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(in, "m_axi", 0, 0, "", 0, 99999999, "gmem", "slave", "", 16, 16, 16, 16, "", "");
_ssdm_op_SpecInterface(result, "m_axi", 0, 0, "", 0, 99999999, "gmem", "slave", "", 16, 16, 16, 16, "", "");



 data_t c1_output[C1_OUTPUT_SIZE];
 data_t p1_output[P1_OUTPUT_SIZE];
 data_t c2_output[C2_OUTPUT_SIZE];
 data_t p2_output[P2_OUTPUT_SIZE];
 data_t c3_output[C3_OUTPUT_SIZE];
 data_t c4_output[C4_OUTPUT_SIZE];
 data_t c5_output[C5_OUTPUT_SIZE];
# 31 "c_cnn/top.cpp"
 const data_t c1_weight[6*1*5*5]={

# 1 "c_cnn/param/conv1.weight.h" 1
0.006415897514671087,
-0.18514826893806458,
-0.20590552687644958,
-0.1394580900669098,
-0.13566844165325165,
0.028393911197781563,
0.09801919013261795,
-0.1489766538143158,
-0.2405436784029007,
-0.07519018650054932,
-0.07377889752388,
-0.0723395049571991,
0.04553162679076195,
-0.14786820113658905,
-0.024203822016716003,
-0.08653411269187927,
0.053190287202596664,
0.21049454808235168,
0.05569206550717354,
0.05895199626684189,
0.25314316153526306,
0.03536462411284447,
0.16136221587657928,
0.3244289457798004,
0.15431813895702362,
0.031411610543727875,
-0.0839940533041954,
0.0995885357260704,
-0.049518734216690063,
0.020763883367180824,
-0.133154958486557,
-0.05435226485133171,
-0.16622696816921234,
-0.03782373666763306,
0.19920729100704193,
-0.15884828567504883,
-0.03309691697359085,
-0.21759279072284698,
-0.190839946269989,
0.2285265326499939,
-0.13526946306228638,
-0.04558579996228218,
-0.18878881633281708,
-0.03726521134376526,
0.3143317997455597,
0.022693218663334846,
-0.13563814759254456,
-0.03699319437146187,
0.1627381592988968,
0.2683591842651367,
0.1384378969669342,
-0.0845380574464798,
0.11570116877555847,
-0.110309898853302,
-0.028408223763108253,
-0.07925072312355042,
0.2949436902999878,
0.1639648675918579,
-0.3151896893978119,
-0.28560662269592285,
0.05132782831788063,
0.08045783638954163,
0.365163654088974,
0.059236444532871246,
-0.32930275797843933,
-0.1751084327697754,
0.052779171615839005,
0.11253727227449417,
0.2632543742656708,
-0.21168042719364166,
0.03942391276359558,
-0.1361784040927887,
0.17317786812782288,
0.2854430675506592,
0.18798573315143585,
0.19418668746948242,
-0.0313117690384388,
0.10711043328046799,
-0.19926553964614868,
0.0131920101121068,
-0.029931122437119484,
0.1581529974937439,
0.093594029545784,
0.3174722194671631,
-0.040897682309150696,
0.12469308078289032,
0.20262397825717926,
0.32500097155570984,
0.24774742126464844,
0.2377544641494751,
-0.07490445673465729,
-0.17883366346359253,
-0.05617883428931236,
-0.11730115115642548,
0.09185764938592911,
-0.3328164219856262,
-0.28577718138694763,
-0.29064932465553284,
-0.20487600564956665,
0.05446670204401016,
0.06896844506263733,
0.021064210683107376,
-0.06099765747785568,
-0.02220909111201763,
0.14365552365779877,
-0.28351765871047974,
-0.28238731622695923,
-0.2465893030166626,
0.09018949419260025,
0.16453294456005096,
-0.11465724557638168,
0.08542190492153168,
0.18775148689746857,
0.033381715416908264,
-0.08402572572231293,
0.28147199749946594,
0.15508440136909485,
0.20214465260505676,
-0.046424124389886856,
-0.011934981681406498,
0.027895990759134293,
0.04271803796291351,
-0.16469524800777435,
-0.17791062593460083,
0.07084309309720993,
-0.05533505603671074,
0.18939249217510223,
0.24005912244319916,
0.20728953182697296,
-0.03618974611163139,
0.1624700129032135,
0.09584539383649826,
0.1825660765171051,
-0.036011721938848495,
-0.02994140237569809,
0.015268675982952118,
0.23248274624347687,
0.15714430809020996,
-0.18463149666786194,
-0.23878011107444763,
0.21291930973529816,
-0.053527362644672394,
0.023429354652762413,
-0.07354171574115753,
-0.04846668243408203,
-0.03499852493405342,
0.061086755245923996,
0.006563479080796242,
-0.0688222199678421,
-0.27617108821868896
# 33 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c1_weight);
# 31 "c_cnn/top.cpp"

 const data_t c2_weight[16*6*5*5]={

# 1 "c_cnn/param/conv2.weight.h" 1
0.06732871383428574,
0.09095335006713867,
-0.03219727799296379,
-0.007510821335017681,
0.12347128987312317,
0.04712345823645592,
-0.18833643198013306,
-0.06166063994169235,
0.056015677750110626,
0.029803520068526268,
-0.18317565321922302,
-0.014080677181482315,
0.09142006933689117,
0.07405225932598114,
-0.1263250857591629,
0.0600765123963356,
0.15871821343898773,
0.09090995788574219,
-0.00017491940525360405,
0.18291480839252472,
-0.04768012464046478,
-0.0456426702439785,
-0.01764661632478237,
0.03053917922079563,
0.08037842810153961,
-0.014386479742825031,
-0.05213487520813942,
-0.0554988719522953,
0.1067587360739708,
0.106177419424057,
0.032126519829034805,
-0.12235976755619049,
0.09107504040002823,
0.15161210298538208,
-0.0847378671169281,
-0.03185145929455757,
-0.11456629633903503,
0.11010298132896423,
0.11393573135137558,
-0.09099775552749634,
-0.00705114658921957,
-0.013322784565389156,
-0.010790051892399788,
-0.02102235145866871,
-0.09429413080215454,
-0.04559796303510666,
-0.23688116669654846,
-0.20718401670455933,
-0.05209297314286232,
-0.18270941078662872,
-0.030292410403490067,
0.017732255160808563,
-0.1486613154411316,
-0.1501632183790207,
-0.15101604163646698,
-0.0031236810609698296,
-0.04059947654604912,
-0.091212198138237,
-0.13301952183246613,
-0.09875955432653427,
-0.0807083398103714,
0.11441449075937271,
-0.1502021849155426,
0.05674983933568001,
0.1580941528081894,
-0.06574568897485733,
-0.019060233607888222,
-0.03558189049363136,
0.10033710300922394,
0.21621963381767273,
0.0012521299067884684,
-0.10099329054355621,
0.021904341876506805,
-0.021613026037812233,
0.1881919652223587,
0.11635468900203705,
-0.05264334753155708,
-0.027602799236774445,
-0.08348121494054794,
-0.19360007345676422,
-0.08507198840379715,
-0.14595574140548706,
0.04252036660909653,
-0.13447406888008118,
0.003925293684005737,
0.02997039444744587,
-0.09558708220720291,
-0.12667131423950195,
-0.15007777512073517,
-0.053871218115091324,
-0.06865815073251724,
-0.1582077145576477,
-0.08536966890096664,
0.049113258719444275,
0.0787043571472168,
0.035212498158216476,
-0.03538098558783531,
-0.028711196035146713,
0.17957401275634766,
0.20071180164813995,
-0.10779189318418503,
0.0454595647752285,
0.0581701397895813,
-0.17075027525424957,
0.1005355715751648,
0.0967852920293808,
0.08951298892498016,
-0.10450545698404312,
0.03872907534241676,
-0.04240668937563896,
0.14711923897266388,
-0.19852624833583832,
-0.06496509164571762,
0.044697340577840805,
-0.012648716568946838,
-0.0078066070564091206,
-0.09361351281404495,
-0.00803674291819334,
-0.013346569612622261,
-0.12353578954935074,
0.046215347945690155,
-0.0035840095952153206,
-0.020250868052244186,
0.042581818997859955,
0.01441111508756876,
0.09665662050247192,
0.1319086104631424,
0.10383576899766922,
0.013318179175257683,
-0.10904917865991592,
0.09739323705434799,
0.1951632797718048,
0.04137692600488663,
-0.025183018296957016,
0.051283035427331924,
0.11287908256053925,
0.19184154272079468,
-0.05858062580227852,
-0.011656518094241619,
0.16103821992874146,
0.011504392139613628,
-0.062416475266218185,
-0.11252930015325546,
0.004942869767546654,
-0.061237841844558716,
-0.004031891003251076,
0.02104966901242733,
-0.0721484124660492,
-0.04836728051304817,
-0.014820786193013191,
-0.021938415244221687,
0.013340292498469353,
-0.03312985971570015,
-0.031097877770662308,
-0.029564661905169487,
-0.00825342908501625,
0.01679774560034275,
-0.015109986998140812,
-0.10147280991077423,
0.1495855301618576,
-0.047318652272224426,
-0.056917957961559296,
-0.03992106765508652,
-0.03173445537686348,
0.06955936551094055,
-0.08893721550703049,
-0.12226846814155579,
-0.07331747561693192,
0.06387203186750412,
-0.00017608013877179474,
0.004804094787687063,
0.023618513718247414,
-0.06042942777276039,
-0.01139896735548973,
0.0009301595273427665,
-0.03720702603459358,
-0.04514399170875549,
-0.08129755407571793,
-0.04910234361886978,
0.0646229013800621,
0.01846514642238617,
-0.06659867614507675,
-0.04205309972167015,
0.01941097155213356,
0.11179301142692566,
0.043007589876651764,
-0.04260773956775665,
-0.10681720077991486,
-0.022194262593984604,
0.14785298705101013,
0.06081011891365051,
0.04631250351667404,
-0.007308230735361576,
-0.09264688193798065,
0.0688297301530838,
-0.11582421511411667,
0.03538529574871063,
-0.1023644283413887,
-0.1148579865694046,
-0.01094812247902155,
0.07599492371082306,
0.05849190801382065,
0.04415886104106903,
-0.04957513511180878,
0.039902132004499435,
-0.010594234801828861,
0.08644891530275345,
0.1705033779144287,
-0.052548520267009735,
0.012633200734853745,
-0.01841091364622116,
-0.03917061537504196,
0.1256437599658966,
-0.04521492123603821,
-0.015401897020637989,
-0.13312338292598724,
-0.04551972821354866,
0.1439073234796524,
0.039798181504011154,
0.05247071757912636,
0.022111298516392708,
0.002143228193745017,
0.1400354653596878,
0.02867920696735382,
-0.07392364740371704,
0.04495933651924133,
-0.0063948421739041805,
-0.15753813087940216,
-0.07043340057134628,
0.04220708832144737,
0.05773317441344261,
-0.06388011574745178,
-0.11026386171579361,
-0.07924442738294601,
0.11637014150619507,
0.02036777324974537,
-0.1051783412694931,
-0.11001145839691162,
-0.013351642526686192,
0.03337148204445839,
-0.08919483423233032,
-0.030319618061184883,
0.04390009865164757,
-0.08234106004238129,
-0.00039388483855873346,
0.02665024995803833,
0.030791783705353737,
-0.016835680231451988,
-0.04329169914126396,
-0.01377381756901741,
0.05806386470794678,
0.011041100136935711,
-0.18557724356651306,
-0.07426086813211441,
-0.021890943869948387,
-0.006384768057614565,
-0.1104779839515686,
-0.2351333349943161,
-0.15070974826812744,
-0.025524022057652473,
0.1461247354745865,
-0.021415753290057182,
-0.17676308751106262,
-0.08578155934810638,
-0.05509701743721962,
0.10997495800256729,
-0.09332264214754105,
-0.11104846745729446,
-0.1063791960477829,
-0.06474455446004868,
0.04189617559313774,
0.13753968477249146,
-0.14186759293079376,
-0.10413530468940735,
-0.015699777752161026,
0.007072404492646456,
0.023050248622894287,
0.019396543502807617,
0.030550606548786163,
0.06644687801599503,
-0.0943540707230568,
-0.046474769711494446,
0.0798763781785965,
0.08528827130794525,
-0.04244494438171387,
0.005881552118808031,
-0.04871663823723793,
0.045173875987529755,
0.041912078857421875,
-0.0236645694822073,
-0.013795777224004269,
0.051457054913043976,
0.12801116704940796,
-0.02306935377418995,
0.052751097828149796,
0.06224413588643074,
0.007397946901619434,
0.05473637208342552,
0.03237872198224068,
-0.007268979214131832,
-0.00957944430410862,
-0.1251518577337265,
0.0769956037402153,
0.0766114592552185,
0.03395421802997589,
-0.08406233042478561,
-0.1517491638660431,
-0.07060406357049942,
-0.17738185822963715,
-0.1767967939376831,
0.2900468111038208,
0.2260219007730484,
0.038928721100091934,
-0.15793782472610474,
-0.21658441424369812,
0.06720154732465744,
0.22715772688388824,
0.14652767777442932,
0.11138307303190231,
0.04577481374144554,
0.019012905657291412,
0.09348996728658676,
0.21421433985233307,
0.2247200459241867,
0.11222714930772781,
-0.07548442482948303,
-0.03761851042509079,
-0.03170252963900566,
0.028437409549951553,
0.07245096564292908,
-0.1661955714225769,
-0.10649954527616501,
-0.0030670452397316694,
-0.0371396541595459,
0.005454275291413069,
-0.09229583293199539,
-0.09321173280477524,
0.01911180280148983,
-0.03004443645477295,
0.05148542299866676,
-0.13003750145435333,
-0.084346242249012,
-0.06932274252176285,
-0.04069021716713905,
0.031059667468070984,
-0.1159730926156044,
-0.15956319868564606,
-0.13306467235088348,
-0.1368657499551773,
-0.13244383037090302,
-0.09908123314380646,
-0.08326275646686554,
-0.010836781933903694,
-0.1774495244026184,
-0.031054280698299408,
-0.13979148864746094,
-0.15881261229515076,
-0.23590587079524994,
-0.19630080461502075,
0.02609262429177761,
0.10109630972146988,
0.04344671592116356,
-0.09964564442634583,
-0.07956073433160782,
-0.13868571817874908,
0.08421395719051361,
0.10678365081548691,
0.2792096734046936,
0.023925667628645897,
-0.10748624056577682,
0.12091020494699478,
0.1512140929698944,
0.24170221388339996,
0.24668844044208527,
0.08245109766721725,
-0.006444927770644426,
0.038197070360183716,
0.10128095000982285,
0.06736160814762115,
0.0918043851852417,
-0.09123776108026505,
0.035775091499090195,
0.006256982684135437,
0.019549576565623283,
0.16992215812206268,
-0.07817989587783813,
-0.17441226541996002,
-0.19011598825454712,
-0.011906000785529613,
0.1370227187871933,
0.170742928981781,
0.034678373485803604,
-0.20687270164489746,
-0.1310705542564392,
-0.22591076791286469,
0.14263015985488892,
0.1941288262605667,
0.09132044017314911,
0.012121359817683697,
-0.11949858069419861,
-0.10241532325744629,
-0.11740244179964066,
-0.0561530701816082,
0.00685459841042757,
0.09509902447462082,
-0.01995767652988434,
-0.09288052469491959,
-0.12329210340976715,
-0.08183672279119492,
0.07889103889465332,
0.048375073820352554,
0.1079048290848732,
0.05396578460931778,
-0.08356775343418121,
-0.09492603689432144,
-0.02881099097430706,
0.003793274750933051,
0.08845536410808563,
0.07321453839540482,
0.03678109869360924,
0.034216105937957764,
0.0377589575946331,
0.013904280960559845,
-0.15166079998016357,
-0.08930537849664688,
-0.1653510481119156,
-0.07516007125377655,
-0.031359393149614334,
-0.06077033281326294,
0.02402939833700657,
0.012744327075779438,
-0.008234425447881222,
-0.13249711692333221,
-0.07638594508171082,
0.008048886433243752,
-0.05929669365286827,
-0.06788433343172073,
-0.08301180601119995,
-0.12532232701778412,
0.010145029053092003,
-0.012731585651636124,
-0.0305135827511549,
0.0033032812643796206,
-0.08667433261871338,
-0.0360863171517849,
0.03388260304927826,
0.10702299326658249,
0.05916394293308258,
0.10014176368713379,
-0.11224429309368134,
-0.00694055063650012,
-0.027529044076800346,
-0.061322540044784546,
0.020618170499801636,
-0.011501522734761238,
-0.03918101638555527,
-0.10638844221830368,
-0.03246084973216057,
0.025812998414039612,
-0.11918031424283981,
0.04382900893688202,
0.04000075161457062,
-0.12252448499202728,
-0.08250872790813446,
-0.06398077309131622,
-0.1574743092060089,
-0.05627216398715973,
-0.10815677046775818,
0.15144027769565582,
0.18550506234169006,
-0.09901190549135208,
0.0017865968402475119,
0.06953675299882889,
0.1053224503993988,
-0.10141964256763458,
-0.019832128658890724,
-0.09043579548597336,
-0.08984008431434631,
0.05821368470788002,
-0.016637448221445084,
0.005532878451049328,
-0.040685202926397324,
0.03513055294752121,
-0.16597947478294373,
-0.07395559549331665,
-0.022962484508752823,
-0.09476981312036514,
-0.03005223535001278,
-0.16633129119873047,
-0.0834140032529831,
-0.060729384422302246,
-0.16028602421283722,
-0.12336038798093796,
-0.07112284004688263,
-0.06649495661258698,
-0.02299061417579651,
-0.010776946321129799,
-0.06216936931014061,
0.015382454730570316,
-0.05736302584409714,
-0.07763100415468216,
0.08866275101900101,
0.010128199122846127,
0.04330836609005928,
0.07846543937921524,
-0.08443447202444077,
-0.014211009256541729,
-0.046518538147211075,
-0.09072405099868774,
0.018705813214182854,
-0.10360674560070038,
-0.09649363905191422,
-0.11522428691387177,
0.09877858310937881,
-0.01636354625225067,
-0.17210142314434052,
-0.022453928366303444,
0.1325451284646988,
0.08859901130199432,
0.052847981452941895,
-0.08287191390991211,
0.1123473197221756,
-0.02788437344133854,
0.02480584941804409,
0.08951106667518616,
0.021320132538676262,
-0.042157113552093506,
-0.1113981232047081,
-0.019411593675613403,
-0.09663791209459305,
-0.04705265164375305,
0.050064168870449066,
0.00509938457980752,
-0.09790579229593277,
0.06302392482757568,
-0.07289817929267883,
-0.07647044956684113,
0.08890943229198456,
0.035197194665670395,
0.09116538614034653,
0.11619729548692703,
0.1781844049692154,
0.051123179495334625,
0.09981177002191544,
-0.006764845456928015,
-0.060307346284389496,
0.018902258947491646,
-0.15325011312961578,
0.12297926843166351,
0.2035510092973709,
0.10634811222553253,
0.014729196205735207,
-0.10602711886167526,
0.020286431536078453,
0.05682408809661865,
0.069882333278656,
0.022052684798836708,
-0.04745469614863396,
0.04856155440211296,
0.04468119144439697,
0.018983200192451477,
0.15048931539058685,
0.20905520021915436,
0.12636160850524902,
-0.1691742092370987,
0.2042285054922104,
0.16496723890304565,
0.0039542121812701225,
-0.07533925771713257,
0.1651884913444519,
-0.1478404998779297,
-0.1063389927148819,
0.10453769564628601,
0.23560865223407745,
0.10803622752428055,
0.01752825267612934,
-0.08564706891775131,
0.06330778449773788,
-0.0036407343577593565,
0.03944063186645508,
0.025117557495832443,
0.03460194543004036,
0.02332393452525139,
-0.06443877518177032,
0.0893179252743721,
0.0033300837967544794,
-0.06368299573659897,
0.02749268151819706,
0.11152103543281555,
0.08365555852651596,
0.0620197169482708,
0.1414330005645752,
0.14116723835468292,
-0.025002140551805496,
-0.11795855313539505,
0.027938636019825935,
-0.05272696912288666,
-0.12526977062225342,
-0.1434982866048813,
0.07382824271917343,
0.011229731142520905,
-0.012376016937196255,
0.10951363295316696,
0.09550483524799347,
0.10514726489782333,
0.03663051128387451,
0.10168401896953583,
0.14408496022224426,
0.1941143125295639,
0.07965264469385147,
-0.04973871633410454,
-0.11051519960165024,
-0.12935015559196472,
-0.04260070249438286,
-0.03614385426044464,
0.06947816163301468,
0.043029412627220154,
-0.13894520699977875,
-0.06887638568878174,
-0.009690913371741772,
0.06650566309690475,
0.031105920672416687,
0.13582363724708557,
0.10327541083097458,
-0.13930562138557434,
-0.054180119186639786,
-0.07809089124202728,
-0.0969458594918251,
-0.036089349538087845,
-0.019293176010251045,
-0.1022009626030922,
-0.02332143299281597,
-0.09599988162517548,
-0.18147699534893036,
-0.023802638053894043,
-0.13685353100299835,
-0.05965741351246834,
-0.16119226813316345,
-0.2226637899875641,
-0.22253666818141937,
-0.13587728142738342,
-0.048353079706430435,
0.009008067660033703,
0.06016997620463371,
-0.0070420182310044765,
-0.09852076321840286,
-0.06122500076889992,
-0.034268755465745926,
0.0256727896630764,
0.024127135053277016,
0.18905764818191528,
0.1493748128414154,
0.08956758677959442,
0.0016828026855364442,
-0.01470952294766903,
0.029385659843683243,
0.07434555888175964,
0.004954751115292311,
0.07589253783226013,
-0.03110337443649769,
-0.11127596348524094,
-0.2330082356929779,
-0.07714324444532394,
-0.04710599407553673,
-0.015571272000670433,
0.0005393342580646276,
0.01750313490629196,
-0.09142954647541046,
-0.1860102415084839,
-0.1743437647819519,
0.019239481538534164,
0.07855343818664551,
-0.013737395405769348,
-0.2539750933647156,
-0.12412498891353607,
-0.008898825384676456,
0.03156121075153351,
0.026346523314714432,
0.006609780248254538,
-0.07879408448934555,
0.14776292443275452,
0.1600625365972519,
0.1814214438199997,
0.09009198099374771,
0.10549985617399216,
-0.007417522370815277,
0.22068814933300018,
0.32482829689979553,
0.4057900309562683,
0.27410027384757996,
-0.0330328494310379,
-0.22227804362773895,
-0.08071542531251907,
0.041829563677310944,
0.07474687695503235,
-0.07887540757656097,
0.0026684945914894342,
-0.07338806241750717,
-0.12101681530475616,
-0.11515134572982788,
0.07743358612060547,
0.11614250391721725,
0.019083723425865173,
0.05392023175954819,
0.03886345773935318,
0.035502735525369644,
0.035648688673973083,
0.09020552784204483,
0.11278965324163437,
0.07763970643281937,
-0.03077033907175064,
0.06800894439220428,
-0.016021423041820526,
-0.022360587492585182,
0.11919637769460678,
0.026189234107732773,
-0.13509608805179596,
-0.11011667549610138,
-0.08978717029094696,
0.05978350341320038,
-0.05000552907586098,
-0.14264968037605286,
0.022428324446082115,
0.018487989902496338,
-0.0781405121088028,
-0.02619413658976555,
-0.03096104972064495,
0.03729010745882988,
-0.06070096418261528,
-0.10791078954935074,
-0.06350960582494736,
-0.08830685168504715,
-0.06051762402057648,
-0.02698216773569584,
-0.06931903213262558,
-0.011891433037817478,
-0.010651391930878162,
0.06386496871709824,
0.09237932413816452,
0.09220811724662781,
-0.06337281316518784,
0.04482299089431763,
-0.05330492556095123,
-0.07060206681489944,
0.011930971406400204,
-0.058344487100839615,
-0.0928061380982399,
-0.23107938468456268,
-0.05490056425333023,
-0.04811326786875725,
0.013244042173027992,
0.00027525846962817013,
0.06621818989515305,
0.02701583318412304,
0.13954712450504303,
-0.008554711006581783,
0.04313487187027931,
-0.08918283879756927,
-0.07721475511789322,
-0.006383795756846666,
-0.01385597512125969,
-0.0810399204492569,
-0.09114748984575272,
0.036933526396751404,
-0.047374654561281204,
-0.029604269191622734,
-0.2454708218574524,
-0.11620647460222244,
0.028306325897574425,
0.01843668520450592,
-0.07907773554325104,
-0.11635734140872955,
-0.04042062908411026,
0.08706821501255035,
0.2173566073179245,
0.026965487748384476,
0.038119565695524216,
-0.09342266619205475,
-0.009003161452710629,
-0.02612592652440071,
0.09054405242204666,
-0.002886065049096942,
-0.2119487226009369,
-0.004866190254688263,
-0.057632990181446075,
0.03476252034306526,
-0.041484519839286804,
-0.19711267948150635,
-0.11103538423776627,
0.00946770515292883,
0.13077926635742188,
0.05743933841586113,
-0.14139790832996368,
-0.09743839502334595,
-0.06686437129974365,
0.08920863270759583,
0.008306024596095085,
-0.15835332870483398,
-0.04903575778007507,
0.0509626530110836,
-0.01276293396949768,
0.008550437167286873,
-0.04182996228337288,
-0.06660661101341248,
0.11848493665456772,
-0.13355916738510132,
0.02206192910671234,
0.12715590000152588,
-0.10147137194871902,
0.07795463502407074,
-0.239620178937912,
0.10199610143899918,
0.10985199362039566,
-0.08235862106084824,
0.020888686180114746,
-0.16434632241725922,
0.017747914418578148,
-0.015144034288823605,
-0.049841638654470444,
-0.058907125145196915,
-0.12570738792419434,
-0.011230398900806904,
0.007881775498390198,
0.03479284420609474,
-0.01499988604336977,
-0.03468754142522812,
-0.004732131026685238,
-0.11771917343139648,
0.0716167464852333,
0.09508506953716278,
0.059636518359184265,
0.0047357711009681225,
-0.23033632338047028,
-0.019537165760993958,
0.04087462276220322,
0.022325817495584488,
-0.12678061425685883,
-0.11238454282283783,
-0.16367439925670624,
0.032808709889650345,
-0.06075628846883774,
-0.04441230744123459,
0.005643531214445829,
0.012779466807842255,
0.06413404643535614,
-0.05874192714691162,
-0.02146986313164234,
-0.02202877774834633,
-0.0692291408777237,
-0.054062619805336,
-0.08833853155374527,
-0.08689714223146439,
-0.16615284979343414,
-0.1163814589381218,
0.02777380868792534,
-0.15066947042942047,
-0.09089379012584686,
-0.15151040256023407,
-0.052377816289663315,
0.07428953796625137,
0.019784362986683846,
-0.06264219433069229,
-0.25580570101737976,
-0.024509573355317116,
-0.011899127624928951,
0.06605081260204315,
-0.027673983946442604,
-0.1278911679983139,
-0.15901786088943481,
-0.08157690614461899,
-0.064482681453228,
-0.03969342261552811,
-0.17531311511993408,
-0.08387113362550735,
0.02180355042219162,
-0.13345326483249664,
-0.10390886664390564,
0.016294997185468674,
-0.04966617375612259,
-0.06610860675573349,
-0.03906472027301788,
0.07362762093544006,
0.12951338291168213,
0.1154392659664154,
0.06428871303796768,
-0.1305108517408371,
-0.026247667148709297,
0.11391495913267136,
0.04362984746694565,
-0.006222151219844818,
-0.07782988995313644,
0.006827461067587137,
0.1433633267879486,
0.044385261833667755,
0.04496617987751961,
-0.04831630736589432,
0.17223332822322845,
0.1306588500738144,
-0.054727330803871155,
-0.10689898580312729,
-0.014303674921393394,
0.03047161176800728,
0.1382228434085846,
0.27675068378448486,
0.2895907461643219,
0.12269802391529083,
0.18847478926181793,
0.16947250068187714,
0.019776197150349617,
0.00610565859824419,
0.07431674003601074,
0.06879686564207077,
-0.04967470467090607,
0.06831906735897064,
0.14053310453891754,
-0.1445969045162201,
-0.05307525396347046,
0.011279555037617683,
0.026341164484620094,
0.005875334609299898,
-0.1508222073316574,
-0.07525742799043655,
-0.019313693046569824,
0.030653441324830055,
-0.006758765317499638,
-0.08901901543140411,
0.07415641844272614,
0.09683729708194733,
-0.01881745643913746,
0.00629259692505002,
0.08385848999023438,
-0.040253520011901855,
-0.12033761292695999,
-0.1903679072856903,
-0.20813903212547302,
-0.03127792850136757,
-0.03836258128285408,
-0.13078926503658295,
-0.19879399240016937,
-0.08414344489574432,
0.015259158797562122,
-0.24054576456546783,
-0.14039601385593414,
-0.059173714369535446,
-0.06728453189134598,
-0.06853882223367691,
-0.10876885801553726,
-0.09552506357431412,
-0.08688697963953018,
0.010619631968438625,
-0.07122954726219177,
-0.12156213074922562,
-0.16971732676029205,
-0.10111196339130402,
-0.10005044937133789,
-0.057901639491319656,
-0.09381875395774841,
-0.11920560896396637,
-0.04602965712547302,
-0.07801222056150436,
0.02136165462434292,
0.055019181221723557,
-0.011026893742382526,
0.05500516667962074,
-0.04724056273698807,
-0.03560671582818031,
0.16385257244110107,
0.10439476370811462,
0.0013742870651185513,
-0.09575174003839493,
-0.04080959036946297,
0.2576380968093872,
0.06715427339076996,
0.12391838431358337,
0.10427626222372055,
-0.07724187523126602,
-0.19154755771160126,
-0.1709170937538147,
-0.09481209516525269,
-0.059241458773612976,
-0.20502831041812897,
-0.12734591960906982,
-0.018463924527168274,
0.13465818762779236,
0.126547172665596,
-0.025942601263523102,
-0.07747127115726471,
0.14060156047344208,
0.10292951762676239,
0.07389470934867859,
-0.013859108090400696,
0.13050301373004913,
0.13443849980831146,
0.044250305742025375,
0.10128263384103775,
-0.12532047927379608,
0.01433024276047945,
0.10594063252210617,
-0.039397746324539185,
-0.01457979902625084,
-0.2446993887424469,
-0.2333308905363083,
-0.0916166827082634,
0.04813634231686592,
0.15888819098472595,
-0.06185092404484749,
0.09989634901285172,
0.13572359085083008,
0.16540691256523132,
0.0579661950469017,
-0.103305883705616,
0.006721974816173315,
0.13425712287425995,
0.0742851048707962,
-0.02344730868935585,
0.06536008417606354,
-0.03102828934788704,
-0.01890980824828148,
0.0029588732868433,
0.019922057166695595,
-0.04905569925904274,
-0.11819842457771301,
-0.061431217938661575,
0.14622601866722107,
0.0012190626002848148,
-0.06195398420095444,
0.0114516019821167,
-0.09660066664218903,
-0.1619950383901596,
-0.21666564047336578,
-0.1056329756975174,
-0.12396563589572906,
-0.06136474385857582,
0.009823521599173546,
0.12555156648159027,
0.06726762652397156,
0.13306552171707153,
0.13804718852043152,
0.0327308364212513,
0.04919479042291641,
0.07753930985927582,
0.1730159968137741,
0.11771533638238907,
-0.09633295983076096,
-0.12398981302976608,
-0.044196560978889465,
-0.04402843490242958,
-0.0004279976710677147,
-0.039089009165763855,
-0.0035421838983893394,
-0.074069082736969,
-0.07926283776760101,
0.11427295207977295,
-0.07316181808710098,
-0.22933630645275116,
-0.11928491294384003,
-0.037042342126369476,
-0.09119930118322372,
0.1415463238954544,
0.221505805850029,
-0.09640230238437653,
0.0059012072160840034,
0.13278086483478546,
0.0712825208902359,
-0.006378448102623224,
0.07305525243282318,
0.1360643357038498,
0.09183228015899658,
-0.1056414544582367,
-0.05924073979258537,
-0.057319846004247665,
-0.07928738743066788,
-0.008677070960402489,
0.10802031308412552,
0.1223694384098053,
-0.04256254807114601,
-0.04440673068165779,
-0.1481265276670456,
-0.2363758683204651,
-0.019019674509763718,
-0.04273808375000954,
-0.19022615253925323,
-0.08079096674919128,
-0.1482452005147934,
-0.020995162427425385,
-0.06035800278186798,
0.04797135666012764,
-0.001211029477417469,
-0.07175937294960022,
-0.15653355419635773,
0.051670994609594345,
0.003997762221843004,
-0.09691668301820755,
-0.059048134833574295,
-0.053645070642232895,
-0.1311982274055481,
-0.15164299309253693,
-0.03723209723830223,
0.0709976777434349,
0.0036489570047706366,
0.10924412310123444,
0.17898039519786835,
0.20934812724590302,
0.06615005433559418,
-0.06353859603404999,
-0.030339078977704048,
-0.006813062820583582,
0.1718139797449112,
0.157145693898201,
0.07926422357559204,
0.011102885007858276,
-0.022356601431965828,
-0.02592621184885502,
0.0786885991692543,
-0.05570434406399727,
-0.02144336886703968,
-0.013715608045458794,
-0.11660733073949814,
-0.12383171916007996,
-0.08115632832050323,
-0.12275953590869904,
-0.007296075113117695,
-0.002059271791949868,
-0.0957956314086914,
-0.004689136520028114,
0.09224365651607513,
-0.003413296537473798,
0.04813676327466965,
-0.10786277800798416,
-0.05146199092268944,
0.05182681232690811,
0.16111387312412262,
0.3296479284763336,
0.19606006145477295,
-0.09913831949234009,
-0.0524861142039299,
-0.024373900145292282,
0.12633016705513,
0.1486218273639679,
0.17974193394184113,
-0.09801677614450455,
-0.2151070237159729,
-0.09638243913650513,
0.07468093186616898,
0.027855681255459785,
-0.0830816701054573,
0.040965694934129715,
0.02247355692088604,
-0.13895133137702942,
-0.10512574762105942,
-0.007372431457042694,
-0.157459557056427,
0.08019048720598221,
0.10384982824325562,
-0.05063851177692413,
-0.05238458141684532,
0.07358705997467041,
0.08314834535121918,
-0.12775424122810364,
-0.0379248671233654,
-0.037591755390167236,
0.04729536920785904,
-0.012685890309512615,
0.021084805950522423,
0.07777319103479385,
-0.12810645997524261,
0.07972647249698639,
0.2314194291830063,
0.09870713949203491,
-0.07385923713445663,
0.09424404799938202,
0.058642107993364334,
-0.003508805762976408,
-0.06874724477529526,
-0.01021899376064539,
0.02052660472691059,
0.07917056232690811,
-0.08644231408834457,
0.017666377127170563,
-0.03536565974354744,
0.005551123525947332,
-0.01735922321677208,
-0.10772289335727692,
-0.04240366071462631,
-0.08134576678276062,
-0.008385105058550835,
0.05195140838623047,
-0.02465881034731865,
-0.18180274963378906,
-0.09319981187582016,
0.019263610243797302,
-0.02626476064324379,
0.04976193979382515,
0.14453919231891632,
0.0972551479935646,
0.09134446829557419,
0.02952311560511589,
0.0229654498398304,
-0.043429482728242874,
-0.03426370024681091,
0.14366483688354492,
0.06878172606229782,
0.0819457545876503,
0.03901054337620735,
-0.04046778008341789,
-0.1942974030971527,
-0.09954610466957092,
0.11558187007904053,
0.002528403652831912,
-0.132818341255188,
-0.02514529600739479,
-0.0563470795750618,
-0.10381899774074554,
0.06927100569009781,
0.21270284056663513,
0.04910147190093994,
0.004791493993252516,
-0.008683716878294945,
0.11252961307764053,
0.14429593086242676,
0.07059046626091003,
-0.007380709517747164,
-0.03894834965467453,
0.09229499846696854,
0.028963133692741394,
-0.049089934676885605,
-0.05733693018555641,
-0.10784998536109924,
-0.03578281030058861,
-0.2206992357969284,
-0.14587807655334473,
-0.14925213158130646,
-0.019837796688079834,
-0.036933764815330505,
-0.1380358785390854,
0.005073579493910074,
-0.01952005922794342,
-0.08153685182332993,
0.05751561373472214,
0.08772992342710495,
0.027664784342050552,
0.0038652929943054914,
0.09519726037979126,
0.06169266253709793,
0.10688681900501251,
-0.016687685623764992,
-0.02455812878906727,
0.07061734050512314,
0.05791492015123367,
-0.0775151401758194,
-0.05328919366002083,
0.01344483532011509,
-0.09523621946573257,
-0.020530765876173973,
-0.12269143760204315,
-0.021222546696662903,
-0.08379462361335754,
-0.09666124731302261,
-0.18451422452926636,
-0.10356325656175613,
-0.014495470561087132,
-0.040745239704847336,
-0.23044346272945404,
-0.1377456933259964,
-0.07138722389936447,
0.08801013976335526,
-0.06935927271842957,
-0.21044662594795227,
-0.2757887840270996,
-0.15496787428855896,
0.10555785149335861,
0.04805188253521919,
-0.18440991640090942,
-0.13558988273143768,
-0.03922399878501892,
-0.03756771609187126,
-0.07828190177679062,
0.03561848774552345,
0.07386399060487747,
0.12826789915561676,
0.15164493024349213,
0.25759464502334595,
0.10128244012594223,
0.18468374013900757,
0.024466097354888916,
-0.11988727748394012,
0.02298443205654621,
-0.031887490302324295,
0.019992230460047722,
-0.11856507509946823,
0.008370653726160526,
-0.11252536624670029,
-0.16049106419086456,
-0.13447818160057068,
0.01579856313765049,
-0.02136549912393093,
-0.11291252821683884,
-0.005849338602274656,
0.05238812416791916,
0.06880748271942139,
0.08293326199054718,
0.2090519368648529,
0.16711217164993286,
0.10791447013616562,
0.033179592341184616,
-0.03125307336449623,
-0.12696851789951324,
-0.004253299906849861,
-0.03831382468342781,
0.010595526546239853,
0.05907856673002243,
-0.050199154764413834,
-0.11623652279376984,
-0.23455247282981873,
-0.03248126804828644,
0.055727098137140274,
-0.049816422164440155,
-0.004430626519024372,
-0.006241360679268837,
0.08570509403944016,
-0.05219249427318573,
-0.033136993646621704,
-0.16019132733345032,
-0.126827210187912,
-0.006329121068120003,
-0.010823107324540615,
0.03436442092061043,
0.1224721372127533,
0.13019511103630066,
0.03863146901130676,
0.047788769006729126,
0.022252235561609268,
0.13468924164772034,
0.10284082591533661,
0.15127553045749664,
0.01941935531795025,
0.04262655973434448,
-0.047726307064294815,
0.04668185114860535,
0.004134935326874256,
-0.14360150694847107,
-0.1498529613018036,
0.016320157796144485,
-0.08351095765829086,
-0.13642489910125732,
0.03016679547727108,
-0.01450389251112938,
0.057158131152391434,
0.012398368678987026,
-0.028215087950229645,
0.002592658158391714,
-0.008596154861152172,
-0.0759948343038559,
0.007959325797855854,
0.0369638167321682,
-0.07454929500818253,
-0.053026795387268066,
0.055587928742170334,
0.010971428826451302,
-0.07598116993904114,
0.026619911193847656,
0.20547355711460114,
0.07624734193086624,
-0.03045748919248581,
-0.09027166664600372,
0.01591465249657631,
-0.0013140358496457338,
-0.05989355966448784,
-0.04177440330386162,
-0.05844075232744217,
0.03190448880195618,
-0.04326549544930458,
0.016587741672992706,
-0.011576236225664616,
0.08377019315958023,
-0.21059180796146393,
-0.14578329026699066,
-0.0319412536919117,
0.004769704770296812,
0.02717219851911068,
-0.12808291614055634,
0.07983478158712387,
0.04823540896177292,
0.04633871465921402,
-0.09037092328071594,
-0.0948704183101654,
0.05306965112686157,
0.06547215580940247,
-0.14301323890686035,
0.004780118819326162,
-0.05638312175869942,
-0.009165225550532341,
-0.17318549752235413,
-0.1291337013244629,
0.003481644671410322,
-0.0013712679501622915,
-0.11536068469285965,
-0.05712370574474335,
-0.042215004563331604,
-0.025121834129095078,
0.01322344969958067,
0.07337507605552673,
-0.09539453685283661,
-0.03390529379248619,
-0.05410468950867653,
-0.07672250270843506,
-0.01978672668337822,
-0.15234483778476715,
-0.09806407988071442,
0.08117992430925369,
-0.07197988778352737,
-0.10611855238676071,
-0.19858883321285248,
-0.11830252408981323,
0.06459561735391617,
-0.16322320699691772,
-0.11988179385662079,
-0.031903404742479324,
0.010550745762884617,
0.025215458124876022,
0.003260754980146885,
0.05564983934164047,
0.08393494784832001,
0.1032346785068512,
-0.04916964843869209,
-0.07929573953151703,
0.007228467613458633,
0.019093088805675507,
0.029426317662000656,
-0.046079110354185104,
-0.02917933277785778,
0.005203451495617628,
-0.1160869300365448,
-0.07873047143220901,
0.0650152638554573,
-0.04275200143456459,
-0.13721834123134613,
-0.1208309680223465,
-0.14033246040344238,
0.08473905920982361,
0.06643913686275482,
0.11963494122028351,
0.08007485419511795,
0.18086467683315277,
0.0641184076666832,
-0.05913640558719635,
-0.09561683982610703,
-0.090782530605793,
0.07975932955741882,
0.05840665102005005,
0.0809725746512413,
0.049568746238946915,
0.022966936230659485,
-0.02675151824951172,
0.028659751638770103,
-0.13241417706012726,
-0.24479740858078003,
0.038556892424821854,
0.10321052372455597,
0.047264255583286285,
-0.07278448343276978,
-0.0949186235666275,
0.2118799239397049,
0.1026827022433281,
0.03497738763689995,
-0.1437055915594101,
0.10943343490362167,
0.18715767562389374,
0.0542428232729435,
0.008723682723939419,
-0.03867901489138603,
-0.0375031977891922,
-0.05031708627939224,
0.09666264802217484,
0.1453755497932434,
0.058778129518032074,
0.008613784797489643,
-0.1063695102930069,
-0.12396078556776047,
-0.005736424122005701,
0.056416090577840805,
-0.027226872742176056,
-0.07570787519216537,
0.044627558439970016,
0.07961244881153107,
0.07777971774339676,
-0.02368040755391121,
-0.03222180902957916,
0.08616206049919128,
0.09716679155826569,
0.010848237201571465,
0.0010478220647200942,
0.06297411769628525,
0.11033003032207489,
-0.05615134537220001,
0.0473070852458477,
0.17634528875350952,
0.02081982046365738,
-0.11404859274625778,
-0.003289627842605114,
-0.029822424054145813,
0.001917059882543981,
0.09958252310752869,
-0.006655853241682053,
-0.09519503265619278,
-0.03757268562912941,
-0.04950982704758644,
-0.02371702529489994,
-0.110719695687294,
-0.13174806535243988,
0.027406446635723114,
0.012301774695515633,
-0.20833660662174225,
-0.02104313112795353,
-0.03626714646816254,
0.04886871576309204,
-0.1020669937133789,
-0.0993940606713295,
-0.09967415034770966,
-0.002585365902632475,
0.022331053391098976,
0.06347037851810455,
-0.006643759086728096,
0.01860642246901989,
0.15300127863883972,
-0.03204367309808731,
0.1308930516242981,
0.12721635401248932,
-0.17426463961601257,
-0.017129261046648026,
-0.01755339279770851,
0.1258147954940796,
0.034865595400333405,
-0.2339000552892685,
-0.07563816010951996,
0.023977454751729965,
0.06747739762067795,
0.0006291962927207351,
-0.20077912509441376,
-0.05423640459775925,
-0.07429807633161545,
0.012037997134029865,
-0.09670369327068329,
-0.14758563041687012,
0.08498066663742065,
0.009247653186321259,
-0.10309631377458572,
-0.1426069289445877,
-0.10484709590673447,
0.02537139691412449,
-0.10290365666151047,
-0.2328217476606369,
0.059900835156440735,
0.05152703821659088,
-0.13357512652873993,
-0.03244134783744812,
-0.1665857881307602,
0.08679751306772232,
0.0843667984008789,
-0.1018061488866806,
-0.05340319871902466,
-0.26462826132774353,
0.023832345381379128,
0.18963241577148438,
-0.11179625988006592,
0.021368524059653282,
-0.04554150998592377,
0.015213588252663612,
0.07875644415616989,
-0.06799864768981934,
-0.01944848895072937,
-0.051485855132341385,
0.08667165040969849,
0.17637182772159576,
-0.02187223546206951,
-0.14520078897476196,
0.14237919449806213,
0.09981125593185425,
-0.08449643850326538,
-0.11245586723089218,
-0.007696505170315504,
-0.007839643396437168,
-0.05526144430041313,
-0.25104573369026184,
-0.037363819777965546,
-0.0931205302476883,
-0.16075362265110016,
-0.09358862042427063,
-0.15196748077869415,
-0.08850459009408951,
-0.11272866278886795,
-0.07287038862705231,
-0.08033209294080734,
-0.004994165617972612,
-0.07737427949905396,
0.050089430063962936,
-0.048411376774311066,
0.05868721753358841,
-0.012732024304568768,
-0.01036912202835083,
0.013409991748631,
-0.004975579213351011,
-0.028138820081949234,
0.0020166835747659206,
0.014093296602368355,
-0.1082226037979126,
-0.06796395033597946,
0.13385418057441711,
0.05949733406305313,
-0.010146067477762699,
-0.0678834468126297,
0.14067715406417847,
0.11654944717884064,
-0.2273813933134079,
-0.0883122980594635,
-0.022580305114388466,
0.11517800390720367,
0.04457985609769821,
-0.24356801807880402,
-0.09299641102552414,
0.10465268790721893,
-0.04017173871397972,
0.024014992639422417,
-0.06897452473640442,
-0.05671292170882225,
-0.06839899718761444,
-0.059906162321567535,
0.049512024968862534,
0.16974173486232758,
0.13468283414840698,
-0.08296767622232437,
-0.17455655336380005,
-0.04027332365512848,
0.2821732759475708,
0.11407369375228882,
-0.013957221060991287,
-0.11584106087684631,
0.13612425327301025,
0.3259147107601166,
0.003626409452408552,
-0.0015156768495216966,
-0.024779491126537323,
0.09177933633327484,
0.17798174917697906,
-0.026738079264760017,
0.038871318101882935,
-0.09480883181095123,
0.12473691999912262,
0.1424858123064041,
-0.003607305232435465,
-0.08019591122865677,
0.054191410541534424,
0.04559160768985748,
-0.11434374749660492,
-0.045835018157958984,
0.0701841339468956,
-0.028633300215005875,
-0.14027096331119537,
-0.11379226297140121,
0.16300413012504578,
-0.00011789264681283385,
-0.19415628910064697,
-0.24242191016674042,
0.009555147960782051,
-0.019892094656825066,
-0.07284248620271683,
-0.10157787054777145,
-0.050078485161066055,
0.12740282714366913,
0.024967677891254425,
0.027027085423469543,
0.041351377964019775,
-0.006713899318128824,
0.038953255861997604,
0.1083945631980896,
-0.01380522083491087,
0.003148939460515976,
-0.044010285288095474,
-0.2075427621603012,
-0.06188192218542099,
0.17069393396377563,
-0.010069934651255608,
-0.09827851504087448,
-0.03549276664853096,
0.05346260964870453,
0.08636751025915146,
-0.03868582099676132,
-0.15722672641277313,
-0.026264827698469162,
-0.014332680962979794,
0.01977306418120861,
-0.1930152028799057,
-0.05134806036949158,
-0.1002090647816658,
-0.06830215454101562,
-0.1038639023900032,
-0.18567639589309692,
-0.21205106377601624,
-0.06848518550395966,
-0.004255564883351326,
-0.21222643554210663,
-0.14342866837978363,
0.07806629687547684,
0.11023277789354324,
-0.026965592056512833,
-0.20612041652202606,
-0.16411937773227692,
0.023428713902831078,
0.09076622873544693,
0.0032499763183295727,
-0.28048184514045715,
0.031752798706293106,
0.2164745330810547,
0.13019989430904388,
-0.06035767123103142,
-0.0326053649187088,
0.20144565403461456,
0.12157537043094635,
0.041525159031152725,
-0.06818550825119019,
-0.017322784289717674,
0.10732737928628922,
0.13224123418331146,
-0.008844509720802307,
0.13778014481067657,
0.14007849991321564,
-0.09692085534334183,
-0.18111015856266022,
-0.18775509297847748,
0.037171363830566406,
0.0033993825782090425,
-0.21799775958061218,
-0.11786939948797226,
-0.10018419474363327,
-0.05389805883169174,
-0.10849931836128235,
-0.10521028190851212,
-0.04145018383860588,
-0.07416214793920517,
-0.06615321338176727,
-0.10968595743179321,
-0.0400264710187912,
0.07341267913579941,
0.09205446392297745,
-0.03307662159204483,
-0.07160262018442154,
0.09883895516395569,
0.09630865603685379,
0.1634175330400467,
0.12711091339588165,
-0.054459743201732635,
-0.024147050455212593,
0.05497114732861519,
0.1379440724849701,
-0.02440650574862957,
-0.07669663429260254,
0.07002659887075424,
0.17638742923736572,
0.05636382848024368,
-0.1745283007621765,
0.13968007266521454,
0.14290456473827362,
-0.16418124735355377,
-0.12622244656085968,
0.0497998483479023,
-0.03916090354323387,
-0.09637945145368576,
-0.19314785301685333,
-0.0032851609867066145,
0.1034901961684227,
-0.06484749913215637,
-0.16247345507144928,
-0.1081845834851265,
0.05064079537987709,
-0.03769785538315773,
-0.06950021535158157,
-0.07308398187160492,
0.051519058644771576,
0.16619569063186646,
0.05530271679162979,
-0.11643564701080322,
-0.07514782249927521,
0.24743574857711792,
0.25555747747421265,
0.00748693710193038,
-0.082590252161026,
0.16549193859100342,
0.23798085749149323,
0.024756930768489838,
-0.07248049229383469,
-0.06225265562534332,
0.0975496917963028,
0.08818831294775009,
-0.12892639636993408,
0.03783247247338295,
-0.14767904579639435,
0.04285886511206627,
-0.1519595831632614,
-0.12791705131530762,
-0.0671825185418129,
0.027460740879178047,
0.16590476036071777,
0.2941354513168335,
0.21190667152404785,
0.10759679973125458,
-0.20905284583568573,
-0.2129369080066681,
-0.15329357981681824,
-0.1312858760356903,
0.041861265897750854,
0.06452161818742752,
0.06522844731807709,
0.05531497299671173,
0.03920513764023781,
-0.08053509891033173,
0.1918460875749588,
0.2836998403072357,
0.17508117854595184,
0.08780015259981155,
-0.04752551019191742,
0.024235578253865242,
-0.01645359769463539,
0.024636220186948776,
-0.03455181047320366,
-0.05789811536669731,
-0.048047494143247604,
-0.012367937713861465,
-0.06628314405679703,
-0.09658923000097275,
-0.09574835747480392,
-0.1812436431646347,
-0.1325363963842392,
-0.1941176950931549,
-0.03815677389502525,
-0.16698101162910461,
-0.1405700296163559,
-0.04874880984425545,
0.08202538639307022,
-0.018990376964211464,
-0.07497444748878479,
0.04571927711367607,
0.07477681338787079,
-0.025063129141926765,
0.060869134962558746,
0.033619560301303864,
-0.10902609676122665,
-0.10029370337724686,
-0.028336957097053528,
-0.09091214090585709,
-0.061624422669410706,
0.09246978908777237,
0.0419122539460659,
0.022688820958137512,
0.03281501308083534,
0.10308361798524857,
-0.17129726707935333,
-0.2282290905714035,
-0.07402857393026352,
-0.04827902466058731,
0.04144401475787163,
-0.07106180489063263,
-0.13338536024093628,
-0.21479780972003937,
-0.17706291377544403,
-0.18141458928585052,
0.025555908679962158,
-0.01162992138415575,
-0.1877869963645935,
-0.13256078958511353,
-0.1803995817899704,
0.05986252427101135,
0.05500752478837967,
0.06994757801294327,
-0.020504597574472427,
-0.0650569349527359,
-0.01170390471816063,
-0.09558914601802826,
-0.025197606533765793,
0.09734056144952774,
0.0268868375569582,
0.1199956163764,
0.2496938407421112,
0.21741238236427307,
0.26926466822624207,
0.28102728724479675,
-0.11927710473537445,
-0.11592701077461243,
-0.09740767627954483,
-0.07566732913255692,
0.023541312664747238,
-0.08157627284526825,
-0.08016039431095123,
-0.13462816178798676,
-0.01462974026799202,
-0.16721029579639435,
0.06132306158542633,
0.12249846011400223,
0.05390552803874016,
0.12282444536685944,
0.023364074528217316,
0.022922614589333534,
0.14182671904563904,
0.12190301716327667,
0.11482825875282288,
0.05807838216423988,
-0.21651116013526917,
-0.07316301017999649,
-0.12322180718183517,
-0.05110877379775047,
-0.039522960782051086,
-0.07258514314889908,
-0.10983091592788696,
-0.15285705029964447,
0.04201662167906761,
0.0061874003149569035,
0.13534733653068542,
0.15571850538253784,
0.05314718559384346,
0.04851526767015457,
0.06945622712373734,
0.0394965261220932,
0.01705482043325901,
0.06582164764404297,
0.020015891641378403,
-0.08546719700098038,
0.04116775095462799,
-0.009606407023966312,
-0.1187300831079483,
-0.03322954848408699,
-0.0715273767709732,
-0.03619660809636116,
0.03624698519706726,
0.04499416425824165,
0.08527600765228271,
0.03613356500864029,
-0.07526303827762604,
0.007856752723455429,
-0.08950512856245041,
-0.10774213820695877,
-0.046005625277757645,
-0.157317116856575,
-0.19016173481941223,
-0.24530626833438873,
-0.05345631390810013,
-0.03676997125148773,
0.05317958444356918,
0.005089683458209038,
0.09726358205080032,
0.027874281629920006,
-0.03251276910305023,
0.04773390293121338,
0.07612735778093338,
0.11282769590616226,
0.11644260585308075,
0.00016104798123706132,
0.038139451295137405,
0.0934930071234703,
0.02060692571103573,
-0.04572342708706856,
0.0995590016245842,
0.11257001012563705,
0.057362545281648636,
-0.13025550544261932,
-0.04366877302527428,
0.04908577725291252,
-0.048258811235427856,
-0.10539868474006653,
-0.23200175166130066,
-0.037653129547834396,
0.027306588366627693,
-0.07777656614780426,
-0.24740824103355408,
-0.11979099363088608,
-0.055270977318286896,
0.04808969423174858,
-0.09004394710063934,
0.027883892878890038,
-0.062172871083021164,
-0.10774914175271988,
-0.05774626135826111,
0.00023104653519112617,
0.009319793432950974,
-0.09252288192510605,
0.06280545890331268,
0.09808506816625595,
0.024316713213920593,
0.00436829961836338,
-0.15013709664344788,
0.0969209298491478,
0.05568120256066322,
-0.07254842668771744,
-0.0374227836728096,
-0.07668247818946838,
0.019724179059267044,
-0.05595768615603447,
0.006501870695501566,
-0.12282832711935043,
-0.010214083828032017,
0.06249578669667244,
0.035362355411052704,
-0.051074087619781494,
-0.08256129920482635,
-0.019809741526842117,
-0.0776435136795044,
-0.05884459987282753,
-0.10871191322803497,
-0.000309103837935254,
-0.08176751434803009,
-0.147674560546875,
-0.12384647130966187,
-0.13500362634658813,
-0.19969442486763,
-0.10847383737564087,
-0.14125509560108185,
-0.12567207217216492,
-0.038238171488046646,
-0.14331622421741486,
-0.1814081370830536,
-0.1524912565946579,
-0.15452773869037628,
-0.13071173429489136,
-0.06253481656312943,
-0.09050332754850388,
-0.11540244519710541,
0.015940411016345024,
-0.06398791074752808,
-0.0793328657746315,
-0.03159375488758087,
-0.07832437008619308,
-0.06534374505281448,
0.036229781806468964,
-0.07724235951900482,
0.040410663932561874,
0.055416591465473175,
-0.055496204644441605,
-0.011743072420358658,
-0.15550504624843597,
-0.11509101837873459,
0.013079802505671978,
0.03459017351269722,
0.041210442781448364,
-0.047146450728178024,
-0.154738649725914,
-0.07169751822948456,
0.023717125877738,
-0.033708035945892334,
-0.10840871930122375,
-0.17718325555324554,
-0.008198407478630543,
0.09506592154502869,
-0.06117737293243408,
-0.024761930108070374,
-0.02988392859697342,
0.0623319186270237,
-0.02066320739686489,
-0.0889841616153717,
0.07602037489414215,
0.02670813724398613,
0.014465573243796825,
-0.1354256123304367,
0.14119425415992737,
0.04396911710500717,
-0.05877650901675224,
-0.172218456864357,
0.008601624518632889,
0.26124078035354614,
-0.012356226332485676,
-0.209589883685112,
-0.1993154138326645,
-0.05637037381529808,
0.03672032430768013,
-0.1376226544380188,
-0.2090633660554886,
-0.01541877817362547,
0.10994367301464081,
-0.09353410452604294,
0.03822777792811394,
-0.0033854886423796415,
0.08572680503129959,
0.08846791088581085,
-0.08402691036462784,
0.06197650730609894,
0.09106668829917908,
0.09925111383199692,
0.09844363480806351,
-0.07081211358308792,
0.08097799122333527,
0.2603936195373535,
0.10725574195384979,
-0.10126230120658875,
0.10345951467752457,
0.24478767812252045,
0.23455247282981873,
-0.13549251854419708,
0.05606531724333763,
0.1806955486536026,
0.22313693165779114,
0.02852996252477169,
-0.14587871730327606,
-0.017876220867037773,
-0.04906294867396355,
-0.09009737521409988,
-0.019378218799829483,
0.06803546100854874,
0.06199786067008972,
-0.02925308793783188,
-0.013132143765687943,
0.03321937844157219,
-0.050234779715538025,
-0.05217285826802254,
0.06758508831262589,
0.07984427362680435,
0.06416165828704834,
0.04493243992328644,
0.12134522944688797,
0.01081566046923399,
-0.0009462455636821687,
0.10997991263866425,
0.010038799606263638,
0.023778146132826805,
0.019008517265319824,
0.04848567023873329,
-0.10257476568222046,
-0.06968127191066742,
0.059926971793174744,
0.02668922208249569,
0.033428043127059937,
0.1564623862504959,
0.049722820520401,
0.10413647443056107,
-0.10731210559606552,
-0.08168825507164001,
0.06558921188116074,
-0.10233339667320251,
-0.004906222689896822,
-0.07023058831691742,
-0.012773644179105759,
-0.08393310755491257,
-0.07666253298521042,
0.031559064984321594,
-0.08527982234954834,
-0.005658374167978764,
-0.028495416045188904,
-0.15186110138893127,
-0.13368146121501923,
-0.05926859751343727,
-0.05963721498847008,
-0.13105495274066925,
-0.1435311883687973,
-0.05945437401533127,
0.11700562387704849,
-0.10933556407690048,
0.021207140758633614,
-0.06279733031988144,
-0.0529610849916935,
-0.08945801854133606,
-0.13329651951789856,
-0.07256311178207397,
-0.09680811315774918,
0.015802394598722458,
-0.03996815159916878,
0.043662987649440765,
-0.02710135281085968,
0.13409541547298431,
0.046983182430267334,
0.020994992926716805,
0.08330868929624557,
0.06003117933869362,
0.01653776504099369,
0.058416467159986496,
0.07183754444122314,
-0.041260626167058945,
-0.0142976688221097,
0.060852084308862686,
-0.073296919465065,
-0.07221351563930511,
-0.20178921520709991,
-0.20118921995162964,
-0.053317684680223465,
0.04899526387453079,
-0.07314202934503555,
-0.04672158882021904,
-0.045991431921720505,
0.08786813914775848,
0.07102185487747192,
-0.024077191948890686,
-0.05693238601088524,
0.03581511974334717,
-0.11830946058034897,
-0.11254803836345673,
-0.009468121454119682,
0.10531383007764816,
0.11905735731124878,
0.08454856276512146,
0.12256426364183426,
0.10968055576086044,
0.09357547014951706,
-0.016251252964138985,
0.08125656843185425,
0.07179711759090424,
0.009638807736337185,
-0.010719994083046913,
0.04952424392104149,
-0.0018182855565100908,
0.09430945664644241,
-0.06655899435281754,
-0.1201694905757904,
-0.02861606515944004,
0.07319395989179611,
0.00815573614090681,
-0.04155751317739487,
0.023511217907071114,
0.0826498419046402,
-0.06805447489023209,
0.1344514936208725,
0.07903555780649185,
0.12505513429641724,
0.09785326570272446,
-0.00534760532900691,
0.017767805606126785,
-0.007011097855865955,
0.11265509575605392,
0.037957314401865005,
-0.008779448457062244,
0.044662728905677795,
0.10465090721845627,
0.03954612836241722,
-0.03887201100587845,
-0.033104341477155685,
-0.060436829924583435,
0.04740361124277115,
-0.04104948788881302,
-0.036860059946775436,
-0.05655056983232498,
0.04617974907159805,
-0.011393656022846699,
-0.010145449079573154,
0.04173818230628967,
-0.03487801179289818,
-0.03530731797218323,
-0.0439242422580719,
-0.12035877257585526,
0.017237870022654533,
-0.06914038956165314,
-0.16344588994979858,
-0.012038452550768852,
0.1025380790233612,
0.028775161132216454,
-0.035293351858854294,
-0.008908557705581188,
-0.12928959727287292,
-0.1468660980463028,
-0.20280520617961884,
-0.11232941597700119,
-0.16922324895858765,
-0.024689968675374985,
-0.11553777009248734,
-0.010344507172703743,
-0.030137134715914726,
-0.20603910088539124,
0.12434610724449158,
0.10646924376487732,
0.1861933171749115,
0.1055227741599083,
0.15478254854679108,
-0.05547091364860535,
0.005732922349125147,
-0.011555845849215984,
0.03920240327715874,
0.017263997346162796,
-0.04423624649643898,
-0.01680673472583294,
-0.04427159205079079,
0.05797939747571945,
0.06767217814922333,
-0.1582120656967163,
-0.17059357464313507,
-0.0383981391787529,
-0.15737012028694153,
-0.14004267752170563,
-0.11533196270465851,
-0.15306183695793152,
0.031281523406505585,
0.06252959370613098,
-0.10291173309087753,
-0.02581714279949665,
-0.056163109838962555,
0.03351956605911255,
-0.020507842302322388,
-0.033133748918771744,
0.06638339906930923,
0.12528374791145325,
0.04804722219705582,
-0.014492638409137726,
-0.0475752055644989,
0.07829863578081131,
0.09654761105775833,
0.016095025464892387,
-0.08390571177005768,
-0.030288461595773697,
-0.13140270113945007,
-0.15991996228694916,
-0.1784796565771103,
-0.16255541145801544,
-0.12201187014579773,
-0.1718910187482834,
-0.15927791595458984,
-0.14161084592342377,
-0.14524342119693756,
-0.09123983234167099,
-0.15011493861675262,
-0.09110528230667114,
-0.07755620777606964,
-0.1670043021440506,
-0.13136126101016998,
-0.2429010421037674,
-0.18219982087612152,
0.0407884381711483,
0.06237289309501648,
-0.03995942696928978,
-0.050963014364242554,
-0.03785637021064758,
-0.0027252505533397198,
0.10882088541984558,
0.040794797241687775,
0.16562673449516296,
0.1317393183708191,
0.1507057100534439,
0.13267557322978973,
0.25160014629364014,
-0.06417762488126755,
0.013671224936842918,
-0.07688954472541809,
0.010779079981148243,
-0.01820749044418335,
-0.1043635904788971,
-0.10911344736814499,
-0.18150629103183746,
-0.24496549367904663,
-0.17755332589149475,
-0.021175073459744453,
0.08549690246582031,
0.0540611557662487,
-0.03206416964530945,
0.046805430203676224,
-0.164462149143219,
-0.03205114230513573,
0.017701584845781326,
-0.05794602259993553,
-0.05759105831384659,
-0.1455281376838684,
-0.13023807108402252,
-0.09042152017354965,
-0.18883076310157776,
-0.21207726001739502,
-0.05605476349592209,
-0.138907790184021,
-0.2581286132335663,
-0.16820621490478516,
-0.09712890535593033,
0.02841350808739662,
0.019740980118513107,
0.06882558763027191,
0.11322490870952606,
0.06145481392741203,
-0.10931423306465149,
-0.19542022049427032,
-0.16382889449596405,
-0.036740776151418686,
-0.17645426094532013,
-0.09455113112926483,
-0.049789778888225555,
-0.03631875291466713,
-0.1268986463546753,
-0.11920078843832016,
0.07154148072004318,
0.05196848511695862,
0.06758929044008255,
0.1386607140302658,
0.16220390796661377,
0.043706316500902176,
-0.012195819988846779,
0.007475180551409721,
-0.09840907901525497,
0.07731455564498901,
-0.05989987030625343,
-0.1340472251176834,
-0.22287245094776154,
-0.11021783947944641,
-0.10259944945573807,
-0.07410530745983124,
0.043732985854148865,
0.10711775720119476,
0.0014649559743702412,
-0.06085590645670891,
-0.09618213027715683,
-0.023064671084284782,
0.08067052066326141,
0.17045637965202332,
0.03535423055291176
# 36 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c2_weight);
# 34 "c_cnn/top.cpp"

 const data_t c3_weight[120*16*5*5]={

# 1 "c_cnn/param/conv3.weight.h" 1
0.048471689224243164,
-0.039223358035087585,
-0.04225568845868111,
-0.031199106946587563,
-0.1683269590139389,
-0.1218031793832779,
-0.03189875930547714,
0.07830329984426498,
0.11345088481903076,
0.12315306812524796,
-0.0867515280842781,
0.03379138931632042,
0.15200383961200714,
0.005605149082839489,
0.039548374712467194,
0.04146982729434967,
0.16818907856941223,
-0.009173531085252762,
-0.007299850229173899,
-0.044414669275283813,
0.059912219643592834,
-0.028822222724556923,
-0.14265209436416626,
-0.07784953713417053,
-0.002647984307259321,
0.022351570427417755,
0.13097193837165833,
0.006922704167664051,
-0.042441584169864655,
0.006991355214267969,
-0.040114447474479675,
0.01805696077644825,
0.06485368311405182,
-0.0015792871126905084,
0.01874428801238537,
-0.06437409669160843,
0.030167631804943085,
-0.03195881471037865,
-0.013849264942109585,
-0.015519805252552032,
0.015239108353853226,
0.06656886637210846,
0.003107544267550111,
-0.10120182484388351,
0.0046213846653699875,
0.0014274497516453266,
-0.00036828091833740473,
-0.02573447674512863,
-0.0687442272901535,
0.02771575003862381,
0.10109101235866547,
0.10456332564353943,
-0.08606401830911636,
-0.059235893189907074,
-0.033218953758478165,
-0.027989884838461876,
0.02180018275976181,
0.06861167401075363,
0.13377434015274048,
0.07842360436916351,
-0.14718441665172577,
-0.08326667547225952,
0.04518954083323479,
0.07860803604125977,
0.011018904857337475,
-0.05056227743625641,
-0.14065515995025635,
-0.12782222032546997,
-0.017177626490592957,
0.08928339183330536,
0.08256477862596512,
0.11417368799448013,
-0.053189102560281754,
-0.06262549757957458,
-0.04657868668437004,
0.028983021154999733,
-0.02127501554787159,
-0.12365104258060455,
-0.037062402814626694,
0.01171189732849598,
0.06512128561735153,
-0.020635968074202538,
0.04214577376842499,
0.1098305881023407,
0.08631746470928192,
-0.04878946766257286,
0.05035274848341942,
0.0005877765943296254,
0.026329323649406433,
0.05031254515051842,
0.032354991883039474,
-0.022870199754834175,
0.045437123626470566,
0.047180190682411194,
0.00943493377417326,
0.0013899252517148852,
-0.017005905508995056,
0.12258151173591614,
0.02118629217147827,
0.008296494372189045,
-0.03477281704545021,
-0.059338320046663284,
-0.0048795947805047035,
-0.006062449421733618,
-0.015429386869072914,
0.0544450506567955,
-0.14943037927150726,
-0.07378982752561569,
-0.10323473066091537,
-0.11590688675642014,
-0.05533234402537346,
-0.01467046607285738,
0.005171881522983313,
0.1516137719154358,
0.010738837532699108,
-0.0934135913848877,
-0.11965318024158478,
-0.039472613483667374,
0.05694369599223137,
0.09183312207460403,
-0.047770172357559204,
0.0356694720685482,
0.10274487733840942,
0.11638683825731277,
0.12018929421901703,
-0.029456727206707,
0.05372905358672142,
0.15651392936706543,
0.18966682255268097,
0.20687755942344666,
-0.05746878683567047,
-0.07452527433633804,
-0.0639820247888565,
-0.06234501674771309,
0.06097542122006416,
-0.06229391694068909,
0.07972981035709381,
-0.07343316078186035,
-0.14684034883975983,
-0.07313979417085648,
-0.037913139909505844,
-0.004037722945213318,
0.0164885763078928,
-0.13447652757167816,
-0.10409276932477951,
-0.027565848082304,
0.07687443494796753,
-0.04629817232489586,
0.042063988745212555,
-0.03515364229679108,
-0.020309366285800934,
-0.07174953818321228,
-0.01112019456923008,
-0.072053924202919,
-0.06908771395683289,
-0.02112295851111412,
-0.03501967340707779,
-0.1343350112438202,
-0.0029097304213792086,
-0.01484726369380951,
0.03454486280679703,
0.09647320210933685,
0.11294028162956238,
0.2875420153141022,
0.02440907433629036,
0.14456211030483246,
0.13328728079795837,
0.15073415637016296,
0.18971115350723267,
0.11977341771125793,
-0.09552702307701111,
-0.10427025705575943,
-0.0735199972987175,
-0.027810147032141685,
-0.07706437259912491,
-0.002952688606455922,
-0.07258247584104538,
-0.07954902946949005,
0.022333931177854538,
0.11320695281028748,
-0.020347122102975845,
0.04433312267065048,
-0.047447413206100464,
-0.012736612930893898,
-0.06642285734415054,
0.09135899692773819,
-0.011710898019373417,
-0.031215477734804153,
-0.02014276571571827,
0.04024684056639671,
-0.17815624177455902,
-0.09722427278757095,
-0.04310760274529457,
0.052233949303627014,
0.08647140860557556,
-0.0726127028465271,
0.013715204782783985,
0.1274123638868332,
0.1957491636276245,
0.11427044123411179,
-0.11025374382734299,
0.01498786173760891,
0.06257089227437973,
-0.04332508519291878,
-0.031483374536037445,
0.12611393630504608,
0.027882592752575874,
0.057523347437381744,
-0.07130313664674759,
-0.0687948539853096,
0.16545416414737701,
-0.04039826989173889,
-0.05078223720192909,
-0.1285993605852127,
-0.09901699423789978,
-0.006256191059947014,
-0.02640995942056179,
-0.03654393181204796,
0.04092318192124367,
0.09514807164669037,
-0.06394854933023453,
-0.02728632465004921,
0.020305009558796883,
0.06798508763313293,
0.17632965743541718,
0.06065266579389572,
-0.004464319441467524,
-0.06048249825835228,
-0.004959992133080959,
-0.044931042939424515,
0.008974943310022354,
0.015769505873322487,
0.0021848934702575207,
0.1321897655725479,
0.12223061919212341,
0.021559832617640495,
1.054901622410398e-05,
0.11667213588953018,
0.08189292252063751,
-0.021150730550289154,
0.028463270515203476,
0.08642634004354477,
-0.054412830621004105,
-0.026586543768644333,
0.01638403907418251,
-0.042242445051670074,
-0.005045284517109394,
-0.045575715601444244,
-0.08566254377365112,
-0.036636024713516235,
0.03532790020108223,
0.09027212858200073,
0.10531172901391983,
0.04491391405463219,
-0.020405679941177368,
-0.05148351192474365,
-0.005780788604170084,
0.027128707617521286,
0.08901355415582657,
0.15711820125579834,
0.033054519444704056,
-0.04425280541181564,
0.037067756056785583,
-0.04423313960433006,
0.05263037234544754,
0.08843093365430832,
0.037282977253198624,
-2.794427302887925e-07,
-0.020137615501880646,
-0.0345454066991806,
-0.02480114996433258,
0.06368370354175568,
-0.10261952131986618,
-0.013201379217207432,
-0.11735247820615768,
0.0006941919564269483,
-0.016921216621994972,
0.02618497796356678,
0.0603625513613224,
0.04181468114256859,
0.0003853663511108607,
-0.008784038946032524,
0.010795172303915024,
0.15055832266807556,
0.15375348925590515,
-0.013959533534944057,
-0.03187032788991928,
0.04919956997036934,
0.07500090450048447,
0.04175592213869095,
-0.03709603101015091,
0.07426472008228302,
0.20696096122264862,
0.010305403731763363,
0.02295682393014431,
-0.013768306002020836,
0.06489409506320953,
-0.000633915129583329,
-0.0057303463108837605,
-0.05447696894407272,
0.0015696185873821378,
0.11432348191738129,
-0.0922425165772438,
-0.06908711791038513,
-0.06434311717748642,
0.1540006697177887,
0.028350990265607834,
0.0016475500306114554,
0.06738153100013733,
-0.044349510222673416,
-0.002233609789982438,
-0.10184518992900848,
-0.08138255774974823,
-0.035715650767087936,
-0.05006805434823036,
-0.011628009378910065,
-0.12417647987604141,
0.0046112267300486565,
0.11639054119586945,
0.06383801251649857,
-0.08495840430259705,
-0.07585073262453079,
0.01279918011277914,
0.15046748518943787,
0.08594704419374466,
-0.07012675702571869,
0.049261424690485,
0.2055342048406601,
0.07328561693429947,
0.01879146508872509,
-0.001818118616938591,
0.05348929017782211,
0.01815851591527462,
-0.012380953878164291,
0.026787154376506805,
0.05076464265584946,
0.10708647221326828,
-0.0781557708978653,
-0.039282362908124924,
0.022911131381988525,
0.03174871951341629,
0.0494636632502079,
-0.0830298587679863,
0.010759174823760986,
0.0323268361389637,
-0.038587536662817,
-0.10072845220565796,
-0.13282981514930725,
0.03262246772646904,
0.027211761102080345,
-0.011251703836023808,
-0.09293019771575928,
-0.16227781772613525,
-0.061801765114068985,
-0.03669565171003342,
0.011087003163993359,
-0.10645128786563873,
0.03776772320270538,
0.07774680107831955,
0.1372155398130417,
-0.07618144154548645,
0.07086571305990219,
0.07041186839342117,
0.0918155387043953,
0.09045571833848953,
-0.029081471264362335,
0.010695536620914936,
0.03602480888366699,
-0.05355222895741463,
0.020324118435382843,
0.023448560386896133,
-0.04630580544471741,
0.0005314460140652955,
-0.024083992466330528,
-0.15056604146957397,
0.04053700715303421,
0.0029413446318358183,
-0.03163376823067665,
0.10209683328866959,
0.01992848888039589,
-0.014121124520897865,
-0.006621333304792643,
0.012231020256876945,
0.04246516898274422,
0.038297414779663086,
0.04676075652241707,
0.009410357102751732,
-0.020412292331457138,
-0.03966877609491348,
-0.17000097036361694,
-0.11545408517122269,
-0.06261175125837326,
-0.07368031144142151,
-0.13097989559173584,
-0.13785435259342194,
-0.018145350739359856,
-0.09019453078508377,
-0.14610010385513306,
-0.05475006625056267,
0.019664214923977852,
0.05728338286280632,
0.03198785334825516,
0.03555562347173691,
0.04538671672344208,
0.025558505207300186,
0.07714671641588211,
0.005797869525849819,
-0.05803489685058594,
-0.07642018795013428,
0.08171208202838898,
-0.02028622105717659,
0.03234972432255745,
-0.010998756624758244,
-0.055794600397348404,
-0.06102795898914337,
-0.0011692334664985538,
-0.08111315220594406,
0.026749789714813232,
-0.07876244187355042,
0.025324685499072075,
0.04473499953746796,
6.865250907139853e-05,
-0.03639303147792816,
0.05323966220021248,
0.06032104417681694,
0.09925016015768051,
-0.04693586006760597,
-0.16037356853485107,
0.012689727358520031,
0.05180330201983452,
0.03448302671313286,
-0.04059644043445587,
-0.16688720881938934,
-0.08012170344591141,
0.050251554697752,
0.07395469397306442,
-0.07544711977243423,
-0.04017677158117294,
-0.034682709723711014,
0.0390721932053566,
0.019827552139759064,
-0.09655898064374924,
-0.041493069380521774,
-0.05898552015423775,
-0.030329307541251183,
0.06583014130592346,
-0.09555648267269135,
-0.04831869155168533,
-0.005658593028783798,
-0.039548926055431366,
-0.04665318503975868,
0.0724664106965065,
0.09428754448890686,
0.11266076564788818,
0.06314831972122192,
-0.006920841988176107,
-0.10608261823654175,
0.023420201614499092,
0.0813036859035492,
0.04208656772971153,
0.118540920317173,
-0.09329316020011902,
0.13588979840278625,
0.10622712224721909,
0.031208151951432228,
-0.01750100776553154,
-0.07723714411258698,
-0.035013504326343536,
0.016872331500053406,
-0.08570146560668945,
-0.0032029482536017895,
-0.15453261137008667,
-0.03580169379711151,
0.06642159074544907,
-0.02686750516295433,
0.01589043065905571,
0.020877322182059288,
0.14042407274246216,
0.03137686848640442,
0.021119320765137672,
-0.01415311824530363,
-0.050500061362981796,
-0.022734206169843674,
-0.06488179415464401,
0.02914375439286232,
-0.045918699353933334,
-0.01864190772175789,
0.03354595974087715,
-0.040417734533548355,
-0.016494160518050194,
-0.04877743497490883,
0.12271742522716522,
0.053009938448667526,
-0.08856865763664246,
0.01946147531270981,
-0.07916117459535599,
0.042898792773485184,
0.09342483431100845,
-0.012506040744483471,
-0.03619275242090225,
-0.01902543008327484,
0.10455706715583801,
0.1532772183418274,
0.03317500650882721,
-0.09161289036273956,
0.08020109683275223,
0.242843896150589,
0.2437162548303604,
0.11838793754577637,
0.03430099040269852,
-0.018786506727337837,
-0.05792572721838951,
0.019970759749412537,
0.13085734844207764,
0.0999135971069336,
-0.04765170067548752,
-0.09917231649160385,
-0.07338202744722366,
0.0207362063229084,
0.10783807188272476,
-0.052122704684734344,
0.0011503765126690269,
-0.019228072836995125,
0.007598290219902992,
-0.03460639342665672,
0.03542755916714668,
-0.0007180150132626295,
-0.26300057768821716,
-0.1317618191242218,
-0.09305857867002487,
0.0360158309340477,
-0.019007880240678787,
-0.04032030329108238,
-0.06082124635577202,
-0.07958207279443741,
0.007821726612746716,
-0.058871496468782425,
-0.04350939765572548,
-0.09815160185098648,
-0.06763557344675064,
0.07299590110778809,
-0.13135306537151337,
-0.06929158419370651,
-0.054963745176792145,
-0.027329739183187485,
0.06403834372758865,
-0.041335634887218475,
-0.06327454000711441,
-0.11798727512359619,
-0.023414958268404007,
-0.049868445843458176,
0.007678048685193062,
0.06296789646148682,
-0.06117021664977074,
-0.12226680666208267,
-0.024894630536437035,
0.027428675442934036,
0.05466834083199501,
-0.013843541033565998,
-0.03848147392272949,
-0.07315944880247116,
0.0221997257322073,
0.02843296155333519,
-0.028242431581020355,
-0.035102881491184235,
0.07202912867069244,
0.12924516201019287,
-0.04117535427212715,
-0.042242616415023804,
-0.060604941099882126,
-0.043291617184877396,
-0.03952415660023689,
0.08029164373874664,
0.03178001195192337,
-0.10979318618774414,
-0.03362586349248886,
0.05928341671824455,
0.19292612373828888,
-0.0864391177892685,
-0.11660553514957428,
0.04808742180466652,
0.0545906238257885,
0.11942210048437119,
0.12734724581241608,
-0.0151079585775733,
-0.07115387171506882,
0.03417107090353966,
0.016963930800557137,
0.03351492062211037,
-0.007522148545831442,
-0.08357824385166168,
0.005783901084214449,
0.020612936466932297,
0.025847816839814186,
0.05954916030168533,
-0.10127300769090652,
0.03964895382523537,
0.03919978439807892,
-0.034524235874414444,
0.02378179132938385,
0.060290731489658356,
-0.04722269997000694,
-0.03038768097758293,
-0.007101002614945173,
0.03252029791474342,
0.06620372086763382,
0.00931535940617323,
0.06502241641283035,
0.026812102645635605,
-0.011735309846699238,
0.20026713609695435,
-0.02222469076514244,
0.027165958657860756,
0.030418744310736656,
0.03074791096150875,
-0.010600344277918339,
0.0007830094546079636,
-0.061857420951128006,
-0.0016513559967279434,
0.08316786587238312,
-0.04055222123861313,
0.021965892985463142,
-0.056555766612291336,
-0.0003957546141464263,
0.07490837574005127,
0.0386771522462368,
0.09082446247339249,
0.13974332809448242,
-0.012807978317141533,
-0.03883279487490654,
-0.0046181040816009045,
-5.272755879559554e-05,
-0.00878507737070322,
-0.09608401358127594,
-0.11721009016036987,
0.010906090028584003,
0.015119034796953201,
-0.018901774659752846,
-0.05200246721506119,
0.02219010330736637,
-0.019773375242948532,
0.07279464602470398,
-0.06302794069051743,
-0.011796708218753338,
-0.011710718274116516,
-0.0277564637362957,
-0.031236497685313225,
0.013360599987208843,
0.05279182642698288,
0.0715080052614212,
-0.08271921426057816,
-0.20905530452728271,
-0.2252081334590912,
-0.08395156264305115,
0.007102287840098143,
-0.11581943184137344,
-0.048035793006420135,
-0.1554201990365982,
-0.05631174519658089,
0.05959562584757805,
-0.15593840181827545,
-0.00467165932059288,
-0.012133755721151829,
-0.050965845584869385,
-0.03068699687719345,
-0.08000395447015762,
-0.032439135015010834,
-0.014694412238895893,
0.05308680981397629,
0.023842133581638336,
0.07843039184808731,
-0.0984090119600296,
-0.03089808113873005,
0.029017113149166107,
0.0751718059182167,
0.19974534213542938,
0.03781215101480484,
-0.08822919428348541,
-0.16995356976985931,
-0.08945124596357346,
-0.0014579376438632607,
-0.027684619650244713,
-0.0023113249335438013,
-0.07837869971990585,
-0.154054194688797,
-0.02170465886592865,
-0.014111003838479519,
0.02257932908833027,
-0.03636990115046501,
-0.0019146256381645799,
-0.08096536993980408,
0.01993255689740181,
-0.07978367060422897,
-0.08950947225093842,
-0.06314070522785187,
0.0122789042070508,
-0.03395165875554085,
-0.06855431199073792,
0.06183984875679016,
0.025929495692253113,
0.010596824809908867,
0.08758372068405151,
0.19527433812618256,
0.1541118621826172,
-0.009680499322712421,
0.05748981609940529,
0.005529566202312708,
0.13779376447200775,
0.08545912802219391,
0.03942500799894333,
0.18201932311058044,
0.05548577755689621,
0.028134578838944435,
0.060821857303380966,
0.052352678030729294,
-0.09382320195436478,
-0.09237197786569595,
-0.08573160320520401,
-0.09596701711416245,
-0.0011736229062080383,
-0.08659324795007706,
-0.05328516662120819,
-0.017184944823384285,
-0.021236758679151535,
-0.03432965278625488,
0.09156910330057144,
-0.10101001709699631,
-0.15590453147888184,
-0.16022354364395142,
-0.06986353546380997,
0.09368929266929626,
-0.11075866222381592,
-0.010047494433820248,
-0.005795427598059177,
-0.018055222928524017,
0.06730791181325912,
-0.11050427705049515,
-0.07081537693738937,
-0.004600410349667072,
0.024876710027456284,
0.02119782194495201,
0.01616709493100643,
-0.09430388361215591,
-0.008764909580349922,
0.03739086538553238,
0.03402136266231537,
-0.16815219819545746,
-0.06704849749803543,
0.1511881947517395,
0.04373699799180031,
-0.03538872301578522,
0.12061604112386703,
0.1195814236998558,
0.13295085728168488,
-0.023609843105077744,
-0.02790835127234459,
0.022510677576065063,
-0.021553611382842064,
-0.08513505011796951,
-0.009897453710436821,
-0.05374931916594505,
-0.01769154518842697,
-0.023289015516638756,
0.039677318185567856,
0.031287744641304016,
0.0019625991117209196,
0.09842201322317123,
-0.04135771468281746,
0.11073394864797592,
-0.006007985211908817,
-0.021405214443802834,
0.037875499576330185,
-0.005342070013284683,
-0.057642266154289246,
-0.04138242453336716,
-0.051398616284132004,
-0.06780066341161728,
-0.10339682549238205,
-0.14404632151126862,
0.04519173875451088,
0.012626811861991882,
0.15511773526668549,
0.1378302127122879,
-0.02259487472474575,
-0.04128540679812431,
0.105328269302845,
0.1099221333861351,
0.00958262663334608,
0.005218140315264463,
0.09940344840288162,
0.015571175143122673,
-0.03816336393356323,
-0.04947704076766968,
-0.029488693922758102,
0.012658009305596352,
-0.04367144778370857,
0.008672196418046951,
-0.01569405570626259,
0.06814449280500412,
0.07667948305606842,
-0.04528750479221344,
0.056304801255464554,
0.03234294429421425,
0.04439222067594528,
0.024770133197307587,
0.09184484928846359,
0.014753005467355251,
-0.06103724613785744,
0.008162139914929867,
0.013448840007185936,
0.09889848530292511,
-0.0967845469713211,
-0.050347208976745605,
0.0838785469532013,
0.00024425587616860867,
-0.0816216841340065,
-0.10370767116546631,
-0.16202685236930847,
0.012185395695269108,
0.036114152520895004,
0.013278174214065075,
0.11468778550624847,
0.15214607119560242,
0.10466473549604416,
0.0062792557291686535,
-0.04708552360534668,
-0.12320004403591156,
-0.022904306650161743,
0.016337543725967407,
-0.04109085723757744,
-0.07985479384660721,
-0.05133475363254547,
-0.06041640788316727,
0.04343247413635254,
0.04734478518366814,
0.07299817353487015,
0.0063267783261835575,
0.05649912729859352,
0.05989878252148628,
0.002826961688697338,
0.01483712438493967,
-0.02636811137199402,
0.04190291836857796,
0.05190493166446686,
0.014222804456949234,
-0.000524866278283298,
0.04554194211959839,
0.079677514731884,
0.10060416162014008,
0.06904464215040207,
0.005035496782511473,
-0.1437022089958191,
0.04334649816155434,
0.1089271828532219,
0.025635506957769394,
0.07280231267213821,
0.06658216565847397,
-0.12081947177648544,
-0.17392806708812714,
0.007326234132051468,
0.007535154931247234,
0.14438852667808533,
-0.11735944449901581,
-0.17684343457221985,
-0.11028093844652176,
0.0637030228972435,
0.0698402002453804,
0.04558389261364937,
-0.12996980547904968,
-0.17692187428474426,
-0.008739854209125042,
0.08413326740264893,
0.12716779112815857,
-0.017718136310577393,
0.03864145651459694,
0.010393248870968819,
0.0975838154554367,
0.08394388854503632,
0.057675331830978394,
0.07705177366733551,
-0.012603266164660454,
0.051884379237890244,
-0.04595121741294861,
0.011258084326982498,
-0.035952962934970856,
0.08998209238052368,
-0.08240800350904465,
0.04340680316090584,
0.055484093725681305,
0.03353852778673172,
0.020409900695085526,
0.046947307884693146,
-0.024464726448059082,
0.010899803601205349,
-0.05617842078208923,
-0.006529785227030516,
-0.12126871198415756,
-0.14293284714221954,
-0.017977403476834297,
-0.04271310567855835,
0.028560210019350052,
-0.034686218947172165,
-0.06353286653757095,
-0.052340805530548096,
0.06747999787330627,
-0.008810941129922867,
0.04290059953927994,
0.008544706739485264,
0.03524188697338104,
0.022293200716376305,
0.009580432437360287,
0.10373026132583618,
0.0041879331693053246,
-0.10551966726779938,
-0.0034108737017959356,
0.0620071180164814,
0.2070765346288681,
0.07455822825431824,
0.005698272958397865,
-0.20320695638656616,
-0.08016551285982132,
-0.10537003725767136,
-0.11769375205039978,
-0.20948532223701477,
-0.20574672520160675,
-0.0975688248872757,
-0.08020254969596863,
-0.130453422665596,
-0.04380020126700401,
-0.03905738145112991,
-0.029346855357289314,
-0.023575134575366974,
-0.039877213537693024,
0.0009219130733981729,
0.04837007075548172,
0.07655598968267441,
0.008401199243962765,
0.02202717587351799,
0.04868348687887192,
-0.022008398547768593,
0.0224972702562809,
-0.023276472464203835,
-0.00341300037689507,
0.13751928508281708,
0.08432529121637344,
0.0013278188416734338,
-0.022473368793725967,
0.10271084308624268,
-0.00786894652992487,
0.12112919986248016,
0.054775163531303406,
0.0707312524318695,
0.03836067393422127,
0.07521259039640427,
0.1388198882341385,
0.0980168953537941,
0.05695017799735069,
0.07548541575670242,
0.04426167532801628,
0.09062319248914719,
-0.03978288546204567,
-0.12212599813938141,
-0.09609231352806091,
-0.11509441584348679,
0.00397192407399416,
-0.2878735661506653,
-0.12296632677316666,
-0.06610532850027084,
-0.15369005501270294,
-0.16020193696022034,
0.03698596730828285,
-0.0712030678987503,
-0.08453450351953506,
0.012795846909284592,
0.07454274594783783,
-0.007308360189199448,
0.07395066320896149,
0.07702773809432983,
-0.03509805351495743,
0.07210395485162735,
-0.04076407477259636,
-0.002567894523963332,
-0.04508447274565697,
0.013911892659962177,
0.14537890255451202,
-0.026330318301916122,
0.017719989642500877,
0.0507359653711319,
-0.0218978114426136,
0.024910949170589447,
0.2753518521785736,
0.1450197994709015,
0.006328632589429617,
0.015461305156350136,
-0.03476365655660629,
-0.010787869803607464,
-0.051974330097436905,
-0.15129749476909637,
-0.17416462302207947,
-0.1126478910446167,
0.11949171125888824,
-0.01458015013486147,
-0.04974057525396347,
-0.023529110476374626,
0.03563204035162926,
-0.08608023822307587,
-0.08788326382637024,
-0.14522799849510193,
-0.02853325381875038,
-0.07475297898054123,
-0.25578048825263977,
0.00016811206296551973,
0.0891142264008522,
0.029281066730618477,
0.012387676164507866,
0.03270552307367325,
-0.0494173988699913,
0.062308914959430695,
0.08082281798124313,
-0.024996325373649597,
0.08776752650737762,
-0.00788058154284954,
-0.044574759900569916,
-0.01468704640865326,
-0.12771359086036682,
-0.05119481310248375,
-0.01377672329545021,
-0.00541433272883296,
0.10301388800144196,
0.06788778305053711,
0.02984742633998394,
-0.01453682966530323,
-0.01603878103196621,
-0.03670657426118851,
-0.019700942561030388,
-0.030508093535900116,
0.013348971493542194,
-0.0479595921933651,
-0.03225577250123024,
0.04733447730541229,
-0.0003425951872486621,
-0.06591329723596573,
0.05461239442229271,
-0.044096689671278,
0.06357018649578094,
0.03465135768055916,
0.11226661503314972,
0.01489328034222126,
0.026050250977277756,
-0.035056114196777344,
0.004615609999746084,
-0.11483357846736908,
-0.0879899188876152,
0.017741164192557335,
0.0010901466012001038,
-0.009180890396237373,
0.04637469723820686,
-0.0030894740484654903,
-0.05156693607568741,
-0.047992996871471405,
0.065666563808918,
0.03655460849404335,
0.07813059538602829,
-0.018083080649375916,
0.0769072100520134,
-0.05045212805271149,
-0.0033166971988976,
-0.03908591344952583,
-0.01860402710735798,
0.007799535524100065,
-0.03926542028784752,
0.07100622355937958,
0.15962153673171997,
0.019214913249015808,
0.07106611877679825,
-0.011326105333864689,
-0.02315475046634674,
-0.02920260652899742,
-0.010482504963874817,
-0.016337420791387558,
-0.008282547816634178,
0.030819030478596687,
-0.0029236117843538523,
0.02494181878864765,
-0.09437377750873566,
0.025461075827479362,
0.10627063363790512,
-0.1436442732810974,
0.042624134570360184,
0.025451388210058212,
0.03215484693646431,
-0.0056147947907447815,
-0.12343868613243103,
0.07999511808156967,
0.020255979150533676,
0.03877902776002884,
-0.018384050577878952,
0.059875618666410446,
-0.006460004486143589,
0.024436315521597862,
0.06738636642694473,
-0.13700290024280548,
-0.019851863384246826,
0.06069550663232803,
0.07101850211620331,
-0.14954201877117157,
-0.10817403346300125,
-0.05724150687456131,
-0.06972268223762512,
0.0115043418481946,
-0.10350029170513153,
-0.026334324851632118,
-0.02356065809726715,
-0.034272320568561554,
-0.1016019806265831,
0.13201580941677094,
0.0564839206635952,
0.056879203766584396,
0.004553648643195629,
-0.12797673046588898,
0.0006914812256582081,
0.05989901348948479,
0.012803379446268082,
-0.08830134570598602,
-0.04714222997426987,
0.01766372285783291,
-0.01899338699877262,
-0.19460535049438477,
-0.047797925770282745,
-0.012419736944139004,
-0.09685327112674713,
-0.10861247032880783,
-0.1300666630268097,
0.03118322789669037,
0.036822568625211716,
-0.06106146052479744,
-0.014517231844365597,
-0.0578930601477623,
0.09767036885023117,
0.06729315966367722,
-0.09958689659833908,
0.0008601901936344802,
0.03619172051548958,
0.022975219413638115,
-0.0038749189116060734,
0.050908543169498444,
0.11396896094083786,
0.09150887280702591,
-0.02935246005654335,
-0.072974793612957,
0.04957513511180878,
-0.023138971999287605,
0.05621994659304619,
0.041000884026288986,
0.0381612665951252,
0.04410886391997337,
0.07803177833557129,
-0.07058343291282654,
-0.06845413893461227,
-0.15424303710460663,
0.04858581721782684,
0.051542025059461594,
-0.04368476942181587,
-0.06318508833646774,
-0.09472166001796722,
-0.059491246938705444,
-0.04836181178689003,
-0.017057668417692184,
-0.08793418854475021,
-0.08247894048690796,
0.03659588843584061,
0.020597897469997406,
-0.05518301948904991,
-0.029592353850603104,
0.09092704206705093,
0.050650905817747116,
0.07469979673624039,
0.058598071336746216,
-0.04187518358230591,
-0.06582039594650269,
0.016468754038214684,
-0.018082303926348686,
-0.13505426049232483,
-0.17229537665843964,
-0.10442543774843216,
-0.16286738216876984,
-0.16130885481834412,
-0.20387668907642365,
-0.10270894318819046,
-0.050917234271764755,
0.10398295521736145,
0.0645841732621193,
0.14895136654376984,
0.1319570094347,
0.08577442169189453,
0.02175949141383171,
0.04315424710512161,
0.10085109621286392,
-0.01500001735985279,
-0.03144793212413788,
-0.034730058163404465,
-0.061414897441864014,
0.05386793613433838,
-0.07053573429584503,
0.13466301560401917,
0.0475587472319603,
0.07926753908395767,
0.06035420298576355,
-0.00861325766891241,
-0.10929989814758301,
-0.008158351294696331,
0.1383758783340454,
-0.019380103796720505,
-0.029761573299765587,
-0.02637697011232376,
-0.016889285296201706,
-0.11210677027702332,
-0.008222819305956364,
-0.09819696843624115,
0.010699782520532608,
-0.06609013676643372,
0.02939535677433014,
0.08455974608659744,
0.06316705048084259,
-0.11245238780975342,
0.03454672917723656,
0.10630252212285995,
-0.03959941864013672,
0.012698757462203503,
0.01938440464437008,
0.0019395194249227643,
0.04713408276438713,
-0.057553838938474655,
-0.06637896597385406,
-0.030136074870824814,
0.047630950808525085,
0.05921287462115288,
-0.015066134743392467,
0.01326214149594307,
0.0011065335711464286,
-0.03455814719200134,
0.04471001774072647,
-0.008016965351998806,
0.06638715416193008,
0.007762663997709751,
-0.003222664352506399,
-0.03562769666314125,
-0.005023248493671417,
-0.01101042702794075,
-0.029232671484351158,
-0.17415080964565277,
-0.03931747376918793,
-0.043300677090883255,
-0.0795261561870575,
-0.022006157785654068,
-0.0010886796517297626,
-0.06858635693788528,
-0.03606586903333664,
-0.12291879206895828,
0.0024123908951878548,
0.035892702639102936,
0.16395898163318634,
0.017741037532687187,
0.0836712121963501,
0.03130786120891571,
0.08536441624164581,
0.1715696007013321,
0.17363260686397552,
0.07501786947250366,
-0.06345684826374054,
0.03754867613315582,
-0.019621197134256363,
0.08848834782838821,
0.12804988026618958,
-0.11716111749410629,
-0.01513990294188261,
-0.04281846806406975,
-0.0717998817563057,
-0.07505156099796295,
0.03361744061112404,
-0.016464469954371452,
-0.048282213509082794,
0.03340568020939827,
-0.04800808057188988,
-0.07699558138847351,
-0.07040920108556747,
0.1009107381105423,
-0.052066948264837265,
-0.08650581538677216,
-0.023836206644773483,
0.08590057492256165,
-0.09172815084457397,
-0.04788987338542938,
-0.063344806432724,
0.009002884849905968,
0.11874295771121979,
0.04835863411426544,
0.009622408077120781,
0.001004655845463276,
0.011853931471705437,
-0.009587808512151241,
-0.10584487020969391,
-0.09745326638221741,
-0.03628166392445564,
-0.022298503667116165,
-0.09485837072134018,
-0.18785013258457184,
-0.0786830335855484,
0.0744062140583992,
0.13720417022705078,
-0.022816825658082962,
0.0413028858602047,
0.04866433143615723,
-0.03626634553074837,
-0.0075152856297791,
0.15333634614944458,
0.03305540233850479,
0.04174285754561424,
-0.06504470109939575,
-0.07850594073534012,
0.13302908837795258,
0.0885174572467804,
0.047955676913261414,
-0.04625065252184868,
-0.04769706353545189,
0.06763015687465668,
0.1426226645708084,
-0.04526160657405853,
-0.046664196997880936,
-0.0549418143928051,
-0.011128534562885761,
0.046975214034318924,
0.1008673757314682,
0.0024999750312417746,
-0.048161741346120834,
-0.026770954951643944,
-0.0707337036728859,
0.11866199225187302,
-0.003940753173083067,
0.08099477738142014,
0.005863182712346315,
0.10531541705131531,
-0.09440003335475922,
0.004770237486809492,
0.04906550422310829,
0.004239634610712528,
0.01649782620370388,
-0.04658924788236618,
-0.028381969779729843,
0.04258028790354729,
-0.021891256794333458,
0.021407626569271088,
-0.008952335454523563,
0.05370195209980011,
0.08227457106113434,
0.010930287651717663,
0.023541824892163277,
0.056468717753887177,
-0.08970866352319717,
0.03650530427694321,
-0.04124391824007034,
-0.048413001000881195,
0.028005028143525124,
-0.15909598767757416,
0.032061412930488586,
0.03742397576570511,
-0.1099645122885704,
-0.047852031886577606,
-0.15929289162158966,
-0.15017710626125336,
-0.03218648210167885,
-0.0006854849052615464,
0.07038408517837524,
-0.01238443236798048,
-0.028855962678790092,
0.01825447753071785,
-0.003898554015904665,
-0.17416228353977203,
0.035187989473342896,
-0.000403282989282161,
-0.12037099152803421,
-0.05147856846451759,
0.0010217527160421014,
-0.10345152765512466,
-0.01620086096227169,
-0.02558664232492447,
-0.030270110815763474,
0.009163125418126583,
-0.032770365476608276,
-0.055705759674310684,
0.07836229354143143,
0.11575678735971451,
0.07473794370889664,
-0.07922019809484482,
-0.03122423030436039,
0.07051469385623932,
0.09864840656518936,
0.05807900056242943,
-0.03520192950963974,
0.03151993826031685,
-0.021395709365606308,
-0.016300320625305176,
0.011025197803974152,
0.0001714403770165518,
-0.0325484499335289,
-0.023029543459415436,
-0.05722358450293541,
-0.020098106935620308,
-0.013481475412845612,
0.10021612793207169,
-0.24577371776103973,
-0.09449227899312973,
-0.057790786027908325,
0.12520219385623932,
0.06846670061349869,
-0.09009107947349548,
0.09664442390203476,
-0.002344653010368347,
-0.015255657956004143,
-0.15930749475955963,
0.10173728317022324,
0.030305981636047363,
0.0020047517027705908,
-0.07990013062953949,
-0.014196597039699554,
-0.02468470297753811,
-0.09687969833612442,
-0.08253255486488342,
0.08951040357351303,
0.16315025091171265,
0.062044303864240646,
0.041800592094659805,
-0.032360732555389404,
-0.024357588961720467,
-0.0378996767103672,
0.041549112647771835,
0.055476393550634384,
-0.1635296642780304,
-0.00564539385959506,
-0.08458307385444641,
0.028596699237823486,
-0.07269341498613358,
0.03553290665149689,
0.04660521075129509,
-0.009690006263554096,
-0.058035966008901596,
-0.09958671033382416,
0.04731734097003937,
0.1104898676276207,
0.046012986451387405,
-0.020504798740148544,
0.11882534623146057,
-0.08102627098560333,
-0.024070026353001595,
0.05268637090921402,
0.06072545796632767,
0.11133185774087906,
-0.04965917393565178,
-0.024017810821533203,
-0.09679538011550903,
0.04718048870563507,
0.08109879493713379,
-0.16646543145179749,
-0.09081185609102249,
-0.011048639193177223,
0.001461570500396192,
0.03693515434861183,
-0.11497312039136887,
-0.07848925143480301,
0.056650400161743164,
-0.0027266726829111576,
-0.10568278282880783,
-0.07815728336572647,
0.0329926498234272,
0.1533839851617813,
-0.09851119667291641,
0.0011629121145233512,
-0.01820836402475834,
0.10965895652770996,
0.17715127766132355,
0.023963352665305138,
0.041947659105062485,
-0.020492948591709137,
-0.1257040798664093,
-0.02042718045413494,
0.005616899114102125,
0.06899044662714005,
0.036466553807258606,
-0.2098710685968399,
-0.027360688894987106,
0.04312353581190109,
0.04081890359520912,
-0.15459932386875153,
-0.015294031240046024,
-0.03653214871883392,
0.02188478782773018,
-0.017277926206588745,
0.05169380456209183,
-0.02379601076245308,
0.055840153247117996,
-0.08235374093055725,
-0.06946917623281479,
-0.0656103789806366,
-0.011750751174986362,
0.02382940985262394,
-0.04084666073322296,
-0.13787707686424255,
-0.03143621236085892,
-0.07842039316892624,
0.034895822405815125,
-0.12100353091955185,
-0.10371492058038712,
0.040804408490657806,
0.04117690026760101,
0.021335484459996223,
0.08519827574491501,
0.071383997797966,
0.1295456886291504,
-0.007993304170668125,
-0.004264398943632841,
0.09936857968568802,
0.04714690148830414,
-0.00023631945077795535,
-0.015744537115097046,
0.01412239670753479,
-0.04556870087981224,
0.15550488233566284,
0.023744352161884308,
0.016647471114993095,
0.0006603220826946199,
0.03599853068590164,
-0.0873856171965599,
0.020633084699511528,
0.023177260532975197,
-0.08706528693437576,
-0.08818666636943817,
-0.0026393020525574684,
0.004869232419878244,
-0.013017211109399796,
-0.007554932031780481,
-0.08244925737380981,
-0.12403981387615204,
-0.010820940136909485,
-0.03692667931318283,
-0.015773024410009384,
-0.02382543496787548,
-0.03942986950278282,
0.0394589900970459,
0.028675248846411705,
0.017100905999541283,
-0.016169479116797447,
0.032324984669685364,
0.020082062110304832,
-0.018974384292960167,
0.07234953343868256,
-0.0022767288610339165,
-0.009556950069963932,
0.02079034596681595,
0.09324338287115097,
-0.035476092249155045,
0.10608120262622833,
0.06580503284931183,
-0.07755864411592484,
-0.07529342919588089,
-0.03092992678284645,
0.020867813378572464,
0.060942620038986206,
-0.057462722063064575,
0.03222259506583214,
0.0019282301655039191,
-0.01044933870434761,
0.05924924090504646,
0.1019921600818634,
0.01597064547240734,
0.023768877610564232,
0.023179171606898308,
0.06610551476478577,
0.08914479613304138,
0.00568724051117897,
-0.056039366871118546,
-0.09756147861480713,
0.006010064855217934,
-0.018626289442181587,
-0.003856062423437834,
-0.03774698078632355,
-0.04539983719587326,
-0.11382589489221573,
-0.03867641091346741,
-0.010461126454174519,
0.11181403696537018,
0.04618591070175171,
-0.003748418064787984,
-0.02819114178419113,
-0.056158632040023804,
-0.0020061286631971598,
-0.042015496641397476,
-0.005062561482191086,
0.028657713904976845,
0.03480606526136398,
-0.05825166031718254,
0.02111103944480419,
-0.007847734726965427,
0.013569381088018417,
-0.0588117353618145,
-0.059351854026317596,
-0.1302872598171234,
-0.005335018504410982,
-0.07685834169387817,
0.03522566333413124,
0.021357106044888496,
0.0741608738899231,
0.15202613174915314,
-0.06248766928911209,
0.018696745857596397,
0.03936075419187546,
0.018421988934278488,
-0.15309879183769226,
-0.02486497163772583,
0.01805255375802517,
0.031387485563755035,
0.03167606145143509,
-0.013208672404289246,
0.0767718255519867,
0.006187360268086195,
-0.015630029141902924,
0.021813889965415,
-0.06197213754057884,
-0.03792324289679527,
0.05358511954545975,
0.028818955644965172,
0.04217442870140076,
-0.16203182935714722,
-0.13951285183429718,
-0.007824786938726902,
-0.020875869318842888,
0.024199651554226875,
-0.046006713062524796,
-0.16775131225585938,
-0.0025692253839224577,
0.032104287296533585,
0.08199764043092728,
-0.05185243487358093,
-0.15593408048152924,
0.008567376993596554,
0.032666295766830444,
0.007465739268809557,
-0.00818871520459652,
-0.016775356605648994,
0.024593502283096313,
-0.06539569050073624,
-0.12319305539131165,
0.0023143140133470297,
0.029832489788532257,
0.011026120744645596,
-0.02362823858857155,
-0.10304361581802368,
-0.225346177816391,
-0.11557023972272873,
0.10878568142652512,
-0.011252411641180515,
0.2043309062719345,
0.018222399055957794,
0.11884389072656631,
0.03614770248532295,
0.10259703546762466,
0.0239958968013525,
0.09427344799041748,
0.03738805651664734,
-0.057036299258470535,
-0.001979944994673133,
-0.030252905562520027,
-0.04352928698062897,
0.07571639120578766,
-0.09990016371011734,
0.015381674282252789,
0.012681450694799423,
0.10464344173669815,
0.08978921175003052,
0.017219917848706245,
-0.055386096239089966,
0.03618941456079483,
-0.03260566666722298,
0.039941154420375824,
0.022308701649308205,
-0.044326771050691605,
-0.04407741129398346,
-0.058629002422094345,
-0.040040094405412674,
0.08952540159225464,
-0.05838847905397415,
-0.12544672191143036,
-0.10344880074262619,
0.06665638089179993,
-0.02414473332464695,
0.045701127499341965,
-0.03896700590848923,
-0.0028231136966496706,
0.0007857750752009451,
-0.007887681946158409,
0.02944220043718815,
0.04978509247303009,
0.16985909640789032,
0.052502598613500595,
0.01620912179350853,
-0.06585527211427689,
0.1265885978937149,
0.20210032165050507,
0.08158832043409348,
-0.05330810323357582,
-0.047336891293525696,
-0.07014983892440796,
0.08948303014039993,
0.005908272694796324,
0.08381631225347519,
-0.05385609716176987,
-0.001985865877941251,
0.05020637810230255,
0.04196440055966377,
0.04519297927618027,
0.08788932859897614,
-0.0038464930839836597,
-0.08893394470214844,
-0.07357709109783173,
-0.008725529536604881,
-0.03723379969596863,
0.06885117292404175,
-0.12644091248512268,
-0.04965633153915405,
-0.03893275931477547,
0.041202113032341,
-0.011056741699576378,
-0.1401004195213318,
-0.05675419792532921,
-0.005100516136735678,
0.05894254520535469,
0.02657444216310978,
-0.11625034362077713,
-0.17514339089393616,
-0.15474963188171387,
0.006443332880735397,
0.029293373227119446,
-0.10112222284078598,
-0.08986608684062958,
-0.06908384710550308,
-0.05786660686135292,
-0.04145529866218567,
-0.13500317931175232,
0.002442775759845972,
0.011459269560873508,
0.04630758985877037,
-0.01435151882469654,
-0.06730364263057709,
-0.0028237346559762955,
0.0018356897635385394,
-0.1414392590522766,
-0.005927171558141708,
0.0200363639742136,
0.027075612917542458,
-0.1610228717327118,
-0.1651545614004135,
0.10632448643445969,
0.005316669121384621,
0.08225023001432419,
0.005957077722996473,
-0.0645686611533165,
0.12202474474906921,
0.07976901531219482,
0.011891843751072884,
0.008062227629125118,
0.12353202700614929,
0.14906105399131775,
0.16354408860206604,
0.039071325212717056,
-0.027581533417105675,
-0.04500042274594307,
0.10782168060541153,
0.09998475015163422,
0.1517936736345291,
-0.1073472648859024,
-0.07038076221942902,
0.0246785506606102,
0.03459073230624199,
0.11453279852867126,
0.008670307695865631,
-0.05224893242120743,
-0.0942893698811531,
-0.04445461928844452,
-0.06596766412258148,
0.035720545798540115,
-0.09865495562553406,
-0.010863970965147018,
-0.0455610491335392,
0.1442474126815796,
0.04584229737520218,
-0.022736169397830963,
-0.05243208631873131,
-0.09046900272369385,
0.004028634633868933,
0.09403112530708313,
0.0034899564925581217,
0.0023734024725854397,
-0.0139570701867342,
-0.01593153178691864,
0.01799486018717289,
0.056655652821063995,
0.2205251157283783,
0.14004570245742798,
0.05952630937099457,
-0.14008697867393494,
-0.08422093838453293,
0.17472073435783386,
0.05852987989783287,
0.13311314582824707,
-0.04725334420800209,
0.07169987261295319,
-0.07189860194921494,
0.051501162350177765,
0.04915163293480873,
0.02027169242501259,
-0.012621724978089333,
0.03617525473237038,
0.10603532195091248,
0.052074357867240906,
0.04136740416288376,
0.019953100010752678,
0.05981149524450302,
0.08449096232652664,
0.05269671231508255,
-0.15460361540317535,
-0.1212894394993782,
0.07576781511306763,
0.008566849865019321,
-0.00043327288585714996,
-0.06947697699069977,
-0.008609614335000515,
-0.05058915168046951,
0.04139645770192146,
0.02076370269060135,
-0.002717156894505024,
-0.005292373243719339,
-0.02106514386832714,
-0.04744594171643257,
0.01605280116200447,
0.015479706227779388,
-0.06394155323505402,
-0.07547421008348465,
-0.018294835463166237,
0.06207369267940521,
0.022292710840702057,
0.014623412862420082,
-0.11858077347278595,
-0.15518340468406677,
-0.14986637234687805,
0.0031843779142946005,
0.10301785171031952,
-0.0954257920384407,
-0.12747661769390106,
-0.08673263341188431,
0.07169599831104279,
0.05687043070793152,
-0.11421111226081848,
-0.1040889322757721,
0.006243622396141291,
0.09248432517051697,
-0.10559312254190445,
-0.11916326731443405,
-0.17973345518112183,
-0.048987459391355515,
0.11277259141206741,
-0.08351916819810867,
-0.06849923729896545,
-0.14852100610733032,
0.04557345435023308,
0.10292938351631165,
-0.06833841651678085,
0.10501664876937866,
-0.02946135587990284,
-0.18593484163284302,
-0.1425396203994751,
-0.12780047953128815,
0.07697814702987671,
-0.09840017557144165,
0.004185840953141451,
-0.008831475861370564,
-0.030081914737820625,
-0.013622188940644264,
0.015266056172549725,
0.06929152458906174,
0.03784194961190224,
0.09344004839658737,
-0.11485060304403305,
-0.18091805279254913,
-0.05927928537130356,
0.03397146612405777,
-0.04307793825864792,
0.04067252203822136,
-0.17460083961486816,
-0.035780686885118484,
0.044676847755908966,
-0.04276354983448982,
0.019797872751951218,
0.11266399919986725,
0.10351837426424026,
0.06860929727554321,
-0.013156577944755554,
0.0678384080529213,
0.13497048616409302,
0.09972367435693741,
0.10374261438846588,
-0.07256001979112625,
0.05778999999165535,
0.1605035364627838,
0.16860106587409973,
0.05133891850709915,
-0.024307290092110634,
-0.048665691167116165,
0.0765945240855217,
0.09268921613693237,
0.051493916660547256,
-0.03296182304620743,
-0.01521596685051918,
0.14881183207035065,
0.03974395990371704,
-0.026554293930530548,
-0.12005601078271866,
0.042996834963560104,
-0.061073530465364456,
-0.22177331149578094,
-0.02349003776907921,
0.07883230596780777,
0.19982662796974182,
-0.006002102978527546,
0.0030756026972085238,
0.005710938014090061,
0.09660124778747559,
0.08403278142213821,
-0.06822614371776581,
-0.012022974900901318,
-0.04831809550523758,
0.07887891680002213,
-0.03754713013768196,
-0.048836905509233475,
-0.05761462822556496,
0.006025061476975679,
0.017155548557639122,
-0.011275897733867168,
0.07419352978467941,
0.05353536456823349,
-0.014568198472261429,
0.003902355208992958,
0.005432693287730217,
0.03806235268712044,
0.005782885942608118,
0.02624574862420559,
-0.03689219057559967,
-0.16282127797603607,
0.012081443332135677,
-0.06817615032196045,
-0.10869422554969788,
-0.03069796785712242,
0.03825560212135315,
0.06014899164438248,
0.015855563804507256,
0.011731186881661415,
0.07830961048603058,
0.12479941546916962,
0.13386917114257812,
0.023815417662262917,
0.06853308528661728,
0.052138034254312515,
-0.07068881392478943,
-0.010848011821508408,
0.03110046684741974,
0.002252546837553382,
0.02315065823495388,
-0.09184204787015915,
-0.059838853776454926,
-0.09657022356987,
-0.13419990241527557,
-0.004236381500959396,
0.0032650295179337263,
0.1749236136674881,
0.05246080085635185,
0.02755751833319664,
-0.05205584689974785,
0.13259175419807434,
0.04872479289770126,
0.07888331264257431,
-0.002321459585800767,
0.060658689588308334,
0.045349616557359695,
0.12764233350753784,
0.10393959283828735,
0.08039090037345886,
0.04505117982625961,
0.14953038096427917,
0.09893237054347992,
-0.0006039559957571328,
0.012174969539046288,
0.05520192161202431,
0.059045374393463135,
-0.16530975699424744,
0.01116164866834879,
0.021821528673171997,
0.10996092855930328,
0.06600828468799591,
0.11739005893468857,
0.16134142875671387,
0.002365454100072384,
-0.10320218652486801,
0.011716857552528381,
0.028999535366892815,
0.083291195333004,
0.021683478727936745,
-0.02518261969089508,
-0.06418730318546295,
-0.049949027597904205,
0.00514764292165637,
0.00874084047973156,
-0.018392464146018028,
-0.06708607822656631,
0.040587667375802994,
0.08228784054517746,
0.024364810436964035,
0.021223142743110657,
-0.03772103413939476,
0.06835579127073288,
-0.05645247921347618,
-0.1325349658727646,
-0.04730096831917763,
-0.027642033994197845,
0.07343952357769012,
-0.040210843086242676,
-0.013303672894835472,
-0.0560586079955101,
0.037056051194667816,
0.08391294628381729,
-0.07536526024341583,
0.016664450988173485,
0.033453114330768585,
-0.029375767335295677,
0.0898808017373085,
-0.04053136333823204,
-0.009464659728109837,
0.020299626514315605,
-0.03904679790139198,
-0.022095216438174248,
-0.016078857704997063,
0.01736389473080635,
0.017489468678832054,
0.027463771402835846,
-0.017533207312226295,
-0.06461390107870102,
-0.1062263548374176,
-0.054751086980104446,
-0.07519731670618057,
0.07998554408550262,
0.005583322141319513,
-0.0631328895688057,
0.09443286061286926,
-0.028601691126823425,
0.054007936269044876,
-0.04474559798836708,
0.0017280025640502572,
0.006198763847351074,
-0.044217899441719055,
0.026577206328511238,
0.08527657389640808,
-0.16413217782974243,
-0.0689731165766716,
-0.03869928792119026,
0.07793073356151581,
0.03138086199760437,
-0.008636201731860638,
-0.034778233617544174,
0.06430214643478394,
-0.04757838696241379,
-0.17063289880752563,
-0.05221138894557953,
0.0998229831457138,
-0.06851579993963242,
-0.10276788473129272,
-0.08409802615642548,
0.053309351205825806,
-0.03778347745537758,
0.06925031542778015,
-0.025476867333054543,
-0.03727777302265167,
0.0007171856123022735,
0.02450067736208439,
0.06916093826293945,
-0.03897048532962799,
-0.00819135271012783,
0.09658557921648026,
0.01509898528456688,
-0.0028682814445346594,
-0.07466379553079605,
-0.09807652980089188,
-0.04713941365480423,
0.02223394624888897,
0.010802347213029861,
-0.09101822227239609,
-0.028254207223653793,
-0.07533387839794159,
0.09136540442705154,
-0.0703829973936081,
-0.17309172451496124,
0.013344625942409039,
-0.014420225284993649,
0.05739594250917435,
0.022975701838731766,
0.08445721119642258,
0.07309545576572418,
-0.05166567116975784,
0.020739438012242317,
0.15491414070129395,
0.08908087015151978,
0.07582949846982956,
0.11692581325769424,
-0.05302790552377701,
0.0051941294223070145,
-0.026547713205218315,
-0.046591974794864655,
-0.03271234408020973,
-0.0033077956177294254,
-0.10288117825984955,
0.12865594029426575,
0.02291857823729515,
0.04796887934207916,
-0.07763662189245224,
-0.027151528745889664,
0.07189568877220154,
-0.08075869828462601,
-0.04142552986741066,
-0.12116116285324097,
0.023098884150385857,
-0.021515732631087303,
0.052913397550582886,
0.06248440966010094,
0.02788775973021984,
-0.028987307101488113,
0.11350908130407333,
-0.05176953226327896,
0.1465071141719818,
0.040804486721754074,
-0.006959699559956789,
-0.03605619817972183,
0.10357490926980972,
0.07286971062421799,
-0.01216259878128767,
0.024345319718122482,
0.06337885558605194,
-0.062431756407022476,
-0.03632040321826935,
0.12754423916339874,
-0.03246956691145897,
-0.09894757717847824,
0.05726465582847595,
0.010097424499690533,
0.11765949428081512,
-0.07814785093069077,
-0.025405986234545708,
-0.015753747895359993,
-0.11741571128368378,
0.07092451304197311,
-0.06166011095046997,
-0.08010467886924744,
0.009604819118976593,
0.013294796459376812,
-0.09338320046663284,
-0.024724362418055534,
0.01550246775150299,
0.006995516363531351,
-0.022356580942869186,
-0.02531232126057148,
0.04722055792808533,
-0.03405902162194252,
-0.14612849056720734,
0.05023468658328056,
0.1416618973016739,
-0.018556633964180946,
-0.03008897788822651,
-0.07611411809921265,
-0.13893599808216095,
-0.0758783221244812,
-0.005262000486254692,
-0.08830028027296066,
-0.003415272105485201,
-0.030624402686953545,
0.00029525597346946597,
0.04306419938802719,
0.09334497898817062,
-0.04723530635237694,
-0.07991436868906021,
0.047958169132471085,
0.09481098502874374,
0.00991157814860344,
-0.0474066399037838,
-0.03900739178061485,
0.015499718487262726,
-0.09316389262676239,
-0.03809036314487457,
0.07320062816143036,
0.06470273435115814,
0.04308192431926727,
-0.042883746325969696,
0.01090806070715189,
-0.039384569972753525,
-0.03270978108048439,
0.16726280748844147,
-0.15756067633628845,
-0.052179429680109024,
0.041722897440195084,
-0.005424968432635069,
-0.00023339351173490286,
-0.03449966758489609,
-0.0318465493619442,
0.019887546077370644,
-0.03707883507013321,
-0.02385701984167099,
0.10243218392133713,
-0.07658608257770538,
-0.04264337569475174,
0.06605692952871323,
0.01422735583037138,
-0.10212788730859756,
-0.09859655797481537,
-0.011687642894685268,
0.09269162267446518,
0.15037861466407776,
-0.04173698648810387,
0.017546972259879112,
0.014807207509875298,
0.012351487763226032,
0.03367197513580322,
0.0046285297721624374,
-0.01295688096433878,
-0.03468012064695358,
-0.025764083489775658,
-0.044803421944379807,
0.06942538917064667,
-0.044694773852825165,
0.08814427256584167,
-0.005210626404732466,
-0.00330855674110353,
0.011307899840176105,
-0.019297568127512932,
0.002142429817467928,
0.010256807319819927,
0.051751017570495605,
0.09818794578313828,
0.12138495594263077,
0.008844248950481415,
-0.08705145865678787,
-0.03331523761153221,
0.1644735336303711,
0.18830472230911255,
-0.057014357298612595,
-0.026292189955711365,
-0.08549713343381882,
0.079939104616642,
0.16790927946567535,
-0.15642455220222473,
-0.0323963426053524,
0.0013455572770908475,
-0.006513399071991444,
-0.011521393433213234,
-0.04200685769319534,
0.014997035264968872,
0.011023678816854954,
-0.01921994984149933,
0.04914465174078941,
0.10584366321563721,
0.03620799258351326,
0.00492267357185483,
-0.12263992428779602,
-0.03638242930173874,
0.029706569388508797,
0.10719017684459686,
0.16187784075737,
0.03988909348845482,
-0.009502705186605453,
0.024002501741051674,
0.05784464627504349,
-0.03866434469819069,
0.09057506918907166,
0.10636471956968307,
-0.1159539520740509,
-0.12608273327350616,
-0.036416999995708466,
0.021185409277677536,
0.04038858786225319,
-0.04014007747173309,
0.024750417098402977,
-0.053823258727788925,
-0.08670518547296524,
0.020490430295467377,
0.0630287230014801,
0.029153775423765182,
-0.06147535890340805,
-0.10433055460453033,
-0.13423387706279755,
-0.01925067976117134,
0.009972266852855682,
0.11746424436569214,
-0.0020904126577079296,
-0.1111135333776474,
-0.05243073031306267,
-0.0696747750043869,
0.10741447657346725,
-0.08776383101940155,
-0.11047139763832092,
0.1266576200723648,
0.043090954422950745,
0.08941932022571564,
0.09297648817300797,
0.06452157348394394,
0.02850520797073841,
-0.0004237836110405624,
-0.0350821353495121,
0.10690702497959137,
0.07525914907455444,
0.0009147599921561778,
-0.03480004519224167,
0.023404419422149658,
-0.14585337042808533,
0.14584879577159882,
0.1032826229929924,
0.07509061694145203,
0.016163647174835205,
-0.15708483755588531,
-0.002405836945399642,
0.011432191357016563,
0.027384717017412186,
-0.059272147715091705,
-0.06237861141562462,
0.014466010965406895,
0.0192590169608593,
-0.08907341212034225,
-0.050637852400541306,
0.06792927533388138,
0.002639245707541704,
0.06564159691333771,
0.04082265868782997,
-0.01908297650516033,
-0.06213650852441788,
0.024248674511909485,
0.04875116050243378,
-0.04391030967235565,
-0.060252636671066284,
0.021305721253156662,
-0.02423221431672573,
-0.021071910858154297,
0.007308563683182001,
0.025527624413371086,
-0.029961582273244858,
0.002113987924531102,
0.02825731597840786,
0.13359422981739044,
0.08076061308383942,
-0.007391897030174732,
0.01593809761106968,
0.04960764944553375,
-0.01079315785318613,
-0.006154870614409447,
-0.018442923203110695,
-0.009716170839965343,
0.023848237469792366,
-0.03971407935023308,
-0.08896248042583466,
0.011285617016255856,
0.005347370635718107,
0.0004809758102055639,
-0.05907328799366951,
0.007740164641290903,
0.03735510632395744,
-0.007125131785869598,
0.047315970063209534,
0.011846287176012993,
-0.08960501849651337,
-0.08864183723926544,
0.002941444981843233,
0.002508286153897643,
0.014519979245960712,
0.04976066201925278,
-0.14833097159862518,
-0.07714369148015976,
0.02822928875684738,
-0.02986953593790531,
-0.05945481359958649,
-0.037074461579322815,
0.09600707143545151,
0.02478109858930111,
0.00012917895219288766,
-0.06952992081642151,
0.06628994643688202,
0.02257326990365982,
0.06989249587059021,
0.022070471197366714,
-0.0372479222714901,
0.012757866643369198,
-0.017720060423016548,
-0.019790811464190483,
-0.02160332351922989,
-0.20178167521953583,
-0.011435254476964474,
0.010955157689750195,
-0.02716001123189926,
0.1028127372264862,
0.04960903897881508,
-0.04173131659626961,
-0.0842728316783905,
-0.04876646772027016,
0.02634338103234768,
0.10078258812427521,
0.06334304064512253,
0.08374007046222687,
0.07381897419691086,
0.04069886729121208,
-0.0957491472363472,
0.029667174443602562,
-0.011023269966244698,
-0.017929155379533768,
0.006222235504537821,
-0.13772568106651306,
-0.003934185951948166,
0.05387192964553833,
0.13580746948719025,
0.0046967919915914536,
0.09294185787439346,
0.007199706509709358,
0.08245016634464264,
0.17256490886211395,
0.036776330322027206,
0.06604746729135513,
-0.07034222781658173,
0.0398167222738266,
0.09062635898590088,
0.02992950566112995,
-0.01431184820830822,
-0.0006383408326655626,
0.10843878239393234,
0.03455844894051552,
-0.03936994448304176,
-0.042398661375045776,
0.05641590803861618,
0.08828187733888626,
-0.06058439239859581,
-0.09655197709798813,
-0.0265765693038702,
0.0935177206993103,
-0.003608079394325614,
-0.0696985051035881,
0.013326500542461872,
-0.010743089951574802,
0.061529163271188736,
0.17511983215808868,
0.06596645712852478,
-0.10971426218748093,
-0.13282687962055206,
-0.189768984913826,
0.003951555583626032,
-0.06612542271614075,
-0.003017025999724865,
-0.11383680254220963,
-0.09230662137269974,
0.020481513813138008,
-0.09597714990377426,
0.09634401649236679,
0.10652350634336472,
0.03146057948470116,
-0.01992318406701088,
-0.02061324194073677,
0.03725309297442436,
-0.0290591549128294,
-0.030896537005901337,
-0.031895995140075684,
-0.07961519062519073,
-0.01335672102868557,
-0.04271259531378746,
0.040204860270023346,
0.0720570832490921,
-0.019667014479637146,
-0.0326099693775177,
-0.005801021587103605,
-0.03397669643163681,
0.06769265234470367,
0.01163511537015438,
0.012317695654928684,
0.13549385964870453,
0.07436742633581161,
0.016874097287654877,
-0.027965757995843887,
-0.03548678755760193,
0.03669316694140434,
0.02490709163248539,
0.05996347963809967,
0.006571891717612743,
0.022753514349460602,
-0.03591381758451462,
-0.005370993632823229,
-0.09608051180839539,
-0.06615083664655685,
-0.08384627103805542,
-0.04087483510375023,
-0.08311208337545395,
-0.10678475350141525,
-0.24011725187301636,
-0.021047698333859444,
-0.1631181240081787,
-0.07526485621929169,
-0.050904810428619385,
-0.04651141166687012,
-0.0953642800450325,
-0.04906079173088074,
-0.09600112587213516,
-0.04920348897576332,
-0.02851608768105507,
-0.0680454671382904,
-0.008988667279481888,
0.13353011012077332,
0.09444821625947952,
0.12595833837985992,
0.08186575025320053,
0.14243093132972717,
-0.004342059139162302,
-0.01650114171206951,
0.1598995476961136,
0.09704925864934921,
0.12793049216270447,
0.03398561105132103,
-0.03707326203584671,
0.028487909585237503,
0.03335992246866226,
0.1344064474105835,
0.01299179159104824,
-0.030789222568273544,
-0.0019498101901262999,
0.022298278287053108,
0.062365904450416565,
-0.004077978432178497,
0.12250491976737976,
0.015299969352781773,
0.006745189893990755,
0.016415370628237724,
0.048757877200841904,
0.13822540640830994,
-0.056188225746154785,
-0.06536247581243515,
0.009655781090259552,
0.06069408729672432,
-0.04045325517654419,
-0.052909091114997864,
0.01602988876402378,
0.16025403141975403,
0.05534186586737633,
0.009798165410757065,
-0.04183994606137276,
-0.03640730306506157,
-0.013704461976885796,
0.10107184201478958,
0.029300259426236153,
-0.12118716537952423,
0.061854057013988495,
0.015531803481280804,
0.004809658043086529,
0.0011554398806765676,
0.04795985296368599,
0.012174170464277267,
0.019181692972779274,
-0.0832456722855568,
-0.08751458674669266,
-0.029230741783976555,
0.04675772413611412,
0.08905664831399918,
-0.07573695480823517,
-0.040323421359062195,
-0.10439719259738922,
0.020176375284790993,
0.05433046072721481,
-0.07820682227611542,
-0.002549476455897093,
-0.10282241553068161,
0.02430044673383236,
0.039407193660736084,
0.08494733273983002,
0.024520594626665115,
0.03723789379000664,
-0.010480913333594799,
0.046500809490680695,
-0.027148369699716568,
-0.0022668573074042797,
-0.02414330095052719,
-0.034302692860364914,
0.05187181010842323,
0.026902131736278534,
0.032999902963638306,
0.07290302217006683,
0.006764530669897795,
0.027884546667337418,
0.05479758232831955,
0.09294510632753372,
-0.01256459392607212,
0.009733996354043484,
-0.05120987072587013,
-0.028056003153324127,
-0.06632585823535919,
-0.1084824949502945,
-0.07892536371946335,
-0.11142169684171677,
-0.10779564082622528,
-0.12256672233343124,
-0.14361681044101715,
0.05506882816553116,
-0.1225758045911789,
-0.1023019552230835,
-0.0024206952657550573,
-0.07814835757017136,
0.006609782576560974,
0.05670124292373657,
-0.057723116129636765,
0.004353682044893503,
0.02572605200111866,
0.015830690041184425,
0.027248287573456764,
0.045565374195575714,
0.019254863262176514,
-0.05353014916181564,
-0.031894322484731674,
-0.1275530308485031,
0.034071918576955795,
-0.013076352886855602,
-0.006353853736072779,
0.0796864703297615,
0.05466516315937042,
0.05958808213472366,
0.027461593970656395,
0.00856568943709135,
0.10323227941989899,
0.0930316224694252,
0.06625863164663315,
0.022176088765263557,
-0.039548110216856,
0.00707250414416194,
0.14601841568946838,
0.023253275081515312,
-0.101232148706913,
-0.09996430575847626,
-0.04827398434281349,
-0.00726963160559535,
0.025086181238293648,
0.1372005194425583,
0.11684119701385498,
0.08681826293468475,
0.0319969579577446,
0.00924654770642519,
0.07435707002878189,
0.1801542192697525,
0.03905104845762253,
0.01834344118833542,
0.08206379413604736,
0.011178355664014816,
0.06320834159851074,
0.015824954956769943,
0.11659705638885498,
0.09758462756872177,
0.07620333135128021,
-0.02774570882320404,
-0.09735596925020218,
0.07006575912237167,
0.08273128420114517,
0.059718042612075806,
-0.07039481401443481,
-0.044852618128061295,
0.04335222393274307,
-0.11999236792325974,
-0.02049260400235653,
0.10747300833463669,
0.13720591366291046,
0.04955210164189339,
0.033546026796102524,
0.04047232121229172,
-0.0007907550316303968,
0.055147670209407806,
0.13723142445087433,
0.057735808193683624,
0.029926255345344543,
-0.002248425269499421,
0.07554253190755844,
0.0953369215130806,
0.10602013021707535,
0.17938481271266937,
0.10502326488494873,
-0.023514041677117348,
0.009633411653339863,
0.0072981081902980804,
0.12408409267663956,
-0.017256641760468483,
-0.057725973427295685,
0.016621433198451996,
0.14370355010032654,
0.0835779458284378,
-0.24329045414924622,
-0.26248106360435486,
-0.21202346682548523,
-0.03697635233402252,
-0.07063142955303192,
-0.1415349543094635,
-0.10557576268911362,
-0.09276630729436874,
-0.08508828282356262,
-0.11054369062185287,
-0.15830105543136597,
-0.12703248858451843,
-0.10601457208395004,
-0.029123563319444656,
-0.029521148651838303,
0.008909567259252071,
0.04209906607866287,
0.1580205261707306,
-0.02263611927628517,
-0.09448219835758209,
-0.038366809487342834,
0.05245133489370346,
0.14065229892730713,
-0.03585200756788254,
0.08367275446653366,
0.13124997913837433,
-0.01369132474064827,
-0.07383988797664642,
-0.09422895312309265,
0.007464793510735035,
-0.06443245708942413,
0.023645324632525444,
-0.012082243338227272,
-0.06492473185062408,
0.11676914989948273,
0.032233625650405884,
0.10923656821250916,
-0.02686317265033722,
-0.006387529894709587,
-0.027056410908699036,
0.031753070652484894,
-0.03706066682934761,
0.03140615299344063,
0.05890895053744316,
-0.06319534778594971,
0.0018162353662773967,
-0.03735742345452309,
0.08093453198671341,
-0.012058774940669537,
-0.06771746277809143,
-0.04251401498913765,
-0.08939896523952484,
-0.10894569754600525,
0.06850706040859222,
0.00913238525390625,
0.010850106365978718,
-0.03063415363430977,
-0.06054510921239853,
0.07463092356920242,
-0.04829908162355423,
-0.027391202747821808,
0.008637629449367523,
-0.017189862206578255,
-0.07517720758914948,
-0.07924789190292358,
0.030102672055363655,
-0.03301815688610077,
0.07627792656421661,
0.10773022472858429,
0.013081075623631477,
0.03650050237774849,
0.010590760968625546,
0.015357417985796928,
0.05105416476726532,
0.05280265212059021,
0.09343124181032181,
0.12574604153633118,
0.12514010071754456,
0.002149631967768073,
-0.08630035817623138,
-0.11959710717201233,
-0.12292774021625519,
-0.09652059525251389,
-0.07400250434875488,
-0.012111987918615341,
-0.09593270719051361,
-0.09438108652830124,
-0.09903137385845184,
-0.12022212892770767,
-0.13045822083950043,
-0.045466348528862,
-0.042221251875162125,
-0.005872045177966356,
-0.1404276043176651,
-0.07510192692279816,
-0.11544328182935715,
-0.033182885497808456,
0.004434575792402029,
-0.06990467011928558,
0.025932395830750465,
0.004545130301266909,
-0.06446649134159088,
0.031483013182878494,
-0.20801813900470734,
-0.03563788905739784,
-0.041222937405109406,
0.0013769989600405097,
0.02495461329817772,
0.07124970853328705,
0.21066562831401825,
0.026281200349330902,
-0.02673012763261795,
-0.07114958763122559,
-0.02485102415084839,
-0.09190504997968674,
-0.0007602752302773297,
-0.027276868000626564,
0.09239554405212402,
0.0015796709340065718,
-0.10767877846956253,
0.017972372472286224,
-0.04200912266969681,
0.10515471547842026,
0.0344901978969574,
-0.030351584777235985,
-0.010354799218475819,
0.03201952576637268,
0.041692573577165604,
0.07776840031147003,
-0.07016678899526596,
-0.049795106053352356,
0.06536772102117538,
0.032065436244010925,
0.05398217588663101,
-0.011909544467926025,
-0.2099079042673111,
-0.12222693860530853,
0.029727639630436897,
-0.00849007349461317,
0.03699423745274544,
-0.10326095670461655,
-0.002335607772693038,
0.025271445512771606,
-0.05580919608473778,
0.03857431560754776,
-0.04885799065232277,
-0.08052871376276016,
-0.08657820522785187,
-0.047857534140348434,
-0.07457305490970612,
-0.03726959601044655,
-0.007383707910776138,
-0.10627703368663788,
-0.08015158772468567,
-0.20964652299880981,
-0.032229743897914886,
0.069930300116539,
0.05901656672358513,
0.2127859890460968,
0.055933210998773575,
0.09008148312568665,
0.03556419536471367,
0.012609225697815418,
0.18691152334213257,
0.12994854152202606,
0.11961378157138824,
0.14316622912883759,
0.0399126335978508,
-0.0471368283033371,
0.021903015673160553,
0.038574863225221634,
-0.04094366356730461,
-0.014353873208165169,
-0.017296859994530678,
-0.021868446841835976,
0.004459261894226074,
-0.052913498133420944,
-0.07057862728834152,
-0.054079536348581314,
-0.0255283173173666,
0.16200190782546997,
0.08783037960529327,
-0.02873353473842144,
-0.031283605843782425,
-0.019504979252815247,
-0.003783388528972864,
0.043875306844711304,
-0.05096245929598808,
-0.013829600065946579,
-0.12305863946676254,
-0.021344833076000214,
0.04094785824418068,
0.024274952709674835,
0.05542054399847984,
0.01472883578389883,
0.01448830310255289,
0.08185430616140366,
0.03602771461009979,
0.0010723213199526072,
0.06536181271076202,
-0.017554698511958122,
-0.01120763923972845,
-0.06584788858890533,
0.06266805529594421,
-0.021891232579946518,
-0.01072776224464178,
-0.003984047099947929,
-0.05688799172639847,
-0.10524142533540726,
0.02650294452905655,
0.08008961379528046,
0.03991736099123955,
-0.11011726409196854,
0.057321593165397644,
-0.043627578765153885,
-0.02500293403863907,
-0.0693444013595581,
0.06981723010540009,
0.07993319630622864,
-0.03986683860421181,
-0.006860652472823858,
-0.027837609872221947,
0.0016090749995782971,
0.09032907336950302,
-0.06500128656625748,
0.028094058856368065,
0.09846983850002289,
0.07443352043628693,
0.0008341772481799126,
-0.03866834193468094,
0.06666027009487152,
-0.07040391117334366,
0.0496085062623024,
-0.04166106879711151,
-0.08717060834169388,
-0.08004464954137802,
-0.19335389137268066,
0.05270461365580559,
0.03248127922415733,
0.06841300427913666,
-0.11469385772943497,
-0.021008677780628204,
0.019969958811998367,
-0.07123630493879318,
-0.15148906409740448,
-0.061409689486026764,
0.013105781748890877,
-0.01638108678162098,
-0.07708500325679779,
-0.00786703359335661,
-0.03623506426811218,
0.024496065452694893,
-0.1576046198606491,
-0.057844605296850204,
-0.008467745035886765,
-0.03792167082428932,
-0.04741957411170006,
-0.07885497063398361,
0.10721483826637268,
0.03546040132641792,
0.11148753017187119,
0.0006042942986823618,
0.03471284359693527,
0.10268336534500122,
0.0326327383518219,
-0.005255819298326969,
-0.09180032461881638,
0.019474904984235764,
0.10208901762962341,
0.2133379727602005,
0.12934595346450806,
0.06831014156341553,
-0.01711094193160534,
0.11795845627784729,
0.1024676263332367,
-0.040782418102025986,
-0.056886762380599976,
-0.05188737437129021,
0.03231325000524521,
-0.026338009163737297,
0.051570188254117966,
-0.0008368875132873654,
-0.09069433063268661,
-0.06235562637448311,
-0.14816191792488098,
-0.01595279388129711,
0.0642937645316124,
-0.08973032981157303,
-0.039611902087926865,
-0.08958380669355392,
0.14202721416950226,
0.022213876247406006,
0.023534998297691345,
0.08485544472932816,
0.02947358787059784,
0.09421242773532867,
0.08434702455997467,
-0.00362107390537858,
-0.05515577271580696,
0.03894869610667229,
0.025757361203432083,
0.004552609287202358,
-0.00046019520959816873,
0.24819298088550568,
0.21089546382427216,
0.03937683254480362,
-0.14449191093444824,
0.028676247224211693,
0.08009544759988785,
0.01239518541842699,
-0.029740745201706886,
0.018920140340924263,
0.050073470920324326,
-0.10622653365135193,
0.13419678807258606,
0.10106327384710312,
-0.060175471007823944,
-0.08309515565633774,
0.11076965928077698,
0.14449912309646606,
0.09764672070741653,
0.02860272116959095,
-0.021123189479112625,
0.026511596515774727,
0.032348550856113434,
-0.08086105436086655,
-0.0926494225859642,
0.019575927406549454,
-0.033559128642082214,
0.057889774441719055,
0.10222101211547852,
0.0828181579709053,
0.03536072000861168,
-0.0560852512717247,
0.07849384844303131,
0.009234827011823654,
-0.009057661518454552,
-0.08673287183046341,
-0.10650160908699036,
-0.1421307921409607,
-0.010938995517790318,
0.11792602390050888,
-0.07205948978662491,
-0.08616906404495239,
0.03406741842627525,
0.13220900297164917,
0.09295959770679474,
3.7088159388076747e-06,
-0.018076788634061813,
-0.10548734664916992,
0.033541180193424225,
0.040299300104379654,
0.09261826425790787,
-0.012469498440623283,
-0.11197984963655472,
0.011786905117332935,
0.08804135024547577,
0.0915333479642868,
-0.041947703808546066,
-0.12833303213119507,
-0.05003637447953224,
-0.06215488538146019,
-0.1484641134738922,
-0.03162169083952904,
-0.044321078807115555,
-0.017759175971150398,
0.009095810353755951,
0.04931788891553879,
-0.15133477747440338,
-0.17957502603530884,
-0.009953140281140804,
0.015479057095944881,
0.0005435384227894247,
0.0453619621694088,
-0.07367466390132904,
-0.1424182653427124,
-0.0803629457950592,
0.058773744851350784,
0.03425400331616402,
-0.17355592548847198,
0.031726062297821045,
0.04245443642139435,
0.01409730315208435,
0.03458071127533913,
0.023615144193172455,
0.1783018261194229,
0.028999442234635353,
-0.019681548699736595,
0.029814571142196655,
-0.13740026950836182,
-0.1457529217004776,
-0.006931387819349766,
-0.002273515798151493,
-0.05702676996588707,
-0.2070145308971405,
-0.04740026965737343,
0.059224531054496765,
-0.021099509671330452,
-0.059656523168087006,
0.044354770332574844,
0.05877770110964775,
-0.029182983562350273,
-0.022474540397524834,
0.08533111959695816,
0.11632446944713593,
0.06795249134302139,
0.01187766995280981,
-0.059598226100206375,
-0.07830962538719177,
0.04474098980426788,
0.05620862543582916,
0.08527877926826477,
-0.019260866567492485,
-0.04159167781472206,
0.14049246907234192,
0.18114055693149567,
-0.03054421953856945,
-0.18125832080841064,
0.013789939694106579,
0.20859317481517792,
0.04912075027823448,
0.04339515045285225,
-0.08910275995731354,
0.07747510075569153,
-0.024698911234736443,
-0.027187667787075043,
0.042566847056150436,
0.08987485617399216,
0.19304975867271423,
0.13076363503932953,
0.030394338071346283,
0.028134718537330627,
0.1293851137161255,
0.06250490248203278,
-0.02066422440111637,
-0.014278632588684559,
-0.11002220958471298,
-0.008441459387540817,
-0.03783148527145386,
-0.059524986892938614,
-0.08183598518371582,
0.052273139357566833,
0.007295848336070776,
-0.15616865456104279,
0.02069789171218872,
0.12951858341693878,
0.03695714846253395,
0.012218191288411617,
0.014214363880455494,
-0.05612832307815552,
0.05793270841240883,
-0.045383039861917496,
-0.05019862577319145,
-0.18097908794879913,
-0.10336126387119293,
0.057972412556409836,
0.01939411833882332,
0.03348703309893608,
0.05643221735954285,
0.06385291367769241,
-0.05491513013839722,
-0.0078116608783602715,
-0.07724073529243469,
0.1766667664051056,
0.1469040811061859,
0.028671231120824814,
0.010182990692555904,
-0.014138955622911453,
-0.04777272045612335,
0.006457479204982519,
0.05163395404815674,
0.01654212363064289,
-0.009467363357543945,
-0.09401948750019073,
-0.06459424644708633,
-0.04376472160220146,
-0.04136389121413231,
0.015653593465685844,
-0.06934119760990143,
0.062187351286411285,
0.14398890733718872,
0.14226382970809937,
0.04083476588129997,
0.0782165676355362,
0.06501808017492294,
0.18352271616458893,
0.10082828998565674,
0.08284381031990051,
0.07354941964149475,
0.11614745110273361,
0.05673893541097641,
0.005079575348645449,
-0.10941477864980698,
0.038941171020269394,
0.13029421865940094,
0.0742294043302536,
-0.02187548205256462,
0.03967197239398956,
-0.03394453972578049,
0.05777814984321594,
0.026337916031479836,
-0.09006921947002411,
-0.1633027344942093,
0.0487944670021534,
-0.09556643664836884,
-0.08569876849651337,
0.032628342509269714,
0.10616753995418549,
-0.05749553442001343,
-0.033197514712810516,
-0.08382419496774673,
-0.012225087732076645,
0.13146308064460754,
0.09913881123065948,
0.032936710864305496,
-0.014104936271905899,
0.048324570059776306,
0.014993611723184586,
0.08992115408182144,
-0.03654143586754799,
-0.09538792818784714,
0.060218390077352524,
-0.06646067649126053,
-0.05082439258694649,
-0.08124066889286041,
0.008959128521382809,
0.07337681949138641,
0.10942034423351288,
0.05327155813574791,
-0.0761345624923706,
-0.037467703223228455,
0.0709565281867981,
0.1527758538722992,
-0.010359598323702812,
-0.1216137483716011,
0.004218989983201027,
-0.008672063238918781,
-0.03966081142425537,
-0.015710897743701935,
-0.1048111841082573,
-0.003937968518584967,
-0.06967071443796158,
-0.03099842555820942,
0.04480918496847153,
-0.04810820519924164,
-0.00889295618981123,
-0.0672999769449234,
0.003756033955141902,
0.07686148583889008,
0.0020634399261325598,
0.029412442818284035,
0.0897560715675354,
0.10579799860715866,
0.13880926370620728,
0.04895839840173721,
-0.004459740128368139,
-0.05154340714216232,
-0.08152442425489426,
0.02405468001961708,
-0.052832357585430145,
0.004609191324561834,
0.03557884320616722,
-0.04944827780127525,
-0.1113789975643158,
-0.05019540712237358,
-0.09213967621326447,
0.07808888703584671,
0.1371535211801529,
-0.02199266105890274,
-0.17546801269054413,
-0.01968834176659584,
-0.05199092626571655,
0.031961046159267426,
-0.0826200619339943,
0.15091469883918762,
0.14272893965244293,
0.037180136889219284,
-0.12575364112854004,
0.04736398905515671,
0.054093603044748306,
0.030107231810688972,
-0.02117786556482315,
0.031443264335393906,
-0.09363947808742523,
-0.06429972499608994,
-0.017346126958727837,
0.06085093319416046,
-0.021443191915750504,
-0.06851426512002945,
0.1532888412475586,
0.1080956682562828,
-0.021524803712964058,
-0.04866207763552666,
-0.0399874709546566,
0.06620620936155319,
0.027974221855401993,
-0.08068981766700745,
0.019992399960756302,
-0.07749577611684799,
0.09618666023015976,
0.07330762594938278,
-0.029456907883286476,
-0.13931885361671448,
0.061721354722976685,
0.121432825922966,
-0.07514943927526474,
-0.05616196244955063,
-0.1406816691160202,
-0.019103650003671646,
-0.010012701153755188,
-0.06586015969514847,
0.04116489738225937,
0.05020388960838318,
-0.14022840559482574,
-0.0799504891037941,
-0.009391493164002895,
0.011577045544981956,
0.12601077556610107,
0.052543073892593384,
0.015024318359792233,
0.09949179738759995,
0.05118921026587486,
0.10146153718233109,
-0.020650817081332207,
-0.15541207790374756,
-0.06306478381156921,
0.014041775837540627,
0.15162771940231323,
0.01080990582704544,
-0.10323700308799744,
0.006826931145042181,
0.08443520218133926,
0.1340181678533554,
0.039422184228897095,
0.013842759653925896,
-0.051009636372327805,
-0.06902053207159042,
0.009119773283600807,
0.033154550939798355,
-0.11218474060297012,
-0.005866260267794132,
-0.15744028985500336,
-0.07160407304763794,
0.1393042653799057,
0.10085552930831909,
-0.05594697967171669,
-0.08448948711156845,
0.08309455960988998,
-0.02859918214380741,
-0.029080307111144066,
0.040475163608789444,
0.0009056510752998292,
-0.04268629848957062,
0.11220353841781616,
0.08695530891418457,
-0.013244791887700558,
-0.14469802379608154,
-0.11499717831611633,
0.08019807189702988,
0.06630976498126984,
-0.11267067492008209,
-0.028957068920135498,
-0.04668522998690605,
0.01651550643146038,
0.13562484085559845,
0.12732921540737152,
0.1181168183684349,
0.18854767084121704,
-0.019908031448721886,
-0.08025314658880234,
-0.022582966834306717,
0.04554254561662674,
-0.0130443861708045,
-0.019029706716537476,
0.049964021891355515,
0.17608249187469482,
0.007206810638308525,
-0.09745052456855774,
-0.01655185967683792,
0.02179357409477234,
0.12714244425296783,
0.18872354924678802,
0.06655547767877579,
0.04387764632701874,
0.16059677302837372,
0.05229787528514862,
0.05798745155334473,
-0.007797911297529936,
-0.12366963177919388,
-0.028685608878731728,
0.02695656195282936,
0.08967617154121399,
-0.07819797843694687,
-0.10199867933988571,
0.07447223365306854,
0.05989442393183708,
0.037600621581077576,
0.010923320427536964,
0.11028613150119781,
-0.019949566572904587,
-0.0930909588932991,
-0.10176257789134979,
-0.06546889245510101,
0.04961064085364342,
-0.09923049062490463,
0.015303012914955616,
-0.05504857748746872,
-0.2013985961675644,
0.14516378939151764,
-0.02849426306784153,
-0.055334772914648056,
-0.04770737886428833,
-0.040747787803411484,
-0.0729203149676323,
-0.0458373948931694,
-0.08335400372743607,
0.07977721840143204,
0.1389276534318924,
-0.043332748115062714,
-0.02057715132832527,
0.042423926293849945,
-0.026654021814465523,
0.008692552335560322,
0.05070071667432785,
0.1330949068069458,
-0.01562744565308094,
-0.15992076694965363,
-0.22431576251983643,
0.11416365951299667,
0.024046098813414574,
0.014838269911706448,
-0.05201655998826027,
-0.044876717031002045,
-0.08177526295185089,
0.03269391134381294,
0.053709425032138824,
0.082756906747818,
0.1479206383228302,
0.0687749832868576,
0.16267244517803192,
-0.09563103318214417,
-0.019745158031582832,
0.043881334364414215,
0.0181934405118227,
-0.10065043717622757,
-0.032759640365839005,
-0.06605109572410583,
-0.10313405841588974,
-0.13361692428588867,
-0.16677500307559967,
-0.05190489813685417,
-0.06406084448099136,
0.003031741129234433,
-0.12888236343860626,
-0.11491159349679947,
-0.03027704916894436,
0.07246898859739304,
0.07613568753004074,
-0.09902510046958923,
-0.10791642218828201,
0.04971729591488838,
0.10224155336618423,
-0.0003255603078287095,
0.0700175017118454,
-0.02478344552218914,
0.00012058336869813502,
-0.02761981636285782,
-0.014583595097064972,
0.13603423535823822,
-0.027447503060102463,
-0.16452032327651978,
-0.0106005584821105,
-0.0282543133944273,
0.036924950778484344,
-0.025653624907135963,
-0.1394243836402893,
-0.1640283614397049,
-0.18712320923805237,
0.020460711792111397,
0.07634815573692322,
-0.031691379845142365,
-0.12970921397209167,
0.047635771334171295,
-0.08342422544956207,
-0.10832981020212173,
-0.022991279140114784,
0.20248587429523468,
0.11891940236091614,
-0.06631013751029968,
0.05510856583714485,
0.09415193647146225,
-0.01809699460864067,
-0.0033120305743068457,
0.10287723690271378,
0.09595389664173126,
-0.0702815055847168,
-0.12732763588428497,
0.02243860624730587,
0.14032265543937683,
0.0693492740392685,
-0.08171722292900085,
-0.11040093004703522,
-0.19085639715194702,
0.03678032383322716,
0.036201369017362595,
0.03290238231420517,
-0.021900692954659462,
-0.1700897514820099,
0.10771427303552628,
0.14036764204502106,
-0.13803690671920776,
-0.13319933414459229,
0.003920849412679672,
-0.13871009647846222,
-0.13283325731754303,
-0.056920018047094345,
0.042337726801633835,
0.18338614702224731,
-0.08524046093225479,
-0.14583756029605865,
-0.04704907909035683,
-0.00856351014226675,
0.09803997725248337,
0.10034272074699402,
-0.10655918717384338,
-0.17873789370059967,
-0.11805818974971771,
-0.07618113607168198,
0.11409146338701248,
-0.09735780209302902,
-0.05895080417394638,
-0.08568858355283737,
0.1289643496274948,
0.06384875625371933,
-0.024783853441476822,
-0.02064644731581211,
0.10542427003383636,
0.029319709166884422,
-0.005750571843236685,
0.05974825471639633,
-0.03662348538637161,
-0.09101207554340363,
0.014763162471354008,
0.1654340922832489,
-0.09583080559968948,
-0.08329390734434128,
-0.0029461411759257317,
0.0504201203584671,
-0.05468209087848663,
0.04278627783060074,
-0.023487549275159836,
-0.061257295310497284,
-0.11975614726543427,
0.0007253063376992941,
-0.07125501334667206,
-0.07062311470508575,
-0.13808667659759521,
-0.06627068668603897,
0.024569401517510414,
-0.00546284019947052,
-0.007350697182118893,
-0.013596581295132637,
0.05779210105538368,
0.02651076577603817,
0.008253821171820164,
0.0318785086274147,
0.05318860337138176,
0.10793992877006531,
0.016529392451047897,
0.03329157829284668,
0.012614548206329346,
0.019706198945641518,
-0.040961094200611115,
-0.002412958536297083,
-0.020641976967453957,
-0.062270328402519226,
-0.049761462956666946,
0.05648340657353401,
0.06430648267269135,
0.007884250953793526,
-0.08117572218179703,
-0.21319784224033356,
-0.14994029700756073,
0.10966774821281433,
0.11084359884262085,
-0.05791231244802475,
-0.11001402884721756,
-0.006728472653776407,
-0.057169269770383835,
-0.09043136984109879,
-0.058845896273851395,
-0.0058840312995016575,
0.09290709346532822,
-0.1230883002281189,
-0.06366796791553497,
-0.08276257663965225,
-0.029947470873594284,
0.038899898529052734,
0.13891083002090454,
-0.05266252160072327,
-0.05468573421239853,
-0.0010204226709902287,
0.11546090245246887,
-0.03738880902528763,
0.11341569572687149,
-0.0017803661758080125,
0.02521733194589615,
0.07260657846927643,
-0.17818526923656464,
0.03328874334692955,
-0.017751798033714294,
0.017622297629714012,
-0.10053969919681549,
0.09193383157253265,
0.09807182848453522,
0.04126497730612755,
-0.016379786655306816,
-0.08158276975154877,
0.010355914942920208,
-0.1642294079065323,
-0.12332122772932053,
-0.06412198394536972,
-0.05611235275864601,
0.1362549215555191,
0.12930946052074432,
0.0016426204238086939,
-0.07235446572303772,
-0.034099627286195755,
0.015665987506508827,
0.03934240713715553,
0.1757720410823822,
0.02496395818889141,
-0.014666141010820866,
-0.009361921809613705,
-0.0025400095619261265,
0.11230021715164185,
-0.010456559248268604,
-0.059847503900527954,
-0.04331713169813156,
0.05743665248155594,
0.008616051636636257,
-0.014099308289587498,
0.056792762130498886,
-0.035240523517131805,
-0.0038283937610685825,
-0.05876604840159416,
-0.026339959353208542,
0.06065565347671509,
-0.0766700878739357,
-0.035112787038087845,
-0.11101677268743515,
-0.16127513349056244,
-0.09659044444561005,
-0.016170581802725792,
-0.008780405856668949,
0.05498811975121498,
0.1674281358718872,
-0.03795156627893448,
0.052494630217552185,
-0.069176085293293,
0.10849396884441376,
0.1597050130367279,
0.10738404095172882,
0.07615285366773605,
0.13054798543453217,
-0.05845772847533226,
0.13095474243164062,
0.21851421892642975,
0.09706355631351471,
-0.0565505288541317,
-0.10251322388648987,
-0.009210127405822277,
-0.103536456823349,
-0.04502655938267708,
0.00742788752540946,
-0.055228523910045624,
-0.12142358720302582,
-0.022938495501875877,
0.010372407734394073,
-0.0010889893164858222,
0.013953134417533875,
-0.05991892144083977,
0.11434333771467209,
-0.13025057315826416,
0.10261021554470062,
0.034438155591487885,
-0.034169234335422516,
-0.060089606791734695,
-0.06593719124794006,
-0.018330363556742668,
-0.0027016568928956985,
-0.08348735421895981,
0.0072796521708369255,
-0.0024965957272797823,
0.051536355167627335,
0.12947075068950653,
0.14329728484153748,
-0.00737422751262784,
-0.09124328941106796,
-0.06295895576477051,
-0.06612253934144974,
-0.012770464643836021,
0.04226476326584816,
-0.07884479314088821,
-0.16670793294906616,
-0.08427389711141586,
-0.06263940781354904,
0.04183709993958473,
-0.00799188669770956,
0.07063274085521698,
-0.02010117471218109,
0.16110312938690186,
-0.00822484027594328,
0.0014588538324460387,
-0.0928323045372963,
0.010362316854298115,
-0.0735400840640068,
-0.007839282974600792,
0.17464002966880798,
0.13947324454784393,
0.15066273510456085,
0.1673387587070465,
0.14762860536575317,
0.069435715675354,
0.05992499738931656,
0.24565160274505615,
0.16346263885498047,
0.0233821552246809,
-0.02348041534423828,
0.06839616596698761,
0.079622782766819,
-0.07287668436765671,
-0.02265186235308647,
-0.040706817060709,
-0.03224135562777519,
0.043705008924007416,
-0.10133998095989227,
0.004138064570724964,
-0.07627088576555252,
0.07861542701721191,
0.03590916842222214,
-0.1327120065689087,
-0.08127326518297195,
-0.02872609719634056,
0.04185694456100464,
-0.06501990556716919,
-0.08585255593061447,
-0.04889483004808426,
-0.013581606559455395,
-0.012775207869708538,
0.007707718759775162,
-0.08594558387994766,
-0.053744420409202576,
-0.062323227524757385,
-0.07353581488132477,
-0.11334609240293503,
-0.06734255701303482,
-0.008238514885306358,
-0.02605089545249939,
0.020368501543998718,
0.0679740458726883,
0.26938101649284363,
0.028677254915237427,
0.1678127646446228,
0.10380737483501434,
-0.02932535856962204,
0.05715620517730713,
0.0071764662861824036,
-0.028025386855006218,
-0.04172716662287712,
0.07180187106132507,
0.10906495898962021,
-0.05240701138973236,
-0.009012734517455101,
-0.05378248542547226,
-0.169691801071167,
0.055907368659973145,
0.036439552903175354,
-0.11471093446016312,
-0.031611159443855286,
-0.06532670557498932,
-0.010106920264661312,
-0.11396529525518417,
0.08971657603979111,
0.03504900634288788,
0.06520214676856995,
0.0023654219694435596,
-0.06360064446926117,
-0.10677031427621841,
-0.06424672156572342,
0.03995056450366974,
0.05524234473705292,
0.03841523826122284,
0.07908303290605545,
0.016233699396252632,
0.15966175496578217,
0.20045533776283264,
0.05867130681872368,
-0.034162864089012146,
0.03252455219626427,
0.05890296772122383,
-0.029295140877366066,
-0.07817646116018295,
-0.03910917416214943,
-0.057385463267564774,
0.08913721889257431,
0.04668544605374336,
0.11036898195743561,
0.053348004817962646,
-0.12766143679618835,
-0.16798220574855804,
0.0869913399219513,
0.19307753443717957,
-0.011643013916909695,
0.06282731890678406,
-0.08043871819972992,
-0.09814516454935074,
-0.10368695855140686,
-0.017957668751478195,
0.052898310124874115,
-0.01536901667714119,
-0.017165683209896088,
-0.024135390296578407,
0.047678928822278976,
-0.029591500759124756,
-0.06989675760269165,
0.03709051385521889,
0.05765474587678909,
-0.006493295542895794,
-0.040978945791721344,
0.034389887005090714,
0.1565016657114029,
0.18368342518806458,
-0.039288684725761414,
0.06270284205675125,
-0.019137395545840263,
-0.02520168386399746,
-0.1352333128452301,
0.0037087276577949524,
0.07166276127099991,
-0.12503212690353394,
0.004155946895480156,
-0.04426577314734459,
-0.05955255404114723,
-0.040814317762851715,
0.06520256400108337,
0.013337158598005772,
-0.0299538541585207,
0.1480749100446701,
0.18646551668643951,
0.1628962755203247,
0.09998872131109238,
-0.04412204772233963,
-0.03425893187522888,
0.0034897623118013144,
0.08710592985153198,
0.056747253984212875,
0.037828024476766586,
-0.05448594689369202,
-0.10833445936441422,
0.033826012164354324,
-0.07419667392969131,
-0.09364242851734161,
0.03604399785399437,
-0.03557421639561653,
0.0308056753128767,
-0.14266814291477203,
-0.05475929006934166,
-0.02168160118162632,
-0.11053204536437988,
-0.08827467262744904,
0.009662101045250893,
-0.0528649166226387,
0.032106686383485794,
0.030685124918818474,
0.07567359507083893,
0.09275421500205994,
0.12843458354473114,
0.026920216158032417,
0.0407804511487484,
0.053650371730327606,
0.07035734504461288,
0.15036897361278534,
-0.08182697743177414,
-0.10808110982179642,
0.18806762993335724,
-0.055092476308345795,
-0.004054654855281115,
-0.033535972237586975,
-0.008552808314561844,
0.19240637123584747,
-0.11443845182657242,
-0.0701611265540123,
-0.040501438081264496,
-0.03207146376371384,
-0.0839487835764885,
-0.05525580421090126,
-0.04805499687790871,
-0.026693450286984444,
-0.0573156364262104,
-0.07147074490785599,
-0.13967068493366241,
-0.0785445123910904,
0.05755758285522461,
0.01538716908544302,
-0.06677091121673584,
0.13037839531898499,
-0.017861811444163322,
0.06973601877689362,
0.005217299796640873,
-0.04968944564461708,
0.07433133572340012,
0.11687732487916946,
-0.02753174491226673,
0.06953269243240356,
-0.0014414809411391616,
0.09209808707237244,
0.017263758927583694,
-0.015950361266732216,
-0.04862682893872261,
0.1021164134144783,
0.032454196363687515,
-0.03112226538360119,
0.030984971672296524,
0.046423688530921936,
0.15733852982521057,
0.09365998208522797,
0.03552133962512016,
0.00973038375377655,
-0.03119346871972084,
0.005922152195125818,
0.05987006425857544,
0.07415506988763809,
-0.0325482040643692,
0.001713068806566298,
0.017677579075098038,
-0.03912060707807541,
-0.04000195860862732,
0.10473405569791794,
-0.04154563322663307,
-0.08319911360740662,
-0.05239107087254524,
-0.023850318044424057,
0.03178681433200836,
-0.20364424586296082,
-0.04841106757521629,
-0.007505456451326609,
0.040649812668561935,
-0.012306317687034607,
-0.0835435539484024,
-0.0974743440747261,
-0.034015901386737823,
0.012308920733630657,
-0.04807821661233902,
-0.04456277936697006,
0.040801115334033966,
0.10344608128070831,
0.04564635828137398,
0.07977588474750519,
-0.04299980774521828,
-0.03816443681716919,
0.05744224786758423,
0.010144541040062904,
0.07612477242946625,
0.045063767582178116,
0.012172196060419083,
-0.028735915198922157,
0.06294871866703033,
-0.016333458945155144,
0.07701293379068375,
0.0544264018535614,
0.040118053555488586,
-0.10123419761657715,
-0.015552083030343056,
0.02915508858859539,
0.024014558643102646,
0.06176401302218437,
0.029254907742142677,
-0.07847796380519867,
-0.030907753854990005,
-0.01725112646818161,
0.15534158051013947,
0.11325901001691818,
0.04287109524011612,
0.06682895869016647,
0.06644968688488007,
0.06218249723315239,
0.11665456742048264,
-0.006763366051018238,
-0.0039021200500428677,
-0.053014203906059265,
-0.15591482818126678,
-0.11725454032421112,
-0.03918156772851944,
-0.10145695507526398,
-0.0646696537733078,
-0.07771576195955276,
-0.09680908173322678,
-0.12095604091882706,
0.128328338265419,
-0.055354874581098557,
0.030925219878554344,
-0.157387837767601,
-0.09117090702056885,
-0.12951476871967316,
-0.07641489803791046,
0.06646400690078735,
0.05415673181414604,
0.19767671823501587,
0.09908569604158401,
-0.175943523645401,
0.035346150398254395,
0.013875608332455158,
-0.029894156381487846,
-0.11653169989585876,
-0.14822682738304138,
0.013883741572499275,
0.06626269221305847,
0.02102774567902088,
-0.004468800965696573,
-0.01998639665544033,
-0.012603223323822021,
0.055844422429800034,
-0.03637338802218437,
-0.1830846518278122,
0.06465078890323639,
0.10662558674812317,
0.008651543408632278,
0.056659676134586334,
-0.21409206092357635,
0.005593001842498779,
0.05188901349902153,
0.10047724843025208,
0.044715479016304016,
-0.13444556295871735,
-0.15585957467556,
-0.0052167861722409725,
0.0014809283893555403,
0.11483919620513916,
-0.0658533126115799,
-0.1222640872001648,
-0.023952540010213852,
0.059767428785562515,
0.015519802458584309,
0.005976289976388216,
0.057871438562870026,
0.03453102335333824,
0.03454206511378288,
-0.10038856416940689,
-0.18541696667671204,
0.00868417788296938,
0.14402231574058533,
0.0505693219602108,
0.024561667814850807,
-0.14173224568367004,
-0.1585048884153366,
-0.009344681166112423,
-0.08657508343458176,
0.13101303577423096,
0.044398967176675797,
-0.0956955999135971,
-0.19166816771030426,
-0.11630475521087646,
0.13947486877441406,
0.1466212123632431,
0.04813363030552864,
-0.002723156474530697,
-0.02078593149781227,
-0.11257487535476685,
0.028127357363700867,
0.04760005325078964,
-0.13363862037658691,
0.1313178688287735,
0.003286593360826373,
0.15040728449821472,
0.14262813329696655,
0.0647205337882042,
-0.09248893707990646,
0.03518524393439293,
0.03974531218409538,
0.12036062777042389,
0.14157697558403015,
-0.0009147533564828336,
0.01702984608709812,
-0.07723262161016464,
0.08466524630784988,
0.1974077969789505,
-0.050200313329696655,
0.021766986697912216,
-0.04061984643340111,
0.10736590623855591,
0.017292343080043793,
-0.03951970860362053,
-0.006066369358450174,
-0.014216759242117405,
-0.01578707993030548,
0.006027260795235634,
0.01414200384169817,
-0.033879105001688004,
0.051042068749666214,
-0.03542483597993851,
-0.08217228204011917,
-0.06734398007392883,
0.1073174774646759,
0.03065616823732853,
-0.0935397818684578,
-0.06889352202415466,
-0.1187293529510498,
-0.12216068804264069,
0.031829070299863815,
-0.009928714483976364,
-0.050681278109550476,
-0.030366593971848488,
0.059748802334070206,
0.14667175710201263,
0.040898166596889496,
-0.1152113601565361,
-0.19675859808921814,
0.013761685229837894,
-0.08484989404678345,
-0.030697766691446304,
-0.049697138369083405,
-0.13164536654949188,
0.03079131618142128,
-0.19052240252494812,
0.01292141992598772,
0.00583971431478858,
0.14229947328567505,
-0.002295165555551648,
-0.13987798988819122,
0.0023135871160775423,
0.022098029032349586,
0.12127625197172165,
0.00546432938426733,
-0.04722467437386513,
-0.14028960466384888,
-0.06481499969959259,
0.022211289033293724,
0.004063929431140423,
-0.06854062527418137,
0.029021212831139565,
-0.038794469088315964,
0.0783761590719223,
0.05955415219068527,
-0.03137187659740448,
0.04492548853158951,
-0.027753090485930443,
0.042963504791259766,
0.026125410571694374,
0.013499356806278229,
0.03972131386399269,
0.05934508889913559,
0.01952093094587326,
0.09549997746944427,
0.04487362876534462,
-0.02687729150056839,
-0.03067667968571186,
-0.11182432621717453,
0.13733957707881927,
0.044898439198732376,
-0.0014432232128456235,
0.06789855659008026,
-0.03268896043300629,
-0.1619609147310257,
-0.02646300010383129,
0.024216679856181145,
-0.11105512082576752,
-0.016619745641946793,
0.026031676679849625,
0.04974576458334923,
0.016693810001015663,
0.07625974714756012,
0.004368308465927839,
0.036212142556905746,
0.19972838461399078,
0.16133007407188416,
0.011374644003808498,
0.022214332595467567,
0.05925600975751877,
-0.050707679241895676,
0.06359861046075821,
0.0737755075097084,
0.09751235693693161,
-0.16573043167591095,
-0.009060157462954521,
0.05768393725156784,
0.021183306351304054,
-0.09515368938446045,
0.09350460767745972,
0.016368715092539787,
0.09845992922782898,
0.09085199236869812,
-0.047950975596904755,
-0.003365257289260626,
-0.051908817142248154,
0.04420994222164154,
-0.03671440854668617,
-0.08144088834524155,
0.08624514192342758,
-0.009933879598975182,
-0.16651183366775513,
7.637986709596589e-05,
0.04618487134575844,
0.12063776701688766,
0.06490711122751236,
-0.09180402755737305,
-0.14203378558158875,
-0.12691988050937653,
-0.08854585886001587,
-0.01454983837902546,
0.031856246292591095,
-0.04864379018545151,
0.05729679390788078,
-0.10037797689437866,
0.012114287354052067,
0.09151600301265717,
0.0721120536327362,
0.03960280865430832,
0.008134191855788231,
0.1031406968832016,
0.032510895282030106,
-0.004841562360525131,
-0.09272187948226929,
0.090631403028965,
0.05947823449969292,
-0.0003306132275611162,
-0.12406305968761444,
-0.15849776566028595,
0.09637908637523651,
0.0632147416472435,
0.00535708200186491,
-0.0932622104883194,
-0.04717539623379707,
-0.07934112101793289,
0.022951528429985046,
0.046179596334695816,
0.030754437670111656,
0.0649641826748848,
-0.12003247439861298,
-0.09271685034036636,
0.022553198039531708,
-0.0013870296534150839,
0.03883363679051399,
-0.01861528679728508,
0.0772458016872406,
-0.004289423581212759,
0.02580459974706173,
-0.03836506977677345,
-0.06468412280082703,
-0.2590619623661041,
-0.051736678928136826,
0.09772402793169022,
0.10301464051008224,
-0.041648171842098236,
-0.14960238337516785,
0.0491323247551918,
0.10606719553470612,
0.07113693654537201,
-0.00945277139544487,
-0.15706758201122284,
0.13047286868095398,
0.019790496677160263,
0.027885954827070236,
-0.10891846567392349,
-0.0849006175994873,
0.01996399275958538,
0.0003579593321774155,
-0.04108744114637375,
-0.11769162118434906,
-0.09401578456163406,
0.006767007056623697,
0.025330878794193268,
-0.004732873756438494,
0.04474387317895889,
-0.06576335430145264,
-0.13718658685684204,
-0.08082976192235947,
-0.03544427454471588,
0.06373856216669083,
-0.04459347948431969,
0.03888392448425293,
0.04645613580942154,
0.04202054813504219,
0.05806858837604523,
0.00043025988270528615,
0.12585461139678955,
0.18308675289154053,
0.08519850671291351,
-0.07881844788789749,
-0.22198767960071564,
-0.030152201652526855,
-0.0076482174918055534,
0.07820543646812439,
-0.005851502530276775,
-0.11053323745727539,
-0.06420774012804031,
0.023082159459590912,
0.05973545461893082,
0.11661412566900253,
0.0741029754281044,
0.010055862367153168,
-0.03024495765566826,
-0.06761504709720612,
-0.01420501060783863,
0.07977871596813202,
-0.022545110434293747,
-0.04804246127605438,
-0.16742616891860962,
-0.07169701904058456,
0.07812273502349854,
-0.03876769542694092,
-0.09913922846317291,
-0.20449241995811462,
0.029865900054574013,
0.13039115071296692,
0.17512282729148865,
0.026971766725182533,
-0.14780674874782562,
-0.006878847721964121,
0.08784075081348419,
0.048932913690805435,
-0.038956791162490845,
-0.059024177491664886,
0.11377419531345367,
-0.058948785066604614,
-0.19123418629169464,
0.0029910760931670666,
0.011926887556910515,
0.15598773956298828,
0.04946156591176987,
-0.061631496995687485,
0.12459520995616913,
0.1484847515821457,
0.07478497177362442,
-0.03422892466187477,
-0.09707821160554886,
0.08992953598499298,
0.0671648234128952,
-0.14410875737667084,
-0.08988279104232788,
-0.020182346925139427,
-0.003226290922611952,
0.09251327067613602,
-0.050322819501161575,
0.03868624567985535,
0.13042673468589783,
-0.09302853792905807,
0.014674492180347443,
0.057616498321294785,
0.02883555367588997,
0.01451188325881958,
-0.013193221762776375,
-0.05101164057850838,
-0.10073821991682053,
-0.08448933809995651,
0.004574068821966648,
-0.11523115634918213,
-0.11650661379098892,
0.0533001571893692,
0.023162294179201126,
-0.10440709441900253,
-0.012431718409061432,
-0.11980148404836655,
0.03486446663737297,
0.07060331851243973,
-0.008454997092485428,
-0.10063297301530838,
0.012771890498697758,
0.022819744423031807,
0.03294171392917633,
0.017096294090151787,
0.015511473640799522,
0.06876181811094284,
0.005185840651392937,
-0.036004938185214996,
-0.07480394095182419,
-0.04916379973292351,
-0.05163753777742386,
0.0241654422134161,
0.0324946753680706,
-0.061336930841207504,
-0.13470153510570526,
-0.0986066609621048,
0.03196494281291962,
-0.015471327118575573,
-0.18658506870269775,
-0.09099947661161423,
0.030988359823822975,
0.010840640403330326,
0.07061436772346497,
0.08744596689939499,
0.12990263104438782,
0.01858062855899334,
0.10713593661785126,
0.08717555552721024,
-0.00654365262016654,
0.0011847653659060597,
-0.009271951392292976,
0.07299990206956863,
-0.05257619172334671,
-0.04895655810832977,
0.08523055911064148,
0.12928302586078644,
0.08596756309270859,
0.11390309780836105,
0.054119765758514404,
0.04297201335430145,
0.05839807540178299,
-0.03653625026345253,
-0.01396341621875763,
0.06067235395312309,
0.031185325235128403,
-0.1563347429037094,
-0.07336551696062088,
0.10272929072380066,
0.003360284958034754,
-0.03844983130693436,
-0.019090190529823303,
-0.06696075946092606,
-0.08680298179388046,
-0.15726524591445923,
-0.11288441717624664,
0.10060883313417435,
0.03892487660050392,
0.032856281846761703,
0.008203688077628613,
-0.07344702631235123,
-0.043355848640203476,
-0.014216160401701927,
0.05796673893928528,
0.041989486664533615,
-0.09290223568677902,
-0.04330861195921898,
0.033185530453920364,
0.012368740513920784,
0.023269284516572952,
-0.06953629851341248,
-0.027599884197115898,
-0.05119163542985916,
0.00847638864070177,
-0.07311265170574188,
-0.011404861696064472,
0.009786471724510193,
-0.0512305349111557,
-0.08328177779912949,
0.06807784736156464,
0.041943781077861786,
0.048918429762125015,
-0.01587379164993763,
0.007707324344664812,
-0.018662765622138977,
-0.1136278584599495,
-0.1396239697933197,
-0.03206157684326172,
0.10307411104440689,
0.12003926932811737,
0.22282490134239197,
0.18347661197185516,
-0.01812676712870598,
-0.13288120925426483,
-0.047225091606378555,
0.08395440131425858,
0.20330023765563965,
-0.015299426391720772,
-0.0557994581758976,
-0.13404522836208344,
-0.0290305707603693,
-0.0004414014401845634,
0.15701067447662354,
0.1314588338136673,
-0.10721492767333984,
-0.05479046702384949,
0.0032733241096138954,
0.028392331674695015,
-0.11232443153858185,
-0.07464927434921265,
0.10388142615556717,
0.050233542919158936,
-0.007043286692351103,
-0.01565244048833847,
-0.11548970639705658,
0.06945587694644928,
0.10792241990566254,
-0.042540043592453,
-0.050437554717063904,
0.07231371849775314,
0.016248805448412895,
-0.019206441938877106,
-0.061647094786167145,
-0.05769779533147812,
-0.008909468539059162,
0.05467480793595314,
-0.07763746380805969,
-0.1284022033214569,
-0.06811922788619995,
0.15656226873397827,
0.08876883238554001,
-0.0330793596804142,
0.08678445965051651,
0.009772790595889091,
0.059915658086538315,
0.04761320352554321,
0.13929525017738342,
0.02403305470943451,
-0.05169506371021271,
-0.011405830271542072,
-0.0029583717696368694,
0.18871209025382996,
0.09530255198478699,
0.033892396837472916,
0.04119304195046425,
0.2133188545703888,
0.04458458349108696,
0.058533791452646255,
0.020153729245066643,
0.023914659395813942,
0.06901812553405762,
-0.10980094224214554,
-0.16245527565479279,
-0.06858353316783905,
-0.0599176250398159,
0.03958408161997795,
-0.08969559520483017,
0.029060345143079758,
0.0821237713098526,
0.04754634201526642,
0.06856654584407806,
-0.08086208254098892,
0.003688869997859001,
0.09036273509263992,
-0.07457282394170761,
-0.18002301454544067,
-0.20280314981937408,
-0.07370898872613907,
0.1090628132224083,
-0.12801195681095123,
-0.08245711773633957,
-0.1084565669298172,
-0.08496154844760895,
0.03980376571416855,
0.13546571135520935,
0.03808847814798355,
-0.07273555546998978,
-0.052751027047634125,
-0.07231342792510986,
0.14966745674610138,
0.08903707563877106,
-0.010077440179884434,
0.10384254902601242,
0.03652079403400421,
0.03964126855134964,
-0.07527758181095123,
-0.01356359664350748,
-0.06002039834856987,
-0.020326178520917892,
-0.012341883033514023,
0.18113379180431366,
0.010759351775050163,
-0.17535188794136047,
-0.019898951053619385,
0.11506102234125137,
0.4098193347454071,
0.14741098880767822,
-0.03407244011759758,
0.05794984847307205,
0.08261509239673615,
0.11247748136520386,
-0.10903619974851608,
-0.03940894454717636,
-0.07011963427066803,
-0.054175786674022675,
0.04527696967124939,
-0.04166163504123688,
-0.02035842277109623,
0.020825566723942757,
-0.05837404355406761,
0.0516916885972023,
0.11997716873884201,
-0.017223648726940155,
0.022832607850432396,
-0.08913344144821167,
0.0003793021314777434,
-0.08264024555683136,
0.08119558542966843,
0.0730125829577446,
0.04203770309686661,
0.0529957115650177,
-0.02505670301616192,
0.05732129514217377,
-0.011908051557838917,
-0.029146553948521614,
0.04615374654531479,
0.04379718005657196,
-0.037241652607917786,
-0.02960035391151905,
-0.051439255475997925,
0.10415010154247284,
0.001993186306208372,
-0.14565370976924896,
0.02823362872004509,
0.16624830663204193,
0.005838626530021429,
0.07336890697479248,
-0.06871265172958374,
0.030788229778409004,
0.0800776481628418,
0.14906172454357147,
0.21612602472305298,
0.04251685366034508,
-0.03696797415614128,
0.04357513040304184,
-0.05053738132119179,
0.1544126719236374,
0.13081641495227814,
-0.05440951883792877,
-0.049555372446775436,
-0.04410640150308609,
-0.06857519596815109,
-0.003125579794868827,
-0.03121149353682995,
0.05579305812716484,
0.034312110394239426,
0.01729532517492771,
0.047651391476392746,
0.005892388056963682,
0.064431332051754,
0.12336481362581253,
0.11911844462156296,
-0.07645011693239212,
-0.09457971155643463,
0.057308219373226166,
0.09024186432361603,
0.1347116380929947,
-0.012979993596673012,
-0.06383570283651352,
0.08565229177474976,
-0.10788354277610779,
-0.07736001908779144,
0.0005861790850758553,
-0.02229272946715355,
0.034899547696113586,
-0.07428475469350815,
-0.11807143688201904,
-0.04418599605560303,
0.09206581115722656,
0.027519043534994125,
-0.07848869264125824,
-0.018539514392614365,
0.12191404402256012,
0.06960161030292511,
0.027628226205706596,
0.015848921611905098,
-0.10701597481966019,
0.02219453454017639,
0.09421693533658981,
-0.032804686576128006,
0.022727178409695625,
-0.08632436394691467,
-0.029748205095529556,
-0.054867811501026154,
0.05566485971212387,
-0.06829021871089935,
-0.14901262521743774,
-0.08038210868835449,
-0.002621664199978113,
0.1351177841424942,
-0.027487237006425858,
-0.025055820122361183,
-0.063702791929245,
0.08957845717668533,
0.10928186774253845,
0.007837698794901371,
-0.08443110436201096,
0.039566557854413986,
0.1674290895462036,
0.15565723180770874,
0.04064986854791641,
0.054290771484375,
0.02806277759373188,
0.023869864642620087,
0.05663013085722923,
0.051228657364845276,
-0.024834057316184044,
-0.024083072319626808,
-0.016832666471600533,
-0.0732787698507309,
-0.01449707429856062,
-0.17486333847045898,
-0.11319901794195175,
-0.033175960183143616,
0.1323537975549698,
-0.02795293927192688,
-0.07522828131914139,
-0.072087362408638,
0.033461425453424454,
0.004903556313365698,
0.031164439395070076,
0.006672609131783247,
-0.09634126722812653,
-0.1466902196407318,
0.1158299371600151,
0.08871324360370636,
0.2196386605501175,
-0.04412442818284035,
-0.11683708429336548,
-0.03273218497633934,
0.269966721534729,
0.16125939786434174,
0.11959309130907059,
-0.06321635842323303,
0.019681181758642197,
0.11661266535520554,
0.11343927681446075,
0.09162487089633942,
-0.0711655244231224,
-0.07644195109605789,
-0.035943690687417984,
-0.11376520991325378,
0.026120800524950027,
-0.0482560396194458,
0.0010556889465078712,
0.04552619159221649,
-0.10799797624349594,
-0.04434051364660263,
-0.04656754061579704,
0.06076854467391968,
0.09127610176801682,
0.07035893946886063,
-0.10557416081428528,
-0.02665521763265133,
-0.032611798495054245,
0.05228327959775925,
0.10563043504953384,
-0.06056420877575874,
0.030121201649308205,
-0.09688658267259598,
-0.05922256410121918,
-0.07136866450309753,
0.16032883524894714,
0.002670440822839737,
-0.021037276834249496,
-0.04287148639559746,
-0.015380376018583775,
-0.038255076855421066,
-0.011290851049125195,
-0.060729797929525375,
0.052080050110816956,
-0.04661089554429054,
-0.021775275468826294,
0.01895672082901001,
-0.09246696531772614,
-0.015150505118072033,
0.05539155378937721,
-0.0160140972584486,
0.01653432287275791,
0.05179351568222046,
0.09626015275716782,
0.13754405081272125,
-0.026471925899386406,
-0.008185885846614838,
0.21440362930297852,
0.1414324790239334,
0.11630841344594955,
-0.081880584359169,
-0.11776385456323624,
0.031938739120960236,
-0.09067893028259277,
-0.05750296264886856,
0.025338368490338326,
-0.06802330911159515,
-0.07440643757581711,
-0.08349376171827316,
-0.01837277226150036,
-0.05031906068325043,
-0.0008847035351209342,
-0.0081119854003191,
-0.004617595113813877,
-0.1359177529811859,
-0.03589716926217079,
-0.060929130762815475,
0.07861856371164322,
0.2907423675060272,
0.2665184736251831,
-0.10800577700138092,
0.004575018770992756,
-0.07422236353158951,
-0.0021511493250727654,
-0.04615813121199608,
0.08472348004579544,
0.009732306003570557,
-0.025390034541487694,
-0.019084997475147247,
-0.15653839707374573,
0.11261610686779022,
0.04849092289805412,
-0.013206319883465767,
-0.014666316099464893,
-0.02402639389038086,
0.08665170520544052,
-0.025322262197732925,
-0.024543363600969315,
0.029584422707557678,
0.18175451457500458,
0.17346392571926117,
0.0652875229716301,
0.020529666915535927,
0.03706047311425209,
-0.004940901417285204,
-0.10530882328748703,
-0.1261073350906372,
-0.08686965703964233,
0.029910052195191383,
0.02213367633521557,
-0.006043691188097,
0.025060798972845078,
-0.06545529514551163,
0.029610740020871162,
0.0028485041111707687,
0.08112701028585434,
0.11103803664445877,
0.00016639201203361154,
0.026209983974695206,
-0.04683796316385269,
0.01469104178249836,
0.08102355152368546,
0.050107479095458984,
-0.059456683695316315,
-0.09911391884088516,
-0.07852408289909363,
0.0677415207028389,
0.1023249700665474,
-0.034728940576314926,
0.014052760787308216,
-0.05833456665277481,
-0.03421352803707123,
0.23418305814266205,
0.06510606408119202,
-0.011830429546535015,
-0.10535126179456711,
-0.013645856641232967,
0.129751518368721,
0.0599927082657814,
-0.048153530806303024,
0.011602036654949188,
0.030805295333266258,
0.06553889065980911,
0.06647105515003204,
0.03977115452289581,
0.03442331776022911,
-0.037179697304964066,
-0.081560418009758,
-0.010107631795108318,
0.026553284376859665,
0.12160172313451767,
0.20721301436424255,
-0.009186824783682823,
-0.17775170505046844,
-0.0304836705327034,
0.0397295244038105,
0.06136242300271988,
-0.027053862810134888,
0.005992918740957975,
-0.028615491464734077,
-0.07006245106458664,
-0.052411261945962906,
-0.11810628324747086,
-0.04592636972665787,
0.05677210912108421,
0.018892165273427963,
-0.01640331745147705,
-0.02226291038095951,
0.07807659357786179,
0.04337967559695244,
-0.016802126541733742,
0.04691499099135399,
-0.06880433112382889,
-0.04939483478665352,
0.051045797765254974,
-0.01473596878349781,
0.09006395936012268,
-0.07474014163017273,
-0.11750774085521698,
-0.0004770256928168237,
0.022358719259500504,
-0.05099554732441902,
-0.018548104912042618,
-0.021138394251465797,
-0.028243348002433777,
0.013989421539008617,
0.04273544251918793,
0.020846085622906685,
-0.057336729019880295,
-0.11653725802898407,
-0.06711136549711227,
-0.07301434874534607,
-0.06814858317375183,
-0.01239708624780178,
-0.04245816543698311,
0.0269604679197073,
-0.0808253064751625,
0.030862940475344658,
0.02888660877943039,
0.09592852741479874,
-0.10742209851741791,
-0.0776093527674675,
-0.1428767293691635,
0.0785842090845108,
0.17859485745429993,
0.13503609597682953,
0.09148017317056656,
0.012418602593243122,
-0.05404846370220184,
-0.03295484930276871,
0.07399654388427734,
0.12621226906776428,
0.06090301275253296,
0.06307273358106613,
-0.11093473434448242,
0.0783132016658783,
0.05994188040494919,
-0.05894416570663452,
0.010974627919495106,
-0.005945498123764992,
-0.08415199816226959,
0.05960985645651817,
-0.005670580081641674,
-0.053046055138111115,
-0.12178758531808853,
-0.04866308346390724,
0.0808311253786087,
0.054016467183828354,
0.07681646943092346,
0.08727595955133438,
-0.007424924056977034,
0.03647572919726372,
0.08446706086397171,
0.10283970087766647,
-0.056303899735212326,
-0.04215840995311737,
0.005988231394439936,
0.05936882644891739,
0.03147004172205925,
0.06176482141017914,
0.0033524769823998213,
0.02851022779941559,
0.03562795743346214,
0.08255547285079956,
0.10423626005649567,
0.023875897750258446,
0.10187394917011261,
0.0624651163816452,
0.07147642225027084,
0.18709415197372437,
0.0035685247275978327,
-0.009461333975195885,
-0.0005730424309149384,
-0.019481761381030083,
0.03608159348368645,
-0.15534882247447968,
-0.08319240808486938,
-0.2043466567993164,
-0.053024619817733765,
-0.03603515774011612,
-0.16323718428611755,
-0.0768732950091362,
-0.017667096108198166,
0.028838353231549263,
-0.04210371896624565,
0.034899480640888214,
-0.14101867377758026,
-0.08455106616020203,
-0.023127013817429543,
0.05019352212548256,
-0.08117195218801498,
-0.04971304535865784,
-0.1175907552242279,
-0.025620516389608383,
0.11154039949178696,
-0.04136797413229942,
-0.011748929508030415,
-0.022650275379419327,
-0.08401736617088318,
0.07189388573169708,
0.10502300411462784,
0.15613824129104614,
-0.0529831200838089,
-0.025592319667339325,
-0.016729416325688362,
0.13115549087524414,
0.13002945482730865,
-0.07119015604257584,
-0.007901489734649658,
-0.006432725582271814,
0.0443352647125721,
-0.006574042607098818,
-0.04505856707692146,
-0.01780705340206623,
-0.08843334019184113,
0.017428452149033546,
-0.060778968036174774,
-0.022474078461527824,
-0.04974004253745079,
-0.00992717407643795,
-0.19150401651859283,
-0.1513788402080536,
-0.025125110521912575,
0.12192802131175995,
0.061915166676044464,
-0.11052943766117096,
-0.0577920526266098,
-0.016071593388915062,
0.04399189352989197,
0.0428706631064415,
0.10710766911506653,
0.007380228489637375,
0.022429097443819046,
0.014158009551465511,
0.017629586160182953,
-0.03498368337750435,
-0.07107972353696823,
0.0032817916944622993,
-0.01807529293000698,
-0.11201850324869156,
-0.03915311396121979,
-0.0022943930234760046,
-0.01543258223682642,
0.020511440932750702,
0.1575143039226532,
0.006668287795037031,
-0.08986461907625198,
-0.0862407460808754,
-0.003106502117589116,
0.09895913302898407,
-0.018370673060417175,
0.0003457875282038003,
-0.055834703147411346,
-0.044534556567668915,
-0.005427110008895397,
0.09738553315401077,
0.054624661803245544,
-0.037864379584789276,
-0.058748289942741394,
-0.02841060608625412,
0.08796384185552597,
0.03594443202018738,
-0.055492036044597626,
0.004064119886606932,
-0.022679492831230164,
0.012770863249897957,
0.07359593361616135,
0.09884505718946457,
-0.06034025549888611,
-0.1529790312051773,
-0.004583670757710934,
0.13794006407260895,
0.03524389863014221,
-0.005150264129042625,
-0.08516384661197662,
-0.019522523507475853,
0.008136686868965626,
0.05946182459592819,
0.02586345560848713,
-0.021102841943502426,
-0.009839125908911228,
0.0916467159986496,
0.0818711593747139,
-0.0927719697356224,
-0.0485994890332222,
0.09197656065225601,
0.08460152894258499,
0.03194127231836319,
0.006312685087323189,
0.008703111670911312,
-0.08628495782613754,
0.11573092639446259,
0.042222704738378525,
0.09482868760824203,
0.0347265861928463,
0.01679893583059311,
0.15034741163253784,
-0.020239558070898056,
0.020575590431690216,
0.033023983240127563,
-0.025197017937898636,
-0.07164446264505386,
-0.1662369817495346,
-0.020452847704291344,
-0.03354271128773689,
0.06891204416751862,
0.09259579330682755,
-0.002010233700275421,
0.0772055834531784,
-0.13269580900669098,
0.07525147497653961,
0.19888517260551453,
-0.01764107309281826,
-0.10912877321243286,
-0.0007394197164103389,
-0.01062099076807499,
-0.11008366197347641,
-0.0881054475903511,
-0.04516824334859848,
0.05566028878092766,
-0.0706714317202568,
-0.17012813687324524,
-0.12700392305850983,
0.006033669225871563,
0.03484554588794708,
0.03216380253434181,
0.0817892774939537,
-0.057073235511779785,
0.026705751195549965,
0.060479991137981415,
0.10953541845083237,
0.06008465215563774,
-0.031072834506630898,
0.018903858959674835,
0.06548715382814407,
-0.008973712101578712,
-0.10059654712677002,
-0.0425073616206646,
-0.08967390656471252,
-0.007071154657751322,
-0.09233642369508743,
0.02221142128109932,
0.04030993580818176,
-0.03067341446876526,
-0.0773201584815979,
-0.23618964850902557,
-0.0784812867641449,
-0.11864157021045685,
-0.04743880406022072,
-0.021965187042951584,
-0.1029590293765068,
0.03527051582932472,
-0.016077911481261253,
0.07710888981819153,
-0.08018991351127625,
0.029048457741737366,
0.09332859516143799,
0.005129587836563587,
-0.035619452595710754,
-0.060651201754808426,
0.13011886179447174,
-0.03668592870235443,
-0.014991081319749355,
-0.12524615228176117,
0.021273236721754074,
-0.06144058331847191,
0.03201279044151306,
0.012842757627367973,
-0.014316781423985958,
0.07364700734615326,
0.09245962649583817,
0.05873624607920647,
-0.04900642856955528,
-0.007945217192173004,
-0.09229172021150589,
0.11560767889022827,
-0.007350916508585215,
0.08181866258382797,
-0.022945618256926537,
0.020108651369810104,
-0.08340471982955933,
-0.154146209359169,
-0.026699477806687355,
-0.08102182298898697,
0.025028223171830177,
0.014648551121354103,
0.06464927643537521,
0.005458049010485411,
0.02886194922029972,
0.024906443431973457,
0.03611840680241585,
0.11824611574411392,
-4.841569534619339e-05,
0.056004926562309265,
-0.052699778228998184,
0.029092269018292427,
-0.128670334815979,
-0.1725231111049652,
-0.16218063235282898,
0.018691031262278557,
-0.1471017450094223,
-0.088843934237957,
-0.12589840590953827,
-0.03100276179611683,
0.04352825880050659,
0.05484656244516373,
-0.009484213776886463,
0.02933325432240963,
0.031509704887866974,
0.06249538064002991,
0.0038979656528681517,
-0.07713111490011215,
-0.045975979417562485,
-0.06350517272949219,
-0.04322325810790062,
-0.011683846823871136,
-0.040107790380716324,
-0.03985833004117012,
-0.010846644639968872,
0.24320265650749207,
0.006949150934815407,
0.09720626473426819,
0.01834382675588131,
-0.06224677339196205,
-0.14401179552078247,
0.16212420165538788,
0.09055323898792267,
-0.06890066713094711,
0.012563427910208702,
-0.1554902046918869,
-0.11869139224290848,
-0.13811688125133514,
-0.05441928654909134,
0.04174678772687912,
0.05705620348453522,
-0.029815878719091415,
-0.10182064771652222,
0.033221516758203506,
0.010034383274614811,
0.07904013246297836,
0.03636457398533821,
0.05057499185204506,
0.011926774866878986,
0.03401186689734459,
-0.09843439608812332,
0.010713454335927963,
0.018440868705511093,
0.07075366377830505,
0.07653411477804184,
-0.12702861428260803,
0.0652230829000473,
-0.025552665814757347,
0.028096403926610947,
-0.05485330522060394,
-0.04006541892886162,
-0.07615351676940918,
0.05516517162322998,
-0.10256657749414444,
0.10710584372282028,
0.00591846089810133,
-0.08567728102207184,
-0.052481088787317276,
-0.06462402641773224,
0.015359211713075638,
0.018916746601462364,
-0.1972367763519287,
-0.2016318142414093,
-0.13564316928386688,
-0.12240070104598999,
-0.10677719116210938,
-0.002272076439112425,
-0.06427185237407684,
-0.06547050923109055,
0.09487651288509369,
0.0917576402425766,
0.12776897847652435,
0.1193825975060463,
-0.018999943509697914,
-0.06571686267852783,
0.060567498207092285,
0.22373832762241364,
0.1970323920249939,
0.12810814380645752,
-0.005444734822958708,
-0.05055002495646477,
0.05749056115746498,
0.09569752961397171,
0.05378340184688568,
0.023784324526786804,
-0.03853089362382889,
0.024885892868041992,
0.054587725549936295,
0.007668138016015291,
-0.0287629347294569,
0.0859452560544014,
-0.09741243720054626,
0.05684293061494827,
0.03965144231915474,
0.06299246847629547,
0.017984768375754356,
-0.1067427396774292,
0.07705370336771011,
0.04381677508354187,
0.047055382281541824,
-0.1064484640955925,
-0.030154475942254066,
-0.15305307507514954,
-0.05498012527823448,
-0.02350790984928608,
-0.03101716749370098,
0.019378354772925377,
-0.055580947548151016,
0.059634581208229065,
0.06735764443874359,
0.03500024229288101,
-0.051034603267908096,
-0.05789228528738022,
-0.09171979129314423,
0.07280971854925156,
0.1213952824473381,
-0.15502656996250153,
-0.15862858295440674,
-0.1370895504951477,
0.07129523903131485,
0.11438149213790894,
0.04812916740775108,
0.10305976122617722,
0.06791263073682785,
0.02723674848675728,
-0.06810927391052246,
0.17368070781230927,
0.1963256299495697,
0.08125663548707962,
-0.1094164028763771,
-0.24345636367797852,
0.10355385392904282,
0.06808058172464371,
-0.007804215885698795,
-0.028703635558485985,
-0.15909840166568756,
0.07294753193855286,
0.10723637044429779,
0.07642075419425964,
0.06270480901002884,
-0.07527400553226471,
-0.03200055658817291,
-0.0020727934315800667,
0.1026540994644165,
-0.04435281828045845,
-0.0741097703576088,
0.013093679212033749,
-0.0010353666730225086,
-0.03076421096920967,
-0.07528096437454224,
0.001194330514408648,
0.006828977260738611,
0.11250130832195282,
-0.0221939068287611,
0.04520772397518158,
0.04439987242221832,
-0.054718926548957825,
-0.05355143919587135,
-0.03528183326125145,
0.010144404135644436,
0.0440974198281765,
0.05829731747508049,
0.016004543751478195,
0.06159879267215729,
-0.02724619209766388,
0.016993029043078423,
-0.07607054710388184,
-0.018452350050210953,
-0.0056428913958370686,
-0.012022623792290688,
-0.019058432430028915,
-0.013735759072005749,
-0.07105538249015808,
0.06345805525779724,
0.09827376157045364,
0.07215994596481323,
-0.1602034866809845,
-0.10979143530130386,
-0.055816650390625,
-0.20279644429683685,
-0.1534901112318039,
0.04720062389969826,
0.06062712147831917,
0.07555190473794937,
0.07181922346353531,
0.014650017023086548,
0.058034323155879974,
0.020440658554434776,
-0.08082737773656845,
-0.0248857531696558,
0.03719248250126839,
-0.09389958530664444,
-0.05444855988025665,
-0.07164253294467926,
-0.0513886883854866,
-0.08008962124586105,
-0.04679480567574501,
-0.03028743341565132,
0.061808522790670395,
0.050643403083086014,
-0.1328127533197403,
0.10324665158987045,
0.05261857807636261,
0.15061108767986298,
-0.0022488704416900873,
-0.050446730107069016,
0.14694280922412872,
0.036799464374780655,
0.034142155200242996,
0.03670606389641762,
0.0028273449279367924,
-0.07535732537508011,
0.02487504854798317,
0.09494734555482864,
0.03368479758501053,
0.06527683138847351,
-0.07670697569847107,
0.0230284221470356,
0.0002703347126953304,
0.09047534316778183,
0.1852126270532608,
-0.21846026182174683,
-0.07866264134645462,
-0.03630603849887848,
0.04032087326049805,
0.13037614524364471,
0.06152627244591713,
0.10126306861639023,
0.04600071534514427,
-0.049637310206890106,
-0.16620118916034698,
0.11498603224754333,
0.05527952313423157,
0.05547525733709335,
-0.08285070955753326,
-0.11964321881532669,
-0.031980130821466446,
-0.02031858265399933,
-0.015238388441503048,
0.16728182137012482,
0.2036140412092209,
-0.015253148972988129,
0.043839458376169205,
0.03236673027276993,
0.006505900528281927,
0.09927288442850113,
-0.060234904289245605,
-0.0058486503548920155,
-0.05770855024456978,
-0.12091842293739319,
-0.16027866303920746,
-0.07628966122865677,
-0.15239210426807404,
0.024903280660510063,
-0.051816727966070175,
-0.07297445088624954,
-0.11331280320882797,
0.03146739304065704,
0.07459007203578949,
0.004242495633661747,
0.09291576594114304,
0.09140122681856155,
0.03309328481554985,
0.07128480076789856,
0.04681593179702759,
-0.020284464582800865,
0.13742220401763916,
0.06802654266357422,
0.02779286913573742,
-0.056178972125053406,
-0.14532192051410675,
-0.014059958979487419,
-0.0024649170227348804,
0.017341841012239456,
-0.039554413408041,
-0.10075082629919052,
-0.09991389513015747,
-0.05305827036499977,
-0.026521267369389534,
-0.03466181084513664,
-0.028768347576260567,
-0.12231799215078354,
-0.058762408792972565,
0.026025542989373207,
0.02830495685338974,
0.05912858247756958,
-0.06372063606977463,
-0.04471670091152191,
0.02930246852338314,
0.059619538486003876,
0.1661895215511322,
0.06354889273643494,
0.04249577969312668,
0.07438904047012329,
0.007400925271213055,
-0.03408515825867653,
0.021332399919629097,
-0.015111497603356838,
0.061189427971839905,
-0.09691435843706131,
-0.06777111440896988,
-0.06729390472173691,
-0.09845567494630814,
-0.059260450303554535,
0.005746154580265284,
-0.042542990297079086,
-0.09102404117584229,
-0.06196422502398491,
0.05073264613747597,
0.01201634481549263,
0.07251293957233429,
-0.07701606303453445,
-0.1377115100622177,
0.0686071440577507,
0.021460717543959618,
0.08374888449907303,
-0.07857029885053635,
-0.11532101035118103,
-0.027448344975709915,
0.10520616918802261,
0.13652688264846802,
-0.0887671485543251,
-0.04731088876724243,
0.1083935797214508,
0.07225777208805084,
0.0005642733885906637,
0.15044954419136047,
0.13660745322704315,
0.07206909358501434,
0.007294371258467436,
-0.2174300253391266,
0.20478259027004242,
0.11368441581726074,
0.08313462138175964,
0.0412914976477623,
-0.0925678014755249,
0.04971754550933838,
0.11690317094326019,
0.022786270827054977,
0.09412115067243576,
0.09309849143028259,
0.0375220850110054,
-0.06104246526956558,
-0.041704773902893066,
0.05558628961443901,
0.015941197052598,
-0.09234372526407242,
-0.12146082520484924,
-0.10800664871931076,
-0.03902401775121689,
-0.05074206739664078,
-0.05275515839457512,
-0.05339740216732025,
-0.016753602772951126,
-0.07535213232040405,
-0.05758068710565567,
-0.08269922435283661,
0.11582781374454498,
0.10407514125108719,
-0.0479227676987648,
-0.08391356468200684,
-0.05245385318994522,
-0.026819102466106415,
0.006847213953733444,
0.0055142417550086975,
0.06304040551185608,
-0.08665421605110168,
0.03765149787068367,
0.0013379346346482635,
0.10821989923715591,
0.03993860259652138,
0.1388055384159088,
0.06724829226732254,
0.021330969408154488,
0.006950275972485542,
-0.13267305493354797,
0.05100686475634575,
-0.01788710430264473,
-0.025965604931116104,
-0.08318513631820679,
-0.014939677901566029,
-0.006111853756010532,
-0.032330941408872604,
0.024564024060964584,
0.04066307097673416,
0.10463837534189224,
-0.03133254125714302,
0.03645468130707741,
0.023822328075766563,
0.007354557979851961,
-0.1345968246459961,
-0.08967799693346024,
-0.03419003635644913,
-0.008732759393751621,
0.15737773478031158,
0.18666303157806396,
-0.10819262266159058,
-0.12522804737091064,
-0.06832525879144669,
-0.02781805209815502,
0.1348121166229248,
0.12407569587230682,
0.15963050723075867,
0.11808684468269348,
-0.01081445999443531,
-0.11462029069662094,
0.14743369817733765,
0.11469004303216934,
0.13086076080799103,
-0.03143220394849777,
-0.09235203266143799,
0.010249440558254719,
-0.017045220360159874,
-0.008714376948773861,
0.0533137284219265,
0.05765746533870697,
0.2213270217180252,
0.05441569164395332,
-0.09695923328399658,
-0.007375959772616625,
0.03711888566613197,
0.0634055808186531,
-0.1100049540400505,
-0.15006418526172638,
0.010070652700960636,
-0.10852676630020142,
0.0457686223089695,
0.024630041792988777,
-0.024432621896266937,
0.04150751233100891,
0.09814005345106125,
0.006382356863468885,
-0.09531866759061813,
-0.08897047489881516,
0.08445390313863754,
0.03728574141860008,
0.058985862880945206,
-0.03994157165288925,
-0.017706356942653656,
-0.003311972599476576,
0.026821354404091835,
0.05845896527171135,
-0.038929469883441925,
-0.05585997551679611,
-0.021606219932436943,
0.02257080003619194,
-0.05333099514245987,
-0.11007542908191681,
0.06258271634578705,
0.00870964303612709,
-0.06362374126911163,
-0.03701036423444748,
-0.05125602334737778,
-0.05357864126563072,
0.05231277644634247,
0.05853680893778801,
0.08428766578435898,
-0.12278251349925995,
-0.012859826907515526,
0.00648511853069067,
0.034856606274843216,
-0.146766796708107,
-0.07090664654970169,
0.0006161922938190401,
0.00346275488846004,
0.019327642396092415,
0.16020092368125916,
-0.00025395015836693347,
0.030153349041938782,
0.017486654222011566,
0.10360877215862274,
0.08346303552389145,
-0.07871898263692856,
0.01897035352885723,
0.018109340220689774,
0.01015151385217905,
0.0038259397260844707,
-0.010721635073423386,
-0.10261793434619904,
-0.06817656010389328,
0.05605776607990265,
0.08808786422014236,
-0.1140855997800827,
-0.01571197435259819,
-0.016116566956043243,
0.1175667867064476,
0.015247086063027382,
0.13758838176727295,
0.19892534613609314,
0.12389334291219711,
0.002588534727692604,
0.09506197273731232,
0.12119454145431519,
-0.11480643600225449,
0.06280533224344254,
-0.03221594914793968,
-0.11921539902687073,
-0.05906140059232712,
0.10983061790466309,
0.0605524443089962,
-0.029014719650149345,
-0.020379474386572838,
0.12391024827957153,
0.07395036518573761,
0.0071447561495006084,
-0.0601365752518177,
-0.04333193600177765,
-0.026906659826636314,
0.04279991611838341,
0.035977985709905624,
0.037075143307447433,
-0.02752336859703064,
-0.034279875457286835,
0.12262309342622757,
0.14772865176200867,
0.05032821744680405,
-0.0843963772058487,
0.02293291687965393,
-0.06446952372789383,
0.0633285790681839,
0.12916985154151917,
-0.04703379049897194,
0.038973618298769,
-0.005281602498143911,
0.011621133424341679,
0.011871996335685253,
-0.01992214471101761,
0.04015694186091423,
0.07515935599803925,
-0.06705641746520996,
-0.18464528024196625,
-0.03802994266152382,
0.06833872199058533,
0.08052308112382889,
-0.00835075881332159,
0.02113318257033825,
0.13614000380039215,
0.009075989946722984,
-0.1460115611553192,
-0.09857241809368134,
-0.1008201539516449,
-0.027849381789565086,
-0.050566308200359344,
-0.026790359988808632,
-0.10604729503393173,
-0.014098208397626877,
0.05344819277524948,
0.048441801220178604,
-0.01372015755623579,
-0.08347369730472565,
-0.06191951408982277,
0.056721460074186325,
0.004016720224171877,
0.07028323411941528,
-0.12466146796941757,
-0.02578832022845745,
0.1625421792268753,
0.06871011853218079,
-0.05183940380811691,
-0.1296987384557724,
0.09586672484874725,
0.09289822727441788,
0.1078977957367897,
0.11603563278913498,
0.04708379507064819,
-0.06556705385446548,
0.09793957322835922,
0.15312592685222626,
0.10225631296634674,
0.012421942315995693,
-0.14296214282512665,
-0.08547234535217285,
-0.05264382064342499,
0.010805733501911163,
0.22014710307121277,
0.08532623946666718,
-0.1726977825164795,
0.027569206431508064,
0.12402800470590591,
-0.08378305286169052,
-0.014558431692421436,
-0.054391004145145416,
-0.19213315844535828,
-0.06382809579372406,
-0.014656656421720982,
0.02039063535630703,
-0.03250959888100624,
0.04921112209558487,
0.17495141923427582,
0.02546010911464691,
-0.05108916386961937,
-0.1292872279882431,
-0.056246086955070496,
0.019557040184736252,
0.12962347269058228,
0.13434559106826782,
0.06749482452869415,
0.2593119740486145,
0.09417393803596497,
0.04614320397377014,
-0.05405570939183235,
0.06461965292692184,
-0.003369234735146165,
0.06441178917884827,
0.07894734293222427,
-0.09918651729822159,
0.015478035435080528,
0.14520294964313507,
0.10095201432704926,
0.05837344750761986,
-0.03633039817214012,
0.09019830077886581,
0.012562116608023643,
-0.08057257533073425,
-0.0423906035721302,
0.05706124007701874,
-0.05324471741914749,
-0.09517165273427963,
-0.018612414598464966,
0.12473650276660919,
0.034212373197078705,
0.0016126134432852268,
-0.14786937832832336,
0.010429451242089272,
-9.65009894571267e-06,
0.1103682890534401,
0.004164604470133781,
0.028402293100953102,
-0.15300634503364563,
0.019755320623517036,
0.01558466162532568,
-0.03996771201491356,
0.06828109920024872,
0.024825643748044968,
-0.0566536970436573,
-0.10679865628480911,
0.07850679755210876,
0.1984436959028244,
0.20041877031326294,
0.11457144469022751,
-0.10009274631738663,
0.10964689403772354,
0.021528666839003563,
0.03401258960366249,
-0.1528027355670929,
-0.02352006360888481,
-0.02135230228304863,
-0.10136936604976654,
0.09883450716733932,
-0.06130564212799072,
-0.030415546149015427,
-0.005933467298746109,
0.08802127838134766,
0.03545982018113136,
-0.08139543235301971,
-0.027068357914686203,
0.006843165960162878,
-0.10324633866548538,
-0.047620028257369995,
-0.06092827022075653,
-0.053811147809028625,
-0.019802579656243324,
-0.0016399049200117588,
-0.09411884844303131,
-0.07733817398548126,
-0.0046301172114908695,
-0.0352746807038784,
-0.014515223912894726,
-0.07099933922290802,
-0.10170571506023407,
-0.05339626222848892,
-0.08019205182790756,
-0.03216281905770302,
0.02026454545557499,
-0.013260914944112301,
-0.0614166297018528,
-0.09939403086900711,
-0.06766484677791595,
0.02441849745810032,
-0.02247067727148533,
-0.09651077538728714,
0.050750333815813065,
-0.05124760419130325,
-0.17770059406757355,
-0.09176173061132431,
0.0711180567741394,
0.04192565754055977,
0.09634366631507874,
-0.0091483723372221,
-0.05247071385383606,
0.02147744409739971,
0.08104301989078522,
0.17233993113040924,
0.08468711376190186,
-0.08327611535787582,
-0.13779059052467346,
-0.09827210754156113,
-0.13711127638816833,
-0.02958695963025093,
0.013339489698410034,
0.006398490630090237,
-0.14088210463523865,
-0.02048340067267418,
0.15506088733673096,
-0.10064155608415604,
-0.06408710777759552,
-0.015332595445215702,
0.12086779624223709,
-0.02790609747171402,
-0.045318618416786194,
0.06102766841650009,
0.022456826642155647,
-0.007954128086566925,
0.07730034738779068,
0.006174382753670216,
0.04453697428107262,
-0.19826601445674896,
-0.22100920975208282,
-0.03856462612748146,
0.16671223938465118,
0.013551482930779457,
0.0429728738963604,
-0.014270625077188015,
-0.032869841903448105,
0.01639309525489807,
-0.010110274888575077,
-0.032165613025426865,
-0.09212174266576767,
-0.09633982926607132,
0.04745649918913841,
-0.06262227147817612,
0.04237325116991997,
-0.014387491159141064,
0.08692833036184311,
-0.013723325915634632,
-0.006317335180938244,
0.23908093571662903,
-0.024932805448770523,
-0.1632608324289322,
-0.03900492936372757,
-0.018678603693842888,
0.10884168744087219,
-0.16066387295722961,
-0.13527455925941467,
0.04117819294333458,
0.019276734441518784,
-0.04003762826323509,
-0.13275475800037384,
-0.16343002021312714,
0.08731485158205032,
-0.032618649303913116,
-0.012778885662555695,
-0.05151085555553436,
-0.0787012055516243,
-0.05935490131378174,
0.03957227244973183,
0.11237496137619019,
-0.18717624247074127,
-0.0921180322766304,
-0.07341719418764114,
0.008277337066829205,
-0.050152260810136795,
0.04820835590362549,
0.020887047052383423,
0.04401937127113342,
0.00706584844738245,
-0.08118603378534317,
0.059254590421915054,
-0.02670014277100563,
0.018351033329963684,
-0.06345003098249435,
0.049115341156721115,
-0.004504890646785498,
-0.023664822801947594,
0.05185926333069801,
-0.07186919450759888,
-0.08240822702646255,
0.0143232811242342,
-0.0373486690223217,
0.024152640253305435,
-0.02720734477043152,
0.0636449009180069,
0.01679525338113308,
-0.019531380385160446,
-0.01520239282399416,
0.016283482313156128,
-0.030346201732754707,
0.003272194415330887,
-0.0919780284166336,
-0.03835561126470566,
-0.0001420349144609645,
0.012165753170847893,
-0.07021288573741913,
-0.053910721093416214,
0.01244320534169674,
0.07485231012105942,
-0.033706728368997574,
-0.07617204636335373,
-0.30495381355285645,
-0.045895930379629135,
0.07301633805036545,
-0.04646328464150429,
-0.08195783197879791,
-0.08983275294303894,
-0.13843442499637604,
-0.010037101805210114,
0.010328628122806549,
0.024238768965005875,
-0.034332405775785446,
-0.01999853178858757,
0.01085723377764225,
-0.17452707886695862,
0.018538858741521835,
0.03771686181426048,
0.007250675931572914,
-0.1648249477148056,
0.03879723325371742,
-0.03873196244239807,
0.009931912645697594,
0.015094541944563389,
-0.05806529521942139,
0.18908008933067322,
0.04313887655735016,
-0.044295452535152435,
0.04545676335692406,
-0.04015425965189934,
-0.07375356554985046,
-0.023246601223945618,
-0.03656135872006416,
0.028055692091584206,
0.06467807292938232,
-0.06530167162418365,
-0.057959068566560745,
-0.1390579789876938,
0.07010770589113235,
0.17786537110805511,
-0.06434130668640137,
-0.12491994351148605,
-0.016451828181743622,
0.0988183245062828,
0.09265739470720291,
0.020941687747836113,
-0.10089677572250366,
-0.04913294315338135,
-0.015557326376438141,
0.09018665552139282,
0.03947733715176582,
0.033134181052446365,
-0.09006615728139877,
-0.0519854761660099,
0.027231458574533463,
0.08190318942070007,
0.013585391454398632,
-0.11027778685092926,
0.02093566581606865,
0.129479318857193,
0.003801527200266719,
-0.06094619631767273,
-0.03195006027817726,
-0.004137947224080563,
-0.013784426264464855,
-0.19717562198638916,
-0.16665872931480408,
0.05847010761499405,
0.11576779931783676,
0.060631733387708664,
-0.009523393586277962,
-0.06775424629449844,
-0.05111609026789665,
0.14736157655715942,
0.12446606159210205,
-0.13401766121387482,
-0.03740860894322395,
-0.17165955901145935,
-0.05912989377975464,
-0.18322180211544037,
0.10876210778951645,
-0.006463889963924885,
0.1158781573176384,
0.030714211985468864,
-0.08166328072547913,
0.10853105038404465,
0.0837591364979744,
0.04577596113085747,
-0.040499139577150345,
0.03098466247320175,
-0.024154605343937874,
0.15465444326400757,
0.2112114280462265,
0.21237650513648987,
0.012754774652421474,
-0.003974633291363716,
0.08057599514722824,
0.020574338734149933,
0.22934097051620483,
0.043650828301906586,
0.03438771516084671,
-0.08189500123262405,
0.18816709518432617,
0.16154295206069946,
-0.017398687079548836,
0.012512123212218285,
0.0836959034204483,
0.021168876439332962,
0.12558148801326752,
0.05672871321439743,
-0.03984716162085533,
0.04965989291667938,
0.038437869399785995,
0.011494524776935577,
0.028485193848609924,
-0.011626789346337318,
-0.028978262096643448,
-0.01700827293097973,
0.07455410063266754,
0.06845078617334366,
-0.034749168902635574,
-0.035421423614025116,
-0.07515529543161392,
0.04892450571060181,
-0.05850035697221756,
-0.16426606476306915,
-0.12975583970546722,
0.011833157390356064,
0.04286865144968033,
0.06486561894416809,
0.06342073529958725,
0.018068373203277588,
0.004229164682328701,
-0.14379742741584778,
-0.22509323060512543,
-0.035735905170440674,
0.027162810787558556,
0.02982008084654808,
-0.06695786118507385,
-0.06555217504501343,
0.17021799087524414,
0.005609499756246805,
-0.01106670219451189,
-0.05177045986056328,
0.10247155278921127,
0.020521797239780426,
-0.11061426252126694,
-0.026031235232949257,
-0.16087615489959717,
-0.05630972981452942,
0.08432821929454803,
-0.0015451305080205202,
-0.11447899043560028,
-0.15810582041740417,
0.016806991770863533,
0.05759313702583313,
0.032540757209062576,
0.0019178688526153564,
-0.05176756531000137,
0.03345330432057381,
0.056914523243904114,
-0.02535288594663143,
-0.10439928621053696,
-0.1199241578578949,
0.050684068351984024,
0.02046707272529602,
0.031807828694581985,
-0.026916686445474625,
0.08913182467222214,
0.0068174730986356735,
0.16688446700572968,
0.12546256184577942,
0.03287171199917793,
0.0329255573451519,
-0.04482467845082283,
0.06532783061265945,
-0.011989861726760864,
0.08753500878810883,
0.19653034210205078,
0.06690375506877899,
-0.20410418510437012,
-0.05053810402750969,
0.10761499404907227,
-0.1429430991411209,
-0.10217912495136261,
-0.11711300909519196,
0.00351333268918097,
0.07008075714111328,
-0.027196787297725677,
-0.05262712761759758,
0.0711166188120842,
0.08705240488052368,
0.13669352233409882,
0.08913960307836533,
-0.02677563764154911,
-0.00802107248455286,
-0.14501617848873138,
0.06593067944049835,
0.09381304681301117,
0.006893491372466087,
-0.13815991580486298,
0.05621935427188873,
0.05177520960569382,
0.04920845478773117,
0.06107540428638458,
0.021001221612095833,
0.0017421975499019027,
0.11421448737382889,
0.06752479821443558,
-0.05076460540294647,
0.0030497221741825342,
0.19002383947372437,
0.17778687179088593,
0.041747886687517166,
0.05858088284730911,
0.1513696014881134,
0.0632866695523262,
-0.023058244958519936,
-0.0008307852549478412,
0.16719287633895874,
0.06678741425275803,
0.0956108495593071,
-0.10589703917503357,
0.08220314979553223,
-0.042092788964509964,
-0.18616178631782532,
-0.0870048999786377,
-0.013883214443922043,
-0.03703505918383598,
-0.00143685273360461,
-0.19134053587913513,
-0.08606120944023132,
-0.06191031634807587,
0.01767903007566929,
-0.02382541447877884,
-0.007073109969496727,
0.026786619797348976,
0.09318094700574875,
-0.00560395373031497,
0.00588332861661911,
0.11597518622875214,
0.2278439700603485,
0.1070336401462555,
0.12178769707679749,
-0.15791046619415283,
0.043491896241903305,
0.053644564002752304,
0.09319258481264114,
-0.09177068620920181,
-0.217355415225029,
0.021335294470191002,
-0.03169126436114311,
0.10676725953817368,
-0.017685087397694588,
-0.0018179669277742505,
-0.07021790742874146,
-0.013204876333475113,
-0.01912221871316433,
0.10032075643539429,
0.026954421773552895,
-0.02429746650159359,
-0.02234794571995735,
-0.06447657197713852,
0.003807434346526861,
0.014050817117094994,
0.03415398672223091,
-0.05840934440493584,
-0.025816254317760468,
0.0706828236579895,
0.05684405937790871,
0.023414410650730133,
-0.18719704449176788,
-0.0325198769569397,
-0.09638285636901855,
-0.03484458103775978,
0.034739527851343155,
-0.031237272545695305,
0.08069347590208054,
-0.12558791041374207,
0.07704433053731918,
-0.12034054845571518,
-0.08363978564739227,
-0.03427756577730179,
-0.062324024736881256,
0.09293980896472931,
-0.1200546994805336,
-0.07786011695861816,
-0.12070576101541519,
-0.030007965862751007,
0.014105738140642643,
0.11983030289411545,
0.00051970622735098,
-0.01774604432284832,
0.014946096576750278,
0.09908246248960495,
0.17205257713794708,
0.02846752665936947,
0.08482789993286133,
0.014063317328691483,
-0.1465202271938324,
0.07183098047971725,
0.050846219062805176,
0.032678816467523575,
0.0012100489111617208,
0.014548785984516144,
-0.09632329642772675,
-0.04804880544543266,
0.08824769407510757,
-0.11058969050645828,
0.17589671909809113,
-0.01656697876751423,
-0.012502054683864117,
-0.11465230584144592,
0.08837977796792984,
0.08032820373773575,
0.02741851657629013,
0.050504278391599655,
0.19386617839336395,
0.11990755796432495,
0.16560792922973633,
-0.1788594126701355,
-0.1662774235010147,
-0.05017106235027313,
-0.01107932161539793,
0.08173738420009613,
-0.2188887596130371,
-0.1497039794921875,
-0.0920865461230278,
-0.10425243526697159,
-0.17911262810230255,
0.023542014881968498,
-0.07505689561367035,
0.028792211785912514,
-0.06348129361867905,
-0.241726353764534,
0.10388987511396408,
0.08048104494810104,
0.06168732792139053,
0.10604526102542877,
0.0802900567650795,
0.18669195473194122,
0.09121154248714447,
-0.07016968727111816,
0.03278670087456703,
-0.010212535038590431,
0.24879147112369537,
-0.02361029013991356,
0.048397939652204514,
0.062409404665231705,
-0.07996988296508789,
-0.009805809706449509,
-0.01815478317439556,
-0.10063961148262024,
0.07284700870513916,
0.058084048330783844,
-0.17540882527828217,
-0.16891855001449585,
-0.08797883242368698,
0.040847666561603546,
0.04922033101320267,
-0.026217864826321602,
-0.12328633666038513,
0.025248108431696892,
-0.010520050302147865,
0.0026251161471009254,
-0.04216894134879112,
0.0409901887178421,
0.031834471970796585,
0.03009953536093235,
-0.024660471826791763,
-0.08391983807086945,
0.03625025972723961,
0.045136112719774246,
0.0833016112446785,
0.08240938186645508,
-0.08356428891420364,
-0.025838050991296768,
-0.08564962446689606,
-0.09130782634019852,
-0.14461658895015717,
-0.10569099336862564,
0.018926706165075302,
0.004153417889028788,
-0.010685717687010765,
-0.14366041123867035,
0.03447987139225006,
0.011370411142706871,
-0.04092404991388321,
0.05230071768164635,
0.05179658532142639,
-0.055815428495407104,
-0.04298041760921478,
-0.03543940559029579,
-0.09435658156871796,
-0.0007578845834359527,
0.041782498359680176,
-0.013894744217395782,
0.02159491926431656,
0.011823422275483608,
0.022245457395911217,
-0.15280622243881226,
-0.13286839425563812,
-0.30717629194259644,
-0.1282360702753067,
-0.07438281178474426,
-0.15953055024147034,
-0.08343665301799774,
-0.0914558693766594,
-0.18526260554790497,
0.022606531158089638,
0.007197798229753971,
0.04931114614009857,
0.021789271384477615,
0.05638609454035759,
0.029856029897928238,
0.017147187143564224,
0.012684757821261883,
-0.015442109666764736,
0.058914899826049805,
0.030522959306836128,
0.21532346308231354,
0.05106372758746147,
-0.0010636828374117613,
-7.548699795734137e-05,
-0.004427642095834017,
-0.058640092611312866,
-0.22887279093265533,
0.03435836359858513,
0.08888766169548035,
-0.03567700460553169,
-0.014611226506531239,
0.12493831664323807,
0.03155345469713211,
0.04269396513700485,
-0.014497868716716766,
-0.03202791512012482,
0.026800695806741714,
0.025634968653321266,
0.058684878051280975,
0.0266933124512434,
-0.05279776453971863,
0.0760774239897728,
0.10599637031555176,
-0.08567462861537933,
0.03503533452749252,
-0.021739687770605087,
0.1401796191930771,
0.0708823874592781,
-0.008390193805098534,
0.0014437608188018203,
-0.034125495702028275,
0.025059551000595093,
0.20899629592895508,
0.057000499218702316,
-0.06234569475054741,
-0.038567494601011276,
0.06560666859149933,
0.16147056221961975,
0.019975833594799042,
-0.03749247267842293,
-0.01783052273094654,
0.03342725336551666,
0.03257960081100464,
0.032889530062675476,
0.030301610007882118,
0.10100742429494858,
0.055544786155223846,
0.021027006208896637,
0.025783516466617584,
0.039070405066013336,
0.029068395495414734,
0.20812340080738068,
0.08605250716209412,
-0.08129002898931503,
0.006795124616473913,
-0.18172062933444977,
-0.034680284559726715,
-0.10963230580091476,
-0.08269712328910828,
-0.07295690476894379,
-0.13441556692123413,
-0.1464659720659256,
-0.08948475122451782,
-0.08178623765707016,
-0.11600615084171295,
0.06225702166557312,
0.030191298574209213,
-0.07909443974494934,
0.04515237733721733,
-0.06519507616758347,
-0.04699736461043358,
-0.03541361168026924,
-0.05210930109024048,
0.06143193691968918,
0.06529916822910309,
-0.01884123869240284,
0.03862125426530838,
-0.073661670088768,
-0.02111470140516758,
0.010048710741102695,
0.06418631970882416,
0.04444221407175064,
-0.05352818965911865,
-0.06172600015997887,
0.12336172163486481,
0.09135300666093826,
0.18964563310146332,
-0.06283034384250641,
-0.016459858044981956,
-0.026039477437734604,
-0.022521385923027992,
0.03926513344049454,
-0.01536333654075861,
0.018108032643795013,
-0.05614624544978142,
-0.01202938612550497,
-0.13722969591617584,
-0.04139767587184906,
0.04576120153069496,
0.031738631427288055,
-0.09948231279850006,
-0.07746673375368118,
-0.07860046625137329,
0.13245828449726105,
0.12740956246852875,
0.020237889140844345,
-0.07808879762887955,
-0.04422439634799957,
-0.035375550389289856,
0.08672390133142471,
-0.00564201083034277,
-0.01912030205130577,
0.024917131289839745,
-0.0392126627266407,
-0.19889673590660095,
-0.05448366701602936,
0.02139299362897873,
-0.007107717916369438,
-0.05292622372508049,
-0.09181345254182816,
-0.008078227750957012,
0.03935995325446129,
-0.06218133121728897,
-0.11012560874223709,
-0.056434858590364456,
0.02820112369954586,
0.030151989310979843,
0.0023025355767458677,
-0.044020794332027435,
-0.0085771968588233,
-0.024508606642484665,
0.07875843346118927,
0.1631907820701599,
0.12288086861371994,
-0.06246640905737877,
-0.010122356005012989,
0.018618958070874214,
0.11507308483123779,
0.11497081071138382,
0.04586147889494896,
0.0895448699593544,
0.05230081081390381,
0.0820053368806839,
-0.00978599302470684,
0.03617988899350166,
0.09171202033758163,
0.015593616291880608,
-0.010781410150229931,
0.07322318106889725,
0.1643347591161728,
0.08351277559995651,
-0.005819216370582581,
0.04694797471165657,
0.2035021185874939,
0.19816696643829346,
-0.10591597110033035,
-0.10389731824398041,
-0.08413486182689667,
0.021855631843209267,
0.05306439474225044,
-0.2204885631799698,
-0.090439572930336,
0.05537622421979904,
0.02971266768872738,
-0.0905889943242073,
-0.09171037375926971,
-0.1303412765264511,
-0.10679470747709274,
-0.05344236269593239,
-0.02205130085349083,
-0.03920865058898926,
-0.027052726596593857,
-0.0452113039791584,
0.06209978461265564,
0.03538643568754196,
-0.041765324771404266,
-0.02787008136510849,
-0.0490945465862751,
-0.003611659398302436,
0.06720895320177078,
0.07468152791261673,
0.09592410922050476,
0.041872333735227585,
0.0027238731272518635,
0.09326012432575226,
0.09778863936662674,
0.13866867125034332,
-0.1289065033197403,
-0.10020928084850311,
-0.013309667818248272,
-0.012920013628900051,
0.023176297545433044,
-0.03209899365901947,
-0.0664013996720314,
-0.0017767809331417084,
0.05743401125073433,
0.016385743394494057,
0.03577609360218048,
0.013315675780177116,
-0.04111573100090027,
-0.2627725899219513,
-0.14680898189544678,
-0.08441440016031265,
0.16998296976089478,
0.02491159178316593,
-0.20256130397319794,
-0.09667222201824188,
-0.0028439562302082777,
0.03865393251180649,
-0.0570346862077713,
0.0806422308087349,
-0.09324576705694199,
-0.11018409579992294,
0.04935922846198082,
-0.007174814585596323,
-0.07025217264890671,
-0.14802245795726776,
-0.029510915279388428,
-0.019317490980029106,
-0.02864321693778038,
-0.011092445813119411,
0.038413941860198975,
0.07346466183662415,
0.10461997240781784,
0.07934893667697906,
0.005303714424371719,
0.022731170058250427,
-0.0396597720682621,
-0.060081519186496735,
-0.04624594748020172,
0.0668271854519844,
-0.11336217075586319,
-0.048403549939394,
-0.028747914358973503,
0.03134181350469589,
0.045614857226610184,
0.039885394275188446,
0.0006891591474413872,
-0.08101709187030792,
0.03433511406183243,
0.049201615154743195,
-0.0280689038336277,
-0.082527756690979,
0.0035011176951229572,
-0.015663456171751022,
0.06714428961277008,
0.06642232090234756,
0.0004129396111238748,
-0.006254185922443867,
-0.10162614285945892,
0.04808259382843971,
0.07637307792901993,
-0.01629914715886116,
-0.14622831344604492,
-0.08277010172605515,
0.17628061771392822,
0.06835950911045074,
0.094183050096035,
-0.053266942501068115,
0.1555045247077942,
0.058519478887319565,
0.15893471240997314,
0.002105974592268467,
-0.03301674872636795,
0.104457788169384,
0.11079078167676926,
0.1975243240594864,
0.036467645317316055,
-0.027514509856700897,
0.04046155884861946,
0.033732831478118896,
0.12413161247968674,
0.132053941488266,
0.09377304464578629,
0.10682756453752518,
-0.017039913684129715,
0.10834110528230667,
0.019542664289474487,
0.015843484550714493,
-0.0671873539686203,
0.0027718895580619574,
0.0012955127749592066,
-0.16191187500953674,
-0.020531540736556053,
-0.07299678772687912,
0.012556834146380424,
0.23347386717796326,
0.10098785161972046,
0.023848332464694977,
-0.0045625753700733185,
0.008145035244524479,
0.14859135448932648,
0.05092616379261017,
0.0011436535278335214,
-0.020239511504769325,
0.01385123748332262,
-0.04716307669878006,
-0.051601678133010864,
0.0016308308113366365,
0.15325479209423065,
-0.09471400827169418,
-0.21966585516929626,
-0.15492850542068481,
0.025036819279193878,
0.13637661933898926,
-0.03611045703291893,
-0.06842734664678574,
-0.12934158742427826,
-0.05426143854856491,
0.022904539480805397,
0.09631125628948212,
-0.13424570858478546,
-0.18761341273784637,
-0.031613707542419434,
0.06363620609045029,
0.017678096890449524,
-0.1589425951242447,
-0.1038847342133522,
-0.009707663208246231,
0.06443029642105103,
-0.02653842605650425,
0.011798461899161339,
0.09885881096124649,
-0.015974752604961395,
-0.11274594068527222,
-0.2592691481113434,
-0.06856585294008255,
0.02782786265015602,
-0.04839019849896431,
-0.16993024945259094,
-0.11240221560001373,
0.0852494090795517,
0.03140489384531975,
0.0193454772233963,
-0.05780527740716934,
0.05138227343559265,
0.06448869407176971,
0.07296387851238251,
-0.040078677237033844,
0.018580466508865356,
0.002140614902600646,
-0.04971533268690109,
-0.0648363009095192,
0.004940394312143326,
-0.012619833461940289,
-0.03999454528093338,
0.006771038752049208,
0.02633535861968994,
0.061267223209142685,
0.1399535983800888,
0.1718810349702835,
0.07339964807033539,
0.02730456367135048,
0.03656775876879692,
0.024976573884487152,
-0.03309778496623039,
-0.0910671129822731,
-0.02887725457549095,
-0.06775078922510147,
-0.019559131935238838,
-0.21575595438480377,
-0.12006208300590515,
0.025703510269522667,
-0.035900335758924484,
-0.14481259882450104,
0.04587685316801071,
-0.02126140706241131,
-0.0392032191157341,
-0.04493336006999016,
0.010936828330159187,
0.07675296068191528,
0.09078344702720642,
0.09172151237726212,
0.06381881982088089,
-0.008301274850964546,
-0.022843750193715096,
-0.15616969764232635,
-0.043295592069625854,
-0.12028525024652481,
0.02878962643444538,
-0.19813255965709686,
-0.14399227499961853,
-0.1896248459815979,
-0.11184608936309814,
-0.13573125004768372,
-0.07173918187618256,
-0.0774238184094429,
-0.14001615345478058,
-0.024816647171974182,
0.04625764116644859,
-0.04153083637356758,
-0.11399925500154495,
-0.03787562623620033,
0.03906824067234993,
-0.028501128777861595,
-0.09057315438985825,
-0.0006194426096044481,
-0.006924406159669161,
0.051876671612262726,
-0.1284056454896927,
-0.06654335558414459,
-0.04656738415360451,
0.002304322086274624,
0.01569732092320919,
-0.008325153030455112,
0.00950723048299551,
-0.029999691992998123,
0.020801382139325142,
0.013734170235693455,
-0.047517914324998856,
0.041349247097969055,
0.07905279099941254,
0.05942095071077347,
0.0014718695310875773,
0.0037063921336084604,
0.04867221787571907,
-0.1114853024482727,
-0.16660262644290924,
0.04829654097557068,
0.15114973485469818,
-0.005539710633456707,
-0.1234729140996933,
-0.021731646731495857,
0.06663509458303452,
0.13515910506248474,
0.06611081957817078,
-0.03305864334106445,
-0.12185345590114594,
-0.047534920275211334,
0.08838541805744171,
0.08181370794773102,
-0.027253102511167526,
-0.05972110852599144,
-0.09639953821897507,
0.004012153949588537,
0.05512278154492378,
0.005692148115485907,
0.021105237305164337,
-0.08167175948619843,
0.10316937416791916,
0.09532971680164337,
-0.025763703510165215,
-0.04753341153264046,
0.0065164160914719105,
-0.008436916396021843,
-0.0036504340823739767,
0.0509977713227272,
0.03475124016404152,
0.08220252394676208,
0.08956551551818848,
-0.02057398296892643,
-0.07761318981647491,
-0.010876688174903393,
0.12210197001695633,
0.06847524642944336,
-0.0981282889842987,
-0.07083065062761307,
0.039696142077445984,
0.04025404155254364,
-0.0015265729743987322,
0.05326714366674423,
0.004926413297653198,
-0.016665341332554817,
0.08507256954908371,
-0.06851928681135178,
-0.012228907085955143,
-0.07074949145317078,
-0.01993187889456749,
0.019237542524933815,
-0.022521277889609337,
-0.03209185227751732,
0.060918815433979034,
0.13952089846134186,
0.07733571529388428,
-0.057335928082466125,
0.045173246413469315,
0.021975794807076454,
0.09346884489059448,
0.07572975009679794,
-0.0030114687979221344,
-0.039078984409570694,
0.04798383638262749,
0.15050335228443146,
0.018411198630928993,
0.03509971499443054,
-0.07562186568975449,
0.10340417176485062,
-0.0019454321591183543,
0.032313134521245956,
0.048250533640384674,
-0.031037110835313797,
0.09373274445533752,
0.12033400684595108,
-0.016329236328601837,
0.03781824931502342,
-0.059257056564092636,
0.0528540313243866,
0.06339081376791,
0.08735721558332443,
-0.03650941327214241,
0.026813598349690437,
0.07642007619142532,
0.11486918479204178,
0.04014170542359352,
-0.046517085283994675,
-0.1187373474240303,
-0.1660025268793106,
-0.07710710912942886,
0.10373196005821228,
0.05039649456739426,
-0.11212926357984543,
-0.09474345296621323,
-0.03824988380074501,
-0.07309647649526596,
0.040688466280698776,
-0.06528234481811523,
0.08327867090702057,
0.035860784351825714,
0.0853009968996048,
-0.027917416766285896,
0.16782870888710022,
-0.006661990657448769,
-0.07350651174783707,
-0.048007916659116745,
0.006692231632769108,
0.09301925450563431,
-0.11579373478889465,
-0.030847951769828796,
-0.13006873428821564,
-0.06342533230781555,
0.05480274185538292,
0.027411798015236855,
0.017240561544895172,
-0.16596610844135284,
-0.02300708368420601,
0.06386672705411911,
-0.0274334866553545,
0.039984527975320816,
-0.12545913457870483,
0.022693440318107605,
0.06367987394332886,
0.020303891971707344,
-0.14370642602443695,
-0.14012981951236725,
-0.03624879568815231,
0.01556702982634306,
-0.023667415603995323,
-0.057007670402526855,
0.003964295610785484,
-0.13342931866645813,
-0.009791538119316101,
0.08505639433860779,
0.048504408448934555,
0.056109651923179626,
-0.13085050880908966,
0.011738318018615246,
0.03386063501238823,
0.11987493187189102,
0.12286920845508575,
-0.006806837394833565,
0.007396033965051174,
0.06752682477235794,
0.11102014034986496,
-0.029502086341381073,
-0.0037481016479432583,
-0.12881337106227875,
0.007200602907687426,
0.0817284807562828,
-0.03582917898893356,
-0.08595242351293564,
0.03091643750667572,
0.13336843252182007,
0.16317221522331238,
0.00766867958009243,
-0.1578347086906433,
-0.03894111141562462,
-0.004482785705476999,
0.08170939236879349,
0.16365273296833038,
-0.030625630170106888,
-0.10287418216466904,
-0.0029775300063192844,
0.09785190969705582,
0.05632016807794571,
0.08233736455440521,
-0.07059060037136078,
-0.027433106675744057,
0.06030435860157013,
0.035942960530519485,
0.029916658997535706,
-0.052576955407857895,
0.08807727694511414,
0.11868561804294586,
0.017061011865735054,
0.07910934090614319,
0.04916103556752205,
0.03954825550317764,
0.008684218861162663,
-0.005889544729143381,
0.08051584661006927,
0.11574362218379974,
0.06096925586462021,
-0.005893702153116465,
0.0023754462599754333,
-0.06755507737398148,
0.09094062447547913,
0.012423114851117134,
-0.052143145352602005,
-0.06303171813488007,
-0.031679026782512665,
-0.1788739711046219,
-0.019772859290242195,
-0.050054699182510376,
-0.03412264212965965,
-0.016160467639565468,
-0.10962074249982834,
0.06312406808137894,
-0.02998807467520237,
-0.005586554761976004,
0.09114274382591248,
0.08679159730672836,
0.11514903604984283,
0.06957065314054489,
0.019979560747742653,
-0.18300504982471466,
0.05585642531514168,
0.05520748347043991,
0.021827131509780884,
-0.04918336495757103,
-0.2198590636253357,
-0.07172439247369766,
-0.038920797407627106,
0.05750204622745514,
0.031259141862392426,
0.047668494284152985,
-0.037298135459423065,
0.0953841432929039,
-0.00947093591094017,
0.07449524849653244,
0.0706978589296341,
-0.07887281477451324,
-0.04879727587103844,
-0.05562042072415352,
0.006775408051908016,
0.015406710095703602,
-0.020874908193945885,
-0.08888086676597595,
-0.038499634712934494,
0.04840277135372162,
0.09155087172985077,
-0.08554553985595703,
-0.18113809823989868,
-0.05263859033584595,
-0.1418135017156601,
0.05081013962626457,
-0.012276923283934593,
-0.0863671526312828,
0.1173553466796875,
-0.056670527905225754,
-0.0007663569413125515,
-0.030881987884640694,
-0.014512152411043644,
-0.009973740205168724,
-0.004855583421885967,
0.09197340905666351,
-0.016750330105423927,
-0.11901133507490158,
-0.11482539772987366,
-0.04720368981361389,
0.06190914660692215,
0.211356982588768,
-0.019243275746703148,
-0.015174428932368755,
-0.07718396186828613,
-0.003788558067753911,
-0.0013995611807331443,
-0.0638161227107048,
0.004618216305971146,
-0.057602789252996445,
-0.060007765889167786,
0.01586596667766571,
-0.06571497023105621,
0.09671077877283096,
0.07506096363067627,
-0.002163900528103113,
-0.09027687460184097,
0.06559187173843384,
0.14403338730335236,
-0.11308430880308151,
0.01958564482629299,
0.024150030687451363,
-0.011438420973718166,
-0.050271037966012955,
0.06092296168208122,
0.04515998810529709,
0.07327915728092194,
0.1025964617729187,
0.12294553220272064,
0.05527433380484581,
0.05457328259944916,
-0.03997031971812248,
0.06194261461496353,
0.05836718529462814,
0.016387948766350746,
-0.015819083899259567,
0.01764567568898201,
-0.07731403410434723,
-0.04475339874625206,
-0.037370163947343826,
-0.038044385612010956,
-0.11210048943758011,
-0.18185976147651672,
-0.01691143400967121,
-0.007078510709106922,
-0.09311074018478394,
-0.00688902847468853,
0.016687359660863876,
0.06883079558610916,
0.008385539054870605,
0.022330792620778084,
0.1929827332496643,
-0.0997571349143982,
-0.05385565385222435,
-0.04987265542149544,
-0.029105063527822495,
0.2066653072834015,
0.01013653352856636,
0.11952295154333115,
-0.016192715615034103,
0.013757177628576756,
0.07519752532243729,
0.04316248372197151,
-0.041604578495025635,
-0.019955353811383247,
0.046000346541404724,
-0.06024648994207382,
-0.08819179981946945,
-0.07658632844686508,
-0.029052961617708206,
0.11733485013246536,
-0.0637645572423935,
-0.19679765403270721,
-0.09341856837272644,
0.09686844795942307,
0.09029273688793182,
0.010613950900733471,
0.07653436809778214,
0.07168307900428772,
0.010208874009549618,
-0.0013197860680520535,
-0.04269377142190933,
0.002309924690052867,
0.025248562917113304,
-0.031479377299547195,
0.08930797129869461,
-0.09270790964365005,
-0.08486032485961914,
-0.12560808658599854,
-0.04942775145173073,
-0.055110957473516464,
-0.022266512736678123,
0.09740384668111801,
-0.03196471557021141,
0.02090590074658394,
-0.013036534190177917,
0.056757327169179916,
-0.016498303040862083,
0.05306204408407211,
0.036377161741256714,
-0.07277393341064453,
-0.07763084769248962,
-0.09145008772611618,
-0.09397801011800766,
-0.09727264940738678,
0.06782124191522598,
0.08713451772928238,
0.0751747116446495,
0.09892953187227249,
0.06509619206190109,
0.03958350792527199,
0.03842665255069733,
0.0627550259232521,
-0.008202371187508106,
0.033408842980861664,
0.02673359215259552,
-0.1271045058965683,
-0.14393115043640137,
-0.0590980090200901,
-0.19094301760196686,
-0.025995628908276558,
-0.07915079593658447,
-0.05667298659682274,
-0.006365918554365635,
0.04689180478453636,
0.09791994094848633,
0.017780272290110588,
-0.016234736889600754,
0.04007785767316818,
-0.01247064396739006,
0.20070716738700867,
0.08450301736593246,
0.027322756126523018,
-0.08982483297586441,
-0.16208793222904205,
-0.09356948733329773,
0.028165088966488838,
-0.027411341667175293,
-0.10084322094917297,
-0.061305541545152664,
-0.12981577217578888,
0.003927009645849466,
-0.051629628986120224,
0.09362488240003586,
-0.03449828550219536,
0.11754751950502396,
-0.0509805865585804,
-0.028347091749310493,
-0.014242175966501236,
0.08781632035970688,
0.03180837631225586,
0.03302180767059326,
-0.031396280974149704,
-0.023304877802729607,
0.03152645006775856,
0.004641389008611441,
0.03757908195257187,
-0.024323979392647743,
-0.15095102787017822,
0.008813749998807907,
-0.06816902756690979,
0.019127758219838142,
0.044218625873327255,
0.05040993168950081,
-0.029212940484285355,
-0.0334518738090992,
-0.01634659804403782,
-0.03638622164726257,
-0.029468344524502754,
0.03179226070642471,
-0.0032589712645858526,
0.0614764466881752,
-0.04994368180632591,
-0.04745956510305405,
-0.053763728588819504,
-0.022539280354976654,
-0.22501909732818604,
-0.048236265778541565,
-0.0014129705959931016,
0.06759445369243622,
-0.002357473596930504,
-0.01100021693855524,
-0.11128155887126923,
-0.014766637235879898,
0.09977072477340698,
0.14939187467098236,
0.05264313519001007,
0.0038221676368266344,
0.06149976700544357,
0.030732979997992516,
-0.04639734700322151,
0.1591152399778366,
0.1089477688074112,
0.08514811098575592,
0.0890224352478981,
-0.059388965368270874,
0.019886545836925507,
-0.09451758861541748,
0.037469007074832916,
0.11574523150920868,
-0.03419557958841324,
-0.003038166556507349,
0.04762055724859238,
0.18422970175743103,
0.07602518051862717,
0.03785514831542969,
-0.0026214183308184147,
-0.02740919217467308,
0.035927437245845795,
0.03359014540910721,
-0.027084235101938248,
-0.040276605635881424,
0.04579683765769005,
0.10826598107814789,
-0.061971381306648254,
-0.0970698669552803,
-0.039664819836616516,
0.030336806550621986,
-0.07078508287668228,
-0.017765529453754425,
-0.030706916004419327,
-0.0324377566576004,
0.015301917679607868,
0.051367342472076416,
-0.04518682137131691,
0.0541546456515789,
-0.0692477747797966,
-0.024795256555080414,
0.06280675530433655,
0.10389983654022217,
-0.043631330132484436,
-0.10807043313980103,
0.032071419060230255,
0.06823425740003586,
0.15378104150295258,
0.15882454812526703,
-0.11331837624311447,
-0.03862651810050011,
0.01951499469578266,
-0.02657376229763031,
0.007519971113651991,
0.05711240693926811,
-0.0047882176004350185,
0.026593530550599098,
-0.10364940017461777,
-0.13976415991783142,
0.08582603186368942,
0.08939997851848602,
0.0748746395111084,
-0.05261606350541115,
-0.028832659125328064,
0.20163242518901825,
0.024876587092876434,
-0.14510591328144073,
-0.19004103541374207,
-0.15772193670272827,
-0.005837107077240944,
-0.02077857032418251,
0.04585118591785431,
-0.10230384767055511,
-0.07487338781356812,
0.019830355420708656,
0.00010448602552060038,
0.04891403019428253,
-0.04202776029706001,
0.001839110511355102,
0.08668366819620132,
0.01597088947892189,
-0.08849411457777023,
-0.044574517756700516,
-0.018351394683122635,
0.048678841441869736,
-0.08633080124855042,
-0.14349284768104553,
-0.11172986775636673,
0.0022238637320697308,
-0.046829767525196075,
-0.022231897339224815,
0.045103877782821655,
0.060116562992334366,
-0.04777513071894646,
0.057642996311187744,
0.05325520038604736,
0.10371062159538269,
0.07310167700052261,
-0.05024779960513115,
-0.013757244683802128,
-0.0008784985402598977,
0.07179656624794006,
-0.08997426182031631,
-0.0008217033464461565,
-0.03930577635765076,
0.02725927159190178,
0.02741389162838459,
-0.2050274759531021,
-0.15305450558662415,
0.009017075411975384,
0.05180474743247032,
0.18333284556865692,
-0.009787636809051037,
-0.05094872787594795,
-0.051198333501815796,
0.05970042198896408,
0.03398774191737175,
-0.04030425101518631,
-0.19900602102279663,
-0.11673743277788162,
-0.051761794835329056,
0.10375409573316574,
0.11706721782684326,
-0.01778111234307289,
-0.01749422773718834,
0.02961103245615959,
0.07692208141088486,
0.041582535952329636,
-0.07011159509420395,
0.01889524981379509,
0.021297717466950417,
0.14720585942268372,
-0.047315504401922226,
0.01533595472574234,
0.05301527678966522,
0.14560364186763763,
0.06906552612781525,
-0.053170666098594666,
0.05604856461286545,
0.027480965480208397,
-0.05154189467430115,
0.02544999122619629,
-0.02096090093255043,
0.08184733986854553,
-0.0405065156519413,
0.019765065982937813,
0.06163939833641052,
0.20175611972808838,
0.13350139558315277,
-0.01906132698059082,
-0.014492521062493324,
0.036747436970472336,
0.04920142516493797,
0.08294937759637833,
-0.11634951084852219,
0.016216253861784935,
-0.055783651769161224,
-0.06950053572654724,
-0.12335126847028732,
0.06326651573181152,
0.048425767570734024,
0.04521084949374199,
0.009892023168504238,
-0.03818885609507561,
0.06397157907485962,
0.08004603534936905,
0.10963205993175507,
0.14447103440761566,
0.08367017656564713,
0.08691729605197906,
0.02234836295247078,
-0.017684809863567352,
-0.15767516195774078,
-0.1740979254245758,
4.626650479622185e-05,
-0.06630575656890869,
-0.07976866513490677,
-0.06142432987689972,
-0.09730593115091324,
-0.06146334856748581,
0.004542406648397446,
-0.0238813366740942,
-0.00603913702070713,
0.00533209927380085,
-0.07725343108177185,
-0.13124805688858032,
-0.028215156868100166,
0.1266259104013443,
0.09593251347541809,
0.01808995008468628,
-0.051470328122377396,
-0.14172059297561646,
-0.0004281184810679406,
0.09075873345136642,
-0.008114860393106937,
-0.08477596193552017,
-0.08193619549274445,
-0.1920914351940155,
-0.13820379972457886,
-0.053738825023174286,
0.014604338444769382,
-0.09716267138719559,
-0.10108179599046707,
-0.013379140757024288,
-0.1754460483789444,
-0.033206891268491745,
-0.057692620903253555,
-0.0013224172871559858,
0.04318242147564888,
-0.06633223593235016,
-0.1708562672138214,
-0.16890305280685425,
-0.07207668572664261,
0.17889074981212616,
0.09981390833854675,
0.03213081136345863,
-0.015560773201286793,
-0.010572799481451511,
0.08429481834173203,
0.029711369425058365,
0.1061846911907196,
0.016737939789891243,
-0.12280965596437454,
-0.21381554007530212,
0.045305728912353516,
-0.02368501015007496,
0.06320782750844955,
-0.18127530813217163,
-0.0955987498164177,
-0.08987493813037872,
-0.03673027828335762,
-0.049874354153871536,
-0.09455268830060959,
-0.026426315307617188,
-0.0715121179819107,
-0.09668126702308655,
-0.07891591638326645,
0.02047339454293251,
0.044356394559144974,
-0.08749376982450485,
-0.08461181074380875,
0.17787034809589386,
0.17210957407951355,
0.09925635159015656,
-0.20447616279125214,
-0.11939117312431335,
0.02473214827477932,
0.0395328551530838,
0.08693884313106537,
-0.05642024427652359,
-0.053534507751464844,
0.08840090036392212,
0.10004523396492004,
0.05112852901220322,
-0.015170492231845856,
-0.04417964443564415,
0.010073849931359291,
-0.16184815764427185,
-0.16847015917301178,
0.0865510031580925,
0.04040072113275528,
0.04093867167830467,
-0.026811309158802032,
-0.07639365643262863,
0.21867670118808746,
0.06207149475812912,
-0.06860656291246414,
-0.02688368409872055,
-0.0911332368850708,
0.12076331675052643,
-0.1359773725271225,
0.0536733940243721,
0.011457414366304874,
-0.09214332699775696,
-0.002285165013745427,
-0.1562780886888504,
-0.06275990605354309,
0.014532195404171944,
-0.05300488695502281,
-0.05618076026439667,
-0.07683080434799194,
-0.11347674578428268,
0.010302520357072353,
-0.018897728994488716,
-0.028139127418398857,
-0.040745776146650314,
0.031063564121723175,
0.0872126966714859,
0.07130229473114014,
-0.04989735782146454,
0.07638853043317795,
0.09412021934986115,
0.08103099465370178,
0.0901307761669159,
-0.07126717269420624,
0.07508860528469086,
0.02257792092859745,
0.01792728155851364,
-0.002496196422725916,
0.041007209569215775,
-0.056806471198797226,
-0.0944012850522995,
-0.11157787591218948,
-0.0904620960354805,
-0.04260736331343651,
0.11605989933013916,
-0.009856630116701126,
0.045426663011312485,
-0.01897759735584259,
0.016894439235329628,
0.0593845434486866,
0.049936406314373016,
0.002499680733308196,
0.030176769942045212,
-0.055184170603752136,
-0.03309760242700577,
-0.09189489483833313,
-0.12308544665575027,
-0.012937813065946102,
-0.030002588406205177,
0.07026554644107819,
0.11556433141231537,
0.07070910930633545,
0.07974622398614883,
-0.01471748761832714,
0.005061272066086531,
-0.03518420085310936,
0.10143666714429855,
0.16116026043891907,
-0.04758121445775032,
0.034940723329782486,
0.011264180764555931,
-0.16127467155456543,
0.015999553725123405,
0.06975908577442169,
0.03587935492396355,
0.07928968966007233,
0.0782635286450386,
0.03580612689256668,
0.10870026051998138,
0.08874158561229706,
-0.03565773740410805,
0.07511932402849197,
0.14826485514640808,
-0.056366417557001114,
-0.03885170817375183,
-0.08990144729614258,
0.03914763405919075,
0.016286464408040047,
0.09182136505842209,
0.03766535222530365,
-0.05300498381257057,
0.06179771572351456,
-0.12610308825969696,
-0.08036325871944427,
-0.10207267105579376,
-0.17726893723011017,
-0.003418631386011839,
0.046201542019844055,
0.058170806616544724,
-0.010355962440371513,
-0.02657371573150158,
-0.060655318200588226,
0.12250951677560806,
0.0672651007771492,
0.017536550760269165,
-0.0523243322968483,
-0.018045220524072647,
-0.06923440098762512,
0.010425563901662827,
-0.05312070623040199,
0.04137566313147545,
0.030717846006155014,
-0.049263715744018555,
0.029413379728794098,
-0.0338493250310421,
0.009413355961441994,
0.0328034982085228,
-0.07673570513725281,
-0.04457660764455795,
-0.0824040025472641,
-0.00018433017248753458,
0.02432211861014366,
0.04206905514001846,
-0.05374644324183464,
0.009878274984657764,
0.03843512013554573,
0.10765749216079712,
0.07849793136119843,
-0.03255374729633331,
-0.04520351439714432,
-0.052868038415908813,
0.004646329674869776,
-0.11347019672393799,
-0.1002548485994339,
-0.10120836645364761,
-0.06876862049102783,
0.1554972231388092,
-0.04673374071717262,
0.23725274205207825,
0.06908974051475525,
0.0976518988609314,
-0.007411319762468338,
0.13974769413471222,
0.22338417172431946,
0.2241513878107071,
-0.0618620365858078,
0.007394111715257168,
-0.023174919188022614,
0.04773914813995361,
0.04589969292283058,
-0.036449991166591644,
-0.08672057092189789,
-0.01925339363515377,
0.058248262852430344,
0.031877823173999786,
-0.07827118784189224,
-0.13006223738193512,
0.09187678247690201,
-0.09514575451612473,
-0.05050356313586235,
0.05378531664609909,
0.05745740979909897,
0.028699010610580444,
-0.05817797780036926,
-0.05556848272681236,
0.07324254512786865,
0.02355504408478737,
-0.11657893657684326,
-0.04717443883419037,
-0.11794866621494293,
0.029103761538863182,
-0.007815202698111534,
-0.09741811454296112,
-0.07126638293266296,
-0.02557859569787979,
0.05236746743321419,
0.15303920209407806,
-0.029521122574806213,
0.08581848442554474,
0.021998928859829903,
-0.08971251547336578,
-0.0312223881483078,
0.07198891788721085,
0.0630681961774826,
0.003666922450065613,
-0.015888411551713943,
-0.09093979001045227,
0.12048570066690445,
0.07664334774017334,
0.18242253363132477,
0.10292129963636398,
0.10792168974876404,
-0.03781433776021004,
0.06254025548696518,
0.16918322443962097,
0.02687617763876915,
-0.02859349176287651,
-0.20897553861141205,
-0.015747353434562683,
-0.05435327813029289,
-0.042305223643779755,
-0.10531719028949738,
-0.12841512262821198,
-0.04629160836338997,
-0.053426798433065414,
0.12797057628631592,
0.12907499074935913,
-0.05094101279973984,
-0.0659625306725502,
0.0024213725700974464,
0.0046503134071826935,
-0.011871777474880219,
0.030536778271198273,
-0.03603614121675491,
-0.023586023598909378,
-0.057776983827352524,
-0.09764198958873749,
-0.02813076600432396,
-0.07343921810388565,
-0.056776754558086395,
0.031690411269664764,
0.08479604125022888,
0.05777905136346817,
-0.1659427434206009,
-0.17390890419483185,
0.0831013098359108,
0.10872898995876312,
0.02369876578450203,
-0.04495220258831978,
0.010630976408720016,
0.02046944573521614,
0.009459677152335644,
-0.039437491446733475,
-0.06337817758321762,
-0.05754401534795761,
-0.018210535869002342,
0.03512399271130562,
-0.021238379180431366,
-0.04632018879055977,
-0.05368718504905701,
0.08812753856182098,
0.14436382055282593,
0.021277429535984993,
-0.07324500381946564,
-0.1333485245704651,
-0.11878219991922379,
-0.05954562872648239,
-0.12887537479400635,
0.16681064665317535,
0.13995006680488586,
0.03581412509083748,
0.09960848838090897,
-0.03098895587027073,
0.0843384861946106,
0.0881982296705246,
-0.11156494915485382,
-0.03469229117035866,
0.09151910245418549,
0.03390780836343765,
-0.015029731206595898,
-0.1476125866174698,
-0.10351470857858658,
-0.03965567797422409,
-0.003052391577512026,
-0.08560263365507126,
-0.0652056634426117,
0.02259446494281292,
-0.07791212946176529,
0.08450926840305328,
0.006756710819900036,
0.08952735364437103,
0.00012163506471551955,
-0.04712201654911041,
0.026596030220389366,
-0.1150786280632019,
-0.03842387720942497,
0.057987626641988754,
-0.06761113554239273,
-0.07947555184364319,
-0.035113103687763214,
0.004475562833249569,
-0.000496630382258445,
0.006181017961353064,
0.0504000298678875,
0.07418657839298248,
-0.01198632549494505,
-0.048238735646009445,
0.16070891916751862,
0.05573905631899834,
0.04729507863521576,
0.02402748353779316,
0.09003444761037827,
0.16318826377391815,
0.1343887746334076,
0.10389359295368195,
0.11410253494977951,
-0.0174725241959095,
-0.06796193867921829,
0.0733761116862297,
0.020378975197672844,
-0.05937585234642029,
-0.0802169069647789,
-0.12974326312541962,
-0.05190273001790047,
-0.07461017370223999,
-0.07974092662334442,
0.055738192051649094,
0.18365177512168884,
-0.1382119208574295,
-0.03711334988474846,
-0.02870560996234417,
0.1274411529302597,
0.2455160766839981,
-0.09154529869556427,
0.002907009795308113,
0.02530035562813282,
-0.06163172796368599,
-0.11199118942022324,
-0.03720563277602196,
-0.06615814566612244,
-0.04751068726181984,
-0.09446540474891663,
-0.12325234711170197,
-0.038708411157131195,
0.14593659341335297,
0.12739312648773193,
-0.035840533673763275,
0.04556712135672569,
0.061800796538591385,
-0.05577192083001137,
0.08407527208328247,
0.05190735682845116,
-0.01613139733672142,
-0.013450509868562222,
-0.053588345646858215,
0.07311196625232697,
0.12989217042922974,
-0.03905324265360832,
-0.015298295766115189,
-0.026426203548908234,
0.11305516958236694,
0.04817090183496475,
-0.15242363512516022,
-0.13895240426063538,
-0.09509319812059402,
0.05462716147303581,
0.0009340358665212989,
-0.10211813449859619,
-0.06342505663633347,
-0.0940922424197197,
0.16232745349407196,
0.08809791505336761,
0.0160276610404253,
-0.05854041874408722,
-0.05765015259385109,
0.08008620142936707,
0.0049246735870838165,
0.08530175685882568,
-0.04138697311282158,
-0.12950287759304047,
-0.02312043122947216,
0.09062211215496063,
0.08188037574291229,
-0.04652559012174606,
-0.03245290741324425,
0.06789479404687881,
0.10375091433525085,
-0.06823454797267914,
-0.04865269362926483,
-0.2275722175836563,
-0.07372165471315384,
-0.07197665423154831,
-0.02580522932112217,
0.01750834286212921,
-0.12464045733213425,
0.10582680255174637,
-0.0037025397177785635,
0.026677507907152176,
-0.10091002285480499,
-0.1201472282409668,
0.05605734884738922,
0.10582227259874344,
0.04520057141780853,
0.039345528930425644,
0.10018333792686462,
-0.002824018243700266,
0.1742892861366272,
0.06724667549133301,
0.0877496674656868,
0.11757206171751022,
0.1433114856481552,
0.10314523428678513,
0.039895620197057724,
0.19174234569072723,
0.1910710632801056,
0.07850329577922821,
0.07932193577289581,
-0.17189723253250122,
-0.01658477447926998,
0.05402796342968941,
-0.011027337051928043,
-0.035024244338274,
-0.18604838848114014,
-0.04675323888659477,
-0.06723285466432571,
0.05196977034211159,
0.04355926066637039,
0.07778168469667435,
-0.054364848881959915,
0.006137444172054529,
-0.07778077572584152,
0.08564863353967667,
0.18190166354179382,
-0.008825916796922684,
-0.00221889722160995,
0.010237148031592369,
-0.0027032506186515093,
-0.009296547621488571,
0.012871712446212769,
0.05598790943622589,
-0.04026651754975319,
-0.10247470438480377,
-0.04355775564908981,
-0.04967221990227699,
0.12023022770881653,
0.09693574905395508,
0.03984484449028969,
0.026016496121883392,
0.06702658534049988,
-0.02193722501397133,
0.03488737717270851,
0.05222852900624275,
0.06320738792419434,
-0.07716073095798492,
-0.07008050382137299,
0.029642393812537193,
-0.03180468827486038,
0.002859019208699465,
0.04843009263277054,
0.07127325236797333,
0.0645359680056572,
0.029819287359714508,
-0.11537269502878189,
0.0647512674331665,
-0.057786792516708374,
0.007960714399814606,
-0.16813957691192627,
-0.08926618099212646,
-0.022515667602419853,
0.05432261526584625,
-0.016632363200187683,
-0.017201583832502365,
0.05559460446238518,
0.013916797935962677,
0.0036389254964888096,
0.03232492133975029,
0.009702268987894058,
-0.04639802500605583,
-0.060254357755184174,
0.021639566868543625,
0.02727513760328293,
0.1149204894900322,
0.0197378471493721,
0.07128709554672241,
0.016699643805623055,
0.038420502096414566,
0.01627776026725769,
0.13588185608386993,
0.2642704248428345,
0.13676415383815765,
0.2231633961200714,
0.11164682358503342,
-0.06404899805784225,
0.0678376853466034,
0.10858242958784103,
0.04691578447818756,
-0.10322365164756775,
-0.07549043744802475,
-0.03392177075147629,
-0.03262230381369591,
0.021192271262407303,
0.11815249174833298,
0.012168018147349358,
0.05287541449069977,
-0.006639448925852776,
0.030788961797952652,
-0.02677125483751297,
-0.023271633312106133,
0.061400156468153,
0.018260566517710686,
-0.005829453933984041,
-0.031509339809417725,
-0.053604353219270706,
-0.03890848159790039,
-0.03778763860464096,
-0.08848756551742554,
-0.10139372944831848,
-0.0177376177161932,
-0.0339445024728775,
0.02177269570529461,
0.03679526969790459,
0.01979251392185688,
0.13047118484973907,
-0.024132603779435158,
-0.07187177985906601,
-0.061180420219898224,
-0.0385894738137722,
0.045033715665340424,
-0.04423390328884125,
-0.03992448002099991,
-0.12427333742380142,
-0.034183990210294724,
0.0011309555266052485,
0.11878404766321182,
0.015460148453712463,
-0.03853260353207588,
-0.04162762314081192,
0.04115897789597511,
0.04308221489191055,
-0.017057092860341072,
0.07467877119779587,
-0.04228243976831436,
-0.01790279895067215,
-0.038218479603528976,
-0.0522080659866333,
0.10278832912445068,
0.06425405293703079,
-0.04655789956450462,
0.02255670167505741,
0.06498026847839355,
0.10125227272510529,
0.04845433682203293,
0.1388402134180069,
-0.0559040904045105,
0.0004610359319485724,
0.05820164084434509,
0.0028209700249135494,
0.06987528502941132,
-0.1284094601869583,
0.03306770697236061,
-0.08129838854074478,
-0.025415442883968353,
-0.018538448959589005,
0.002747103339061141,
-0.01100506167858839,
0.062300581485033035,
-0.07718154788017273,
-0.32524675130844116,
-0.045002568513154984,
0.02551700919866562,
-0.019106417894363403,
0.056597210466861725,
-0.09210877865552902,
0.05079377070069313,
0.0438634417951107,
-0.002130654873326421,
0.06835714727640152,
0.06419342011213303,
-0.055310286581516266,
-0.05368552729487419,
-0.05932202935218811,
0.07246046513319016,
0.014537408947944641,
0.04926489293575287,
-0.035168714821338654,
-0.004615112207829952,
-0.006518925074487925,
0.009583596140146255,
0.048595283180475235,
0.1009027510881424,
-0.1259375959634781,
-0.013442759402096272,
-0.0541863739490509,
0.03631103038787842,
0.0013142883544787765,
-0.010203133337199688,
-0.06778286397457123,
0.013388099148869514,
0.047541018575429916,
-0.024327926337718964,
0.021010903641581535,
-0.05495913326740265,
-0.004754273686558008,
0.03631279990077019,
0.03395269066095352,
0.08792632073163986,
0.026821395382285118,
0.022113725543022156,
0.008143754675984383,
-0.07241099327802658,
0.029467206448316574,
0.01753951795399189,
0.10139100253582001,
0.029050098732113838,
0.07274410128593445,
-0.04263659194111824,
0.06347273290157318,
-0.0466231070458889,
-0.12686073780059814,
-0.006858738139271736,
-0.09053980559110641,
-0.15052874386310577,
-0.18533557653427124,
0.016835179179906845,
-0.039313167333602905,
-0.20148329436779022,
-0.15032000839710236,
-0.03997436538338661,
0.03765321895480156,
-0.013575216755270958,
-0.11777940392494202,
0.041694141924381256,
-0.05066555365920067,
0.04759805276989937,
0.04475326091051102,
0.04413515329360962,
0.03947191685438156,
-0.08589830994606018,
0.059095192700624466,
-0.06716342270374298,
0.027438685297966003,
0.08201269805431366,
0.12415431439876556,
0.09293299913406372,
-0.04971817135810852,
0.0373343862593174,
0.024871010333299637,
0.04433751851320267,
0.05075102671980858,
0.05880332738161087,
-0.03184553608298302,
0.018474064767360687,
0.1193258985877037,
0.11179036647081375,
0.03823351860046387,
0.048644013702869415,
0.07864894717931747,
0.08340632915496826,
-0.07663609087467194,
-0.1301567703485489,
0.046256378293037415,
-0.13484342396259308,
-0.05161155015230179,
-0.17820477485656738,
-0.11081593483686447,
0.026466937735676765,
-0.05943803861737251,
-0.19156765937805176,
-0.05631963536143303,
-0.03345503658056259,
-0.005170161835849285,
-0.016002770513296127,
-0.06732343137264252,
0.031220411881804466,
-0.01558861043304205,
-0.04054619371891022,
0.016073675826191902,
-0.01126526016741991,
0.06844539195299149,
-0.059176020324230194,
0.03810463100671768,
0.026670845225453377,
0.12475447356700897,
-0.12185639888048172,
-0.0969000905752182,
-0.026916740462183952,
0.0794084444642067,
0.13265784084796906,
0.1656697690486908,
0.09447669982910156,
-0.0069505139254033566,
-0.031088300049304962,
0.05945521220564842,
-0.06867485493421555,
0.05074842646718025,
-0.0604524202644825,
-0.22072064876556396,
-0.05394827947020531,
0.06478800624608994,
-0.04263376444578171,
-0.045950111001729965,
0.035976797342300415,
-0.0026582428254187107,
-0.03915143758058548,
-0.008168580941855907,
-0.07813866436481476,
0.03968020901083946,
0.023178216069936752,
-0.10283759981393814,
0.021145496517419815,
0.06012062355875969,
-0.010841508395969868,
-0.01183787640184164,
-0.11854544281959534,
-0.1387414038181305,
0.007333035580813885,
0.03413315489888191,
0.0078042964451014996,
-0.030230993404984474,
-0.13286398351192474,
-0.10383483022451401,
0.050800520926713943,
0.006505222991108894,
-0.05705167353153229,
0.043810173869132996,
0.0753362849354744,
0.027250008657574654,
0.06797894835472107,
-0.009437805972993374,
0.015221704728901386,
0.008851232007145882,
-0.00640500383451581,
-0.12666334211826324,
0.02253151498734951,
-0.003137225052341819,
-0.08796539902687073,
0.018611209467053413,
0.10183324664831161,
0.018492715433239937,
0.029483016580343246,
0.016302289441227913,
0.009685488417744637,
0.02521056868135929,
-0.009785279631614685,
0.07651305198669434,
-0.053998399525880814,
0.03018149547278881,
0.019467072561383247,
0.0006584313232451677,
-0.08107266575098038,
-0.12895110249519348,
-0.09947819262742996,
0.0747772678732872,
-0.012910367920994759,
-0.03666409105062485,
-0.0507018156349659,
-0.11241259425878525,
-0.02216941863298416,
0.0776248425245285,
0.13623091578483582,
0.03663784638047218,
-0.0024648711550980806,
0.14381127059459686,
-0.0701979473233223,
0.08983234316110611,
-0.10677993297576904,
0.0018660415662452579,
0.05911165848374367,
-0.00023760642216075212,
0.010926845483481884,
0.04258082062005997,
-0.0408705472946167,
0.05368179827928543,
0.052768055349588394,
0.006829342804849148,
-0.02080749347805977,
-0.018762387335300446,
0.04550632834434509,
-0.019171368330717087,
-0.010642767883837223,
-0.0009656430338509381,
0.036990098655223846,
-0.030023891478776932,
0.024297570809721947,
0.11248461902141571,
-0.023736009374260902,
-0.06130094826221466,
-0.009103252552449703,
-0.0016102301888167858,
0.09420356154441833,
-0.12602567672729492,
-0.02832016348838806,
0.04746272787451744,
-0.03570207953453064,
-0.0409950353205204,
-0.03968759998679161,
0.033349599689245224,
0.045658670365810394,
0.015168723650276661,
-0.053440727293491364,
0.07033601403236389,
0.08125928789377213,
0.16024239361286163,
-0.05635461211204529,
-0.06536369770765305,
-0.048728980123996735,
-0.08016492426395416,
0.04834551736712456,
-0.11228804290294647,
-0.06441187113523483,
-0.024621497839689255,
-0.026151522994041443,
-0.09348443150520325,
0.03339821845293045,
-0.07807573676109314,
-0.058723337948322296,
-0.014444318599998951,
-0.0941292941570282,
0.0633329451084137,
0.04401911795139313,
-0.024394137784838676,
-0.028911592438817024,
0.012840264476835728,
-0.0023198272101581097,
-0.03944477066397667,
-0.13001613318920135,
-0.059740908443927765,
-0.012255840934813023,
-0.055041491985321045,
-0.03356325626373291,
0.05000676214694977,
0.03245943412184715,
-0.07954879105091095,
0.017382187768816948,
0.0361228808760643,
0.025600947439670563,
-0.024794990196824074,
-0.021905947476625443,
-0.08777385205030441,
0.0040572392754256725,
-0.0340820848941803,
-0.003457179991528392,
0.08843202143907547,
-0.14340412616729736,
-0.045828334987163544,
0.03795737400650978,
0.12361782044172287,
0.06991683691740036,
0.06742742657661438,
0.07900984585285187,
0.048281822353601456,
0.08635752648115158,
0.054587382823228836,
0.021802548319101334,
0.05252451449632645,
-0.007482656743377447,
0.04925188794732094,
0.0406995452940464,
-0.09015271067619324,
-0.029460031539201736,
-0.04461005702614784,
-0.07324119657278061,
-0.06794824451208115,
-0.12914080917835236,
-0.0672069862484932,
-0.020225152373313904,
-0.053560517728328705,
-0.12256982922554016,
0.014180970378220081,
0.03494691848754883,
0.0020050702150911093,
-0.017504358664155006,
-0.017970481887459755,
0.013883711770176888,
0.015754880383610725,
-0.004743105731904507,
-0.03581446409225464,
-0.06862209737300873,
0.01759365387260914,
-0.002922329818829894,
0.005113752093166113,
-0.21772149205207825,
-0.091768279671669,
-0.05402486026287079,
-0.09226459264755249,
-0.06687022745609283,
-0.09224794059991837,
-0.06739165633916855,
-0.06878004968166351,
-0.040374480187892914,
-0.020771736279129982,
0.0053946212865412235,
0.08863887190818787,
-0.01864807866513729,
-0.011104393750429153,
0.01571441814303398,
0.008019533939659595,
-0.012877983041107655,
0.035456642508506775,
0.12329844385385513,
-0.006486064288765192,
0.04879569634795189,
0.08236035704612732,
-0.07731933891773224,
-0.03442728519439697,
-0.1082402765750885,
-0.04510004445910454,
0.01362836267799139,
0.09888511896133423,
0.10973414778709412,
-0.06813681125640869,
0.013916350901126862,
-0.1838550716638565,
-0.034437548369169235,
-0.08068639785051346,
-0.1623402237892151,
-0.053636979311704636,
0.06123354658484459,
-0.02353488653898239,
-0.08494192361831665,
-0.07949591428041458,
0.05428440496325493,
0.12123512476682663,
0.09802278131246567,
-0.037750739604234695,
-0.0303396787494421,
0.04910130426287651,
0.02211831323802471,
-0.0017185341566801071,
-0.05264032259583473,
-0.0357791967689991,
0.051643650978803635,
-0.017422877252101898,
0.03230315074324608,
-0.03518661484122276,
-0.006230445578694344,
-0.06354224681854248,
-0.00549883721396327,
0.06200795620679855,
-0.11235570162534714,
-0.06894311308860779,
0.0101856654509902,
0.03125084936618805,
-0.011009027250111103,
-0.007934789173305035,
-0.028989125043153763,
0.05094299837946892,
0.03072948567569256,
-0.07991921901702881,
-0.12304610759019852,
-0.019521133974194527,
0.04252202808856964,
0.0009649587445892394,
-0.08214385062456131,
-0.23209694027900696,
-0.00257614953443408,
0.17364123463630676,
0.017797093838453293,
0.22488659620285034,
-0.0093390429392457,
0.05697554722428322,
-0.002577478066086769,
-0.001550127868540585,
0.27548614144325256,
0.2291892170906067,
0.0018100138986483216,
0.07969177514314651,
-0.04141634330153465,
-0.014086470939218998,
-0.016341404989361763,
-0.058402009308338165,
-0.033548686653375626,
-0.08984553068876266,
0.07100865989923477,
0.08777610957622528,
0.11956711858510971,
0.07237710058689117,
-0.03124016337096691,
0.010746551677584648,
-0.015431541018188,
0.15047240257263184,
0.09086085110902786,
0.060564860701560974,
-0.09808655828237534,
0.02637386880815029,
0.1426408588886261,
0.034788165241479874,
-0.06198969483375549,
-0.0899476557970047,
-0.03658265992999077,
0.038273874670267105,
-0.04579659551382065,
-0.02087017521262169,
-0.00023484556004405022,
-0.008194122463464737,
0.09827994555234909,
0.12019482254981995,
0.04149323329329491,
-0.036767881363630295,
0.010099026374518871,
0.031837981194257736,
0.01573454774916172,
-0.001956732477992773,
0.06175031140446663,
0.06217598542571068,
-0.013235955499112606,
0.007770948577672243,
0.09560829401016235,
-0.03156881406903267,
0.03526834398508072,
0.047192513942718506,
0.09716203063726425,
0.04829766973853111,
0.05050097778439522,
0.07659859210252762,
-0.018012791872024536,
-0.0509154312312603,
-0.2447776347398758,
0.0017864556284621358,
-0.060538485646247864,
-0.014743243344128132,
-0.09742295742034912,
-0.1675100326538086,
0.13126172125339508,
-0.09918850660324097,
-0.020888740196824074,
-0.04075143486261368,
-0.04182043671607971,
-0.006385044194757938,
-0.10525551438331604,
0.04546640068292618,
-0.0699603483080864,
-0.010104844346642494,
-0.009315494447946548,
-0.005138070322573185,
0.01730833202600479,
-0.1399354487657547,
-0.05112358555197716,
-0.057560231536626816,
-0.10269390791654587,
0.0037004866171628237,
-0.03410783037543297,
0.07334821671247482,
-0.018105143681168556,
-0.09284874051809311,
-0.04291922226548195,
-0.006874848157167435,
-0.0065298848785459995,
-0.024189112707972527,
-0.013383309356868267,
0.045097798109054565,
0.0242961123585701,
-0.07469219714403152,
-0.007235253229737282,
0.03144407644867897,
0.06520601361989975,
-0.005495152436196804,
-0.08700070530176163,
-0.08397183567285538,
0.017037028446793556,
0.057184237986803055,
0.14194324612617493,
-0.033642176538705826,
0.007130737416446209,
-0.038992565125226974,
-0.058807581663131714,
-0.12551666796207428,
-0.13167113065719604,
0.06750793755054474,
0.06461761891841888,
0.17911599576473236,
0.0681937038898468,
-0.11358726024627686,
0.04522586241364479,
0.09215044230222702,
-0.017921719700098038,
-0.05472938343882561,
-0.08256863802671432,
-0.01773170754313469,
0.01970251090824604,
0.018670205026865005,
0.10042227804660797,
0.005683921277523041,
-0.10140692442655563,
-0.004846083465963602,
0.08880306780338287,
0.031810928136110306,
-0.07611755281686783,
0.011925396509468555,
-0.02983393520116806,
0.17717717587947845,
0.08652272075414658,
0.048783957958221436,
0.007362090516835451,
-0.027923451736569405,
0.06447986513376236,
0.0211016908288002,
-0.06206442043185234,
-0.015447042882442474,
-0.020764727145433426,
-0.03199281543493271,
-0.0644046887755394,
0.05402401089668274,
0.022962428629398346,
0.02838316187262535,
0.013901563361287117,
-0.02869538590312004,
0.0584050789475441,
0.0108482101932168,
0.04024641960859299,
0.028529709205031395,
0.07229451090097427,
0.22648288309574127,
-0.04151954501867294,
0.047523435205221176,
0.028307564556598663,
0.02015918493270874,
-0.09307614713907242,
0.013211623765528202,
0.07324722409248352,
-0.022913817316293716,
-0.10982527583837509,
-0.12243352085351944,
0.028143424540758133,
0.05718256160616875,
0.0010910379933193326,
0.004572054836899042,
-0.02055400051176548,
-0.01915080100297928,
-0.009054138325154781,
0.06921578198671341,
0.03210608661174774,
-0.044129930436611176,
-0.06819701939821243,
0.052340809255838394,
0.10232321172952652,
-0.08414027094841003,
-0.055275656282901764,
-0.11825747787952423,
-0.03361311927437782,
-0.005602178629487753,
0.004881387110799551,
-0.053569257259368896,
-0.049168989062309265,
0.047932229936122894,
0.08842485398054123,
0.10130894184112549,
0.08449853956699371,
-0.03281586617231369,
-0.11411097645759583,
0.0057716891169548035,
0.05149976164102554,
0.03293004259467125,
-0.03914305940270424,
-0.13653774559497833,
-0.03382319584488869,
-0.04790269955992699,
0.04409162327647209,
-0.11638709157705307,
-0.11135674268007278,
0.08349908143281937,
-0.02264462038874626,
-0.1448708325624466,
-0.21296681463718414,
-0.10362661629915237,
0.024083783850073814,
-0.04647735506296158,
0.010260319337248802,
-0.08262236416339874,
-0.24144355952739716,
0.033816367387771606,
0.04439626634120941,
0.10143332183361053,
0.15375308692455292,
-0.03220595046877861,
-0.03238185495138168,
-0.06615959107875824,
0.03393464908003807,
0.01912403292953968,
-0.12041237205266953,
0.013196046464145184,
0.052209362387657166,
-0.029589541256427765,
-0.03310355544090271,
-0.0008707939414307475,
0.1670067459344864,
0.0651230663061142,
-0.018660226836800575,
-0.07045233994722366,
-0.18356329202651978,
-0.03707997873425484,
-0.07625972479581833,
0.0026220539584755898,
-0.055861055850982666,
-0.1110367476940155,
-0.015590840950608253,
0.056788552552461624,
0.0614466667175293,
-0.08073607832193375,
-0.04955178126692772,
0.09345704317092896,
0.08084368705749512,
0.053706273436546326,
0.034127723425626755,
0.05230456218123436,
0.04517235606908798,
0.09057619422674179,
0.000657273456454277,
-0.006889255717396736,
0.10310254991054535,
0.07040819525718689,
0.09017665684223175,
-0.014848648570477962,
0.03139909356832504,
0.04997776448726654,
0.05439376085996628,
-0.00613110326230526,
-0.19208309054374695,
0.06443283706903458,
0.08465360850095749,
0.09800676256418228,
-0.01207568496465683,
-0.13477282226085663,
0.13920344412326813,
-0.09493087977170944,
-0.12197861820459366,
-0.030801566317677498,
0.08402855694293976,
0.18022802472114563,
0.021131709218025208,
0.038775745779275894,
0.11948329210281372,
0.15735027194023132,
-0.026620497927069664,
-0.04998352378606796,
-0.03536415100097656,
-0.017886759713292122,
-0.02105644717812538,
-0.08460364490747452,
-0.0861581340432167,
-0.11610958725214005,
-0.0778622105717659,
0.027123169973492622,
-0.01989820785820484,
-0.05199075862765312,
0.09018141776323318,
0.033859387040138245,
0.03700437769293785,
0.0746670588850975,
0.043778035789728165,
0.0752292200922966,
0.08506862819194794,
0.03745986893773079,
-0.14930926263332367,
-0.03228595480322838,
-0.0302194282412529,
0.010093103162944317,
-0.0006766273872926831,
0.04256883263587952,
0.00973594468086958,
-0.13135892152786255,
-0.11670391261577606,
-0.1919989287853241,
0.11865700036287308,
0.05496961250901222,
0.06869732588529587,
-0.09441908448934555,
-0.14391231536865234,
-0.03716672584414482,
0.07475457340478897,
0.016517337411642075,
-0.0010827170917764306,
-0.0075381179340183735,
-0.04590930789709091,
-0.06499119848012924,
-0.02699427492916584,
-0.023238029330968857,
-0.031917523592710495,
-0.029637819156050682,
0.018195651471614838,
0.07421442866325378,
-0.0037723814602941275,
-0.026583300903439522,
0.04697652906179428,
0.03485899418592453,
-0.0683252140879631,
0.006975941359996796,
0.20140472054481506,
0.0861281082034111,
0.04671526700258255,
0.08611629158258438,
0.055797774344682693,
0.013480165041983128,
0.12051994353532791,
0.04629625752568245,
-0.022168831899762154,
-0.06399071216583252,
-0.020770104601979256,
-0.09118320792913437,
0.09142455458641052,
0.014585087075829506,
0.04264923557639122,
-0.20453423261642456,
-0.057844750583171844,
-0.05395180732011795,
-0.07018212229013443,
0.11210409551858902,
0.18967461585998535,
0.12163221836090088,
0.024270251393318176,
-0.04347213730216026,
0.10582100600004196,
0.09252376109361649,
0.007987339049577713,
-0.059427838772535324,
-0.17706400156021118,
0.023117968812584877,
-0.06850644201040268,
0.08488258719444275,
0.05261286720633507,
-0.02907729148864746,
0.03125900402665138,
0.05818678066134453,
-0.05909137800335884,
-0.09384419023990631,
-0.011613685637712479,
0.033175431191921234,
-0.015997877344489098,
-0.008937676437199116,
-0.07826577126979828,
0.04891930893063545,
0.052863240242004395,
0.06707827001810074,
0.0030939884018152952,
-0.09474209696054459,
-0.10919757187366486,
0.0232996866106987,
-0.06705143302679062,
0.09304709732532501,
0.0058138007298111916,
-0.05477455258369446,
-0.000571905227843672,
-0.01413955632597208,
0.01986941136419773,
0.08364617824554443,
0.04503481462597847,
0.08564624190330505,
0.09056378901004791,
0.004153558984398842,
-0.0677308663725853,
-0.013385499827563763,
0.09674496203660965,
0.0009414649102836847,
0.05294414609670639,
-0.05515940487384796,
-0.05175789073109627,
-0.08548951148986816,
-0.12027040123939514,
0.023746754974126816,
0.11675763875246048,
-0.10770753026008606,
-0.15835455060005188,
-0.10801765322685242,
0.02291405014693737,
0.03699561581015587,
-0.0109438207000494,
-0.07355553656816483,
-0.06504550576210022,
-0.06639638543128967,
0.044405747205019,
0.06695041060447693,
-0.09104707092046738,
-0.00978163257241249,
0.03740932047367096,
0.1414681077003479,
0.01038836408406496,
-0.03266756981611252,
0.007577463518828154,
0.02840094268321991,
0.10255641490221024,
0.12341853976249695,
0.19918310642242432,
0.07520722597837448,
-0.047579966485500336,
-0.024318145588040352,
0.04513252153992653,
0.23961879312992096,
0.06613332778215408,
-0.01783614791929722,
0.00940554030239582,
0.12606343626976013,
-0.015701988711953163,
-0.06935248523950577,
-0.0019350949442014098,
-0.09813709557056427,
-0.013357581570744514,
0.015562871471047401,
-0.04595096409320831,
0.03968917205929756,
0.04719957336783409,
-0.03382682800292969,
-0.06962843984365463,
-0.02058199979364872,
0.09662552177906036,
0.02326451614499092,
-0.1513998657464981,
-0.1465645283460617,
-0.05289226025342941,
-0.046322956681251526,
0.11643239110708237,
0.0864805281162262,
-0.007165182381868362,
0.03980129584670067,
0.02921728976070881,
0.1081077829003334,
0.14035175740718842,
-0.0014230664819478989,
-0.12873037159442902,
-0.003124523675069213,
-0.1275799572467804,
-0.026496293023228645,
-0.11364339292049408,
-0.15008872747421265,
-0.09120182693004608,
-0.1838117092847824,
0.009117195382714272,
0.08034652471542358,
0.2032652050256729,
0.0036420284304767847,
-0.17568747699260712,
-0.09239032864570618,
0.1186247169971466,
0.1760338991880417,
0.0864720419049263,
-0.05555805563926697,
-0.16228187084197998,
-0.076067253947258,
-0.0866670161485672,
-0.007071671541780233,
-0.04969925433397293,
0.004724874626845121,
-0.004546254873275757,
0.11248701810836792,
-0.034530773758888245,
-0.0019160548690706491,
0.030596092343330383,
0.02882402390241623,
0.1340230256319046,
0.06432927399873734,
0.015085553750395775,
0.03562316298484802,
0.010016169399023056,
0.15435758233070374,
0.13333863019943237,
0.06846537441015244,
-0.06378556787967682,
-0.11648469418287277,
0.01122613251209259,
0.0861838161945343,
-0.02041338011622429,
-0.1205780953168869,
-0.0001592098706169054,
-0.055563606321811676,
-0.1710682213306427,
-0.10784375667572021,
0.017232093960046768,
-0.016387153416872025,
-0.09942860156297684,
-0.02882123738527298,
-0.028721019625663757,
-0.058680154383182526,
0.051596999168395996,
-0.016210084781050682,
0.09609780460596085,
0.04577108100056648,
0.07492752373218536,
0.05070800706744194,
0.12211116403341293,
0.06660599261522293,
0.0011094746878370643,
-0.00011680492025334388,
0.025982839986681938,
0.13974922895431519,
-0.09648358821868896,
0.08825909346342087,
-0.005300820805132389,
0.08254431188106537,
-0.06665930896997452,
0.0953659936785698,
0.02850535698235035,
0.055112361907958984,
0.11216720938682556,
-0.03619606792926788,
-0.03163572773337364,
-0.07421247661113739,
0.034144096076488495,
-0.08654635399580002,
-0.1376996487379074,
0.09485739469528198,
-0.0016671286430209875,
-0.07632078230381012,
-0.04090535640716553,
0.007212976925075054,
0.09041054546833038,
-0.073513925075531,
-0.12804748117923737,
-0.1326606571674347,
-0.13896222412586212,
-0.10948166251182556,
-0.03164731711149216,
-0.007105495315045118,
0.011593503877520561,
-0.023458896204829216,
-0.021992353722453117,
-0.030099892988801003,
0.12378150969743729,
0.12257840484380722,
0.09991494566202164,
-0.04624418169260025,
-0.026525406166911125,
-0.04176752641797066,
-0.04899769276380539,
-0.08109267801046371,
0.04513664171099663,
-0.002423499710857868,
-0.05235510692000389,
-0.13186247646808624,
-0.1269330531358719,
-0.018232036381959915,
0.05179798975586891,
0.0391029417514801,
0.09649595618247986,
0.06365185230970383,
-0.043595366179943085,
0.022584037855267525,
0.061600327491760254,
0.1692776381969452,
0.09475784003734589,
-0.03270341083407402,
-0.0028948623221367598,
-0.05058968439698219,
-0.0013111974112689495,
0.08687320351600647,
0.03609110787510872,
0.026369528844952583,
-0.015906745567917824,
0.0018927725031971931,
-0.055199768394231796,
-0.03304754197597504,
-0.1539609134197235,
0.01314136479049921,
0.023425381630659103,
0.09543914347887039,
-0.07243116945028305,
-0.10932127386331558,
0.0859789177775383,
0.17340187728405,
0.09560882300138474,
0.050875306129455566,
-0.05728604272007942,
0.13941749930381775,
0.022790076211094856,
0.0958312377333641,
0.060907721519470215,
-0.05231068655848503,
0.07670938968658447,
-0.03835051879286766,
-0.07522926479578018,
-0.017518186941742897,
0.03707684576511383,
0.11452732980251312,
0.11185294389724731,
-0.041890550404787064,
0.003377993358299136,
-0.09879133105278015,
-0.10869321972131729,
-0.07239531725645065,
-2.7379763196222484e-05,
0.010489759966731071,
0.0010975203476846218,
-0.0060938443057239056,
0.07237356156110764,
0.13469728827476501,
0.04546435922384262,
0.034185830503702164,
0.00014218842261470854,
0.19417516887187958,
0.14605823159217834,
-0.041605185717344284,
-0.0591018907725811,
-0.0964808389544487,
-0.05918049439787865,
-0.005566708743572235,
0.07672423124313354,
-0.040023379027843475,
-0.07219763845205307,
-0.02406981959939003,
0.0714263990521431,
0.07627254724502563,
0.029742442071437836,
-0.07810775935649872,
-0.04729633405804634,
-0.10676980763673782,
-0.04509471356868744,
-0.025164995342493057,
-0.01864607445895672,
-0.12710389494895935,
-0.17234627902507782,
0.02737382985651493,
0.014439285732805729,
-0.0997067466378212,
-0.14557036757469177,
-0.13812550902366638,
-0.007166225463151932,
0.11464950442314148,
0.16087767481803894,
0.1625983715057373,
-0.10029958933591843,
-0.011264629662036896,
0.08855883032083511,
-0.049061138182878494,
0.005487576127052307,
-0.0079092001542449,
0.03518932685256004,
-0.017234589904546738,
-0.1344660073518753,
-0.046017006039619446,
0.0015292685711756349,
0.04141993820667267,
-0.013113870285451412,
-0.16884055733680725,
0.044569458812475204,
0.19254915416240692,
-8.616078412160277e-05,
0.0778067409992218,
-0.1369454264640808,
0.08470118790864944,
0.09803400188684464,
-0.06802190095186234,
-0.01611866056919098,
-0.07863070070743561,
-0.04471958428621292,
0.0859118402004242,
0.025367381051182747,
0.021925456821918488,
0.0830133706331253,
0.00629888940602541,
-0.011178698390722275,
0.06324098259210587,
-0.026719098910689354,
0.01002661231905222,
-0.03123948723077774,
-0.03951342776417732,
-0.11477332562208176,
-0.08960249274969101,
-0.017287233844399452,
-0.009961429052054882,
-0.10330013930797577,
-0.00934421457350254,
-0.022156957536935806,
-0.0235693771392107,
-0.04197356104850769,
-0.05223710834980011,
0.01841454766690731,
-0.03850911930203438,
-0.022726958617568016,
-0.10427198559045792,
-0.018452536314725876,
0.08296016603708267,
-0.0304938405752182,
-0.07710786908864975,
-4.3477948565850966e-06,
-0.027423124760389328,
-0.008063346147537231,
0.026406249031424522,
0.03689711540937424,
0.03347644582390785,
0.0058420272544026375,
0.041003480553627014,
4.5682816562475637e-05,
-0.24506792426109314,
-0.2856588661670685,
-0.22003288567066193,
0.048127803951501846,
-0.01413384173065424,
-0.2586725652217865,
-0.19506613910198212,
-0.11901099979877472,
0.07503106445074081,
0.0012156232260167599,
0.04279521852731705,
0.13446220755577087,
0.10013655573129654,
0.09530968964099884,
-0.003924182150512934,
-0.01758999563753605,
-0.0533575564622879,
0.022481834515929222,
0.10228314995765686,
0.005355725530534983,
0.034126926213502884,
0.05351829156279564,
0.3314877450466156,
0.10085389763116837,
0.12928573787212372,
0.04520765319466591,
-0.08787402510643005,
-0.028512876480817795,
-0.12028566747903824,
-0.08883559703826904,
-0.020692547783255577,
-0.016204487532377243,
-0.24048194289207458,
-0.06271178275346756,
-0.018625758588314056,
-0.0067580025643110275,
-0.042980942875146866,
0.01715506799519062,
0.0024182088673114777,
-0.0888589397072792,
-0.09804308414459229,
-0.01335941907018423,
0.07528451830148697,
0.11621320247650146,
0.11994495987892151,
-0.06555140763521194,
-0.0711498036980629,
-0.01769411750137806,
0.0749831572175026,
0.06880895048379898,
0.06299902498722076,
-0.01770922914147377,
-0.032026734203100204,
-0.02694913186132908,
-0.046920642256736755,
0.19294333457946777,
0.00832331832498312,
-0.056200794875621796,
-0.11674587428569794,
-0.08669295161962509,
0.09671030938625336,
0.05942521616816521,
0.08497304469347,
-0.038561128079891205,
-0.1256168633699417,
0.006865536328405142,
0.07338272035121918,
0.11740874499082565,
-0.18310651183128357,
-0.043160151690244675,
-0.023864708840847015,
-0.039252087473869324,
-0.08902095258235931,
-0.0004203527350910008,
0.03521572798490524,
0.07718639820814133,
0.08449412882328033,
0.017076192423701286,
0.17911674082279205,
-0.0032556832302361727,
0.10585784167051315,
0.09858908504247665,
0.12183918058872223,
0.16048434376716614,
0.08471023291349411,
0.018780220299959183,
0.0667957291007042,
0.03420975059270859,
0.07262161374092102,
-0.15778140723705292,
-0.11321815848350525,
0.045727942138910294,
-0.08236632496118546,
-0.03945866972208023,
0.0386916846036911,
0.006172177381813526,
-0.07313278317451477,
0.1440660059452057,
0.0379885695874691,
0.022026855498552322,
-0.05045226961374283,
0.03335435688495636,
0.09652628004550934,
-0.0695168524980545,
0.0643889456987381,
0.028498923406004906,
-0.053235944360494614,
-0.024842169135808945,
-0.008539761416614056,
0.0575309582054615,
-0.04056274890899658,
-0.1626090258359909,
-0.06952401250600815,
0.00836972612887621,
0.012430108152329922,
0.08108159154653549,
0.059497881680727005,
0.07693912833929062,
-0.024037549272179604,
-0.08028163015842438,
-0.01927047222852707,
0.06261123716831207,
0.043154943734407425,
-0.14950121939182281,
-0.08147899061441422,
-0.0598958320915699,
0.11862931400537491,
0.222195565700531,
0.055296819657087326,
0.07402428984642029,
0.08099491894245148,
0.04501360282301903,
0.03765855357050896,
-0.011123109608888626,
-0.004648784641176462,
0.028473099693655968,
-0.015017861500382423,
-0.21096967160701752,
0.12081820517778397,
0.07738364487886429,
0.005010755732655525,
0.007052387110888958,
-0.10250728577375412,
0.03869491070508957,
0.014623136259615421,
-0.03602356091141701,
-0.048515498638153076,
-0.1143520176410675,
-0.03049878031015396,
0.03172620013356209,
0.04088139533996582,
-0.0539902001619339,
-0.021640891209244728,
0.05111702159047127,
0.05684012547135353,
0.11458339542150497,
-0.0015894395764917135,
-0.030107513070106506,
-0.014630109071731567,
-0.0007138558430597186,
0.008143617771565914,
-0.0415639728307724,
0.0066507719457149506,
-0.007299375720322132,
-0.054201334714889526,
-0.0856858640909195,
-0.1243218332529068,
-0.003880807664245367,
0.04551408067345619,
0.07839720696210861,
0.07234305143356323,
-0.01222997810691595,
0.06214993819594383,
-0.008823777548968792,
0.025800850242376328,
0.0948876142501831,
0.10198209434747696,
0.04875744879245758,
-0.19884344935417175,
-0.13133752346038818,
0.005393484141677618,
0.12173891812562943,
-0.02256053127348423,
-0.11328357458114624,
-0.059153005480766296,
-0.06938362121582031,
-0.05660431087017059,
-0.15752916038036346,
0.0009170924895443022,
-0.08005934208631516,
0.05530398711562157,
0.008647254668176174,
-0.06489749252796173,
-0.04533253237605095,
-0.010064319707453251,
-0.10610221326351166,
-0.018304184079170227,
-0.059811800718307495,
-0.13285782933235168,
0.013161065056920052,
-0.028595728799700737,
0.0416657030582428,
0.08126503229141235,
0.11235389113426208,
0.14195404946804047,
0.10433787852525711,
0.03301852196455002,
-0.052098631858825684,
0.030082711949944496,
0.10979834198951721,
0.1385532021522522,
-0.0016150897135958076,
0.04296324774622917,
0.06201675161719322,
0.06376444548368454,
0.03423692658543587,
-0.014697568491101265,
-0.12565402686595917,
0.06627462804317474,
0.01198670081794262,
0.019346807152032852,
-0.02957538515329361,
-0.04258792847394943,
-0.14332066476345062,
-0.10110535472631454,
-0.034393418580293655,
0.1820112019777298,
0.10628373920917511,
-0.05054479092359543,
-0.1550055593252182,
-0.1072075292468071,
0.06790667772293091,
0.24924883246421814,
0.035972755402326584,
-0.005762722343206406,
-0.018581945449113846,
-0.01669876091182232,
-0.13818661868572235,
-0.07891205698251724,
0.02937200851738453,
-0.1048431321978569,
-0.10897955298423767,
-0.12438934296369553,
-0.005322891287505627,
0.030332352966070175,
-0.0002943965664599091,
0.10484126210212708,
0.2086157500743866,
0.015263636596500874,
-0.02842952497303486,
-0.014336181804537773,
0.004573742859065533,
0.04581322893500328,
-0.015476640313863754,
-0.0043256948702037334,
-0.03102816455066204,
-0.13767223060131073,
-0.08431869745254517,
0.008192937821149826,
0.0022575375624001026,
-0.08010940998792648,
-0.06150329113006592,
-0.07305162400007248,
-0.102975033223629,
-0.09561089426279068,
0.07827691733837128,
0.06570983678102493,
-0.007274223025888205,
0.054885271936655045,
0.07503564655780792,
-0.013963816687464714,
-0.028240781277418137,
-0.019067438319325447,
-0.039182398468256,
0.04003971815109253,
-0.044001251459121704,
-0.12758596241474152,
-0.023641018196940422,
-0.041439879685640335,
0.024052124470472336,
0.0002996042894665152,
-0.12844784557819366,
-0.14459775388240814,
-0.11674609780311584,
0.08492003381252289,
0.038632337003946304,
-0.08979113399982452,
0.01012441050261259,
-0.004739707335829735,
-0.16124767065048218,
-0.030370790511369705,
-0.0017782222712412477,
0.06874825805425644,
0.058971043676137924,
0.10502330958843231,
0.028912920504808426,
0.0348840057849884,
0.166034534573555,
-0.03541672229766846,
0.11238688975572586,
0.03631853312253952,
0.025428377091884613,
-0.04664582014083862,
-0.11896432191133499,
-0.031996678560972214,
0.07618881016969681,
-0.1205989345908165,
-0.1117400974035263,
-0.02081998810172081,
0.0713171437382698,
0.09666033834218979,
-0.20281532406806946,
-0.17016693949699402,
0.008376761339604855,
-0.056551117449998856,
-0.058923348784446716,
-0.018007423728704453,
-0.0157840084284544,
-0.11160760372877121,
-0.12438294291496277,
0.05835910141468048,
0.02902059070765972,
0.05471329763531685,
-0.09477832168340683,
-0.1339239478111267,
-0.023757707327604294,
0.12906379997730255,
0.12464150041341782,
0.029303863644599915,
0.005939953960478306,
-0.0052001867443323135,
0.13832084834575653,
0.15049602091312408,
0.10431796312332153,
0.06834525614976883,
0.01946672424674034,
0.04135704040527344,
-0.11279185861349106,
0.027471065521240234,
-0.073557049036026,
-0.0203117523342371,
-0.092568039894104,
-0.0825267881155014,
0.07855328917503357,
0.03228004649281502,
-0.026343414559960365,
-0.0416727215051651,
-0.02292213961482048,
-0.0744289681315422,
-0.18297173082828522,
-0.005157652776688337,
-0.01001766324043274,
0.032790448516607285,
-0.12973228096961975,
-0.03151359409093857,
-0.08813459426164627,
-0.024383697658777237,
-0.07560685276985168,
0.025857897475361824,
-0.08198586851358414,
-0.14408300817012787,
-0.030587075278162956,
-0.016873270273208618,
0.05289508402347565,
-0.17648814618587494,
-0.13861271739006042,
0.055081307888031006,
0.04548512026667595,
-0.0226324200630188,
-0.0030300936195999384,
0.041610121726989746,
0.07247187197208405,
0.10030547529459,
-0.05540161207318306,
-0.05096958950161934,
0.08206788450479507,
0.08043535053730011,
-0.0017751440173014998,
0.05486601963639259,
0.0008526080055162311,
-0.03457847610116005,
-0.049553826451301575,
-0.0616096593439579,
-0.020951412618160248,
-0.0012209891574457288,
-0.006836678832769394,
-0.0765426829457283,
-0.12581537663936615,
0.0808725357055664,
0.09515120089054108,
0.02822035737335682,
0.06421563774347305,
-0.029856545850634575,
0.020403454080224037,
0.09376247972249985,
0.03715717792510986,
-0.012585774064064026,
-0.0705018937587738,
-0.09783879667520523,
-0.12473168224096298,
0.043752849102020264,
0.06539823859930038,
0.05689683556556702,
-0.09803851693868637,
-0.06556138396263123,
-0.16570860147476196,
0.017863254994153976,
0.18220138549804688,
0.13285714387893677,
0.05764179676771164,
0.008195138536393642,
-0.0648529902100563,
-0.03753741830587387,
0.06116039678454399,
-0.03957262262701988,
-0.08686339855194092,
-0.008568450808525085,
-0.03398916870355606,
0.002363736741244793,
-0.06786312907934189,
0.07048463821411133,
0.013934382237493992,
0.09152013808488846,
0.07998733222484589,
-0.01248063426464796,
-0.05578522011637688,
-0.125863179564476,
-0.09553448110818863,
-0.015602643601596355,
-0.1781032383441925,
0.020956669002771378,
-0.011035697534680367,
-0.09846848249435425,
0.02931087464094162,
0.052711475640535355,
0.21504484117031097,
0.00632921839132905,
0.07496112585067749,
-0.11469820141792297,
0.0015980006428435445,
0.03018387407064438,
0.033875178545713425,
-0.047458715736866,
0.04692167416214943,
-0.03800991550087929,
0.042140454053878784,
0.014153394848108292,
-0.045917946845293045,
0.015957441180944443,
0.05808993801474571,
-0.13330742716789246,
0.010734954848885536,
-0.07035127282142639,
-0.0318651907145977,
-0.004436700604856014,
0.12731099128723145,
0.059323158115148544,
-0.019989749416708946,
-0.11129827797412872,
-0.04688236117362976,
0.022050932049751282,
0.0064798505045473576,
-0.01013382151722908,
0.0665828213095665,
-0.019842268899083138,
-0.021393582224845886,
0.0007306360057555139,
-0.07529348880052567,
-0.05441754311323166,
-0.03166681155562401,
0.050307098776102066,
0.02558184787631035,
0.05281098559498787,
0.04482373967766762,
-0.006701167672872543,
0.03891093656420708,
0.10367847979068756,
0.12594255805015564,
-0.029538635164499283,
-0.12759023904800415,
0.07983635365962982,
0.10488966852426529,
0.07263804227113724,
-0.14552932977676392,
-0.051966339349746704,
-0.005413838196545839,
0.023321377113461494,
0.11102759093046188,
-0.00486652459949255,
-0.03184317424893379,
-0.02012941613793373,
0.06368031352758408,
0.07708754390478134,
-0.06833072751760483,
-0.043288663029670715,
0.09430727362632751,
0.09845935553312302,
0.021035145968198776,
-0.019301606342196465,
-0.08888112753629684,
-0.15011410415172577,
-0.16387097537517548,
-0.1334507167339325,
-0.009370502084493637,
0.008533284068107605,
-0.05537060648202896,
-0.22311918437480927,
-0.06948021799325943,
-0.016213029623031616,
0.0006384524749591947,
0.04263005405664444,
0.015961050987243652,
0.03297692537307739,
-0.01726626604795456,
0.021767275407910347,
-0.0637824535369873,
-0.0826273038983345,
-0.011833962984383106,
0.03954039514064789,
0.06873555481433868,
0.12660382688045502,
0.12817491590976715,
0.04391779005527496,
-0.007619503419846296,
0.08037678152322769,
0.19857488572597504,
0.14822649955749512,
0.051505234092473984,
0.037465281784534454,
-0.08714725077152252,
-0.060054756700992584,
-0.052400607615709305,
0.012261047028005123,
0.006646478548645973,
-0.08086027204990387,
-0.1197071298956871,
-0.08824007213115692,
0.06212897226214409,
-0.07301083952188492,
0.030561357736587524,
0.05410408601164818,
0.05524074286222458,
0.10893477499485016,
0.08137508481740952,
0.08785229176282883,
0.010733104310929775,
-0.12915243208408356,
-0.21327905356884003,
0.05669056996703148,
0.1503387838602066,
0.015621469356119633,
-0.12852896749973297,
-0.14235156774520874,
-0.03290437534451485,
0.011599093675613403,
0.0772775337100029,
0.06404373794794083,
0.08839084953069687,
0.008335992693901062,
-0.03860248997807503,
-0.006047139875590801,
-0.015390414744615555,
-0.03809644281864166,
-0.015453793108463287,
-0.04215475544333458,
-0.006861216854304075,
-0.013654080219566822,
-0.10154340416193008,
-0.030301755294203758,
-0.07496871799230576,
0.0636347159743309,
-0.04063453525304794,
-0.19717375934123993,
-0.07253064960241318,
0.053302764892578125,
0.1265038251876831,
0.05207791551947594,
-0.07472586631774902,
-0.01509856153279543,
0.058366257697343826,
-0.022445037961006165,
0.013980906456708908,
0.015803473070263863,
0.05300986021757126,
0.13028673827648163,
-0.027339601889252663,
-0.029684914276003838,
0.10074004530906677,
-0.02244679443538189,
-0.011032076552510262,
-0.03971078246831894,
-0.044590145349502563,
0.060145046561956406,
-0.0023415093310177326,
-0.03528549149632454,
0.12863914668560028,
0.010262289084494114,
-0.14279824495315552,
0.022054040804505348,
-0.003184602363035083,
0.10855027288198471,
0.0008258088491857052,
-0.0782264843583107,
-0.02000911720097065,
0.021503780037164688,
-0.06569734215736389,
-0.055774953216314316,
-0.0453265905380249,
-0.05462292954325676,
-0.05198569595813751,
-0.04774031043052673,
-0.079321950674057,
-0.0931837409734726,
-0.017372068017721176,
0.07986090332269669,
-0.050170354545116425,
0.05974697694182396,
0.12199191004037857,
-0.03931060805916786,
0.03392254561185837,
0.06307163834571838,
0.013772583566606045,
0.045357175171375275,
-0.14293286204338074,
0.05307596176862717,
0.14428900182247162,
0.21193669736385345,
0.1559675633907318,
0.17120712995529175,
0.06311716139316559,
0.05218511447310448,
-0.0865117609500885,
-0.00899858120828867,
0.020593130961060524,
-0.04883648827672005,
-0.08543461561203003,
-0.03281151503324509,
-0.06906963884830475,
-0.024208689108490944,
0.05643417686223984,
0.035821568220853806,
0.03961550444364548,
0.004103189799934626,
-0.06595394760370255,
0.06447773426771164,
0.14013072848320007,
0.07774142175912857,
0.017794406041502953,
0.05902647599577904,
0.012264799326658249,
0.005675196181982756,
-0.16528920829296112,
-0.07173922657966614,
0.051607076078653336,
-0.05066973716020584,
-0.03418095037341118,
-0.17867833375930786,
-0.027488939464092255,
0.016600091010332108,
-0.011688618920743465,
0.04187607765197754,
0.02201811969280243,
0.01836303249001503,
0.007706876378506422,
-0.014081262983381748,
-0.023946529254317284,
-0.002126754028722644,
0.05911269411444664,
0.055859532207250595,
0.015050605870783329,
-0.003048426005989313,
-0.0733596533536911,
-0.03208787366747856,
0.020855937153100967,
0.043543241918087006,
-0.17979595065116882,
-0.19993729889392853,
-0.07585184276103973,
-0.014009244740009308,
0.009524871595203876,
-0.032384175807237625,
-0.004742004442960024,
-0.06385552883148193,
-0.04687371104955673,
0.0037974980659782887,
0.04882347211241722,
0.03339611366391182,
0.003148228395730257,
0.07634720206260681,
0.03230420872569084,
-0.01814926788210869,
-0.08742711693048477,
0.013610455207526684,
0.03142441064119339,
0.12720434367656708,
0.11422770470380783,
0.0052893809042871,
-0.05658751353621483,
-0.003792222822085023,
0.07476232200860977,
0.03359880670905113,
-0.12255215644836426,
-0.23662762343883514,
-0.10138029605150223,
-0.08791253715753555,
-0.06541210412979126,
-0.11436749249696732,
-0.057349108159542084,
-0.08574633300304413,
-0.030339965596795082,
0.1376878023147583,
0.050730857998132706,
0.0012986048823222518,
-0.08797849714756012,
0.0503322035074234,
0.039455994963645935,
-0.049130115658044815,
-0.029364828020334244,
-0.06453317403793335,
-0.03121313638985157,
0.13357102870941162,
0.12603160738945007,
0.13878905773162842,
-0.015355575829744339,
-0.009124561212956905,
0.10687948763370514,
0.1600729376077652,
0.126267209649086,
0.025882946327328682,
0.06521376222372055,
0.05710407346487045,
-0.012314565479755402,
0.06105838343501091,
-0.027177885174751282,
-0.11826084554195404,
-0.10006988793611526,
-0.17009416222572327,
0.02734643779695034,
0.035910043865442276,
-0.059076566249132156,
0.03418900817632675,
0.02383260615170002,
0.06697734445333481,
0.06026958301663399,
-0.09091953188180923,
-0.012022261507809162,
-0.023961622267961502,
-0.003680131398141384,
0.02551944926381111,
0.03111230954527855,
0.088898204267025,
-0.05096600204706192,
-0.10761876404285431,
-0.012267515994608402,
-0.1299801468849182,
0.04094602167606354,
-0.02744993008673191,
-0.09321065247058868,
0.10336078703403473,
0.006639455445110798,
0.13442111015319824,
0.07728070020675659,
-0.06313485652208328,
0.05143530294299126,
0.10931692272424698,
-0.052115049213171005,
-0.07208213210105896,
-0.0666860044002533,
-0.019264644011855125,
0.0034216539934277534,
0.04037901386618614,
0.04625694081187248,
0.05199792608618736,
0.10317900031805038,
0.12414571642875671,
-0.009917751885950565,
0.004243155941367149,
0.012653779238462448,
-0.08487258851528168,
-0.051442909985780716,
0.08166156709194183,
-0.049403201788663864,
0.1053081676363945,
-0.042831096798181534,
0.011395041830837727,
-0.01266619935631752,
0.1593010574579239,
0.0527803972363472,
-0.11194658279418945,
-0.008793570101261139,
0.022572843357920647,
0.016822176054120064,
0.033642105758190155,
-0.03356543555855751,
-0.047239258885383606,
-0.11544328927993774,
-0.07891558855772018,
-0.005063602700829506,
0.024593742564320564,
0.06257586181163788,
0.19441735744476318,
0.262766033411026,
0.26787030696868896,
0.043140776455402374,
0.0591067299246788,
0.22742795944213867,
0.16245335340499878,
0.0632265955209732,
0.016506928950548172,
-0.007315019145607948,
-0.06621553748846054,
-0.06857793033123016,
0.03556109964847565,
0.016988219693303108,
-0.0010422969935461879,
0.10184112191200256,
0.07401028275489807,
0.044515255838632584,
0.09536820650100708,
0.0306580550968647,
-0.050583235919475555,
-0.04243703559041023,
-0.004358208272606134,
-0.132249116897583,
-0.0050473520532250404,
-0.014532825909554958,
0.03676581010222435,
0.06359995901584625,
-0.12710994482040405,
-0.02112560346722603,
0.05831737443804741,
0.0015107085928320885,
0.1311745047569275,
-0.03331401199102402,
-0.01854928955435753,
-0.05110190808773041,
0.039708368480205536,
-0.007982134819030762,
0.07632271945476532,
0.047045473009347916,
0.1061168685555458,
-0.07613816857337952,
-0.04779372364282608,
-0.03143549710512161,
0.03274564817547798,
-0.0008311820565722883,
-0.05245649069547653,
-0.12489800155162811,
-0.08226567506790161,
0.022767292335629463,
0.13070665299892426,
0.05631089583039284,
0.022977227345108986,
-0.016508981585502625,
0.01997242495417595,
0.03235993534326553,
0.07098963111639023,
0.03194322809576988,
-0.04358214884996414,
-0.08118561655282974,
0.040002550929784775,
0.0329945906996727,
-0.0906451940536499,
-0.08642685413360596,
0.07474640756845474,
0.05237932130694389,
0.06574876606464386,
0.03568556159734726,
0.20300106704235077,
0.08336465805768967,
0.010249892249703407,
-0.013086848892271519,
0.01002435851842165,
-0.04245322197675705,
0.051825348287820816,
2.1221010683802888e-05,
-0.11516129225492477,
-0.15753382444381714,
0.09778502583503723,
0.0721864327788353,
0.07468953728675842,
-0.059918735176324844,
0.10339514166116714,
-0.027808262035250664,
-6.675551412627101e-05,
-0.08304392546415329,
-0.024607069790363312,
0.0696229487657547,
-0.04298919811844826,
0.06691597402095795,
0.07007642835378647,
-0.08597508072853088,
0.041033368557691574,
0.010777655057609081,
-0.014080461114645004,
-0.10372002422809601,
-0.17177410423755646,
0.014385820366442204,
-0.028887134045362473,
-0.07682101428508759,
-0.044953785836696625,
-0.11821728199720383,
-0.03878221660852432,
0.05711858347058296,
0.01033177599310875,
-0.13909636437892914,
0.0008766972459852695,
-0.024549022316932678,
-0.019684547558426857,
-0.03698831796646118,
0.033119168132543564,
-0.041820622980594635,
-0.07028571516275406,
-0.03213522955775261,
-0.07980868965387344,
-0.13879911601543427,
-0.018504709005355835,
-0.016651293262839317,
0.06437743455171585,
0.08843783289194107,
-0.050241243094205856,
-0.025327999144792557,
-0.035519082099199295,
0.06897548586130142,
0.058002058416604996,
0.05755773186683655,
-0.17537273466587067,
0.014215064235031605,
0.12445428967475891,
0.11131078004837036,
0.010638875886797905,
0.00800298061221838,
-0.05013161525130272,
0.022986752912402153,
0.04408620670437813,
-0.025939272716641426,
0.11246392130851746,
0.023141611367464066,
-0.01818099245429039,
-0.14392955601215363,
-0.09253779798746109,
-0.09194066375494003,
-0.06352740526199341,
-0.18503537774085999,
-0.06466842442750931,
0.11930245906114578,
0.13846442103385925,
-0.009174074046313763,
-0.050503216683864594,
0.04049704968929291,
-0.014441128820180893,
0.18444117903709412,
0.0848253071308136,
-0.031844038516283035,
0.03071892075240612,
-0.021782031282782555,
0.08148235827684402,
-0.006908159237354994,
-0.10347055643796921,
-0.09085995703935623,
-0.02634122036397457,
0.10376568883657455,
0.05322925001382828,
-0.11107434332370758,
-0.10110610723495483,
0.16890861093997955,
0.1059318259358406,
0.04450409114360809,
-0.0799521878361702,
-0.02479841187596321,
-0.027675218880176544,
-0.0657934844493866,
0.10460197180509567,
-0.1226036548614502,
-0.09508705139160156,
-0.10280515998601913,
0.012453831732273102,
0.05456067621707916,
-0.042941514402627945,
-0.005937057547271252,
-0.075189970433712,
-0.1477753072977066,
-0.11015458405017853,
0.07442411780357361,
-0.08326634019613266,
-0.10144704580307007,
0.08393701165914536,
0.1270827203989029,
0.13472668826580048,
0.05567147210240364,
-0.13084180653095245,
-0.0069213262759149075,
0.0818900614976883,
0.05375650152564049,
-0.03611288592219353,
-0.03034426085650921,
-0.024865183979272842,
0.09586997330188751,
0.12935848534107208,
0.09538430720567703,
-0.05001430585980415,
-0.15311744809150696,
0.0015099121956154704,
0.04926692321896553,
-0.07222538441419601,
-0.15231946110725403,
-0.04161258414387703,
-0.03497381508350372,
-0.0069549414329230785,
0.03939790278673172,
-0.0880526453256607,
-0.062065642327070236,
0.024540526792407036,
-0.026245394721627235,
-0.220016211271286,
-0.16636840999126434,
-0.008195031434297562,
-0.014071912504732609,
-0.05336108058691025,
-0.08433839678764343,
-0.05939868092536926,
0.04079209268093109,
-0.12575137615203857,
-0.0394739992916584,
-0.037366632372140884,
-0.030269650742411613,
-0.1064232811331749,
-0.021011266857385635,
0.10093683749437332,
0.1539464294910431,
0.05785660818219185,
0.004123381804674864,
-0.010651247575879097,
0.14812009036540985,
0.03350165858864784,
0.13361108303070068,
0.030006496235728264,
0.08021970093250275,
0.008939250372350216,
-0.09723027050495148,
-0.11078095436096191,
0.0279220063239336,
-0.0205514058470726,
-0.08684442937374115,
-0.12134772539138794,
-0.0819174200296402,
-0.05988112464547157,
0.0939401164650917,
-0.10050816833972931,
-0.009926903992891312,
-0.07617005705833435,
0.04825465381145477,
0.18938124179840088,
0.024754608049988747,
0.04443394020199776,
0.012279667891561985,
-0.007469849195331335,
0.113393135368824,
0.025156861171126366,
-0.03748329356312752,
-0.019506270065903664,
-0.02725936658680439,
-0.0338132306933403,
0.07786839455366135,
0.12203051894903183,
0.01897299848496914,
-0.036810848861932755,
-0.08027676492929459,
-0.06266406923532486,
-0.05233726650476456,
0.1360689401626587,
-0.01276117842644453,
-0.12299232184886932,
-0.10752712190151215,
0.07378506660461426,
0.12288113683462143,
0.14603480696678162,
0.08370790630578995,
-0.002984460908919573,
-0.02281087078154087,
0.0809711292386055,
0.20605064928531647,
-0.07500039786100388,
0.07547538727521896,
0.0041967579163610935,
0.103536456823349,
0.08353710174560547,
-0.056236304342746735,
0.026394231244921684,
0.13556832075119019,
0.177650585770607,
0.08546782284975052,
-0.13756348192691803,
-0.17154090106487274,
-0.06357809901237488,
0.019870230928063393,
-0.047107160091400146,
-0.1353638768196106,
-0.15788154304027557,
-0.12874774634838104,
-0.055428944528102875,
0.10148313641548157,
0.17385664582252502,
-0.04203370586037636,
0.05694112181663513,
-0.054997313767671585,
0.1196027547121048,
0.041241928935050964,
0.09779274463653564,
-0.030310586094856262,
-0.09691724926233292,
0.08374471217393875,
-0.09734610468149185,
0.072146475315094,
-0.03329572454094887,
0.1295672208070755,
-0.044215839356184006,
0.008843044750392437,
-0.024192839860916138,
-0.06893857568502426,
-0.08058517426252365,
-0.03214778006076813,
-0.06089372932910919,
0.12371056526899338,
0.15611791610717773,
0.03718525543808937,
-0.020952628925442696,
-0.01074463315308094,
0.10607563704252243,
0.10677708685398102,
0.09530071169137955,
0.02995978109538555,
0.06241434067487717,
0.09780284017324448,
0.1311408281326294,
-0.026820005849003792,
0.046202562749385834,
0.10606525838375092,
-0.11432559788227081,
-0.029676640406250954,
-0.05302850902080536,
-0.08838652074337006,
-0.03192881494760513,
-0.18843898177146912,
-0.11208166927099228,
0.043841876089572906,
-0.004409060813486576,
0.03983649984002113,
-0.22368864715099335,
0.11235522478818893,
-0.036477841436862946,
-0.03319767117500305,
0.05482858046889305,
0.0321357287466526,
0.11261497437953949,
0.0671168714761734,
-0.08073965460062027,
0.017796223983168602,
0.13508282601833344,
0.14686106145381927,
0.09828110039234161,
0.017084544524550438,
-2.997010960825719e-05,
0.02747238613665104,
0.18794219195842743,
0.05001312494277954,
-0.03954421728849411,
-0.017071297392249107,
0.014804787002503872,
-0.042934853583574295,
-0.06933779269456863,
-0.06543188542127609,
-0.02656954899430275,
0.02983015961945057,
-0.010363808833062649,
0.008867774158716202,
-0.07002527266740799,
-0.040873680263757706,
0.0053515140898525715,
0.08260998874902725,
0.028241749852895737,
0.003730825614184141,
0.02772759646177292,
0.079717256128788,
-0.08715399354696274,
0.031139157712459564,
-0.05003812536597252,
0.09480474144220352,
0.03294704854488373,
0.015542533248662949,
-0.007003074046224356,
-0.04492395371198654,
0.028767066076397896,
0.035080984234809875,
0.05652790889143944,
-0.01579822413623333,
0.06653638184070587,
0.03625001758337021,
-0.04605359584093094,
0.03846803307533264,
-0.054826218634843826,
-0.03431996703147888,
-0.12192787975072861,
0.02161816507577896,
0.09303406625986099,
0.18496175110340118,
0.0003901312593370676,
0.03935680538415909,
0.1964111328125,
0.13679729402065277,
0.17315830290317535,
0.22403743863105774,
0.0035921544767916203,
0.040070876479148865,
0.05323554947972298,
0.06631476432085037,
-0.0335719920694828,
-0.009803551249206066,
0.19385969638824463,
0.0133807472884655,
-0.0023553224746137857,
-0.02032099850475788,
0.13997280597686768,
0.04863462224602699,
0.034149542450904846,
0.10315756499767303,
-0.02381061762571335,
0.05375562235713005,
-0.2565641701221466,
-0.12323425710201263,
0.056075822561979294,
-0.0436142273247242,
0.055777475237846375,
0.03359518572688103,
0.14027194678783417,
0.021661465987563133,
-0.07683713734149933,
-0.004976318683475256,
0.06974086910486221,
0.02757514826953411,
-0.0641901046037674,
-0.0822330117225647,
-0.10278920084238052,
0.04523225501179695,
0.1256646066904068,
-0.06728344410657883,
-0.16089749336242676,
-0.0952971875667572,
-0.03893668204545975,
0.12428373843431473,
0.03577660024166107,
-0.06160593032836914,
0.007939545437693596,
-0.09359614551067352,
-0.03072647750377655,
0.08747529983520508,
0.07953789085149765,
0.022448137402534485,
-0.05909815803170204,
-0.06236068904399872,
0.11979422718286514,
-0.04116398096084595,
-0.06455247104167938,
0.0034758918918669224,
0.0011516459053382277,
-0.019137874245643616,
0.07520998269319534,
0.04817335307598114,
0.12686163187026978,
0.15801526606082916,
0.0021069489885121584,
-0.07480296492576599,
-0.06957035511732101,
-0.04523549973964691,
0.12031030654907227,
0.11996893584728241,
-0.05409158021211624,
0.024198291823267937,
0.01464603841304779,
-0.10919030010700226,
0.11871658265590668,
0.09400839358568192,
0.1994602233171463,
-0.13111379742622375,
-0.10298626124858856,
-0.12653286755084991,
-0.10060502588748932,
0.10137365758419037,
0.10813121497631073,
-0.07562803477048874,
-0.11723614484071732,
-0.05017179995775223,
-0.03346956893801689,
0.010082744061946869,
-0.1086711436510086,
-0.16652053594589233,
-0.06224523112177849,
0.055868420749902725,
-0.004389398731291294,
-0.06692483276128769,
-0.1900220662355423,
-0.06926475465297699,
0.052758004516363144,
0.04000374674797058,
0.0648883730173111,
-0.05925265699625015,
-0.08103664219379425,
0.06882453709840775,
-0.007123368326574564,
0.00956469401717186,
0.06195033714175224,
-0.073581762611866,
-0.08153337240219116,
-0.08096612989902496,
-0.07091814279556274,
0.05819680914282799,
-0.030005406588315964,
-0.08035892993211746,
0.05734654888510704,
0.011019870638847351,
0.052183009684085846,
-0.043983135372400284,
0.06506713479757309,
-0.01620875857770443,
0.04545428603887558,
0.046999670565128326,
-0.03627222031354904,
0.16701167821884155,
0.14309783279895782,
0.05614113062620163,
-0.022975273430347443,
0.15398375689983368,
0.0994568020105362,
-0.03209088742733002,
-0.07684078812599182,
0.0475631058216095,
0.19104830920696259,
0.2115173041820526,
-0.04187657684087753,
-0.046718206256628036,
-0.07241647690534592,
0.01935424655675888,
0.12749306857585907,
-0.11734353005886078,
-0.02594665251672268,
-0.016625097021460533,
0.04985468089580536,
-0.05736389383673668,
-0.006279080640524626,
0.1655104160308838,
-0.008095051161944866,
-0.0002628732763696462,
-0.0349569097161293,
-0.0969376489520073,
0.11148276180028915,
0.06085243821144104,
0.008142217062413692,
-0.07753745466470718,
-0.022033631801605225,
-0.06077347323298454,
0.03845856711268425,
-0.09163811802864075,
-0.07500649988651276,
-0.01937541365623474,
0.006415421608835459,
0.03656724467873573,
0.024577563628554344,
0.009635591879487038,
0.03248205408453941,
0.02393685095012188,
0.004480652045458555,
-0.09463924169540405,
-0.01213326770812273,
-0.10145258158445358,
-0.1202593520283699,
-0.007490143179893494,
0.04987556114792824,
0.12392670661211014,
-0.19641797244548798,
-0.022608712315559387,
-0.0735703706741333,
0.048797134310007095,
-0.01430455781519413,
0.1261013001203537,
0.10271227359771729,
0.007100276183336973,
0.1781781017780304,
0.024248139932751656,
0.03829129785299301,
-0.18255455791950226,
-0.12038599699735641,
-0.02771059051156044,
-0.010301994159817696,
0.010211926884949207,
-0.14334765076637268,
-0.12833714485168457,
-0.006161182653158903,
0.12096554785966873,
-0.021907789632678032,
0.06396251916885376,
-0.07779975980520248,
-0.0943455770611763,
0.05272841081023216,
0.17207607626914978,
0.09822731465101242,
0.01888445019721985,
-0.09259959310293198,
0.00896371714770794,
-0.12096819281578064,
0.008376994170248508,
-0.08733483403921127,
0.038694869726896286,
0.09679664671421051,
-0.029262440279126167,
-0.052616629749536514,
-0.1136450543999672,
0.023440251126885414,
0.018470749258995056,
-0.07080422341823578,
-0.09975407272577286,
0.03662984073162079,
-0.0574125275015831,
-0.09771635383367538,
-0.09420666098594666,
-0.09099767357110977,
0.040782902389764786,
-0.010991290211677551,
0.049852099269628525,
0.13097846508026123,
-0.02525630220770836,
-0.05912886932492256,
-0.042383719235658646,
0.041946202516555786,
0.17306937277317047,
-0.04433443024754524,
-0.011481632478535175,
0.03781204670667648,
0.08533500880002975,
-0.07883680611848831,
-0.106354258954525,
-0.08084116876125336,
2.6360281481174752e-05,
-0.009060590527951717,
-0.07288296520709991,
-0.15859676897525787,
0.009599314071238041,
0.01937197893857956,
0.12116257101297379,
-0.0920616015791893,
-0.057422537356615067,
-0.051058609038591385,
0.13304126262664795,
0.18269827961921692,
-0.04036066681146622,
-0.05307089537382126,
-0.009541983716189861,
0.030919987708330154,
0.014125076122581959,
0.1396515667438507,
0.11186999827623367,
-0.0024618501774966717,
-0.08091004192829132,
-0.059866197407245636,
-0.01715380698442459,
0.045005813241004944,
-0.006007558200508356,
-0.09050562977790833,
-0.07855235040187836,
0.022789835929870605,
0.05883374437689781,
0.0570174939930439,
-0.12123508006334305,
-0.1457703560590744,
-0.012488295324146748,
0.20442835986614227,
-0.06392357498407364,
0.044188909232616425,
0.05488701909780502,
-0.06999444961547852,
0.09282531589269638,
-0.1198853850364685,
0.05588185042142868,
-0.06190398335456848,
0.027592871338129044,
0.07369787991046906,
0.00924556702375412,
-0.018478140234947205,
-0.1417597532272339,
0.10608810186386108,
0.05550089105963707,
0.046586763113737106,
-0.0023697176948189735,
-0.08478859066963196,
-0.12237497419118881,
0.13219931721687317,
0.016110150143504143,
0.08105458319187164,
-0.08636099845170975,
-0.07881569117307663,
0.01695215329527855,
-0.0656781867146492,
0.05776844918727875,
0.12719985842704773,
-0.0723097026348114,
-0.026832686737179756,
-0.15251488983631134,
0.039350688457489014,
-7.97156390035525e-05,
-0.0313674695789814,
0.10360946506261826,
0.10111604630947113,
0.03898651897907257,
-0.15023943781852722,
0.056013770401477814,
0.058518148958683014,
0.037334270775318146,
-0.04302609711885452,
-0.041933998465538025,
-0.07457724213600159,
-0.11440105736255646,
-0.10380470007658005,
-0.09819619357585907,
0.02521279826760292,
0.1416054219007492,
-0.019483404234051704,
0.025625845417380333,
0.0808052122592926,
0.023074833676218987,
0.15347932279109955,
0.06074287369847298,
-0.010169768705964088,
0.043883997946977615,
0.23157478868961334,
-0.0383957140147686,
-0.02295299619436264,
-0.10194823145866394,
-0.007886913605034351,
0.2619599401950836,
-0.07991914451122284,
-0.14618508517742157,
-0.09377703815698624,
-0.018975144252181053,
-0.005553046707063913,
-0.12583664059638977,
-0.11692747473716736,
0.12144793570041656,
-0.03405988961458206,
-0.02932054176926613,
-0.21320977807044983,
-0.07672382891178131,
-0.06210923567414284,
-0.07283461093902588,
0.06939700990915298,
-0.037385694682598114,
0.03538941964507103,
-0.022716589272022247,
-0.07321885228157043,
-0.06582965701818466,
0.1615329086780548,
0.07828172296285629,
-0.008949064649641514,
-0.015025053173303604,
-0.07942283898591995,
0.09734456241130829,
-0.09245172888040543,
-0.14607422053813934,
0.0755874365568161,
0.010069215670228004,
0.07685376703739166,
0.007596874143928289,
-0.047866567969322205,
0.033062826842069626,
0.028383469209074974,
0.1880318969488144,
0.00020675714768003672,
0.03393576666712761,
0.03745175898075104,
0.002442019758746028,
0.009620561264455318,
0.06569287180900574,
0.06580078601837158,
0.2006077617406845,
0.23521041870117188,
-0.04253871366381645,
-0.06860460340976715,
-0.019363993778824806,
-0.005280007608234882,
-0.016210053116083145,
-0.030170440673828125,
-0.03056921996176243,
-0.06181000545620918,
-0.06609988212585449,
-0.11937037110328674,
0.056779876351356506,
0.09382174164056778,
0.026904869824647903,
0.008144844323396683,
0.010285991244018078,
-0.0071426997892558575,
-0.03934120014309883,
-0.024882139638066292,
0.044213876128196716,
0.03688916563987732,
0.07482614368200302,
0.041579797863960266,
0.11342952400445938,
0.021182425320148468,
0.031012538820505142,
0.07407265901565552,
0.010637983679771423,
-0.08039755374193192,
0.015792204067111015,
-0.03060690499842167,
-0.06813488155603409,
-0.04635286703705788,
-0.08253058046102524,
-0.0738617554306984,
-0.0360618457198143,
-0.058433812111616135,
0.0669146403670311,
0.022722048684954643,
0.1276656538248062,
0.008102364838123322,
-0.023961184546351433,
-0.03141883760690689,
-0.02958279475569725,
-0.040072519332170486,
-0.0856098085641861,
0.09769150614738464,
-0.13022686541080475,
0.0620855987071991,
0.030465956777334213,
0.0010099612409248948,
-0.08760320395231247,
0.06232484057545662,
-0.02410499006509781,
0.0281426589936018,
0.012129542417824268,
-0.07529675215482712,
0.036749228835105896,
0.06355803459882736,
-0.06654328107833862,
0.12376147508621216,
-0.028192058205604553,
-0.0719868540763855,
0.020918406546115875,
-0.03750995174050331,
-0.03465886414051056,
-0.032134756445884705,
0.044919054955244064,
-0.02106485515832901,
-0.023683691397309303,
0.008706232532858849,
0.00015962928591761738,
-0.000815762032289058,
-0.0028994379099458456,
0.04683179780840874,
0.013243472203612328,
-0.0005095534143038094,
-0.03709375485777855,
0.07547081261873245,
0.08186759054660797,
-0.06146778538823128,
-0.09491950273513794,
0.03140163794159889,
0.12158295512199402,
0.020297182723879814,
0.00871487520635128,
0.09326944500207901,
0.038270503282547,
0.06555741280317307,
0.12022069841623306,
0.11008068919181824,
-0.007224487140774727,
0.012083844281733036,
-0.04527786374092102,
0.1489638388156891,
0.09070573002099991,
-0.12543624639511108,
0.004243355244398117,
-0.12520776689052582,
-0.08161178976297379,
-0.09984660148620605,
-0.08207955956459045,
-0.0805082619190216,
0.005668614059686661,
-0.052369724959135056,
-0.08784169703722,
0.002871039090678096,
0.12946286797523499,
-0.007226778659969568,
0.08412114530801773,
0.022012488916516304,
-0.008738687261939049,
-0.06198393553495407,
0.012039179913699627,
0.03697490319609642,
-0.003999480977654457,
-0.021893814206123352,
-0.058683428913354874,
-0.031130310148000717,
-0.021286947652697563,
-0.07121244072914124,
0.14443513751029968,
-0.09486450254917145,
-0.006608516909182072,
-0.10430716723203659,
0.014657399617135525,
-0.007902595214545727,
-0.02423189952969551,
-0.09906203299760818,
0.09885691851377487,
0.006259514018893242,
-0.052690789103507996,
0.03617744520306587,
-0.09305668622255325,
-0.07420819997787476,
-0.05264255404472351,
0.03980337455868721,
0.025983275845646858,
-0.028008462861180305,
0.04812302067875862,
0.07227528840303421,
0.0051409280858933926,
0.12851224839687347,
0.07267901301383972,
0.03978750482201576,
0.0647505447268486,
0.058821238577365875,
-0.09073115885257721,
-0.04296891763806343,
-0.019598526880145073,
0.006417855620384216,
0.027453210204839706,
0.043535422533750534,
-0.1055109053850174,
-0.10080820322036743,
-0.0694717988371849,
-0.09378425776958466,
-0.107134148478508,
-0.11209317296743393,
-0.1085536926984787,
-0.08273681253194809,
-0.011806673370301723,
-0.022267956286668777,
0.04149340093135834,
0.010433596558868885,
-0.08217067271471024,
-0.00783371739089489,
0.10712730884552002,
0.0033039823174476624,
-0.018548816442489624,
-0.10291649401187897,
0.01969970390200615,
0.04948587715625763,
0.020950688049197197,
0.1599072515964508,
0.07217170298099518,
-0.03319739177823067,
-0.034075818955898285,
0.0377349890768528,
0.14430022239685059,
0.0874837264418602,
-0.0068552494049072266,
-0.06591790169477463,
0.15823425352573395,
0.10655466467142105,
-0.05262921750545502,
0.036708295345306396,
-0.08698028326034546,
0.04564886540174484,
-0.001141801243647933,
0.06131332367658615,
-0.024257507175207138,
-0.05830024182796478,
0.01896904781460762,
0.1548105627298355,
0.0965590700507164,
-0.10763562470674515,
-0.03573092073202133,
-0.0037058291491121054,
-0.029674895107746124,
0.04432030767202377,
-0.13302986323833466,
0.010525095276534557,
-0.023480715230107307,
-0.0621962770819664,
-0.06325045973062515,
0.021761339157819748,
0.044347625225782394,
-0.1292056441307068,
-0.08585576713085175,
0.09698165208101273,
0.018782226368784904,
-0.018468569964170456,
0.008781712502241135,
0.02811727114021778,
0.01340265478938818,
0.14417052268981934,
0.024110887199640274,
-0.03843936324119568,
-0.029467551037669182,
-0.08252257108688354,
-0.06410950422286987,
-0.16447222232818604,
-0.04528690502047539,
-0.04105834290385246,
0.09771998226642609,
0.12742146849632263,
-0.06926030665636063,
-0.17730455100536346,
-0.08698213845491409,
-0.0014212180394679308,
-0.04346645250916481,
-0.07534579932689667,
-0.10821795463562012,
-0.0557795912027359,
-0.03925999626517296,
-0.0341532826423645,
0.04503355175256729,
0.01618173159658909,
0.13333436846733093,
0.06497453153133392,
-0.04783686622977257,
0.04525040090084076,
-0.04272320121526718,
0.060178834944963455,
0.15315720438957214,
0.023439835757017136,
0.09303160011768341,
0.11568555980920792,
0.010395064949989319,
-0.18649409711360931,
0.06390347331762314,
-0.07497081905603409,
0.019047081470489502,
-0.016334081068634987,
-0.060981862246990204,
0.010729228146374226,
-0.10302627086639404,
0.026798630133271217,
0.035913750529289246,
0.01596907712519169,
-0.06948888301849365,
-0.03207743167877197,
0.05961081013083458,
0.131759375333786,
0.04801582545042038,
-0.009215486235916615,
0.046104155480861664,
-0.04591936990618706,
-0.06619637459516525,
-0.06134878471493721,
0.08357704430818558,
-0.052398283034563065,
-0.05090128257870674,
-0.14653468132019043,
0.033747971057891846,
-0.039745595306158066,
-0.09662150591611862,
0.04346594959497452,
-0.012757849879562855,
0.06214001774787903,
0.1185348704457283,
0.15628571808338165,
-0.06599918007850647,
-0.06532243639230728,
0.04265536740422249,
0.009153843857347965,
-0.029484108090400696,
0.11232621967792511,
0.0834076851606369,
-0.04222995787858963,
0.04935016483068466,
0.01836780644953251,
-0.023999378085136414,
-0.12112688273191452,
-0.07074218988418579,
0.1874127984046936,
0.030746953561902046,
0.1281515210866928,
-0.012719324789941311,
0.00644044391810894,
-0.055006325244903564,
0.0030378333758562803,
0.0327465683221817,
0.05546349659562111,
0.11498118191957474,
-0.05025390535593033,
0.1169106662273407,
0.12069014459848404,
-0.005930816754698753,
-0.09047423303127289,
0.004572608042508364,
0.04536769911646843,
0.20368461310863495,
0.031629182398319244,
-0.0008217287831939757,
-0.08143498748540878,
-0.038961149752140045,
-0.003327304730191827,
0.08412034809589386,
-0.1537713259458542,
0.06573721766471863,
0.09200496971607208,
-0.00929904542863369,
-0.0026641672011464834,
-0.072786845266819,
-0.013701277785003185,
-0.040727149695158005,
-0.025560548529028893,
0.12425471097230911,
0.10373940318822861,
-0.09236349165439606,
0.06099044904112816,
0.053237441927194595,
-0.005149552132934332,
-0.022604741156101227,
-0.020882658660411835,
-0.009600837714970112,
0.05240269750356674,
0.18173034489154816,
0.19903606176376343,
-0.03091052733361721,
0.023181211203336716,
0.029386011883616447,
0.06874154508113861,
0.1444234699010849,
-0.08117974549531937,
0.04861410707235336,
0.0016040587797760963,
-0.06824453920125961,
-0.0958615317940712,
0.08016837388277054,
-0.09599920362234116,
-0.0685388520359993,
-0.12188448756933212,
-0.0579729899764061,
-0.02206018753349781,
-0.018674837425351143,
-0.08611583709716797,
0.026938695460557938,
0.03309338539838791,
-0.1260482370853424,
-0.026818402111530304,
0.012903081253170967,
-0.01146466750651598,
0.0157042033970356,
-0.12023203819990158,
0.06951259076595306,
0.07028714567422867,
0.06311137229204178,
-0.12379690259695053,
0.012726860120892525,
0.043034087866544724,
0.21318919956684113,
0.05777033790946007,
-0.05847959965467453,
0.05437139421701431,
0.052419133484363556,
0.10114749521017075,
0.04928053542971611,
-0.015105974860489368,
-0.023723481222987175,
0.12830740213394165,
0.10337135195732117,
0.022403810173273087,
-0.029445087537169456,
0.0473889596760273,
0.032576434314250946,
0.09169699251651764,
0.03592623770236969,
0.04980623722076416,
0.04430205002427101,
-0.001476992736570537,
0.04149086773395538,
-0.018259316682815552,
0.027998968958854675,
-0.0907139778137207,
-0.046298980712890625,
0.03773145005106926,
-0.04359845072031021,
-0.06992616504430771,
-0.08706734329462051,
-0.09726040810346603,
0.07159274816513062,
-0.0018994746496900916,
-0.08909594267606735,
0.012342722155153751,
-0.045477062463760376,
-0.009175634011626244,
0.0032665168400853872,
0.04466593265533447,
0.015184648334980011,
0.03701934590935707,
0.0023712990805506706,
0.04082657769322395,
-0.057918597012758255,
0.0473049096763134,
0.0011791377328336239,
0.13071385025978088,
0.0782470554113388,
0.14419643580913544,
-0.08922944217920303,
0.028617482632398605,
0.14313863217830658,
0.06114582717418671,
-0.019971810281276703,
-0.048838406801223755,
-0.009326934814453125,
-0.01296443585306406,
0.029498958960175514,
-0.01634601503610611,
-0.03286938741803169,
-0.0027908473275601864,
0.07959366589784622,
-0.029906397685408592,
-0.038788001984357834,
-0.08499662578105927,
0.02603059820830822,
-0.019229086115956306,
-0.07508084177970886,
-0.030579425394535065,
-0.18579858541488647,
-0.041024431586265564,
-0.06376780569553375,
0.07092223316431046,
-0.09716194123029709,
0.06592617183923721,
0.12617403268814087,
-0.07533960789442062,
-0.043945375829935074,
0.036674946546554565,
0.015725668519735336,
-0.07712141424417496,
-0.05964118614792824,
0.037146490067243576,
-0.04641355946660042,
-0.0012439495185390115,
-0.046168435364961624,
0.14207692444324493,
-0.027998061850667,
-0.16523510217666626,
-0.06300902366638184,
-0.03406530246138573,
0.04147930070757866,
0.06072024255990982,
-0.031165918335318565,
-0.009677370078861713,
-0.035878971219062805,
0.1426723599433899,
0.12262918055057526,
0.035025693476200104,
-0.006213516462594271,
0.04389091953635216,
0.02003827877342701,
0.01691170036792755,
-1.8135102436644956e-05,
-0.07850313186645508,
0.10612636804580688,
-0.08976949006319046,
-0.0011078401003032923,
0.02992010861635208,
-0.0238401610404253,
0.08143886178731918,
-0.035185810178518295,
-0.0812082290649414,
-0.03658866882324219,
-0.04381805658340454,
-0.13227792084217072,
-0.028925489634275436,
-0.05044487491250038,
-0.011940635740756989,
-0.007275788579136133,
-0.14411817491054535,
-0.0769946277141571,
-0.06953739374876022,
-0.1422368735074997,
0.08370687812566757,
0.18492765724658966,
0.04003118723630905,
-0.07389280200004578,
-0.1615654081106186,
0.12046243995428085,
0.1790655255317688,
0.1432129442691803,
0.09753435850143433,
0.16258499026298523,
-0.11352880299091339,
-0.047518398612737656,
0.007466217037290335,
0.01491278875619173,
0.042289331555366516,
-0.05480717122554779,
0.029469598084688187,
-0.015543658286333084,
-0.08729421347379684,
-0.011321580968797207,
-0.05654950812458992,
0.08195310831069946,
0.20027439296245575,
-0.022517748177051544,
-0.016960982233285904,
-0.02580186165869236,
0.0037731914781033993,
-0.06312847882509232,
-0.02413475699722767,
-0.02242293767631054,
0.0006266466225497425,
-0.14943362772464752,
-0.024103067815303802,
-0.04918769374489784,
-0.013271547853946686,
0.08198994398117065,
0.09029020369052887,
-0.09980874508619308,
-0.0030208653770387173,
0.03369893878698349,
-0.059205468744039536,
0.01619037240743637,
-0.12496006488800049,
-0.1021045446395874,
-0.015111414715647697,
0.00908799096941948,
-0.01687369868159294,
-0.10747259110212326,
-0.055421024560928345,
-0.17938058078289032,
-0.08818817883729935,
0.024455491453409195,
0.015289734117686749,
-0.20094674825668335,
-0.15145930647850037,
0.07412469387054443,
0.04631916806101799,
0.01824563555419445,
-0.08141787350177765,
-0.09970206767320633,
0.2353323996067047,
0.08260859549045563,
0.011566582135856152,
0.03665071353316307,
0.057630740106105804,
-0.005716108251363039,
0.013972451910376549,
0.22206491231918335,
0.08407678455114365,
0.16916468739509583,
-0.005172457545995712,
-0.01024693250656128,
0.11225105822086334,
0.0770614743232727,
0.1731065809726715,
-0.06106057018041611,
-0.1643424928188324,
0.06019260361790657,
-4.462571450858377e-05,
0.19127249717712402,
-0.007790284231305122,
0.04001486673951149,
-0.09809137880802155,
-0.0012707151472568512,
0.04483815282583237,
-0.011481075547635555,
-0.039469778537750244,
-0.02108357846736908,
-0.04093961790204048,
0.009056289680302143,
-0.08510029315948486,
-0.09746125340461731,
-0.01274033635854721,
0.03626367449760437,
0.05676427111029625,
-0.019993629306554794,
-0.046024590730667114,
-0.014154248870909214,
-0.1482764184474945,
-0.08053221553564072,
0.2832585871219635,
0.051143892109394073,
-0.05654647573828697,
-0.17143137753009796,
-0.032137345522642136,
0.043797947466373444,
-0.1017935499548912,
-0.12039774656295776,
-0.11415858566761017,
0.07918868958950043,
0.0842810794711113,
0.20941436290740967,
0.10757363587617874,
0.03530927747488022,
0.16168299317359924,
-0.024324459955096245,
0.0076930467039346695,
-0.04151957109570503,
-0.005132479127496481,
0.0056558880023658276,
-0.04587250575423241,
-0.1041061207652092,
-0.06254979968070984,
-0.038974713534116745,
-0.09725356101989746,
-0.08765221387147903,
-0.08195389807224274,
-0.0653587281703949,
0.005351036321371794,
-0.13377496600151062,
-0.03283137455582619,
-0.018757998943328857,
0.1044066995382309,
-0.07555051892995834,
-0.08513306826353073,
0.06542692333459854,
-0.04217802360653877,
0.05071447417140007,
0.035198282450437546,
-0.011850127950310707,
0.037857528775930405,
-0.019273512065410614,
-0.04148492217063904,
0.02136455848813057,
-0.08338449150323868,
0.15726278722286224,
0.04629538580775261,
-0.0711078867316246,
-0.06936118751764297,
-0.04149826243519783,
-0.0703236386179924,
0.08617938309907913,
0.005118029657751322,
0.024317985400557518,
-0.004528484307229519,
-0.0649217888712883,
0.07844395935535431,
0.16931527853012085,
-0.02963106520473957,
-0.047565944492816925,
0.11864250898361206,
0.12458502501249313,
0.05163079872727394,
-0.07947036623954773,
-0.017128875479102135,
0.012242377735674381,
-0.037820473313331604,
-0.1295464187860489,
-0.14108061790466309,
-0.05210092291235924,
0.048642683774232864,
0.04970400407910347,
0.06868285685777664,
-0.038820911198854446,
-0.003893359564244747,
0.08570083230733871,
0.09729737043380737,
-0.0590231753885746,
-0.001889890292659402,
-0.032330721616744995,
-0.12598003447055817,
-0.11997807025909424,
-0.03767918050289154,
0.13071215152740479,
0.061941906809806824,
-0.03549297899007797,
0.042728763073682785,
0.0338607020676136,
0.05272415652871132,
0.07456521689891815,
-0.055659592151641846,
-0.01807088777422905,
0.08373095095157623,
0.07083310186862946,
0.09615641832351685,
0.023157482966780663,
-0.025903115049004555,
0.17544111609458923,
0.11200479418039322,
0.045900385826826096,
0.019202761352062225,
-0.0671900138258934,
0.015273173339664936,
0.06892072409391403,
-0.0023865438997745514,
0.028441453352570534,
-0.02739766612648964,
0.036148861050605774,
-0.03552250191569328,
0.08024068921804428,
-0.08478804677724838,
-0.08615279942750931,
-0.006012046709656715,
0.03152913227677345,
0.013464617542922497,
-0.0795731395483017,
-0.17480982840061188,
-0.04254375770688057,
0.019870249554514885,
0.042411886155605316,
0.030176978558301926,
-0.0933738574385643,
-0.038726821541786194,
-0.02562555857002735,
0.07093998044729233,
0.046854909509420395,
-0.002070755697786808,
0.09253625571727753,
-0.0333528071641922,
0.07033371925354004,
0.0669567659497261,
-0.13860519230365753,
-0.06494031846523285,
0.09557856619358063,
0.09304194897413254,
-0.0018294606124982238,
-0.05478361248970032,
0.06715638190507889,
-0.05365308001637459,
0.05744345486164093,
0.06966754794120789,
0.12152603268623352,
-0.06531916558742523,
-0.09960538148880005,
-0.18044523894786835,
0.04369635879993439,
0.11020536720752716,
0.012966610491275787,
-0.21297064423561096,
-0.08642935752868652,
-0.15100805461406708,
-0.02568553201854229,
0.028674056753516197,
-0.01562822423875332,
-0.06592082232236862,
0.02501705102622509,
0.1830029934644699,
0.17729409039020538,
-0.009370394982397556,
-0.04365962743759155,
0.022030476480722427,
0.08135976642370224,
0.11099748313426971,
-0.02950679510831833,
-0.0313926637172699,
-0.004555890336632729,
0.03849875181913376,
0.07188890129327774,
-0.003961719572544098,
0.040949828922748566,
0.06652093678712845,
0.10969195514917374,
0.011443810537457466,
0.013596844859421253,
-0.008514798246324062,
-0.042435795068740845,
0.01605394296348095,
0.08497373014688492,
0.008258594200015068,
-0.053917381912469864,
-0.13675838708877563,
-0.018561556935310364,
0.04007582366466522,
0.011089910753071308,
-0.03531486168503761,
0.009402047842741013,
0.11046870797872543,
0.09598293155431747,
-0.13666431605815887,
0.025211140513420105,
-0.04018610343337059,
-0.0019303816370666027,
0.024639738723635674,
-0.10082212835550308,
-0.15041492879390717,
-0.055852603167295456,
-0.08525452762842178,
0.043627794831991196,
-0.067958764731884,
-0.12142447382211685,
0.09310248494148254,
0.06261786073446274,
-0.13113968074321747,
-0.0670967549085617,
-0.12343515455722809,
0.15562722086906433,
0.1449897289276123,
-0.006140199489891529,
0.006299556232988834,
0.19618141651153564,
-0.05574408546090126,
0.0026409015990793705,
0.0032645135652273893,
0.02232249081134796,
0.1345137357711792,
0.013962631113827229,
-0.050892625004053116,
0.06035427376627922,
0.05987275019288063,
0.06291775405406952,
-0.03802987560629845,
-0.012390099465847015,
-0.020469022914767265,
-0.029468024149537086,
-0.07773368805646896,
0.0027908983174711466,
0.07218223065137863,
0.1299421489238739,
0.017165472730994225,
0.08012091368436813,
0.006533467676490545,
0.0179970134049654,
0.1176292821764946,
0.04903547838330269,
0.03589881211519241,
0.024784130975604057,
0.13671712577342987,
0.058213409036397934,
-0.025294998660683632,
-0.010991813614964485,
0.09835311770439148,
0.028263462707400322,
0.005408769939094782,
0.08616326004266739,
0.08146927505731583,
0.09920722246170044,
0.054092053323984146,
-0.01708499900996685,
0.09145587682723999,
0.07754799723625183,
-0.18699683248996735,
-0.15071053802967072,
0.023495707660913467,
0.07386824488639832,
0.055338844656944275,
-0.06356701999902725,
0.07900039851665497,
-0.06284275650978088,
0.042297448962926865,
-0.10277141630649567,
0.02546638622879982,
0.07885732501745224,
-0.0561475045979023,
-0.06792519986629486,
0.019024819135665894,
-0.019358577206730843,
0.025349454954266548,
0.056272026151418686,
-0.14098283648490906,
-0.024494528770446777,
-0.018334701657295227,
0.07943201810121536,
0.09334372729063034,
-0.033002421259880066,
-0.02108210325241089,
-0.021700384095311165,
0.010784591548144817,
0.15077149868011475,
0.027794823050498962,
0.00043278987868689,
-0.06743743270635605,
-0.012615762650966644,
0.16233007609844208,
0.03647501766681671,
0.013040931895375252,
0.02344108559191227,
-0.0034622950479388237,
0.03675863891839981,
0.08091218024492264,
0.033487770706415176,
0.14861468970775604,
0.0884035974740982,
0.04482175037264824,
0.014882945455610752,
0.01380886510014534,
0.04132508859038353,
0.17971275746822357,
0.05883865803480148,
-0.016184097155928612,
-0.05477045476436615,
-0.12961755692958832,
-0.09885907173156738,
-0.014973444864153862,
-0.07098937034606934,
-0.015533539466559887,
-0.05578465387225151,
-0.060964591801166534,
-0.1723947376012802,
-0.04244513064622879,
-0.08933548629283905,
0.055167537182569504,
-0.013975488021969795,
-0.03353694826364517,
0.07924550771713257,
-0.032100610435009,
0.03440764918923378,
-0.02509506419301033,
-0.13077937066555023,
0.006705408915877342,
0.06843917071819305,
-0.060608282685279846,
0.002294936217367649,
-0.10139953345060349,
-0.03594692796468735,
0.06799780577421188,
0.09808652102947235,
-0.03857911005616188,
0.044637035578489304,
-0.05895226076245308,
0.05530008301138878,
0.03003676049411297,
0.08411666005849838,
-0.027310160920023918,
0.033012211322784424,
-0.09309379011392593,
-0.08742501586675644,
-0.0928979143500328,
0.00024552951799705625,
0.04601212590932846,
-0.018115177750587463,
0.01689692959189415,
-0.031026476994156837,
-0.05149386078119278,
0.02753160521388054,
0.1012650802731514,
0.02806243672966957,
-0.019140418618917465,
-0.010713394731283188,
0.03594912961125374,
0.1061020940542221,
0.06176704913377762,
-0.021187175065279007,
-0.006704858969897032,
0.026410812512040138,
0.0366293340921402,
-0.04217662662267685,
-0.01247948408126831,
-0.00346713257022202,
0.005806065164506435,
-0.08476799726486206,
-0.053329356014728546,
-0.05040602758526802,
-0.03837624564766884,
0.002857868792489171,
-0.05721978843212128,
-0.13221441209316254,
-0.033954739570617676,
0.034148335456848145,
0.019255638122558594,
-0.008763937279582024,
-0.029853837564587593,
0.06389515101909637,
0.011099385097622871,
0.06066775694489479,
-0.003018073970451951,
0.036191098392009735,
0.1674569547176361,
0.1298934817314148,
0.13906978070735931,
-0.059132643043994904,
-0.08536427468061447,
-0.026354437693953514,
0.11408267915248871,
0.0826328843832016,
0.05599352717399597,
-0.0656743124127388,
0.04888928681612015,
0.1310923993587494,
0.036480627954006195,
0.03157476335763931,
0.04250573366880417,
0.09093526005744934,
0.0017952442867681384,
0.02765263430774212,
0.18654437363147736,
0.05857351794838905,
0.017009057104587555,
0.0007905355887487531,
0.11644282191991806,
0.11866175383329391,
-0.19800938665866852,
-0.057192713022232056,
-0.01772165112197399,
0.08601803332567215,
-0.044492051005363464,
-0.07910638302564621,
-0.06418073177337646,
0.03491760417819023,
0.056914716958999634,
-0.09268547594547272,
-0.04577801749110222,
-0.14781077206134796,
-0.1905571073293686,
-0.03973932936787605,
0.0022605194244533777,
0.0023286710493266582,
-0.04471021518111229,
-0.04635030776262283,
0.04584374278783798,
0.05756652355194092,
0.050557851791381836,
0.11807712912559509,
-0.04728640243411064,
-0.036650847643613815,
0.11119566112756729,
0.1128639280796051,
0.08394326269626617,
-0.005537067539989948,
-0.0001357719156658277,
0.16857145726680756,
0.05707262456417084,
0.046025075018405914,
-0.11091023683547974,
0.03467753902077675,
0.00974164716899395,
0.03908098116517067,
-0.04022642597556114,
-0.07301053404808044,
-0.0394149124622345,
-0.09433846920728683,
-0.019118355587124825,
-0.03900222107768059,
0.03202509880065918,
0.029395677149295807,
-0.007813679054379463,
-0.19388870894908905,
-0.14335088431835175,
-0.06718085706233978,
-0.004895188845694065,
-0.016979649662971497,
-0.04429144784808159,
-0.024912510067224503,
-0.061569493263959885,
0.022407861426472664,
-0.05407695099711418,
0.09327226877212524,
-0.0866445004940033,
-0.06720581650733948,
0.04114843159914017,
0.09106335788965225,
-0.11063116043806076,
-0.2018522173166275,
-0.048601578921079636,
0.026263577863574028,
0.016745002940297127,
-0.077445849776268,
-0.0027273427695035934,
-0.01532786712050438,
0.04284054785966873,
0.10275699198246002,
-0.03718753531575203,
-0.07365165650844574,
-0.036491330713033676,
0.0498226098716259,
0.052377067506313324,
-0.02889363467693329,
-0.010862822644412518,
0.012737240642309189,
-0.027695782482624054,
0.03386322036385536,
0.08998548239469528,
0.02142583392560482,
-0.006493508815765381,
-0.10482484847307205,
0.0033500404097139835,
0.09073258936405182,
0.0750318095088005,
-0.07549846172332764,
-0.0985911414027214,
-0.07378417253494263,
0.053294628858566284,
0.04593709856271744,
0.043916091322898865,
-0.032185789197683334,
-0.09240667521953583,
0.016458583995699883,
0.09978604316711426,
0.07629942893981934,
0.03930358588695526,
-0.006416528485715389,
0.08085451275110245,
0.0063509829342365265,
0.08409473299980164,
0.04303354397416115,
0.05092964693903923,
-0.0011589853093028069,
0.12623640894889832,
0.04831347241997719,
-0.0328187495470047,
-0.02209627255797386,
0.0833050087094307,
0.1963106244802475,
0.07289822399616241,
0.004271415993571281,
-0.03192128613591194,
-0.05602298676967621,
0.13472606241703033,
0.10664308816194534,
0.03264927864074707,
0.01978558860719204,
-0.05190960317850113,
0.029723048210144043,
-0.0320269912481308,
0.0770292803645134,
0.0419607013463974,
-0.08534036576747894,
0.019794125109910965,
-0.06917659193277359,
0.0777791365981102,
-0.014819455333054066,
0.08761142939329147,
0.12465138733386993,
0.041964348405599594,
0.020190659910440445,
-0.031849782913923264,
0.03259746730327606,
0.09649251401424408,
0.0678933784365654,
-0.053956206887960434,
-0.04365452006459236,
-0.04388381540775299,
-0.080503448843956,
-0.09783180803060532,
-0.04225635901093483,
0.04062259569764137,
0.004381553269922733,
-0.07190966606140137,
-0.035351499915122986,
0.030708128586411476,
0.0890933945775032,
0.08265863358974457,
0.010368643328547478,
-0.05422777682542801,
-0.06015244871377945,
0.021286072209477425,
0.08079847693443298,
-0.07039432972669601,
-0.14392292499542236,
0.03256126120686531,
0.08335892111063004,
-0.03134986758232117,
-0.10576698184013367,
-0.09216468036174774,
-0.06613172590732574,
-0.034919507801532745,
-0.11905248463153839,
-0.06787646561861038,
0.06833844631910324,
-0.04970047250390053,
-0.013383658602833748,
-0.2887709438800812,
0.003882009768858552,
-0.05579138174653053,
-0.03597551956772804,
-0.04152045398950577,
0.022841891273856163,
0.06583873182535172,
0.000960301433224231,
0.029427988454699516,
-0.039524007588624954,
0.12998756766319275,
0.12654243409633636,
0.01941789500415325,
-0.051995307207107544,
0.06772321462631226,
0.04020482674241066,
-0.04931902140378952,
-0.13491283357143402,
0.03694895654916763,
0.06870631873607635,
0.07053770124912262,
0.02675788104534149,
-0.03221506252884865,
0.06024836748838425,
0.06591875851154327,
0.11933919787406921,
0.04535714536905289,
-0.03996088728308678,
-0.01714232936501503,
-0.028581390157341957,
-0.06565500795841217,
-0.01443560142070055,
0.08762435615062714,
-0.007951071485877037,
0.0027561394963413477,
-0.12207271158695221,
-0.17137420177459717,
-0.013334868475794792,
-0.09651561826467514,
-0.10177835822105408,
0.08070234209299088,
0.0506158247590065,
-0.05390239506959915,
-0.03913954645395279,
-0.0701618641614914,
0.014930520206689835,
0.016247427091002464,
0.015203913673758507,
0.0600394643843174,
-0.00636941846460104,
0.006786876358091831,
-0.14425654709339142,
-0.07708387821912766,
-0.07948582619428635,
-0.03818070888519287,
-0.10548916459083557,
-0.06243426352739334,
-0.038547333329916,
-0.04037689045071602,
-0.06606053560972214,
-0.013350443914532661,
-0.08323696255683899,
-0.01840888150036335,
0.024015821516513824,
0.007781198248267174,
-0.06985781341791153,
-0.08347172290086746,
-0.11260902881622314,
-0.01578238420188427,
-0.05955035239458084,
0.018492884933948517,
0.04214627668261528,
-0.038726549595594406,
-0.092372365295887,
-0.04620750993490219,
-0.168129563331604,
-0.0431305393576622,
-0.030398694798350334,
-0.012463103979825974,
0.016135722398757935,
-0.1375342458486557,
-0.014469487592577934,
0.05835089460015297,
-0.06676559150218964,
0.14553937315940857,
0.10688384622335434,
0.06484829634428024,
0.08853431791067123,
0.102263443171978,
-0.07882630825042725,
-0.014742356725037098,
0.015394308604300022,
0.1635681390762329,
-0.037979334592819214,
-0.18850727379322052,
-0.05749916657805443,
0.013398434966802597,
0.09529422223567963,
0.011544485576450825,
-0.038865573704242706,
-0.005837707780301571,
0.05575481802225113,
0.19280017912387848,
0.023823602125048637,
-0.01930655539035797,
-0.10173642635345459,
-0.03445731848478317,
0.019419655203819275,
0.07302156835794449,
0.050230249762535095,
-0.03119341842830181,
0.016453439369797707,
-0.007872398942708969,
-0.0398036353290081,
-0.11739669740200043,
-0.009298371151089668,
0.12556993961334229,
0.014986956492066383,
-0.09367343783378601,
0.023071058094501495,
0.20525546371936798,
0.10248074680566788,
0.0035154952201992273,
0.013607059605419636,
-0.04093014821410179,
0.002333894604817033,
0.05074779689311981,
0.026417497545480728,
-0.12982694804668427,
-0.20199649035930634,
-0.05476807802915573,
-0.031799763441085815,
0.04221149906516075,
-0.001664751092903316,
-0.04900728538632393,
-0.11083327978849411,
-0.0708051323890686,
-0.012666992843151093,
0.05603119358420372,
0.13551349937915802,
-0.10370711982250214,
-0.016181575134396553,
-0.0393875427544117,
0.07312340289354324,
0.038421180099248886,
-0.04811330512166023,
-0.03518350422382355,
-0.07310278713703156,
-0.19019389152526855,
-0.05885609984397888,
0.0064399754628539085,
0.01992148533463478,
0.02777957357466221,
-0.19372853636741638,
-0.06184005364775658,
0.012178697623312473,
0.001795613788999617,
-0.14088305830955505,
-0.1419946551322937,
-0.022919921204447746,
-0.014568638987839222,
-0.047133732587099075,
0.027572160586714745,
0.034356191754341125,
0.016961153596639633,
0.015453873202204704,
0.028577327728271484,
-0.07133317738771439,
0.00850287638604641,
-0.047077205032110214,
-0.032526515424251556,
0.04052836447954178,
-0.06359466910362244,
-0.04491999372839928,
-0.07988351583480835,
0.013642704114317894,
0.04044502228498459,
-0.04432450979948044,
-0.06671570241451263,
-0.16315220296382904,
0.05119500309228897,
0.0036289573181420565,
-0.13038824498653412,
-0.12520192563533783,
-0.05605025961995125,
-0.07533463090658188,
-0.09550374001264572,
-0.15154632925987244,
-0.004901106469333172,
0.2635609805583954,
0.051574502140283585,
-0.05260370299220085,
0.04431505128741264,
0.1537332683801651,
0.23183178901672363,
-0.1279565840959549,
0.035800788551568985,
0.1623021811246872,
0.1254165917634964,
0.037893638014793396,
0.03791125491261482,
0.13099324703216553,
0.07878845185041428,
0.10374266654253006,
0.1401413530111313,
-0.07830270379781723,
-0.021767638623714447,
0.039073843508958817,
0.08852725476026535,
0.05684219300746918,
-0.001194808166474104,
-0.047544047236442566,
-0.006887937430292368,
0.016752220690250397,
-0.09469293057918549,
-0.05960601568222046,
0.08604676276445389,
0.015186602249741554,
0.0845005065202713,
-0.012781159952282906,
-0.1511646956205368,
-0.060472358018159866,
-0.08326173573732376,
0.013697448186576366,
-0.005693033337593079,
-0.0895690992474556,
-0.09106633067131042,
-0.1395236700773239,
-0.0902961939573288,
0.039235781878232956,
0.10953813791275024,
0.09672210365533829,
-0.12055613845586777,
-0.24498851597309113,
-0.1336875557899475,
0.23243537545204163,
0.0925036072731018,
-0.01612011529505253,
0.14973340928554535,
0.2594747543334961,
0.04798191785812378,
0.05319174379110336,
-0.07181117683649063,
0.02360624633729458,
0.06980957090854645,
-0.050332844257354736,
-0.10892124474048615,
0.012004183605313301,
-0.04549415782094002,
-0.027189312502741814,
0.021046966314315796,
0.01059234980493784,
-0.07378403097391129,
-0.029575977474451065,
-0.08265957236289978,
0.021956391632556915,
-0.043717626482248306,
-0.11386438459157944,
-0.08566982299089432,
0.005123203620314598,
-0.10947781801223755,
-0.11055763810873032,
-0.1269858181476593,
-0.0975886732339859,
0.015436816960573196,
0.01645316369831562,
-0.07742764800786972,
0.007759850937873125,
0.05852781981229782,
0.029403677210211754,
-0.09391805529594421,
-0.011877650395035744,
-0.0190744586288929,
-0.018019773066043854,
-0.12289252132177353,
0.0006765772122889757,
0.0007647164165973663,
-0.0002876947692129761,
-0.09561725705862045,
-0.0978877916932106,
0.14838598668575287,
0.0926235094666481,
-0.04976100102066994,
0.03894636780023575,
-0.15520276129245758,
0.095540851354599,
0.07269705832004547,
0.08383949846029282,
-0.045354072004556656,
0.04587261378765106,
-0.028522277250885963,
0.005165485665202141,
-0.00978743378072977,
0.029498489573597908,
0.03281940519809723,
-0.04743577539920807,
-0.15814460813999176,
-0.09977953135967255,
-0.12165767699480057,
-0.10255146026611328,
0.031207382678985596,
0.03561414033174515,
-0.0030942203011363745,
0.015361588448286057,
0.08932063728570938,
0.05143144726753235,
0.0722542479634285,
-0.0764235407114029,
-0.04937250167131424,
0.030515165999531746,
-0.014204110018908978,
0.034992702305316925,
0.023185839876532555,
0.03157670423388481,
0.05083256587386131,
0.058828625828027725,
0.08259560912847519,
0.040853604674339294,
-0.08712759613990784,
-0.0864456444978714,
-0.04770542308688164,
0.10680010169744492,
0.10418971627950668,
-0.006978668738156557,
-0.04962112382054329,
-0.0828772485256195,
-0.002239142544567585,
0.08246563374996185,
0.06004229187965393,
0.007446472533047199,
-0.019650932401418686,
-0.007408366538584232,
0.008511642925441265,
0.10570359975099564,
0.06473178416490555,
0.08783870935440063,
0.009964196011424065,
0.099120132625103,
0.03890819847583771,
-0.004753558896481991,
0.08812090009450912,
0.10745539516210556,
-0.012317003682255745,
0.0010229905601590872,
-0.07843483239412308,
-0.13682341575622559,
-0.09483332931995392,
0.022480236366391182,
-0.008461948484182358,
-0.12377112358808517,
-0.10073523223400116,
-0.093966543674469,
-0.11949270963668823,
-0.02636825479567051,
0.16653607785701752,
0.006586598232388496,
0.016405567526817322,
-0.0013317480916157365,
0.048313457518815994,
0.06402996182441711,
0.06844282150268555,
0.07314609736204147,
-0.016834842041134834,
0.07755451649427414,
-0.037024762481451035,
-0.0159112811088562,
0.03870673105120659,
0.05202030763030052,
-0.05895604193210602,
-0.0444861501455307,
0.026671087369322777,
0.10087506473064423,
-0.13843987882137299,
-0.16965575516223907,
-0.26351383328437805,
0.11450545489788055,
0.1290542334318161,
0.062001872807741165,
-0.1527203917503357,
-0.1164485290646553,
0.0612906888127327,
0.09117421507835388,
-0.007412992417812347,
-0.10672353208065033,
-0.02357368916273117,
-0.09189620614051819,
0.10721616446971893,
0.01805420033633709,
0.0438787043094635,
0.1846141517162323,
-0.10655421763658524,
-0.11817257851362228,
-0.006332995370030403,
-0.020095087587833405,
0.05804038420319557,
-0.09666457027196884,
-0.0724719688296318,
0.14830583333969116,
-0.029476135969161987,
-0.048749152570962906,
-0.08834774047136307,
0.1577262580394745,
0.053672611713409424,
-0.03918150067329407,
-0.014698157086968422,
-0.0056935641914606094,
0.0740128681063652,
0.15431667864322662,
-0.01460427138954401,
0.027138670906424522,
0.07956459373235703,
0.10511454939842224,
0.15876127779483795,
0.03727477043867111,
-0.027008770033717155,
0.060777079313993454,
0.14554652571678162,
0.04029657319188118,
-0.10676167905330658,
0.017685310915112495,
0.011995022185146809,
-0.050589315593242645,
-0.05859487131237984,
-0.12464947998523712,
-0.13154484331607819,
0.1031498983502388,
-0.026274116709828377,
-0.011747082695364952,
-0.04177401214838028,
-0.0987798273563385,
0.04577822983264923,
0.035073306411504745,
0.008291399106383324,
0.018611935898661613,
0.12537267804145813,
0.09228488802909851,
0.08694785833358765,
0.05212348327040672,
0.0439014695584774,
0.19075943529605865,
-0.044680915772914886,
-0.0560862198472023,
-0.030185069888830185,
0.0730431079864502,
-0.036869700998067856,
0.0214944239705801,
0.03639849275350571,
0.022649606689810753,
0.12672387063503265,
0.1383594423532486,
0.05988728255033493,
0.01178705133497715,
0.013109995983541012,
0.05402912199497223,
-0.12521731853485107,
0.1287006139755249,
0.13307663798332214,
0.32866203784942627,
0.08650831878185272,
-0.024475673213601112,
0.031074203550815582,
0.04956595599651337,
0.035611364990472794,
0.11469800770282745,
0.04687996208667755,
-0.13062718510627747,
-0.049624212086200714,
-0.0122909564524889,
-0.03159697726368904,
0.027007563039660454,
-0.07004760950803757,
-0.005190060939639807,
0.05904006212949753,
0.1227814182639122,
0.07961077243089676,
0.1317760944366455,
0.07413845509290695,
0.02106286585330963,
0.027628673240542412,
-0.03326205909252167,
0.08089959621429443,
-0.028707807883620262,
-0.017886269837617874,
0.09941590577363968,
-0.052130840718746185,
-0.17135585844516754,
-0.046183742582798004,
-0.12242951989173889,
-0.08016935735940933,
0.04754386097192764,
-0.018171537667512894,
0.1223563626408577,
0.08621057122945786,
0.0021152023691684008,
0.15636593103408813,
-0.06074509397149086,
-0.05751483142375946,
-0.038604751229286194,
-0.0021624178625643253,
-0.0358070433139801,
0.00829960498958826,
-0.01961800828576088,
-0.06122838705778122,
-0.05245974287390709,
-0.0021031592041254044,
0.04347313195466995,
0.023298295214772224,
0.0557333305478096,
-0.0029934169724583626,
-0.054084401577711105,
0.020746326074004173,
-0.025863157585263252,
0.042434729635715485,
0.006272712256759405,
-0.034073516726493835,
-0.01189672201871872,
-0.025570349767804146,
0.07825049757957458,
0.12491607666015625,
0.09113037586212158,
0.025311904028058052,
0.0058790841139853,
-0.001212314236909151,
0.02790270932018757,
0.09641338884830475,
-0.0063505456782877445,
0.026731913909316063,
-0.07225847989320755,
-0.0028298350516706705,
0.04784202575683594,
0.04088019207119942,
0.07481138408184052,
-0.08016226440668106,
-0.13675904273986816,
-0.06862743943929672,
0.035083554685115814,
0.027942176908254623,
-0.06370778381824493,
-0.18854393064975739,
-0.19785664975643158,
0.03876097500324249,
0.07823599874973297,
0.0291459783911705,
-0.013441433198750019,
0.018018173053860664,
0.01646147109568119,
-0.01694357767701149,
-0.022041980177164078,
0.08838856965303421,
0.10160665959119797,
-0.0579555369913578,
0.03289187699556351,
-0.03709542751312256,
0.06189388409256935,
0.02501719631254673,
0.05039989575743675,
-0.01506787445396185,
0.03817584738135338,
0.07804566621780396,
0.03644043579697609,
0.055946122854948044,
0.09743750840425491,
-0.05467614158987999,
-0.0346614345908165,
-0.09365264326334,
-0.016410037875175476,
-0.061291132122278214,
-0.030715886503458023,
-0.0030025357846170664,
-0.025164684280753136,
0.0872294008731842,
0.01669420674443245,
-0.05444922298192978,
0.0006881344015710056,
0.05978761613368988,
0.000775470572989434,
0.0237716231495142,
0.06619800627231598,
0.08509685844182968,
0.17048975825309753,
0.049933139234781265,
0.04044768959283829,
0.08018624782562256,
0.018448952585458755,
0.07167571783065796,
0.11036604642868042,
0.10221671313047409,
0.0771351009607315,
0.04909244924783707,
-0.21617074310779572,
-0.08486226201057434,
-0.04017770662903786,
-0.11522610485553741,
-0.18514136970043182,
-0.23439742624759674,
-0.08434740453958511,
-0.06011210381984711,
-0.17976732552051544,
-0.06638896465301514,
-0.10414428263902664,
-0.05250667780637741,
-0.02931872382760048,
-0.08097799867391586,
0.0074658263474702835,
-0.11567670851945877,
0.09539452940225601,
0.038488686084747314,
0.010358210653066635,
-0.002974825445562601,
-0.04336674138903618,
0.024011710658669472,
-0.0060036987997591496,
0.0025453069247305393,
0.1105508953332901,
0.14167293906211853,
0.057298578321933746,
-0.08175274729728699,
0.10853959619998932,
0.003941535484045744,
0.056082453578710556,
0.061856649816036224,
0.045902352780103683,
0.04098239168524742,
0.02598598226904869,
0.13058729469776154,
0.07771781086921692,
0.0678943321108818,
0.11076224595308304,
0.11284971237182617,
0.05724319443106651,
-0.1056775227189064,
-0.1188371405005455,
0.010514467023313046,
-0.013184753246605396,
-7.933707820484415e-05,
-0.20602843165397644,
-0.12272480130195618,
-0.07189597934484482,
-0.12233263999223709,
-0.20490089058876038,
0.01537124440073967,
-0.0692317932844162,
-0.04651171714067459,
-0.07105941325426102,
0.04326653480529785,
0.055815644562244415,
0.037579938769340515,
-0.00919318851083517,
0.04327891394495964,
0.07174175977706909,
0.04692723602056503,
-0.05491671711206436,
0.015368783846497536,
-0.005112485494464636,
0.08990184962749481,
-0.0750875398516655,
0.031053990125656128,
0.0010803753975778818,
0.047089651226997375,
0.09294359385967255,
0.22351986169815063,
0.10262538492679596,
-0.04051614925265312,
-0.040311381220817566,
-0.008973575197160244,
-0.06425841897726059,
-0.026624105870723724,
-0.10635001957416534,
-0.1591370701789856,
-0.07324059307575226,
0.028952600434422493,
-0.030912723392248154,
-0.06257735192775726,
0.03319971263408661,
0.04408614709973335,
-0.12396624684333801,
-0.05151936784386635,
-0.11714562028646469,
0.07414965331554413,
0.07794699817895889,
-0.20452286303043365,
0.003877694485709071,
0.09421954303979874,
0.0006639599450863898,
0.06270716339349747,
-0.016492482274770737,
-0.07143106311559677,
0.06795835494995117,
0.03565944731235504,
-0.05530659109354019,
0.07571808248758316,
-0.0966750979423523,
-0.012993701733648777,
-0.050576020032167435,
-0.14929167926311493,
-0.09473303705453873,
0.08485759794712067,
0.05562198907136917,
0.15913642942905426,
0.09936940670013428,
-0.016326777637004852,
0.010835015214979649,
-0.06782947480678558,
-0.0130960363894701,
0.026926668360829353,
0.025521108880639076,
-0.042603716254234314,
-0.015995271503925323,
-0.06421209126710892,
0.010200233198702335,
-0.04744906350970268,
-0.06231865659356117,
0.035071928054094315,
-0.09278542548418045,
0.004458269570022821,
-0.00803413987159729,
0.04830918833613396,
0.018188951537013054,
-0.035730812698602676,
-5.9427518863230944e-05,
-0.005501850973814726,
-0.02979760617017746,
-0.029397789388895035,
-0.04504067450761795,
0.0006252031307667494,
0.03267112746834755,
0.04349789023399353,
-0.05113597959280014,
-0.05573447048664093,
-0.08179184049367905,
0.11073198914527893,
0.10177963227033615,
0.04670625925064087,
-0.023647118359804153,
-0.005250014830380678,
-0.09934645146131516,
0.03453752398490906,
0.01001330092549324,
0.04193335771560669,
0.017043180763721466,
-0.04446523264050484,
0.08184594660997391,
0.17779210209846497,
0.01726885512471199,
0.04494254291057587,
-0.025702254846692085,
0.01785290800035,
-0.01764529198408127,
0.01976003125309944,
0.035913173109292984,
-0.012958900071680546,
0.0674348995089531,
0.018030986189842224,
0.03364355117082596,
-0.10870193690061569,
0.030730172991752625,
0.060118500143289566,
-0.15274640917778015,
0.015098723582923412,
-0.018365830183029175,
-0.04459412768483162,
0.03837703540921211,
-0.08179689198732376,
0.020062033087015152,
-0.031195957213640213,
-0.044643010944128036,
0.037190813571214676,
0.08206567168235779,
0.02273496240377426,
0.04971415176987648,
-0.012871314771473408,
-0.09840867668390274,
0.10638809204101562,
0.16727764904499054,
0.16399765014648438,
-0.11131796985864639,
-0.11548477411270142,
-0.06660362333059311,
0.002522954950109124,
0.08400770276784897,
0.00498459255322814,
-0.0329037606716156,
0.04503233730792999,
-0.048451103270053864,
-0.011320609599351883,
0.15708304941654205,
0.010913202539086342,
-0.07536730170249939,
-0.037244461476802826,
-0.1378764808177948,
0.0861860141158104,
0.015102442353963852,
-0.02309321239590645,
-0.11423926055431366,
-0.12268509715795517,
0.0002870113530661911,
-0.0015406007878482342,
-0.17095720767974854,
-0.06473636627197266,
-0.0372595340013504,
-0.14148114621639252,
-0.0335867740213871,
-0.024713896214962006,
0.05560075119137764,
0.016110707074403763,
-0.06695345044136047,
-0.0046611204743385315,
-0.0835619643330574,
-0.017812499776482582,
0.02278362773358822,
0.0080448342487216,
-0.02488521859049797,
0.014370465651154518,
0.026617826893925667,
0.007197426166385412,
-0.01335755456238985,
0.052631814032793045,
0.02375553548336029,
-0.014865649864077568,
-0.06533796340227127,
0.027186518535017967,
0.011045277118682861,
0.10008949041366577,
0.12137539684772491,
0.11957300454378128,
0.02300656959414482,
0.09419993311166763,
-0.032916586846113205,
0.02881816402077675,
0.03937677666544914,
-0.05794324725866318,
-0.05116329342126846,
0.014630048535764217,
-0.07947292178869247,
-0.1498498171567917,
-0.11884423345327377,
-0.13535408675670624,
-0.006151746958494186,
-0.12877263128757477,
-0.17318229377269745,
0.06612425297498703,
0.045432332903146744,
-0.008541958406567574,
-0.05060439184308052,
0.08178164809942245,
-0.0015377216041088104,
0.030159100890159607,
0.014752443879842758,
-0.0539480485022068,
-0.059180114418268204,
-0.08379395306110382,
0.007905982434749603,
-0.05969788134098053,
-0.13822323083877563,
-0.0007787724025547504,
-0.1069968119263649,
-0.14861689507961273,
-0.14166590571403503,
-0.11499927192926407,
0.027567876502871513,
0.09891188889741898,
0.048768509179353714,
0.10858483612537384,
0.09762194752693176,
0.007065019570291042,
0.11576244235038757,
0.06615959107875824,
0.08666641265153885,
-0.04575264826416969,
-0.018512163311243057,
0.04781929403543472,
0.12909972667694092,
-0.04384257644414902,
-0.004005091730505228,
-0.037788186222314835,
-0.15388718247413635,
-0.08865606039762497,
-0.09984608739614487,
0.025448009371757507,
0.06265280395746231,
0.08306514471769333,
0.05443147197365761,
0.05838033929467201,
-0.03907579928636551,
-0.0018133941339328885,
0.003021637909114361,
-0.0032099338714033365,
-0.01667364127933979,
0.0040044765919446945,
-0.038711629807949066,
0.009204914793372154,
-0.010721910744905472,
-0.013959130272269249,
-0.12508806586265564,
0.052443936467170715,
-0.004280795808881521,
-0.01847270503640175,
0.026874937117099762,
0.027448073029518127,
-0.054684340953826904,
-0.026469696313142776,
-0.03418208286166191,
0.012593681924045086,
0.03979362174868584,
-0.02241627499461174,
0.03805618733167648,
-0.0369417741894722,
-0.08984141051769257,
0.016088930889964104,
-0.03833884000778198,
-0.03572017699480057,
-0.1346832811832428,
-0.027614574879407883,
0.008508086204528809,
-0.0715111494064331,
-0.044601909816265106,
0.017749080434441566,
0.07388778775930405,
0.06800036132335663,
-0.07405073195695877,
0.12267491221427917,
0.09141623973846436,
0.05119454488158226,
0.07434554398059845,
-0.05177601799368858,
-0.094750314950943,
-0.13142122328281403,
-0.047876134514808655,
0.18991835415363312,
0.012160016223788261,
0.12317401170730591,
-0.013289625756442547,
0.03177385404706001,
-0.05323350429534912,
0.11785239726305008,
0.05524164065718651,
0.07107599824666977,
-0.008665897883474827,
-0.006327883806079626,
0.014070482924580574,
-0.051472172141075134,
0.121778704226017,
-0.008696036413311958,
-0.07329244911670685,
-0.018142523244023323,
0.06650181859731674,
0.029517604038119316,
0.0108978021889925,
-0.07398900389671326,
-0.0949941948056221,
-0.05160951241850853,
-0.002056712284684181,
0.10958221554756165,
0.056057266891002655,
0.048554953187704086,
0.05895181745290756,
-0.05134288966655731,
0.018344813957810402,
0.006321619264781475,
-0.04800805076956749,
-0.045519012957811356,
-0.09058122336864471,
0.010036063380539417,
0.06505288928747177,
0.04941664636135101,
-0.08330489695072174,
0.031100325286388397,
0.06406723707914352,
0.04927830025553703,
-0.05769575759768486,
0.03098602406680584,
0.14895310997962952,
-0.02973952516913414,
0.047415707260370255,
-0.0473366342484951,
0.10491219907999039,
0.19635099172592163,
0.14245536923408508,
-0.007494157180190086,
0.0268173199146986,
-0.010523253120481968,
-0.003971313592046499,
-0.007517156656831503,
0.07655001431703568,
-0.001141248387284577,
-0.0023681912571191788,
-0.07335307449102402,
-0.10593882203102112,
-0.004896238446235657,
0.0723230317234993,
-0.11409150063991547,
-0.15719127655029297,
-0.08352028578519821,
-0.06194322556257248,
-0.03745025023818016,
-0.028443994000554085,
-0.056255850940942764,
0.08301421254873276,
0.10630296915769577,
-0.00500179547816515,
-0.0320650190114975,
0.006017398554831743,
-0.023316141217947006,
-0.014038292691111565,
-0.007452751509845257,
-0.006189926527440548,
0.04660431295633316,
0.001387095544487238,
-0.01878778450191021,
-0.002400222234427929,
-0.021033616736531258,
-0.07705731689929962,
-0.04800896346569061,
-0.005888662301003933,
-0.04398541525006294,
-0.11899691075086594,
-0.16607055068016052,
0.059629958122968674,
0.11421481519937515,
-0.08668218553066254,
-0.05023373290896416,
-0.049601148813962936,
-0.06349331140518188,
-0.028959237039089203,
-0.13733282685279846,
-0.06326000392436981,
-0.10411021113395691,
-0.06025997921824455,
0.05277823656797409,
-0.017399774864315987,
0.01773337461054325,
0.06368455290794373,
0.10624085366725922,
0.049437545239925385,
-0.02734789438545704,
0.03694834187626839,
0.06117566302418709,
-0.12000244855880737,
0.041389573365449905,
0.012193551287055016,
0.11392045021057129,
0.09548104554414749,
0.007521710358560085,
-0.04520318657159805,
-0.055882517248392105,
0.04262145981192589,
0.06543633341789246,
0.04832503944635391,
-0.11153025925159454,
0.014896106906235218,
0.12194550037384033,
0.11806333065032959,
0.03650272265076637,
-0.030034976080060005,
-0.02181890793144703,
-0.09288813918828964,
-0.13489799201488495,
-0.08757194876670837,
0.022524042055010796,
-0.04417387768626213,
-0.06184219568967819,
-0.08305533975362778,
-0.07314983755350113,
-0.011366698890924454,
-0.042299214750528336,
-0.07112450897693634,
-0.1744450032711029,
-0.010343799367547035,
0.04886073246598244,
-0.07268863171339035,
-0.07042469829320908,
-0.0154570946469903,
-0.022667989134788513,
-0.008606974966824055,
-0.015563503839075565,
0.10118773579597473,
0.13446810841560364,
0.06949393451213837,
-0.08196702599525452,
0.06891047209501266,
0.2406129539012909,
0.12377341836690903,
0.11153636872768402,
0.029909271746873856,
-0.0036614839918911457,
0.07639439404010773,
0.00241615972481668,
0.10650062561035156,
-0.04291928932070732,
-0.0009063131874427199,
-0.057460881769657135,
0.031555164605379105,
-0.05352253466844559,
0.06631779670715332,
0.007341107353568077,
-0.03355623036623001,
-0.05591511353850365,
-0.025203974917531013,
-0.04409147426486015,
-0.060265928506851196,
-0.014380223117768764,
0.0336020402610302,
0.01571108214557171,
0.06051765754818916,
0.018128827214241028,
-0.04551905393600464,
0.041554901748895645,
0.09239490330219269,
-0.1142268180847168,
-0.013359767384827137,
-0.05192714184522629,
-0.043849069625139236,
-0.0210848618298769,
0.013770495541393757,
-0.08463537693023682,
-0.03587744012475014,
0.09902269393205643,
0.015244266018271446,
-0.018223633989691734,
0.05499184504151344,
0.016404274851083755,
-0.16587452590465546,
0.10124935954809189,
0.012013519182801247,
-0.07721543312072754,
-0.13614654541015625,
-0.11423131823539734,
0.01637701876461506,
0.07699672132730484,
0.07503563910722733,
-0.01795644313097,
-0.04584360122680664,
0.13222593069076538,
0.10979541391134262,
-0.050471704453229904,
-0.11055898666381836,
-0.02381753921508789,
0.035604629665613174,
0.041807446628808975,
-0.0690261721611023,
-0.0770275816321373,
-0.02346544712781906,
0.12317807227373123,
0.07789915055036545,
-0.10204456001520157,
0.08449460566043854,
-0.052714090794324875,
-0.006896915379911661,
-0.07573505491018295,
-0.07797256857156754,
-0.05980649217963219,
-0.19951100647449493,
0.01720990426838398,
0.13319505751132965,
0.08927091211080551,
0.030451713129878044,
0.04524126648902893,
0.0858452171087265,
0.09981628507375717,
0.018526209518313408,
-0.0828380212187767,
-0.18596287071704865,
0.015293301083147526,
0.04006519541144371,
0.0395478829741478,
-0.0029010821599513292,
-0.10245102643966675,
0.07497060298919678,
0.04816432669758797,
0.00803079642355442,
-0.00034880690509453416,
0.019834890961647034,
0.14615470170974731,
0.09247349202632904,
0.031682658940553665,
0.18280471861362457,
0.2415303885936737,
0.15678192675113678,
0.14011916518211365,
-0.0010710821952670813,
0.046072397381067276,
0.09569216519594193,
0.03164152801036835,
0.0900091826915741,
0.0024145646020770073,
-0.07969846576452255,
0.062228698283433914,
-0.04484960809350014,
0.032673876732587814,
-0.10575247555971146,
-0.03641853109002113,
0.1006266251206398,
-0.033642783761024475,
-0.047650329768657684,
-0.08967984467744827,
-0.05523783341050148,
-0.1238161101937294,
-0.010656669735908508,
-0.0198208075016737,
0.07024944573640823,
0.037734489887952805,
0.0959153026342392,
0.09937067329883575,
0.018815435469150543,
0.07752590626478195,
0.13105565309524536,
0.020842935889959335,
0.08258002251386642,
-0.06969495117664337,
-0.005715564358979464,
0.09118372201919556,
0.07401689141988754,
-0.015012427233159542,
0.08079935610294342,
0.016153866425156593,
-0.029668208211660385,
0.14325109124183655,
0.012060710228979588,
0.05015892907977104,
0.005030135624110699,
0.11646349728107452,
0.04509617015719414,
0.0023491450119763613,
0.018620671704411507,
0.0015717693604528904,
-0.052424632012844086,
-0.035360440611839294,
0.020955724641680717,
-0.0720011293888092,
0.03456171974539757,
-0.09850146621465683,
0.021877961233258247,
-0.018268242478370667,
-0.04409901797771454,
0.03778230771422386,
0.042199086397886276,
0.09272399544715881,
0.05604720860719681,
-0.033111948519945145,
0.016245780512690544,
-0.048091381788253784,
0.03392256423830986,
-0.07143019884824753,
-0.05717923864722252,
-0.08601334691047668,
-0.034999385476112366,
0.009808233007788658,
-0.002374054864048958,
0.027416562661528587,
-0.03060443326830864,
-0.0055759502574801445,
0.07657497376203537,
0.13450708985328674,
0.18274809420108795,
0.05979450047016144,
0.11608979105949402,
0.12253963202238083,
0.1942286193370819,
0.12346310168504715,
0.009185876697301865,
0.10699877887964249,
0.05574006214737892,
0.0745704248547554,
0.120972640812397,
-0.04941576346755028,
0.02327939122915268,
0.03829823061823845,
0.023017169907689095,
-0.017620081081986427,
0.007196947932243347,
-0.03864741697907448,
0.09893405437469482,
0.04024996981024742,
0.1728588044643402,
0.04823906719684601,
0.08080068975687027,
-0.05037291347980499,
-0.09115646779537201,
-0.05183342844247818,
0.011591453105211258,
-0.0029332831036299467,
-0.09394127875566483,
0.004257167223840952,
0.039632126688957214,
-0.1497233510017395,
-0.15702353417873383,
0.10131826996803284,
-0.01773598976433277,
0.03326668217778206,
-0.04226994886994362,
-0.021238259971141815,
0.05267351120710373,
-0.10762050747871399,
-0.06536146998405457,
0.13824041187763214,
-0.012216557748615742,
-0.022023573517799377,
0.009617793373763561,
0.004778270144015551,
-0.03562013804912567,
-0.010850101709365845,
0.007162455469369888,
0.07035491615533829,
0.0056290715001523495,
0.019846709445118904,
0.04969272390007973,
0.06966371834278107,
0.16021029651165009,
0.01091692689806223,
-0.02898937091231346,
-0.03410531207919121,
-0.04092654213309288,
0.1309039145708084,
0.028976237401366234,
0.0004017245664726943,
-0.013401998206973076,
-0.03991430252790451,
0.07023352384567261,
0.14856691658496857,
0.09788575768470764,
0.04480764642357826,
0.02788376249372959,
-0.008592155762016773,
0.07687556743621826,
0.11042878031730652,
0.006142244208604097,
0.049101464450359344,
0.04096116125583649,
0.13162007927894592,
0.02295411378145218,
-0.08926715701818466,
-0.10042251646518707,
-0.12018105387687683,
-0.11826419085264206,
0.016978943720459938,
0.02415451779961586,
0.07717468589544296,
-0.13474692404270172,
0.004183951299637556,
-0.11448630690574646,
0.001034134067595005,
0.08425839990377426,
-0.09078017622232437,
0.05129752680659294,
-0.05173328146338463,
0.034296292811632156,
-0.03681511804461479,
0.025667259469628334,
0.09601949155330658,
0.09265398234128952,
-0.08829976618289948,
-0.05951870605349541,
0.015481192618608475,
0.0548272505402565,
0.07223842293024063,
0.09302560240030289,
-0.009638233110308647,
0.15126864612102509,
-0.003955775406211615,
0.004563247784972191,
0.03229011222720146,
0.0955323874950409,
-0.039985354989767075,
0.035667192190885544,
-0.05937381461262703,
-0.012875636108219624,
0.025632793083786964,
0.08196186274290085,
0.01729748584330082,
-0.05202024430036545,
0.08319094032049179,
0.03400588408112526,
-0.053691964596509933,
0.08809997886419296,
0.039694298058748245,
-0.040365155786275864,
0.11161190271377563,
0.013984992168843746,
0.12572897970676422,
0.16311967372894287,
0.02809450775384903,
-0.08048910647630692,
-0.11649342626333237,
0.07978713512420654,
0.0009237273479811847,
-0.06137210130691528,
0.043351415544748306,
-0.09984232485294342,
-0.11709005385637283,
-0.19555921852588654,
-0.10361367464065552,
-0.08475213497877121,
-0.04691798612475395,
-0.11663515865802765,
-0.2102673053741455,
-0.062961645424366,
0.03576191887259483,
0.06942057609558105,
-0.03902439773082733,
-0.05492208153009415,
-0.03343193605542183,
0.020309966057538986,
0.030363980680704117,
-0.01189440954476595,
-0.02889801375567913,
0.031847868114709854,
0.1198732927441597,
0.07694870233535767,
0.04749675467610359,
0.0013117589987814426,
-0.11164698749780655,
-0.09346392750740051,
0.08669324964284897,
0.1309490203857422,
0.10772813111543655,
-0.03994119167327881,
-0.006162595935165882,
0.03522332012653351,
0.013353623449802399,
-0.0029076975770294666,
0.054245613515377045,
0.07634413242340088,
0.017353588715195656,
0.02025015279650688,
0.1432282030582428,
0.01929525099694729,
0.017688214778900146,
0.07777388393878937,
0.2645952105522156,
0.12235105782747269,
-0.1621779352426529,
-0.08480056375265121,
0.06939894706010818,
0.15754546225070953,
-0.021944265812635422,
-0.2057352513074875,
-0.06083255261182785,
-0.04301798716187477,
-0.08129912614822388,
-0.1604384183883667,
-0.043276190757751465,
-0.001417941995896399,
-0.01027524471282959,
0.007223265711218119,
-0.059773121029138565,
-0.016417065635323524,
0.06238411366939545,
-0.09869591146707535,
0.026651935651898384,
0.020440030843019485,
0.0465858094394207,
0.0914572924375534,
-0.01910187304019928,
0.0275325458496809,
0.02909984439611435,
0.011756970547139645,
-0.05210151895880699,
-0.024654414504766464,
-0.0195144172757864,
0.1656048744916916,
0.10217484086751938,
0.03849870339035988,
-0.13808634877204895,
0.009213646873831749,
0.02786918915808201,
-0.012778793461620808,
-0.04935934394598007,
-0.023318525403738022,
-0.0587649941444397,
-0.10956048220396042,
-0.02451510913670063,
-0.005200539715588093,
-0.004969487898051739,
0.056072402745485306,
0.07382466644048691,
-0.16345474123954773,
0.03207261860370636,
-0.05174144357442856,
0.09976257383823395,
0.12246566265821457,
-0.062449097633361816,
0.03839096799492836,
0.06742408871650696,
0.031717393547296524,
0.042436689138412476,
0.09502050280570984,
-0.10638386011123657,
-0.01726914569735527,
-0.008149774745106697,
-0.06258942186832428,
-0.12723757326602936,
-0.11098325252532959,
-0.04156564548611641,
-0.026240020990371704,
-0.042451243847608566,
-0.07891150563955307,
0.07997981458902359,
0.05075269937515259,
0.1713453084230423,
0.023343926295638084,
-0.07574773579835892,
0.046130307018756866,
-0.05197744816541672,
0.07795951515436172,
-0.004456924274563789,
0.04359045624732971,
-0.03873041644692421,
-0.019347645342350006,
-0.08809694647789001,
0.021804220974445343,
-0.013340168632566929,
-0.05116581916809082,
-0.021228818222880363,
-0.015205465257167816,
0.034988559782505035,
0.04204850271344185,
0.08159586042165756,
-0.09601658582687378,
-0.03163112699985504,
0.058854840695858,
0.06878277659416199,
-0.09758149832487106,
0.050680939108133316,
0.08769038319587708,
-0.06459689140319824,
0.0036554390098899603,
-0.07008374482393265,
0.03982561454176903,
-0.14791704714298248,
-0.12041374295949936,
0.10896805673837662,
-0.003771414514631033,
0.22871918976306915,
-0.04821385443210602,
0.0344700887799263,
-0.05815551429986954,
0.06988207250833511,
0.07192947715520859,
-0.06850200146436691,
0.05828484147787094,
0.05630596727132797,
0.1073346734046936,
0.05645482614636421,
0.04396429285407066,
0.03410444036126137,
0.07635411620140076,
0.08497241139411926,
0.22182375192642212,
0.13343840837478638,
0.05889653414487839,
-0.03313543274998665,
0.006650086957961321,
-0.01183460745960474,
0.0794469565153122,
-0.0814519077539444,
0.05230367183685303,
0.07991611212491989,
0.05492497608065605,
0.010146758519113064,
-0.1219748854637146,
0.030950631946325302,
0.038350045680999756,
0.05896001309156418,
-0.041325539350509644,
0.04118406027555466,
-0.07223757356405258,
0.029103262349963188,
0.04077886417508125,
0.01572180911898613,
0.0017179250717163086,
-0.0675041675567627,
-0.10650459676980972,
0.07498226314783096,
0.12572965025901794,
0.21268899738788605,
-0.02262863703072071,
-0.03158870339393616,
-0.030178839340806007,
0.06052318587899208,
0.19847515225410461,
-0.03532418608665466,
0.010309936478734016,
-0.0417875200510025,
-0.07477232813835144,
0.00041179111576639116,
0.02911103144288063,
-0.12316997349262238,
-0.17192886769771576,
-0.06880760192871094,
-0.11354938894510269,
-0.034474972635507584,
-0.04442989081144333,
-0.003928284626454115,
-0.0716564729809761,
-0.012298813089728355,
-0.01010531559586525,
-0.11412201821804047,
0.02877558022737503,
-0.04019259288907051,
-0.011624258011579514,
-0.18054893612861633,
0.008563103154301643,
0.031869661062955856,
0.0790531113743782,
-0.0318932868540287,
-0.01594582386314869,
0.07369858026504517,
0.09608127176761627,
0.03497927263379097,
0.014539409428834915,
0.030293263494968414,
-0.032517123967409134,
0.037565283477306366,
0.02307269535958767,
0.05446673929691315,
-0.09798493981361389,
-0.013991937972605228,
-0.054299402981996536,
0.10992655158042908,
0.029761960729956627,
0.024388449266552925,
-0.035144343972206116,
0.06760168820619583,
0.09766793251037598,
0.16773006319999695,
0.07148933410644531,
0.02753065526485443,
0.005045445170253515,
0.0848800465464592,
0.07142547518014908,
-0.12890319526195526,
-0.048249371349811554,
0.009943531826138496,
-0.06256052851676941,
-0.1498202532529831,
-0.13551458716392517,
-0.12238939851522446,
0.056462861597537994,
-0.11672692745923996,
-0.13013461232185364,
0.08648323267698288,
0.02882790006697178,
-0.0684577077627182,
-0.02319341152906418,
-0.038100991398096085,
0.031017564237117767,
0.003600125899538398,
0.02146538719534874,
0.05181131139397621,
-0.05344078317284584,
0.006144513841718435,
-0.10155291110277176,
0.027196647599339485,
-0.049800239503383636,
0.09153474122285843,
-0.07292664051055908,
-0.040188971906900406,
0.007427815813571215,
-0.05404486879706383,
0.012718078680336475,
0.04568963870406151,
-0.009985577315092087,
0.046097371727228165,
0.015458526089787483,
-0.009280250407755375,
-0.004648461937904358,
-0.05092880502343178,
0.008833173662424088,
-0.06564930826425552,
-0.08318381756544113,
-0.0472610704600811,
-0.07427801936864853,
0.034028466790914536,
0.020012859255075455,
0.08302687108516693,
0.1031801849603653,
0.017116423696279526,
0.06064651533961296,
-0.00971780065447092,
-0.06796253472566605,
0.13298527896404266,
-0.013530390337109566,
0.07652972638607025,
0.09693598002195358,
-0.030081836506724358,
-0.04325152188539505,
-0.14501704275608063,
-0.0983065813779831,
0.004644263070076704,
0.050675176084041595,
-0.005757173988968134,
0.07037133723497391,
0.17453047633171082,
0.04521753266453743,
0.05925236642360687,
-0.01437762938439846,
0.016916189342737198,
-0.029605716466903687,
-0.08606597781181335,
-0.058277904987335205,
-0.040164023637771606,
0.05950382724404335,
-0.07783851027488708,
-0.034834615886211395,
-0.018555939197540283,
0.011049826629459858,
-0.0611465647816658,
-0.05339723080396652,
0.06523870676755905,
0.010232547298073769,
0.03966086357831955,
-0.021116066724061966,
0.0028813485987484455,
0.013655527494847775,
-0.08602487295866013,
-0.08577185869216919,
0.017826268449425697,
0.058913249522447586,
0.10473126173019409,
-0.01186981238424778,
0.01654979959130287,
-0.017523493617773056,
0.026263542473316193,
0.05162946134805679,
0.013290214352309704,
-0.009884950704872608,
0.03577671945095062,
-0.050652600824832916,
-0.08988239616155624,
0.03525002300739288,
0.08950459957122803,
0.02598986215889454,
-0.07027336955070496,
-0.09426189959049225,
0.08302971720695496,
-0.026708196848630905,
-0.058930397033691406,
0.05233427509665489,
-0.22373884916305542,
-0.038874197751283646,
-0.0546424463391304,
0.10271613299846649,
0.11513351649045944,
-0.03963925316929817,
0.11152997612953186,
0.05667777359485626,
0.022596120834350586,
-0.007254297845065594,
0.042495761066675186,
0.06407133489847183,
-0.046997006982564926,
-0.07453218102455139,
-0.11393202096223831,
-0.019054144620895386,
-0.05878749489784241,
0.05929652228951454,
-0.021577151492238045,
-0.06318894773721695,
0.0527183897793293,
-0.0007762074819765985,
-0.012443291954696178,
0.01243160292506218,
0.028696410357952118,
0.13515475392341614,
-0.08470549434423447,
-0.04084501788020134,
-0.12525103986263275,
-0.13515406847000122,
-0.01590190827846527,
0.004908745642751455,
0.053093310445547104,
-5.388977297116071e-05,
-0.006244628690183163,
-0.03392128273844719,
0.07244841754436493,
0.006214400753378868,
0.02426925115287304,
-0.016537826508283615,
-0.016121143475174904,
0.12504175305366516,
0.13082724809646606,
0.054961495101451874,
0.06018014997243881,
0.010904689319431782,
-0.07353553175926208,
0.15223796665668488,
0.15041209757328033,
0.047357846051454544,
0.029296180233359337,
-0.046968501061201096,
-0.1434987485408783,
-0.13227955996990204,
-0.15434299409389496,
-0.16369108855724335,
-0.0853847786784172,
-0.10270220786333084,
0.009005177766084671,
-0.07192498445510864,
-0.056150875985622406,
-0.13391615450382233,
-0.027909869328141212,
0.06902024149894714,
-0.04058825969696045,
0.056123998016119,
-0.11163322627544403,
0.024749640375375748,
0.027629537507891655,
-0.09489021450281143,
0.10790741443634033,
-0.026204194873571396,
-0.013491980731487274,
0.022994669154286385,
0.0423305369913578,
0.19077688455581665,
0.03782914578914642,
-0.09623072296380997,
-0.06804618239402771,
0.1241530328989029,
0.14738431572914124,
0.09496594965457916,
0.047413505613803864,
0.041562601923942566,
0.040541864931583405,
0.037519752979278564,
0.01213838066905737,
0.033083006739616394,
-0.04079195484519005,
-0.017842356115579605,
0.037094779312610626,
-0.013441276736557484,
-0.09986299276351929,
-0.0542568676173687,
-0.09422934800386429,
0.009212316013872623,
0.05325305834412575,
-0.1322639137506485,
-0.13739120960235596,
0.011172262020409107,
-0.021126894280314445,
-0.026508061215281487,
0.06680288910865784,
-0.011247054673731327,
-0.16767871379852295,
-0.08880418539047241,
0.08860953152179718,
0.0843871533870697,
0.05495300516486168,
0.07548177987337112,
-0.04162636771798134,
0.0679621696472168,
0.04359623044729233,
-0.034106284379959106,
-0.021306026726961136,
-0.11977504938840866,
0.06750477850437164,
0.011350150220096111,
0.057898759841918945,
-0.09732470661401749,
0.00037077857996337116,
0.020991632714867592,
0.20792488753795624,
0.06309399753808975,
-0.06217540428042412,
-0.03006640449166298,
0.0011980175040662289,
-0.030106663703918457,
-0.08011612296104431,
-0.14032647013664246,
-0.10760969668626785,
0.007020081393420696,
-0.012005406431853771,
0.0012637519976124167,
-0.04067711904644966,
0.07352010905742645,
0.10037673264741898,
-0.0430951751768589,
0.03296051546931267,
-0.030423644930124283,
0.09867359697818756,
0.11858473718166351,
-0.12908968329429626,
0.044607240706682205,
0.1760004311800003,
0.018993625417351723,
-0.04392225667834282,
0.07027045637369156,
-0.025706321001052856,
0.04149547219276428,
0.03785126656293869,
-0.0034738166723400354,
0.1353888362646103,
-0.011064433492720127,
0.022022951394319534,
0.00019589817384257913,
-0.1022489070892334,
-0.05313000828027725,
-0.04440660402178764,
0.006760393735021353,
0.14019174873828888,
0.08377160876989365,
-0.04170488193631172,
0.016006451100111008,
-0.060519684106111526,
-0.08850125968456268,
0.0951838567852974,
-0.03844178840517998,
-0.07006599009037018,
-0.0027392064221203327,
-0.10485021024942398,
0.0405205637216568,
0.05727348104119301,
-0.08499286323785782,
0.06393373757600784,
-0.059974171221256256,
-0.04145045205950737,
0.06435589492321014,
0.07571811974048615,
-0.009013539180159569,
-0.020178336650133133,
-0.04527227580547333,
-0.02727314829826355,
0.011522938497364521,
0.01594594493508339,
-0.10050255805253983,
-0.058268412947654724,
0.026332935318350792,
0.05480320006608963,
-0.06463290750980377,
-0.010097677819430828,
-0.0639030784368515,
0.10239095985889435,
0.05727802589535713,
-0.016643276438117027,
0.0961686223745346,
-0.028257135301828384,
0.01847297139465809,
-0.028911929577589035,
0.013498359359800816,
0.030242322012782097,
-0.07567193359136581,
0.030068395659327507,
0.157364621758461,
0.23638014495372772,
0.06595899164676666,
-0.028675824403762817,
-0.06267397105693817,
0.04525088146328926,
0.014644693583250046,
-0.06259448826313019,
-0.06570930033922195,
0.015639720484614372,
0.012882376089692116,
0.05610598996281624,
0.022304756566882133,
-0.06643491238355637,
0.003287267405539751,
0.0232866071164608,
-0.16815657913684845,
-0.033639222383499146,
-0.018721679225564003,
-0.04588911309838295,
-0.05146072432398796,
-0.07037439942359924,
0.14650405943393707,
-0.04029785096645355,
-0.05162804201245308,
0.0590406209230423,
0.11790172010660172,
0.017694301903247833,
-0.020025456324219704,
0.004491840023547411,
-0.07767371833324432,
0.020021501928567886,
0.17505311965942383,
0.23104451596736908,
-0.09911986440420151,
-0.06511761248111725,
0.01959303207695484,
0.03853095322847366,
0.14207488298416138,
0.008124854415655136,
0.011969566345214844,
0.14098504185676575,
-0.00454829353839159,
0.05614288151264191,
0.11341684311628342,
0.0965278372168541,
0.050811417400836945,
-0.06304729729890823,
0.0025454789865761995,
0.0011099943658336997,
0.04245127737522125,
-0.07660409808158875,
-0.07391619682312012,
-0.0457351952791214,
-0.15876035392284393,
0.049023471772670746,
-0.05649947002530098,
0.05624168738722801,
0.024797432124614716,
-0.11565839499235153,
-0.024982426315546036,
-0.050338540226221085,
-0.023900415748357773,
0.03470223397016525,
0.026757393032312393,
-0.08567147701978683,
0.006285816431045532,
-0.02839376963675022,
0.02112169750034809,
0.01195796299725771,
0.04375291243195534,
0.10174626857042313,
0.059160634875297546,
-0.04217621684074402,
-0.008378670550882816,
0.1301129162311554,
0.09480985999107361,
-0.044997092336416245,
-0.15110301971435547,
0.0024427780881524086,
0.04268072545528412,
-0.04457122087478638,
0.04865885153412819,
0.073606476187706,
0.07451223582029343,
0.09175984561443329,
-0.021791374310851097,
-0.010180518962442875,
0.013603952713310719,
0.07401302456855774,
0.053485479205846786,
0.14449986815452576,
0.08977603912353516,
-0.0037116643507033587,
-0.034692294895648956,
-0.06952496618032455,
-0.049913931638002396,
-0.01631391979753971,
0.026333259418606758,
-0.03275414556264877,
-0.06260551512241364,
-0.11359241604804993,
-0.05874769762158394,
0.052705783396959305,
-0.008926963433623314,
0.04017172008752823,
-0.005565578117966652,
-0.033812135457992554,
-0.10207626968622208,
-0.029494090005755424,
0.02831505797803402,
-0.052090246230363846,
0.007963815703988075,
0.01272612251341343,
-0.10840398073196411,
-0.05418705567717552,
-0.06678806245326996,
-0.05242401361465454,
-0.0996469184756279,
0.07701711356639862,
0.07386594265699387,
0.13494423031806946,
0.1507597118616104,
0.0005597980343736708,
0.14372636377811432,
0.11295538395643234,
0.07933425903320312,
-0.020835164934396744,
-0.026336152106523514,
-0.01489017903804779,
0.013975957408547401,
0.015214171260595322,
-0.07396382838487625,
-0.22280865907669067,
-0.1552439033985138,
-0.1447443962097168,
-0.018995406106114388,
-0.0508926659822464,
-0.10982365161180496,
0.042584411799907684,
0.029011661186814308,
0.045644357800483704,
-0.007654350250959396,
0.19754743576049805,
0.048068735748529434,
0.011301834136247635,
0.042533621191978455,
0.016455644741654396,
0.0015239816857501864,
-0.06446396559476852,
0.05073540657758713,
0.13937543332576752,
0.02908460423350334,
-0.12105467915534973,
-0.09505315124988556,
-0.07681724429130554,
0.004500232636928558,
0.09487000107765198,
0.026607660576701164,
0.003075753105804324,
-0.012438750825822353,
0.008630074560642242,
0.06928543746471405,
-0.013171118684113026,
0.00038548855809494853,
0.03046802058815956,
-0.11486753821372986,
0.03781493380665779,
0.07661938667297363,
0.02815251238644123,
0.02403147518634796,
-0.08114513009786606,
-0.04269610717892647,
-0.07586807757616043,
0.05357130244374275,
0.09136500209569931,
0.0007864904473535717,
-0.10472218692302704,
-0.1342063546180725,
0.10876818746328354,
0.0018573233392089605,
0.03477749228477478,
0.08747202157974243,
0.11131687462329865,
0.023588526993989944,
-0.0377364419400692,
-0.07099199295043945,
-0.13858318328857422,
-0.10414982587099075,
-0.06307234615087509,
0.015303676016628742,
-0.02392294816672802,
-0.04592129588127136,
-0.12388864159584045,
-0.09819979965686798,
-0.04406070336699486,
0.12011148780584335,
-0.045254018157720566,
0.0779510959982872,
-0.14345645904541016,
0.06639747321605682,
0.06397862732410431,
-0.023083684965968132,
0.12645021080970764,
-0.024839378893375397,
-0.07410192489624023,
0.005478615872561932,
-0.03732926771044731,
-0.14003323018550873,
0.013480409979820251,
-0.04159017652273178,
-0.007535380776971579,
-0.08805319666862488,
-0.15089274942874908,
0.10832555592060089,
-0.08146823942661285,
-0.1316600739955902,
0.010893361642956734,
-0.019392021000385284,
0.06311893463134766,
-0.06323428452014923,
0.006288999691605568,
0.09723378717899323,
0.10536248981952667,
0.0475078709423542,
-0.005461592692881823,
-0.11696771532297134,
-0.09521046280860901,
-0.016338525339961052,
0.0509822741150856,
0.04550395905971527,
0.01709081418812275,
-0.03896661475300789,
-0.024575773626565933,
0.10844257473945618,
0.04958457127213478,
0.0858166441321373,
-0.04525279626250267,
-0.23094655573368073,
-0.009602491743862629,
-0.11249785870313644,
-0.07937747985124588,
-0.13999567925930023,
-0.08542321622371674,
-0.027790935710072517,
-0.038514815270900726,
-0.13664989173412323,
0.021532589569687843,
0.23317033052444458,
0.01738586276769638,
0.015317165292799473,
0.04643945023417473,
0.08558828383684158,
0.10814663767814636,
-0.048201870173215866,
-0.03667841851711273,
0.058158181607723236,
0.05920825153589249,
0.07081783562898636,
-0.0010713846422731876,
0.07793839275836945,
0.00012321713438723236,
0.05739012360572815,
0.08823034167289734,
-0.04635963588953018,
-0.020288439467549324,
-0.023343918845057487,
0.14928999543190002,
0.06623230874538422,
0.0508466437458992,
0.059133850038051605,
-0.09789343923330307,
0.08136846125125885,
-0.05754421651363373,
-0.005927964113652706,
-0.025912374258041382,
0.016004376113414764,
0.06390722095966339,
-0.01698465459048748,
-0.08409282565116882,
-0.12337899208068848,
-0.10063439607620239,
-0.04636175557971001,
-0.10951115190982819,
-0.05288616940379143,
-0.06708107143640518,
-0.010815726593136787,
-0.1253160834312439,
-0.05394037067890167,
0.21920937299728394,
0.07450751960277557,
-0.11077479273080826,
-0.2466263324022293,
-0.0637068897485733,
0.16071218252182007,
-0.004362380597740412,
-0.03959988057613373,
0.006798906251788139,
0.2042507529258728,
0.06559286266565323,
0.1688026785850525,
-0.027076471596956253,
-0.04851099103689194,
0.18510723114013672,
0.05934703350067139,
-0.015595044009387493,
0.1301431506872177,
-0.021023880690336227,
-0.004474598914384842,
0.11464166641235352,
-0.01849234104156494,
0.0905320942401886,
-0.062499258667230606,
-0.030934764072299004,
-0.06990280002355576,
-0.18685534596443176,
-0.0933537408709526,
-0.10608074814081192,
0.01840846799314022,
-0.04250064864754677,
-0.05648098886013031,
-0.1333121955394745,
-0.15316879749298096,
-0.01439435314387083,
0.014481649734079838,
-0.08623894304037094,
-0.09265438467264175,
0.04169159010052681,
0.1532634198665619,
-0.011429199948906898,
-0.039554961025714874,
-0.01781628467142582,
0.03638460114598274,
0.013327294960618019,
0.09995847195386887,
0.050922345370054245,
0.0923994928598404,
-0.08587520569562912,
-0.1500992476940155,
0.042420364916324615,
0.11171092838048935,
0.06557219475507736,
-0.057565536350011826,
-0.20513379573822021,
-0.08564700186252594,
0.03107535094022751,
0.07949060201644897,
-0.002718907780945301,
0.032272957265377045,
0.08065783232450485,
0.06069021672010422,
0.032291945070028305,
0.060449354350566864,
0.04280151054263115,
-0.07050783187150955,
-0.0646883174777031,
-0.056335534900426865,
-0.09400239586830139,
-0.1602974385023117,
0.03160358592867851,
0.06508251279592514,
0.03153977170586586,
-0.061274170875549316,
-0.051361460238695145,
0.036237046122550964,
-0.02858908660709858,
-0.0811077356338501,
0.01837390847504139,
0.04809780791401863,
-0.038609761744737625,
-0.008512279950082302,
0.09222467243671417,
0.15760338306427002,
0.10033823549747467,
0.05635991320014,
0.06733010709285736,
0.018096426501870155,
-0.04858322814106941,
-0.028174323961138725,
-0.04693017899990082,
-0.040012240409851074,
-0.00010731357178883627,
-0.02606455609202385,
0.06040812283754349,
0.011594771407544613,
-0.029453149065375328,
-0.01280929520726204,
0.024171235039830208,
0.059040386229753494,
0.01659567654132843,
0.04537031054496765,
0.03363366052508354,
0.07908257097005844,
0.10967658460140228,
0.10020477324724197,
-0.06597762554883957,
-0.05772790312767029,
0.12085387110710144,
0.03761176019906998,
0.06362786144018173,
0.050064392387866974,
0.07364115864038467,
-0.06445412337779999,
-0.04465474188327789,
-0.017888503149151802,
-0.0952429473400116,
-0.07851646840572357,
-0.017768673598766327,
-0.09046605974435806,
-0.05635923147201538,
-0.11872684210538864,
-0.08611258864402771,
-0.02499595656991005,
-0.0379498228430748,
0.07619428634643555,
0.029055627062916756,
-0.044848375022411346,
0.06375221908092499,
0.12317517399787903,
0.0672651007771492,
-0.06187046691775322,
-0.04844822362065315,
0.16164405643939972,
0.1207231655716896,
0.07559308409690857,
0.02569105662405491,
0.08409053832292557,
-0.051578372716903687,
-0.07632643729448318,
0.09386375546455383,
0.1598711460828781,
-0.06961406767368317,
-0.05749297887086868,
-0.06702681630849838,
0.05686282366514206,
0.1339949667453766,
0.10769659280776978,
-0.22652244567871094,
-0.09818704426288605,
-0.06631636619567871,
0.07080905884504318,
-0.02993280068039894,
-0.11914558708667755,
-0.09615522623062134,
-0.12740305066108704,
0.0038181254640221596,
-0.021471673622727394,
-0.11469554901123047,
0.16382217407226562,
-0.07937745749950409,
0.06142992153763771,
0.006212330888956785,
0.03440537303686142,
0.11634475737810135,
-0.09747046232223511,
-0.026468735188245773,
0.060489580035209656,
-0.028892135247588158,
0.014174317009747028,
-0.01673944480717182,
0.13086532056331635,
0.10426346957683563,
-0.1087736189365387,
-0.1126568391919136,
0.06850913912057877,
0.06576819717884064,
0.1604650318622589,
0.035224154591560364,
-0.025682754814624786,
-0.053470004349946976,
0.03657654672861099,
0.16620443761348724,
0.08034133911132812,
0.010240862146019936,
0.03932487964630127,
0.2638367712497711,
0.12012964487075806,
-0.11035192757844925,
-0.007253569550812244,
-0.024374138563871384,
0.03221011906862259,
-0.03907180577516556,
-0.011541808024048805,
-0.0461309440433979,
-0.005472453311085701,
0.0018027175683528185,
-0.059069834649562836,
-0.11525805294513702,
-0.13295505940914154,
0.03665519133210182,
0.0417453870177269,
-0.02615736983716488,
0.016528097912669182,
0.12092150002717972,
0.020138613879680634,
0.04928656667470932,
0.05118470638990402,
0.118920236825943,
0.17029306292533875,
-0.08903034031391144,
-0.06623413413763046,
-0.024469712749123573,
0.002323137130588293,
0.07336194068193436,
-0.0791429951786995,
-0.011691136285662651,
0.045234065502882004,
0.01723039709031582,
0.08072479814291,
0.0933903157711029,
0.13104619085788727,
0.07056401669979095,
0.0032054113689810038,
-0.1071176752448082,
0.10103417187929153,
0.10798592865467072,
0.27659887075424194,
0.10243301838636398,
-0.13422130048274994,
-0.1143350899219513,
-0.004778487142175436,
0.058090824633836746,
0.046680644154548645,
0.03790825232863426,
-0.026469498872756958,
0.028149817138910294,
0.1028396338224411,
0.032905422151088715,
0.0825592428445816,
0.0973656103014946,
-0.04000180959701538,
0.08455219119787216,
0.0017778499750420451,
0.31692028045654297,
0.10461544245481491,
0.08275526016950607,
0.016004053875803947,
-0.1540253609418869,
-0.09308329224586487,
-0.10419605672359467,
-0.014493958093225956,
-0.04477160423994064,
-0.07873255759477615,
-0.1261933445930481,
-0.045063648372888565,
0.014281205832958221,
0.07313872128725052,
-0.11874621361494064,
0.016793224960565567,
-0.006118761375546455,
0.044758718460798264,
0.052003163844347,
0.11917590349912643,
-0.07908474653959274,
0.1125045046210289,
0.08354538679122925,
-0.020307909697294235,
-0.060918938368558884,
0.008751995861530304,
0.005518140271306038,
0.10732413828372955,
-0.008542259223759174,
-0.03397662937641144,
-0.1164204552769661,
-0.026120172813534737,
-0.010057848878204823,
0.20450636744499207,
0.059986554086208344,
-0.0016968176933005452,
-0.04736145958304405,
0.028641413897275925,
0.0823877826333046,
0.04669588804244995,
-0.0105851786211133,
-0.030384644865989685,
-0.0688587874174118,
-0.08715187013149261,
0.031047651544213295,
-0.007516894489526749,
-0.14794021844863892,
-0.019091276451945305,
-0.037299592047929764,
-0.07693330198526382,
-0.061681296676397324,
0.07607902586460114,
0.06899413466453552,
0.10247279703617096,
-0.07476988434791565,
0.005927405320107937,
0.07170093804597855,
0.041609276086091995,
0.10051451623439789,
0.1037437915802002,
0.008257067762315273,
-0.007502117659896612,
0.0802246555685997,
0.09379559755325317,
0.045084789395332336,
0.03835253417491913,
0.021652886644005775,
-0.15966930985450745,
0.011042271740734577,
0.1513020396232605,
-0.021915901452302933,
-0.008109749294817448,
-0.027635721489787102,
-0.02856854908168316,
-0.06779414415359497,
0.05571005120873451,
-0.04433750733733177,
-0.07203410565853119,
-0.09069904685020447,
-0.1367821991443634,
-0.08216492831707001,
-0.009768247604370117,
0.031721893697977066,
-0.048270758241415024,
-0.23865221440792084,
-0.0799294039607048,
0.04734621196985245,
0.01325376145541668,
-0.12511520087718964,
-0.12549988925457,
-0.05345764383673668,
-0.0012199190678074956,
0.052845075726509094,
0.04045005887746811,
0.0265182051807642,
0.05599842220544815,
-0.09412889927625656,
-0.05538348853588104,
0.06978211551904678,
0.009020756930112839,
-0.040828678756952286,
-0.16305354237556458,
-0.012672873213887215,
0.08409237861633301,
0.1679677814245224,
0.20374487340450287,
0.08734303712844849,
0.06519751250743866,
0.046242646872997284,
-0.08079981803894043,
-0.003837489290162921,
0.015005444176495075,
-0.010591985657811165,
0.05585111305117607,
0.025624766945838928,
-0.06736843287944794,
0.10854370892047882,
0.1443396508693695,
-0.02171003445982933,
-0.009097345173358917,
0.03534442186355591,
0.05058876797556877,
0.12647683918476105,
-0.1501684933900833,
-0.14293180406093597,
-0.24739094078540802,
0.023953471332788467,
0.18497389554977417,
0.08982015401124954,
-0.04868887737393379,
-0.041498977690935135,
-0.0022299790289252996,
-0.0018505569314584136,
0.15195921063423157,
0.16391171514987946,
0.024192163720726967,
0.045536406338214874,
-0.030793841928243637,
-0.024318847805261612,
0.027782587334513664,
0.01780756749212742,
0.024350715801119804,
-0.010246017947793007,
-0.07782933861017227,
-0.019254857674241066,
0.0074586388655006886,
0.015855256468057632,
0.053917255252599716,
0.07242820411920547,
0.019561219960451126,
0.03328629955649376,
-0.020733965560793877,
0.002163657685741782,
0.08819906413555145,
0.03920937329530716,
0.08049499988555908,
-0.07774188369512558,
-0.03609554469585419,
-0.05953134596347809,
-0.16265864670276642,
-0.03179694339632988,
-0.008815091103315353,
0.0028896480798721313,
-0.11705038696527481,
-0.07064659893512726,
-0.11919526755809784,
-0.003974397201091051,
-0.03272995352745056,
0.04232872650027275,
0.0038859674241393805,
-0.0006094701820984483,
-0.01729111559689045,
-0.057817406952381134,
-0.11187510937452316,
-0.012711064890027046,
-0.045018505305051804,
-0.09713921695947647,
-0.03931739926338196,
-0.015105148777365685,
-0.09483489394187927,
0.021040689200162888,
0.07878393679857254,
0.07472235709428787,
0.016498534008860588,
-0.06507763266563416,
-0.041040949523448944,
0.05875600874423981,
0.09872923046350479,
0.05970323830842972,
-0.017062518745660782,
0.02602071315050125,
0.031391363590955734,
0.07836940139532089,
-0.038631122559309006,
-0.025565985590219498,
0.01720273494720459,
0.020664004608988762,
-0.03533629700541496,
0.0007074173190630972,
-0.05442110821604729,
-0.08228462934494019,
-0.21427369117736816,
-0.15678881108760834,
0.10056814551353455,
0.17938458919525146,
0.1220565214753151,
-0.057182591408491135,
-0.11067584902048111,
-0.04895724728703499,
0.1248607262969017,
0.13330672681331635,
0.06664924323558807,
-0.011892012320458889,
-0.06534014642238617,
-0.12185636907815933,
-0.20864133536815643,
0.07581528276205063,
0.07791690528392792,
-0.032792460173368454,
-0.045099854469299316,
-0.0431312620639801,
-0.07465291768312454,
-0.054893117398023605,
-0.022557737305760384,
0.06596920639276505,
0.17092236876487732,
-0.018409643322229385,
-0.07059501856565475,
-0.05578185245394707,
-0.07963763922452927,
-0.0164658110588789,
0.026043757796287537,
0.0021468903869390488,
-0.19005908071994781,
-0.07334401458501816,
-0.1462288647890091,
0.03274710848927498,
0.02336515113711357,
-0.03074289672076702,
-0.08390635251998901,
-0.023739797994494438,
0.01990688219666481,
-0.062165290117263794,
-0.01515243761241436,
0.04129147157073021,
0.04601387307047844,
0.07014235109090805,
0.15818360447883606,
-0.10783066600561142,
-0.05867825821042061,
-0.024777965620160103,
0.032314687967300415,
0.15874268114566803,
-0.13282713294029236,
-0.21610066294670105,
-0.0972418263554573,
-0.11561170965433121,
0.09695066511631012,
-0.10842040926218033,
-0.11150887608528137,
-0.1177002564072609,
0.008495435118675232,
0.06338605284690857,
-0.004717797506600618,
-0.07896333932876587,
0.041380710899829865,
0.09851426631212234,
-0.08252178877592087,
-0.06158054620027542,
0.01895219460129738,
0.1353694498538971,
0.06771598011255264,
0.07155054062604904,
0.03424537554383278,
0.05261535942554474,
0.0908840075135231,
0.01852618344128132,
0.08602172881364822,
-0.05986548215150833,
-0.14498543739318848,
-0.11381939053535461,
-0.1142222136259079,
-0.01885925978422165,
-0.02507180906832218,
-0.2529405951499939,
-0.08867210894823074,
0.008734596893191338,
0.11649171262979507,
-0.0654088482260704,
-0.06900991499423981,
-0.07926394045352936,
-0.049840297549963,
0.017640041187405586,
-0.0012937808642163873,
-0.054128337651491165,
-0.0551561675965786,
-0.11365427821874619,
-0.12269961833953857,
-0.0624757781624794,
0.027765454724431038,
0.016194475814700127,
-0.033870548009872437,
-0.13364803791046143,
0.04363803565502167,
0.02177123725414276,
0.09005692601203918,
0.04642164334654808,
-0.05884906277060509,
0.11509770154953003,
0.0981970876455307,
0.13924546539783478,
0.04329519346356392,
0.013939861208200455,
0.00591516075655818,
-0.09387407451868057,
0.0004941140068694949,
0.10602355003356934,
-0.07146966457366943,
0.02222534455358982,
-0.05709202215075493,
-0.05354132503271103,
-0.0030864165164530277,
0.0020627062767744064,
0.012204593047499657,
-0.03541375696659088,
-0.08901563286781311,
-0.09901479631662369,
-0.12275775521993637,
0.018044380471110344,
-0.08296293765306473,
-0.07672486454248428,
-0.09107648581266403,
-0.1032201275229454,
0.0674436166882515,
-0.055257707834243774,
-0.08827102184295654,
0.04197058454155922,
-0.05673852935433388,
-0.012215733528137207,
0.032750941812992096,
-0.08895239979028702,
0.07879064232110977,
-0.08180384337902069,
-0.050459131598472595,
0.0844300389289856,
0.06856361776590347,
-0.11870144307613373,
0.05085024610161781,
0.04816057160496712,
0.03312302380800247,
0.1399148553609848,
0.06802529096603394,
0.010190669447183609,
0.004961141385138035,
0.02929186448454857,
-0.10505586862564087,
0.020655104890465736,
-0.02079193852841854,
-0.06106237322092056,
-0.037829019129276276,
-0.01125100627541542,
-0.013342718593776226,
0.03912079334259033,
-0.08295992016792297,
0.12544049322605133,
-0.0037862539757043123,
0.00017095361545216292,
-0.03213993459939957,
0.07432878762483597,
0.0052006179466843605,
0.0011087097227573395,
0.014276066794991493,
0.08959265053272247,
0.006623369641602039,
-0.04497944191098213,
-0.06200866401195526,
-0.019372250884771347,
-0.01486682053655386,
0.027516592293977737,
0.056769948452711105,
0.03062351420521736,
-0.0434553325176239,
0.01128719188272953,
0.07202992588281631,
0.07633241266012192,
0.17073537409305573,
0.018016893416643143,
0.06640226393938065,
-0.015781674534082413,
-0.07424615323543549,
0.05860350653529167,
-0.04390857741236687,
-0.07096903771162033,
0.0014887145953252912,
0.10206320881843567,
-0.042839936912059784,
0.04941411688923836,
0.027793634682893753,
0.03487385809421539,
0.0007773244869895279,
0.14011991024017334,
-0.10640473663806915,
-0.0386633574962616,
0.06425750255584717,
-0.06447990238666534,
-0.10193590074777603,
-0.05893451347947121,
0.015123467892408371,
0.08168934285640717,
-0.03351892903447151,
-0.013831776566803455,
-0.040549393743276596,
0.046487729996442795,
0.07297741621732712,
0.02937992848455906,
-0.0168327447026968,
0.002850866876542568,
0.06856564432382584,
0.06600689888000488,
-0.01765410788357258,
-0.11678812652826309,
-0.016123075038194656,
0.10228338837623596,
-0.004279252141714096,
-0.056368689984083176,
-0.03992580622434616,
0.025451818481087685,
0.11443554610013962,
0.08662606030702591,
-0.01260312832891941,
-0.04553657025098801,
-0.023933693766593933,
0.10745338350534439,
0.03106769546866417,
-0.04642975330352783,
0.038694705814123154,
-0.03510633111000061,
0.03086947649717331,
0.10267865657806396,
-0.020805777981877327,
0.021876391023397446,
-0.09321945905685425,
0.038125328719615936,
-0.019326433539390564,
-0.01890546642243862,
-0.019037635996937752,
0.06695350259542465,
0.07729603350162506,
-0.023355131968855858,
-0.05067795142531395,
0.020358219742774963,
-0.08015427738428116,
-0.0338766872882843,
0.056876666843891144,
-0.00096328608924523,
-0.06452833861112595,
0.0045457035303115845,
0.04610029235482216,
0.05198091268539429,
0.07796387374401093,
0.011347424238920212,
0.02879146672785282,
0.11494768410921097,
0.05176350101828575,
0.0701347067952156,
0.0009037695708684623,
-0.03209967166185379,
0.022648761048913002,
-0.0043816957622766495,
0.14510078728199005,
-0.1656304895877838,
-0.02379738911986351,
-0.09630808979272842,
-0.198259636759758,
-0.16172273457050323,
-0.015429341234266758,
-0.03165184706449509,
-0.1287778615951538,
0.030539454892277718,
-0.07300715893507004,
-0.03100477159023285,
0.05486780032515526,
0.011202853173017502,
-0.12875236570835114,
-0.21156823635101318,
-0.0237013828009367,
0.0023391973227262497,
-0.10687274485826492,
-0.09552652388811111,
-0.056916866451501846,
0.031612373888492584,
0.06404003500938416,
0.07438454031944275,
-0.05296187475323677,
0.026910625398159027,
0.002610816154628992,
0.005420769564807415,
-0.00997082982212305,
-0.11500842124223709,
-0.0010376933496445417,
-0.009890664368867874,
0.011756976135075092,
-0.01904771476984024,
0.11708115041255951,
0.02110067754983902,
0.052885476499795914,
0.0668993815779686,
-0.05183640867471695,
-0.08393826335668564,
-0.03270355239510536,
-0.06812068819999695,
-0.03616911172866821,
-0.04975895583629608,
-0.18156199157238007,
0.0018948039505630732,
0.07931441068649292,
0.15710458159446716,
0.05706140398979187,
-0.027677062898874283,
-0.01581648178398609,
0.046974871307611465,
-0.003254353068768978,
0.11382190138101578,
0.06888062506914139,
-0.026770902797579765,
-0.06300797313451767,
-0.00857810489833355,
0.1232186108827591,
0.08538138121366501,
0.044562287628650665,
-0.030984463170170784,
-0.0026306575164198875,
0.04696331545710564,
0.1765686422586441,
0.12010464072227478,
0.12157591432332993,
0.007721243426203728,
0.0758824497461319,
-0.030649255961179733,
0.11181923747062683,
-0.040709685534238815,
-0.11542811989784241,
-0.060874875634908676,
0.007188552990555763,
0.05473504588007927,
-0.10651281476020813,
-0.10577404499053955,
-0.07846128940582275,
-0.006130194757133722,
-0.03372526541352272,
-0.028390871360898018,
-0.13079451024532318,
-0.12068933248519897,
-0.05855782702565193,
-0.0026161810383200645,
0.1313808709383011,
0.0006961912149563432,
-0.006788897328078747,
-0.01223325077444315,
-0.2886399030685425,
-0.1315338909626007,
0.14870227873325348,
0.035633448511362076,
-0.11414396017789841,
0.0412309467792511,
-0.0035192144569009542,
0.1300635188817978,
0.18555103242397308,
0.10508763790130615,
0.034820519387722015,
0.0837373286485672,
0.013266715221107006,
-0.13465406000614166,
-0.17888149619102478,
-0.024992618709802628,
-0.031479787081480026,
0.0921136662364006,
0.08683215081691742,
-0.052083056420087814,
-0.16518840193748474,
-0.17962907254695892,
-0.015926973894238472,
-0.18314148485660553,
-0.11099151521921158,
-0.048416413366794586,
0.046569664031267166,
-0.10800408571958542,
-0.027712605893611908,
-0.0456698015332222,
-0.06011080741882324,
0.10207069665193558,
0.0343589223921299,
-0.05477973818778992,
-0.023111041635274887,
-0.04127718135714531,
-0.016814200207591057,
-0.10812243074178696,
-0.007377489935606718,
0.08163061738014221,
0.06413209438323975,
-0.07127207517623901,
-0.04674939438700676,
0.09497365355491638,
0.0030361898243427277,
-0.07831362634897232,
0.08473824709653854,
0.0920250192284584,
0.14471006393432617,
0.03722203150391579,
0.09461281448602676,
-0.08233042806386948,
-0.034914281219244,
0.03895372897386551,
0.08211547136306763,
-0.07807786762714386,
-0.07842068374156952,
0.04805099219083786,
-0.009778345003724098,
-0.013857359066605568,
-0.007992246188223362,
-0.0070593045093119144,
-0.13902832567691803,
-0.18733669817447662,
-0.12676072120666504,
0.0062578096985816956,
0.19071871042251587,
-0.021896345540881157,
0.016583330929279327,
-0.0424218587577343,
0.026114195585250854,
0.04784529283642769,
0.08098434656858444,
0.10571328550577164,
-0.15585334599018097,
-0.04852685704827309,
-0.03897809982299805,
0.005993579979985952,
-0.09924006462097168,
0.002834502374753356,
0.03596166521310806,
0.05823959782719612,
0.0069396039471030235,
0.06196621060371399,
0.026098458096385002,
0.033347778022289276,
0.03035479225218296,
-0.002939666388556361,
0.10218113660812378,
-0.0017486315919086337,
-0.0001345849159406498,
-0.04528333619236946,
0.017820309847593307,
0.032610781490802765,
0.060331884771585464,
0.03250637650489807,
-0.005337820854038,
0.006125648505985737,
0.1000128984451294,
-0.03786064311861992,
-0.02383233979344368,
0.01743720844388008,
0.06864780187606812,
0.027947399765253067,
-0.07158523797988892,
0.02733706869184971,
0.05188928544521332,
-0.02295297384262085,
0.006765316240489483,
0.038705822080373764,
0.05751299113035202,
0.014646443538367748,
-0.0559951588511467,
-0.052033670246601105,
0.03982743248343468,
0.09152314066886902,
0.031083514913916588,
-0.13988474011421204,
-0.0919264480471611,
-0.15338803827762604,
0.03632854297757149,
0.08214811235666275,
0.026931878179311752,
0.08158118277788162,
0.06226922571659088,
-0.114668108522892,
-0.0745203047990799,
0.12819796800613403,
0.059656303375959396,
-0.12265162914991379,
0.1060180738568306,
-0.01617549918591976,
-0.03117322362959385,
-0.09151751548051834,
0.058411773294210434,
0.06346021592617035,
0.027748659253120422,
-0.08396779745817184,
-0.02206658385694027,
-0.08210604637861252,
-0.008271836675703526,
-0.06360483914613724,
0.11073177307844162,
0.22657249867916107,
0.08902423083782196,
-0.09617813676595688,
0.03521629422903061,
-0.0904446691274643,
0.026605281978845596,
0.07593744993209839,
0.04715122655034065,
0.03822730854153633,
-0.03481370583176613,
0.07681220024824142,
0.030148431658744812,
-0.0461028516292572,
0.023061202839016914,
0.010160454548895359,
-0.03751598671078682,
-0.017586247995495796,
-0.013888313435018063,
-0.01767774112522602,
-0.18822842836380005,
-0.020261526107788086,
0.2055691033601761,
0.007399893831461668,
0.02197199873626232,
-0.1120377704501152,
0.15618635714054108,
0.15136849880218506,
-0.029227830469608307,
-0.07731866836547852,
-0.03628339618444443,
0.06101154536008835,
0.18946227431297302,
-0.0726630836725235,
-0.05467633903026581,
0.06479620188474655,
0.019688906148076057,
0.07816006988286972,
0.06002780422568321,
-0.0314578153192997,
-0.08328763395547867,
0.11771027743816376,
0.09520293772220612,
0.09587079286575317,
0.01655605435371399,
0.0055598607286810875,
0.006356494035571814,
0.016699671745300293,
-0.03079204261302948,
-0.006308458745479584,
0.0855429470539093,
-0.00742120249196887,
0.02145613357424736,
0.022446010261774063,
-0.003675613319501281,
-0.054839566349983215,
0.04503430053591728,
-0.06020904704928398,
-0.0613444447517395,
0.002002923982217908,
0.13506139814853668,
0.09713184833526611,
-0.022205296903848648,
0.02929612062871456,
0.04706444963812828,
-0.07550864666700363,
0.04031617194414139,
0.08402881771326065,
0.03727487102150917,
-0.07970482856035233,
-0.024654189124703407,
-0.01715928688645363,
0.050549283623695374,
0.08119028061628342,
0.026342811062932014,
-0.003376955399289727,
0.0870840772986412,
0.08017653226852417,
0.1283782422542572,
0.02430955320596695,
0.0006843193550594151,
0.057337600737810135,
0.3032841980457306,
0.1669621765613556,
0.058676522225141525,
0.011444785632193089,
0.061290644109249115,
0.02703161910176277,
0.00835818238556385,
-0.007730470970273018,
-0.04256747290492058,
-0.05535939708352089,
0.039549387991428375,
0.05139172077178955,
0.013586154207587242,
-0.03727691248059273,
0.06090738624334335,
0.05173848941922188,
0.11143823713064194,
0.08828002959489822,
0.000913842290174216,
0.01265909243375063,
0.0048841149546206,
-0.0109516317024827,
0.012234590947628021,
0.20109125971794128,
0.10018923878669739,
-0.014644819311797619,
0.04570808634161949,
-0.05579625442624092,
-0.1200239509344101,
-0.13513435423374176,
-0.2305007129907608,
-0.01707695983350277,
0.03516766056418419,
0.0102741913869977,
-0.056423235684633255,
0.03669537603855133,
-0.005596218630671501,
0.23577746748924255,
-0.05217958614230156,
-0.06541241705417633,
-0.10705897212028503,
0.03482547402381897,
-0.07693162560462952,
-0.0366230271756649,
-0.052559904754161835,
-0.06587574630975723,
0.0225848201662302,
-0.05049033463001251,
0.10553327947854996,
0.019905894994735718,
-0.11934715509414673,
0.002554201288148761,
-0.04547027498483658,
0.03211381658911705,
-0.0591617114841938,
-0.04454033076763153,
0.05218732729554176,
0.09312745183706284,
-0.08859103173017502,
0.0006525958306156099,
0.045159295201301575,
0.13965536653995514,
0.02033196948468685,
-0.044963289052248,
-0.03828497231006622,
0.003667091019451618,
0.02600116841495037,
-0.048914484679698944,
-0.08265060186386108,
-0.18120108544826508,
-0.07103386521339417,
0.06748082488775253,
0.07746580243110657,
0.20549394190311432,
0.04780743271112442,
0.022042082622647285,
-0.12994477152824402,
0.03463874012231827,
0.25565898418426514,
0.2025947868824005,
0.02228262834250927,
-0.05357218161225319,
-0.1349814534187317,
0.03068981133401394,
0.06305470317602158,
0.06154244765639305,
-0.04485001415014267,
-0.08558198809623718,
0.07294308394193649,
0.05622750148177147,
-0.06142541021108627,
0.04570886865258217,
0.07835233211517334,
-0.025273727253079414,
0.04676676169037819,
0.10905380547046661,
0.18724125623703003,
0.08200309425592422,
0.04372786357998848,
-0.027510058134794235,
0.043492719531059265,
0.058546632528305054,
-0.06367628276348114,
0.0005078126559965312,
-0.1132369339466095,
-0.0008174192626029253,
-0.04033380001783371,
-0.02455425076186657,
0.006062306929379702,
-0.03640342876315117,
0.039859335869550705,
0.12206355482339859,
0.029772814363241196,
0.03296855092048645,
0.01025514304637909,
-0.010891120880842209,
-0.04179733246564865,
0.03497622162103653,
0.008171003311872482,
0.031327761709690094,
-0.026138845831155777,
0.013811545446515083,
0.19199323654174805,
-0.003012995468452573,
0.07700585573911667,
0.056275758892297745,
0.0256110318005085,
0.015845539048314095,
0.1120864674448967,
0.12193278968334198,
0.07112473249435425,
0.014982769265770912,
-0.16878880560398102,
-0.01613003946840763,
-0.11221404373645782,
-0.13619926571846008,
-0.14492438733577728,
-0.2182229608297348,
0.059989940375089645,
-0.07727786153554916,
-0.056067097932100296,
-0.0611298605799675,
-0.046741362661123276,
-0.06359034031629562,
-0.09636850655078888,
-0.025169773027300835,
-0.07288546115159988,
-0.014569276012480259,
0.003833316732198,
-0.034728772938251495,
-0.01934148371219635,
-0.13619999587535858,
-0.04372399300336838,
-0.011472407728433609,
-0.04560468718409538,
-0.025931430980563164,
0.03890364244580269,
0.12720859050750732,
-0.009008897468447685,
-0.11309518665075302,
0.061867836862802505,
0.05486637353897095,
0.09654094278812408,
-0.003110630204901099,
0.02211470901966095,
0.05090310424566269,
0.03415903449058533,
0.04781362786889076,
0.029243145138025284,
-0.001842026598751545,
0.027128666639328003,
0.032960206270217896,
0.06364132463932037,
-0.10725754499435425,
-0.10123354196548462,
0.10571938753128052,
-0.009678410366177559,
-0.02226879633963108,
-0.16889333724975586,
-0.14943033456802368,
-0.10284832864999771,
-0.11464469879865646,
-0.2904636561870575,
0.03913572430610657,
0.09555035829544067,
0.13749293982982635,
0.0652301013469696,
-0.10841216892004013,
0.07869034260511398,
0.07199888676404953,
-0.02664037235081196,
-0.011057448573410511,
0.0020481902174651623,
0.04412991181015968,
-0.06259937584400177,
-0.039475586265325546,
0.024582894518971443,
0.039080314338207245,
-0.08717703819274902,
-0.012416716665029526,
0.03849838301539421,
0.018421011045575142,
-0.0492422878742218,
0.18508672714233398,
0.03102366253733635,
0.1655578762292862,
0.08307041227817535,
0.04703875258564949,
0.006420305464416742,
-0.04167063161730766,
-0.06856568157672882,
-0.03539371117949486,
-0.15751898288726807,
0.007375036366283894,
0.005915149115025997,
-0.0517728365957737,
0.025228170678019524,
0.030586550012230873,
0.09665000438690186,
-0.000541793939191848,
-0.11818359047174454,
-0.04667703062295914,
0.11144120246171951,
-0.14272864162921906,
0.06091666594147682,
0.011165882460772991,
0.04380612447857857,
0.11261587589979172,
-0.008487892337143421,
-0.003319845534861088,
0.05051705986261368,
0.03691830486059189,
-0.051757749170064926,
0.06417480111122131,
-0.030627772212028503,
-0.06445585936307907,
-0.04345759004354477,
-0.11829829961061478,
0.03554541617631912,
-0.026037806645035744,
0.03364374488592148,
0.05217031389474869,
0.09948918223381042,
-0.05432650446891785,
0.0073631624691188335,
0.07521604001522064,
0.11377936601638794,
0.03444851189851761,
-0.09247659146785736,
0.04093777760863304,
-0.008713622577488422,
-0.03284154832363129,
-0.052063025534152985,
-0.11122726649045944,
-0.15854200720787048,
0.0016867632512003183,
0.022564133629202843,
-0.06721626222133636,
-0.063941091299057,
0.09905949234962463,
0.03606634959578514,
0.03600805625319481,
0.06711604446172714,
-0.028436627238988876,
-0.17095403373241425,
-0.04902084171772003,
0.05016445741057396,
0.06229167431592941,
-0.046770039945840836,
-0.10591738671064377,
-0.050463296473026276,
0.0009151393314823508,
0.014388474635779858,
0.05402478575706482,
0.06930159032344818,
0.07085062563419342,
-0.05599395930767059,
-0.1313752979040146,
-0.15583555400371552,
-0.07856249064207077,
-0.059065092355012894,
0.012659214437007904,
-0.06205785274505615,
-0.05479144677519798,
-0.1429443508386612,
0.12367354333400726,
0.10224287211894989,
0.06005949527025223,
0.024620989337563515,
-0.031888317316770554,
-0.017617981880903244,
-0.0519816055893898,
0.07868089526891708,
-0.042217593640089035,
-0.11132631450891495,
-0.0005327393882907927,
0.09269034117460251,
-0.01872444339096546,
0.06487570703029633,
0.07721791416406631,
0.10020467638969421,
0.04571164399385452,
-0.07185912132263184,
-0.06220274046063423,
-0.1416056752204895,
-0.12365452200174332,
-0.0874256044626236,
-0.013299359939992428,
-0.013664881698787212,
-0.1791626513004303,
0.008817045949399471,
0.12794756889343262,
0.040534619241952896,
-0.03583316504955292,
-0.042770866304636,
0.11168096959590912,
0.1307622343301773,
0.11953600496053696,
0.007516795303672552,
0.06406848877668381,
0.06710794568061829,
0.06977974623441696,
-0.006608120631426573,
-8.993827577796765e-06,
0.020572353154420853,
0.05577033385634422,
0.1186722069978714,
0.02271242067217827,
0.16093632578849792,
0.11847679316997528,
0.0922573134303093,
-0.009221678599715233,
-0.1841444969177246,
0.030103864148259163,
0.19668543338775635,
-0.016451619565486908,
-0.080345019698143,
-0.2091870903968811,
-0.010636130347847939,
0.010723674669861794,
-0.15502634644508362,
0.02869252860546112,
0.0871376097202301,
0.0613735131919384,
-0.02731102705001831,
0.002998821437358856,
0.11727593094110489,
0.1080385372042656,
0.02351503260433674,
-0.06858473271131516,
-0.05220119655132294,
-0.017191601917147636,
0.07136401534080505,
-0.05246919021010399,
-0.10202613472938538,
-0.0644150972366333,
-0.005357420537620783,
0.03167997673153877,
-0.07287970930337906,
-0.010057480074465275,
0.11891929060220718,
0.09442352503538132,
0.03598600625991821,
0.10530953109264374,
0.05606599524617195,
0.05378524586558342,
0.04466475173830986,
0.11380875110626221,
-0.13938206434249878,
-0.044314052909612656,
0.019783368334174156,
0.03883129730820656,
0.0031027954537421465,
0.028414512053132057,
0.05776095762848854,
-0.0653567686676979,
-0.09852149337530136,
-0.14948770403862,
0.00481553515419364,
-0.028984656557440758,
0.0004503593663685024,
-0.16722823679447174,
-0.18774913251399994,
0.03809518367052078,
0.01395633164793253,
-0.03905392065644264,
-0.04961381480097771,
0.06404972821474075,
-0.00038450094871222973,
-0.009037619456648827,
-0.04092899709939957,
0.015381586737930775,
-0.05014139041304588,
-0.07287973165512085,
0.06561601161956787,
0.032935068011283875,
-0.07055072486400604,
0.017760636284947395,
0.003969025798141956,
-0.10871649533510208,
-0.10541398078203201,
-0.032765354961156845,
0.07585553079843521,
0.14785300195217133,
0.15722237527370453,
0.15231485664844513,
0.13072088360786438,
-0.002990148263052106,
0.1329285204410553,
0.07153857499361038,
0.10470223426818848,
-0.02913469634950161,
-0.08560394495725632,
-0.09711896628141403,
0.1091376468539238,
0.016542954370379448,
0.05864190682768822,
-0.21741847693920135,
-0.09277450293302536,
-0.11285561323165894,
-0.05523740500211716,
0.06841849535703659,
0.030931171029806137,
0.20285625755786896,
0.004483034834265709,
0.026986384764313698,
0.04475371912121773,
0.07819860428571701,
-0.011423212476074696,
-0.03348149359226227,
-0.11135151982307434,
0.05316000059247017,
0.08044329285621643,
-0.04055079072713852,
-0.006294130347669125,
0.022308526560664177,
-0.0036182308103889227,
0.1461435705423355,
-0.07736188918352127,
-0.16241991519927979,
-0.025758538395166397,
0.09158561378717422,
0.009056642651557922,
0.03755650296807289,
-0.1671391874551773,
-0.05515781790018082,
0.10932987928390503,
0.05820964276790619,
0.06258036196231842,
-0.05734259635210037,
-0.21122610569000244,
0.019804665818810463,
-0.065333291888237,
0.09122946113348007,
-0.05281566083431244,
-0.12060461193323135,
-0.021536225453019142,
-0.034394629299640656,
-0.006434601731598377,
-0.01590418815612793,
0.04510016366839409,
-0.013390053063631058,
-0.03870076686143875,
0.03695836290717125,
-0.053596191108226776,
0.011544796638190746,
0.15069271624088287,
0.017906107008457184,
-0.05946923792362213,
-0.16051164269447327,
-0.10035939514636993,
0.153421550989151,
0.07235099375247955,
0.02769869565963745,
0.028511444106698036,
-0.06513048708438873,
-0.1142401173710823,
-0.025117170065641403,
0.01770075224339962,
0.04828914254903793,
-0.04255206882953644,
-0.0497344508767128,
0.009453716687858105,
-0.0892716497182846,
0.20232565701007843,
0.01964787021279335,
-0.13686548173427582,
0.12711717188358307,
0.057556867599487305,
0.06655849516391754,
0.10505762696266174,
0.050171878188848495,
-0.07324959337711334,
0.018470535054802895,
-0.009701262228190899,
0.10149910300970078,
0.0971718356013298,
0.03428523242473602,
0.06421320885419846,
-0.07238946110010147,
0.07285003364086151,
0.16122208535671234,
-0.05042427033185959,
-0.022684408351778984,
-0.08776821196079254,
0.041264232248067856,
0.1793549656867981,
0.045570649206638336,
0.012316637672483921,
-0.03398160636425018,
-0.06863731145858765,
0.019350137561559677,
-0.025892050936818123,
0.10006604343652725,
0.12742213904857635,
0.011911106295883656,
0.010454878211021423,
-0.00849954690784216,
0.19241957366466522,
0.12834282219409943,
-0.020747140049934387,
-0.13043475151062012,
-0.1596524715423584,
-0.0153037179261446,
0.0012536526191979647,
-0.06091764196753502,
0.047699104994535446,
-0.11992666125297546,
-7.485132664442062e-05,
0.07937619835138321,
-0.0352800115942955,
-0.058805905282497406,
-0.0352494902908802,
-0.13989418745040894,
-0.06904207170009613,
-0.0819801613688469,
-0.011479261331260204,
-0.1021815836429596,
-0.03648673743009567,
-0.11314556747674942,
0.10789920389652252,
0.06082150340080261,
0.03593037649989128,
-0.016544975340366364,
-0.06848388910293579,
-0.054139066487550735,
0.0411212332546711,
0.03579002618789673,
-0.027333028614521027,
-0.05078794062137604,
-0.1785575896501541,
-0.02321152575314045,
0.020048605278134346,
-0.005997176747769117,
-0.026207145303487778,
0.047321487218141556,
0.08662506937980652,
0.0010510889114812016,
-0.10552770644426346,
-0.09338207542896271,
0.08076664805412292,
0.06067579984664917,
0.018007919192314148,
-0.01995053142309189,
-0.06678812205791473,
0.020155850797891617,
0.02066824771463871,
-0.0541548989713192,
0.006712004542350769,
0.052921757102012634,
0.0014759188052266836,
-0.0004271035722922534,
-0.1162855476140976,
0.1168612688779831,
0.03556997701525688,
0.0888015478849411,
0.15115782618522644,
0.04239598661661148,
-0.060745637863874435,
-0.019597401842474937,
0.024304624646902084,
0.010704978369176388,
0.04371621459722519,
0.06126568838953972,
0.08983533829450607,
-0.05098108947277069,
-0.00885161105543375,
0.0013722351286560297,
0.0379476323723793,
0.15463894605636597,
0.16353952884674072,
-0.021420853212475777,
0.008344655856490135,
0.08519942313432693,
0.017816156148910522,
-0.016101667657494545,
0.04399681091308594,
-0.06555316597223282,
-0.13707338273525238,
-0.16384844481945038,
-0.05979444459080696,
-0.014029087498784065,
-0.07427157461643219,
0.027474189177155495,
-0.12857358157634735,
-0.017479710280895233,
0.015236051753163338,
-0.06633244454860687,
-0.07703663408756256,
-0.1327068954706192,
-0.0505296029150486,
0.06959586590528488,
-0.020081494003534317,
-0.026120811700820923,
0.0041584353893995285,
0.001872448599897325,
0.01596745476126671,
0.0676107183098793,
0.17830607295036316,
0.13438419997692108,
-0.03558409586548805,
-0.11280572414398193,
-0.03160620853304863,
0.0781194195151329,
0.18709129095077515,
0.12543156743049622,
-0.11271417140960693,
-0.08374949544668198,
-0.053258102387189865,
-0.07132627069950104,
0.0787363201379776,
0.06596952676773071,
0.057812634855508804,
0.017370842397212982,
-0.00647224485874176,
0.024335157126188278,
0.08967635035514832,
-0.01636740379035473,
0.018479444086551666,
0.08538777381181717,
-0.0030761375091969967,
-0.08495922386646271,
-0.15942682325839996,
-0.01102652121335268,
0.015520329587161541,
0.04325578361749649,
0.04117729887366295,
-0.03021378070116043,
-0.00017832466983236372,
-0.05290945991873741,
0.13661864399909973,
-0.039745427668094635,
0.006502101663500071,
-0.1504492461681366,
-0.0946657732129097,
0.0685093104839325,
0.09792598336935043,
-0.03215653821825981,
0.06996980309486389,
0.15267421305179596,
0.03560929745435715,
-0.08432897180318832,
0.009185433387756348,
-0.09314260631799698,
-0.13680598139762878,
0.06668010354042053,
0.08716299384832382,
-0.036776669323444366,
-0.044346749782562256,
-0.2056978940963745,
-0.010632442310452461,
0.06156852841377258,
0.0398462638258934,
0.052573513239622116,
-0.13560649752616882,
0.16184775531291962,
0.06818552315235138,
0.0010399175807833672,
-0.03422372043132782,
-0.08726084232330322,
0.09176896512508392,
0.03795860335230827,
-0.0386689193546772,
-0.10988051444292068,
0.04529055207967758,
0.09426503628492355,
0.022090082988142967,
-0.16956941783428192,
-0.0009299965458922088,
-0.07377792149782181,
-0.016039572656154633,
-0.1271967887878418,
-0.08714259415864944,
-0.011632503941655159,
-0.13725890219211578,
0.07388771325349808,
0.12508413195610046,
0.030663644894957542,
0.07930473238229752,
0.03296215087175369,
0.05821433290839195,
0.17531174421310425,
0.07468044012784958,
-0.13115684688091278,
-0.20707160234451294,
-0.05265132710337639,
0.06823253631591797,
0.09344971925020218,
-0.050804995000362396,
-0.11198098212480545,
0.015646029263734818,
0.0412859246134758,
0.011644336394965649,
0.06846588850021362,
0.05395376682281494,
0.08984784036874771,
0.12746761739253998,
0.09320200234651566,
0.03291827067732811,
0.14466285705566406,
0.042696140706539154,
0.1071399673819542,
-0.07910839468240738,
-0.03751213476061821,
0.040758613497018814,
0.0052510760724544525,
-0.009107943624258041,
-0.17693723738193512,
-0.01663421094417572,
0.03818391636013985,
-0.007782586384564638,
-0.005356272682547569,
-0.14150220155715942,
-0.049360860139131546,
0.08863084763288498,
0.005098900757730007,
0.012784212827682495,
-0.0798187181353569,
0.05366884917020798,
-0.025000199675559998,
-0.09409227222204208,
0.08991457521915436,
0.04891233146190643,
0.17550469934940338,
0.1610308587551117,
0.03218730539083481,
0.039606284350156784,
0.11685124039649963,
0.07834126055240631,
0.0037565790116786957,
0.05125055089592934,
0.05293727293610573,
0.06912166625261307,
-0.04574882611632347,
-0.006134680937975645,
0.05553188547492027,
-0.021176500245928764,
0.08005577325820923,
-0.0001760195300448686,
0.19498994946479797,
0.07756279408931732,
-0.015820585191249847,
-0.09432031959295273,
0.11158790439367294,
-0.019950319081544876,
0.01449213083833456,
0.02993142604827881,
-0.021832700818777084,
-0.11896969377994537,
0.006571972742676735,
-0.028855711221694946,
-0.04087920859456062,
0.06070250645279884,
-0.05330253392457962,
-0.033570267260074615,
0.09307904541492462,
0.05084826052188873,
-0.01235110405832529,
0.04006509110331535,
0.019115757197141647,
0.03207959607243538,
-0.06443706154823303,
-0.0033408671151846647,
-0.050278715789318085,
-0.03921344503760338,
-0.097181037068367,
-0.04543875902891159,
0.055050577968358994,
-0.025518709793686867,
-0.12695783376693726,
-0.08316762000322342,
-0.029522936791181564,
-0.056522950530052185,
0.023239968344569206,
0.06398919969797134,
0.0962665006518364,
0.1344369500875473,
0.030554533004760742,
0.13232482969760895,
0.057049840688705444,
0.0734214335680008,
0.055029790848493576,
-0.040803469717502594,
0.02656606025993824,
-0.01379723846912384,
0.11765485256910324,
0.10416235029697418,
-0.04908638447523117,
0.07888495922088623,
0.07880619168281555,
0.051023345440626144,
0.010007891803979874,
-0.025076627731323242,
-0.02196863852441311,
0.051425810903310776,
0.00437347823753953,
0.016142843291163445,
-0.2467041164636612,
-0.00224456493742764,
-0.1227291077375412,
-0.010699202306568623,
0.14136412739753723,
0.15030312538146973,
-0.022934041917324066,
-0.07200834900140762,
0.004441050346940756,
-0.023002581670880318,
0.2164577692747116,
-0.009342491626739502,
0.00985747016966343,
-0.010222284123301506,
0.027902578935027122,
-0.013620241545140743,
-0.022192340344190598,
0.09951308369636536,
0.014097977429628372,
0.02170717343688011,
0.048344191163778305,
-0.14109113812446594,
-0.1349307745695114,
-0.00270168692804873,
-0.03668847680091858,
0.10585255175828934,
-0.02811954729259014,
-0.028886256739497185,
-0.04736148938536644,
-0.06684168428182602,
0.0561211071908474,
0.03858993574976921,
0.017589867115020752,
-0.09052509069442749,
-0.01873035542666912,
0.04793956130743027,
0.1252131313085556,
0.005798860918730497,
-0.0019310060888528824,
-0.09696739912033081,
0.00043377879774197936,
0.05916992947459221,
0.07933404296636581,
0.05982044339179993,
0.03961094096302986,
0.004692709539085627,
0.19645744562149048,
0.06514354050159454,
0.07142304629087448,
0.11543174833059311,
0.15849000215530396,
0.01683187298476696,
0.14362196624279022,
-0.007116074673831463,
-0.0908527821302414,
-0.10637540370225906,
-0.16179223358631134,
-0.026028908789157867,
-0.08484005928039551,
-0.07237274199724197,
-0.057236336171627045,
-0.15745320916175842,
-0.19449971616268158,
-0.07635954767465591,
-0.07959093153476715,
-0.04746922850608826,
-0.030171001330018044,
0.008003179915249348,
0.010102739557623863,
-0.05781785398721695,
0.026224728673696518,
-0.01917450502514839,
0.0814550593495369,
0.0831909030675888,
0.0648723617196083,
-0.027039049193263054,
0.024416746571660042,
-0.02237514592707157,
-0.029940776526927948,
0.042946942150592804,
-0.02940099872648716,
0.0976526066660881,
-0.10151805728673935,
-0.021541090682148933,
0.13975320756435394,
0.1184631809592247,
0.047474127262830734,
0.160245880484581,
0.010525091551244259,
0.06684361398220062,
0.04182116314768791,
-0.08067455142736435,
-0.0699169784784317,
-0.0989282876253128,
-0.05162080377340317,
-0.08800265192985535,
0.06676310300827026,
0.09538701176643372,
0.05294320732355118,
-0.0169474296271801,
-0.04809403792023659,
0.147819384932518,
0.07900909334421158,
0.020436298102140427,
-0.05403300002217293,
-0.1989741176366806,
0.0019559976644814014,
-0.07214200496673584,
-0.03490268811583519,
-0.03447378799319267,
0.10709021240472794,
-0.0807356983423233,
-0.00404939753934741,
0.009474329650402069,
0.05352136492729187,
0.14430156350135803,
-0.1359441876411438,
-0.12266117334365845,
-0.07453837245702744,
-0.0023506127763539553,
-0.042561329901218414,
-0.10367699712514877,
-0.11252047121524811,
-0.1765478402376175,
-0.05867023766040802,
0.1140642836689949,
-0.038353659212589264,
-0.14971886575222015,
-0.1180485337972641,
0.07662824541330338,
0.06086982786655426,
0.08818504214286804,
-0.007145269308239222,
-0.08599800616502762,
0.005529370624572039,
-0.1507604867219925,
-0.0005367231788113713,
-0.02094237692654133,
0.05137612298130989,
-0.028427114710211754,
0.06272323429584503,
0.0947704091668129,
0.04580072686076164,
0.10249209403991699,
0.05681545287370682,
0.05810587480664253,
0.0779263824224472,
-0.024044256657361984,
-0.0010825865902006626,
0.005654651205986738,
0.022655025124549866,
0.07313580811023712,
0.04865590110421181,
0.020279452204704285,
0.003732867306098342,
0.007296951953321695,
0.05868765711784363,
-0.007051949389278889,
-0.06835844367742538,
-0.0768977478146553,
-0.01232801005244255,
-0.09250148385763168,
0.005684074945747852,
0.09618691354990005,
0.13922949135303497,
0.07072573155164719,
-0.08825167268514633,
-0.117035873234272,
-0.13357211649417877,
-0.12209402024745941,
0.023162057623267174,
-0.013963641598820686,
0.0422799326479435,
0.18407748639583588,
0.06368476897478104,
0.05736571550369263,
0.05606115981936455,
0.023804323747754097,
0.009200496599078178,
0.08702559024095535,
0.11158924549818039,
0.018523724749684334,
0.07603073865175247,
0.026065891608595848,
-0.023003172129392624,
0.14361253380775452,
0.05149630457162857,
0.02847125567495823,
-0.14892545342445374,
0.05337068811058998,
0.0014800388598814607,
-0.14663192629814148,
-0.007970419712364674,
-0.09839598834514618,
-0.11130286753177643,
0.009197717532515526,
0.10363202542066574,
-0.04530533403158188,
-0.11446263641119003,
-0.013827307149767876,
-0.01313786767423153,
0.10234479606151581,
-0.052247870713472366,
-0.044786907732486725,
-0.06891978532075882,
-0.16660569608211517,
0.06987970322370529,
0.01971852220594883,
0.035388704389333725,
-0.12963877618312836,
-0.17431680858135223,
-0.016393104568123817,
-0.08536189049482346,
-0.033897217363119125,
0.07957935333251953,
0.21748840808868408,
-0.051157377660274506,
-0.09914525598287582,
-0.07039019465446472,
0.01568392664194107,
0.10464388132095337,
-0.03197205811738968,
0.014891579747200012,
0.0542006716132164,
-0.1056927815079689,
-0.22542931139469147,
0.006847824901342392,
0.022105447947978973,
-0.04217882081866264,
-0.00472626369446516,
-0.10321174561977386,
-0.006778776179999113,
-0.0425567589700222,
0.027312029153108597,
0.1796288639307022,
0.24053923785686493,
0.03114539198577404,
0.045525986701250076,
0.0415707491338253,
0.025001147761940956,
0.06140284612774849,
0.13494151830673218,
0.009519999846816063,
-0.044105008244514465,
-0.09241936355829239,
-0.13139759004116058,
-0.0403035506606102,
-0.07921767979860306,
-0.09477623552083969,
-0.06613461673259735,
0.05987889692187309,
-0.07965615391731262,
-0.0357140377163887,
0.0451100617647171,
0.051498521119356155,
0.10960265249013901,
0.014521331526339054,
-0.01238575391471386,
0.09224876016378403,
0.09953465312719345,
0.1405099779367447,
0.12191958725452423,
0.04745595157146454,
-0.02938164584338665,
0.07838478684425354,
0.014317657798528671,
0.084599569439888,
0.23313459753990173,
0.0492403544485569,
-0.07688236236572266,
-0.11733262985944748,
-0.054306916892528534,
0.007845512591302395,
-0.07059500366449356,
-0.10740390419960022,
-0.12058484554290771,
0.00691543472930789,
-0.013109174557030201,
-0.03408139571547508,
0.03531637042760849,
0.02371412143111229,
0.011762821115553379,
0.06068519875407219,
-0.15503866970539093,
0.18855424225330353,
0.0893450528383255,
-0.061124444007873535,
0.09650682657957077,
0.0011000155936926603,
-0.0016706815222278237,
0.038852035999298096,
0.07220910489559174,
0.10689222812652588,
0.012470461428165436,
-0.022769875824451447,
0.015192996710538864,
0.12174289673566818,
0.05113951116800308,
0.012936931103467941,
-0.016545113176107407,
-0.007759538944810629,
0.043101146817207336,
-0.027838166803121567,
0.023548772558569908,
-0.07451032102108002,
-0.16164113581180573,
-0.010637895204126835,
0.019017459824681282,
-0.10641665011644363,
-0.16397415101528168,
-0.1253734976053238,
-0.08254139870405197,
-0.1407824158668518,
-0.05145863816142082,
0.010537596419453621,
0.18289509415626526,
-0.12060437351465225,
-0.1068437322974205,
-0.06484293192625046,
0.019040722399950027,
0.12898875772953033,
-0.00403586495667696,
-0.051170650869607925,
-0.09634377062320709,
-0.11889956891536713,
-0.08621636778116226,
-0.0788758248090744,
-0.019524449482560158,
-0.05393939092755318,
-0.05214940384030342,
-0.015187663957476616,
0.07242272794246674,
0.10478102415800095,
0.02744162641465664,
0.0143340565264225,
0.13035538792610168,
0.030796218663454056,
0.08510756492614746,
0.018584664911031723,
0.050180088728666306,
0.0841192975640297,
0.07430551201105118,
-0.056636516004800797,
-0.009889212436974049,
-0.015426714904606342,
5.444281850941479e-05,
0.06574556976556778,
0.009218405932188034,
0.0009033221285790205,
-0.053210679441690445,
-0.036675505340099335,
0.08542952686548233,
-0.0008807474514469504,
-0.037520188838243484,
-0.09384869784116745,
0.0025446570944041014,
-0.08603713661432266,
-0.0362204909324646,
0.06316647678613663,
0.07533988356590271,
0.07378805428743362,
-0.17199963331222534,
-0.11147657781839371,
-0.013769799843430519,
-0.05434904247522354,
-0.05274525657296181,
0.06858767569065094,
-0.02355000004172325,
-0.051123686134815216,
-0.08587058633565903,
-0.0825713574886322,
0.024813532829284668,
0.03106626495718956,
-0.040517657995224,
0.0373532809317112,
0.07740805298089981,
0.08062134683132172,
0.01410477701574564,
-0.09196962416172028,
-0.2771390676498413,
-0.1307973712682724,
0.005601069889962673,
-0.055522620677948,
-0.08851497620344162,
-0.1263665109872818,
-0.26040396094322205,
-0.09475488215684891,
-0.059003692120313644,
-0.09600797295570374,
0.08714393526315689,
0.044996559619903564,
-0.04573445022106171,
-0.10952252149581909,
-0.020140305161476135,
-0.004682105500251055,
0.10488346964120865,
0.1043974757194519,
0.0752888172864914,
0.0015673760790377855,
0.003637858899310231,
-0.10438014566898346,
-0.1458689421415329,
-0.11973750591278076,
-0.021805303171277046,
0.06481005251407623,
0.1872037649154663,
-0.11989816278219223,
0.05870179831981659,
0.06076938658952713,
-0.055030353367328644,
0.10217083990573883,
0.01101094949990511,
0.0319695770740509,
-0.10029081255197525,
-0.05198413506150246,
-0.06466329842805862,
0.020614832639694214,
0.008744088001549244,
-0.04585351049900055,
-0.053285982459783554,
0.10018578916788101,
-0.004900954198092222,
-0.03316327929496765,
-0.010080812498927116,
0.007315153256058693,
0.04473419114947319,
0.033697228878736496,
-0.050054293125867844,
0.044831279665231705,
-0.033764131367206573,
0.10216443240642548,
-0.004883832763880491,
-0.036653075367212296,
-0.07952715456485748,
-0.0030279599595814943,
0.0015800256514921784,
0.0017648822395130992,
-0.08468393981456757,
0.032607730478048325,
-0.03576458990573883,
-0.0005967540200799704,
-0.03507481887936592,
0.019342368468642235,
0.049774836748838425,
0.06150864437222481,
0.019398868083953857,
0.17436762154102325,
0.1026323139667511,
0.03946186229586601,
0.05110618844628334,
-0.0023520071990787983,
-0.075407013297081,
-0.08137712627649307,
0.05122336000204086,
0.0752185806632042,
-0.12824180722236633,
0.01615438051521778,
-0.10773038864135742,
0.06769229471683502,
-0.029001804068684578,
0.04838293418288231,
-0.02496727742254734,
-0.01882813684642315,
-0.09132681787014008,
0.01111467182636261,
0.0288908239454031,
-0.01370174065232277,
0.02973087504506111,
-0.06156626343727112,
-0.11954271048307419,
-0.11803914606571198,
0.03163788467645645,
0.005904732272028923,
-0.08320879936218262,
-0.07936444133520126,
-0.0921311005949974,
-0.037536345422267914,
0.010777725838124752,
0.12128422409296036,
0.06501446664333344,
0.043840441852808,
0.019758451730012894,
0.02834838628768921,
0.056107331067323685,
0.1226767748594284,
0.036854781210422516,
0.004385118838399649,
-0.007050792686641216,
0.0319623202085495,
-0.057125601917505264,
0.050076376646757126,
-0.04916513338685036,
-0.013585733249783516,
0.11412077397108078,
0.03348458558320999,
-0.004951304290443659,
0.052158597856760025,
0.11238235980272293,
-0.02803296037018299,
-0.08112085610628128,
-0.14147770404815674,
0.17466935515403748,
0.16288265585899353,
0.03203602880239487,
-0.12905475497245789,
-0.061494991183280945,
0.027621136978268623,
-0.05426648259162903,
0.009977257810533047,
0.07989221811294556,
0.09421972185373306,
-0.10155840218067169,
-0.08538990467786789,
-0.07476913183927536,
0.08717166632413864,
0.08941866457462311,
0.012370063923299313,
-0.11974884569644928,
-0.0439169816672802,
0.01794366165995598,
-0.03540676459670067,
-0.031183525919914246,
-0.12695205211639404,
0.07760520279407501,
0.03133696690201759,
0.14823706448078156,
-0.05333550274372101,
-0.05020209029316902,
-0.07788319140672684,
0.07729578763246536,
0.06411129981279373,
-0.033860087394714355,
0.03506825864315033,
0.003753790631890297,
-0.05604199320077896,
-0.05289207398891449,
-0.009015822783112526,
-0.1277257204055786,
-0.04590001702308655,
-0.06628338992595673,
0.017593009397387505,
-0.07017471641302109,
-0.02606128714978695,
0.07051558047533035,
0.07945714145898819,
0.00728973001241684,
-0.049312785267829895,
0.008140075020492077,
-0.053827062249183655,
-0.03536035865545273,
-0.021159810945391655,
-0.03127194195985794,
-0.03029758296906948,
-0.03818956017494202,
0.01939230039715767,
0.04504724591970444,
-0.004843888338655233,
0.03443313017487526,
0.07235904037952423,
0.01316768303513527,
-0.06517103314399719,
0.16340138018131256,
0.056506700813770294,
-0.023440390825271606,
0.1575697660446167,
-0.005758918821811676,
0.05283806845545769,
0.01597525179386139,
0.05814661458134651,
0.0006256480701267719,
-0.0776905044913292,
0.06001051887869835,
-0.043252963572740555,
-0.044269662350416183,
-0.06980269402265549,
0.05640370026230812,
0.14438165724277496,
0.09943493455648422,
-0.006677304860204458,
0.029454370960593224,
0.03224041312932968,
-0.02247045747935772,
-0.07063481211662292,
0.012294288724660873,
0.030037077143788338,
0.06888462603092194,
-0.09620897471904755,
-0.059014059603214264,
-0.054292354732751846,
0.0678250789642334,
0.059421636164188385,
-0.10535967350006104,
-0.11349589377641678,
-0.05577343702316284,
-0.07646342366933823,
-0.09862013161182404,
-0.004913273733109236,
0.02998376078903675,
-0.01705518364906311,
-0.017011668533086777,
-0.07559701800346375,
0.12047900259494781,
0.027194710448384285,
0.04247228801250458,
-0.14495933055877686,
-0.13503442704677582,
0.28066661953926086,
0.09425801783800125,
-0.02092280052602291,
-0.03219694644212723,
0.030939821153879166,
0.04903440177440643,
-0.02537425421178341,
0.025493551045656204,
0.016665711998939514,
0.09328747540712357,
-0.1428392380475998,
-0.11315245181322098,
-0.07306403666734695,
0.013085621409118176,
0.029346011579036713,
0.0045060464181005955,
-0.030244920402765274,
-0.12089359760284424,
-0.16727685928344727,
-0.12814022600650787,
-0.05911722034215927,
-0.06149125471711159,
0.0384766049683094,
0.17350222170352936,
0.08085914701223373,
-0.0285966619849205,
0.06980259716510773,
0.08070292323827744,
0.11320772767066956,
0.05493295565247536,
-0.019909607246518135,
-0.0298710186034441,
-0.10583513975143433,
0.015662243589758873,
0.0003688594442792237,
-0.024081118404865265,
0.09721573442220688,
-0.0388052761554718,
-0.042332861572504044,
-0.03366338089108467,
-0.11592575907707214,
-0.15667171776294708,
0.05757579579949379,
0.05612568557262421,
-0.030027829110622406,
-0.10092553496360779,
-0.10248292237520218,
0.0948227122426033,
0.18678368628025055,
0.17934377491474152,
-0.08252222090959549,
-0.010249116457998753,
0.05590349808335304,
0.08974939584732056,
-0.006419298239052296,
-0.01611175388097763,
0.007896688766777515,
0.004091043025255203,
0.018418051302433014,
-0.010544879361987114,
0.013876587152481079,
-0.05202635005116463,
0.05501832440495491,
0.02727343700826168,
-0.027708152309060097,
0.0006324184942059219,
-0.10956814140081406,
-0.06926886737346649,
-0.035201746970415115,
-0.07435782998800278,
-0.09208761900663376,
-0.1800670623779297,
0.0027767224237322807,
0.10571988672018051,
0.26944974064826965,
-0.08550408482551575,
-0.02917451411485672,
0.1210695430636406,
0.21860483288764954,
0.04553130269050598,
0.016366124153137207,
-0.045116741210222244,
-0.020558128133416176,
-0.11844800412654877,
-0.030641527846455574,
0.045034218579530716,
-0.027635762467980385,
-0.050431448966264725,
0.04146331548690796,
-0.01221417635679245,
0.004508538171648979,
0.13443022966384888,
-0.002024160698056221,
-0.11234136670827866,
-0.14086022973060608,
0.20254480838775635,
0.2569912374019623,
0.025581954047083855,
0.047232918441295624,
-0.10574070364236832,
0.12866564095020294,
0.12157104909420013,
-0.08747611939907074,
0.004171827808022499,
-0.01646438054740429,
-0.1172608807682991,
0.039535682648420334,
-0.02829480543732643,
0.12361452728509903,
0.09566555917263031,
-0.15316155552864075,
-0.01442728191614151,
-0.07107362896203995,
-0.05328840762376785,
-0.011585548520088196,
-0.03511102870106697,
-0.17410357296466827,
-0.0021519609726965427,
-0.02858925424516201,
0.004950335249304771,
-0.04230031371116638,
0.0954948291182518,
0.03320162370800972,
0.051025353372097015,
0.0637994185090065,
0.1429683417081833,
0.06720269471406937,
0.03582964465022087,
-0.005684033967554569,
0.08222129195928574,
0.07365931570529938,
0.09594430029392242,
-0.08052460104227066,
-0.021830471232533455,
0.04786578565835953,
-0.024301517754793167,
-0.07441374659538269,
-0.03604631870985031,
0.1324218064546585,
0.10320285707712173,
0.12360742688179016,
0.027418768033385277,
0.0313677042722702,
-0.038823459297418594,
0.014949699863791466,
0.04135724529623985,
-0.05964899808168411,
-0.028330201283097267,
-0.04303290322422981,
0.00453275628387928,
-0.022127637639641762,
0.005192544311285019,
-0.030442217364907265,
-0.012851189821958542,
0.05234576389193535,
0.019760118797421455,
0.014487833715975285,
-0.03645439073443413,
-0.09667795896530151,
-0.11164224147796631,
0.02534240297973156,
0.04192066192626953,
0.010401317849755287,
-0.056742582470178604,
-0.10100993514060974,
-0.013277758844196796,
-0.040368691086769104,
0.021303407847881317,
0.014365997165441513,
0.10224682837724686,
0.004978026729077101,
0.0838724672794342,
0.0068625351414084435,
-0.020080236718058586,
-0.1304154247045517,
0.13839450478553772,
0.1499079018831253,
0.13057495653629303,
-0.05594267696142197,
-0.051076892763376236,
0.05905257910490036,
0.0007424296927638352,
0.007453239988535643,
0.07879776507616043,
-0.03359760716557503,
-0.06437075138092041,
-0.10843177139759064,
-0.0912770926952362,
-0.02931806445121765,
0.012789045460522175,
-0.08404053002595901,
-0.17307519912719727,
-0.0653458908200264,
-0.06287756562232971,
-0.15462546050548553,
0.047101929783821106,
0.05646636337041855,
0.14321616291999817,
0.06028564274311066,
-0.10567513853311539,
-0.004556015599519014,
0.03812584653496742,
0.08925137668848038,
0.025610487908124924,
0.09778127074241638,
0.011492579244077206,
0.08293081820011139,
0.13139458000659943,
0.09685559570789337,
-0.01091313362121582,
-0.026043787598609924,
0.01145725604146719,
0.06272914260625839,
-0.07264205068349838,
-0.1371580958366394,
-0.04192212596535683,
0.07030118256807327,
0.11250549554824829,
-0.06835158169269562,
-0.007958019152283669,
-0.05740221217274666,
0.0884002074599266,
0.09117178618907928,
-0.053936444222927094,
0.003662810893729329,
-0.061051227152347565,
0.13082852959632874,
-0.0823226347565651,
-0.014477821998298168,
-0.018028082326054573,
0.0007852861890569329,
0.11062311381101608,
-0.029164938256144524,
0.04690156504511833,
-0.024549158290028572,
-0.04493016004562378,
0.08165385574102402,
-0.04278115555644035,
-0.09047296643257141,
-0.006165165454149246,
0.020208440721035004,
0.044193729758262634,
-0.004424974787980318,
-0.10554325580596924,
0.005231786053627729,
0.05097940191626549,
0.19819709658622742,
0.08431500941514969,
-0.1243792250752449,
0.038999706506729126,
-0.26203879714012146,
0.04800450801849365,
-0.1216016337275505,
0.03206217661499977,
-0.10632742941379547,
-0.18257175385951996,
-0.07050584256649017,
0.05671539530158043,
0.012080575339496136,
0.027523217722773552,
0.014331838116049767,
0.0838511735200882,
0.012482322752475739,
0.03272286430001259,
-0.04548989608883858,
0.0117836007848382,
-0.05856398493051529,
-0.09912369400262833,
-0.04814591258764267,
-0.01832335814833641,
-0.01790536940097809,
-0.03836578503251076,
-0.048820313066244125,
0.0023349327966570854,
-0.06030253320932388,
0.02028556540608406,
-0.009478977881371975,
-0.08169426769018173,
0.01638558879494667,
0.14757345616817474,
0.0976424366235733,
-0.024929014965891838,
-0.05296744033694267,
0.13351531326770782,
0.055539123713970184,
0.09934620559215546,
0.015459459275007248,
-0.10977223515510559,
-0.04965079948306084,
0.0001484821696067229,
-0.006916359066963196,
-0.04482954740524292,
-0.0457829050719738,
-0.05905070900917053,
0.10396101325750351,
-0.08144515007734299,
-0.276760071516037,
-0.11313235014677048,
-0.07183137536048889,
-0.11880001425743103,
-0.054170530289411545,
-0.08644504845142365,
-0.057157713919878006,
-0.08934382349252701,
-0.0702408030629158,
0.06283344328403473,
-0.012817546725273132,
-0.020136414095759392,
0.004042378626763821,
0.0860915407538414,
-0.002911717863753438,
0.10192207247018814,
0.044572312384843826,
0.11202079057693481,
0.13505242764949799,
-0.015339968726038933,
0.10053320974111557,
0.10997038334608078,
0.09698250889778137,
0.10619881004095078,
0.035781536251306534,
0.01824389025568962,
0.0418224111199379,
0.0028676989022642374,
0.02479192242026329,
0.0020503948908299208,
0.0404532253742218,
-0.05134187266230583,
0.09290987253189087,
0.07883047312498093,
0.03325381502509117,
0.1273372620344162,
0.008826065808534622,
0.03379878029227257,
-0.005135505460202694,
-0.029472317546606064,
0.14271576702594757,
0.03738623484969139,
-0.030237749218940735,
-0.06910964846611023,
0.022899586707353592,
-0.07858070731163025,
-0.09438660740852356,
0.014725293032824993,
0.07210587710142136,
0.014381352812051773,
-0.06970392167568207,
-0.028588293120265007,
-0.06009843572974205,
-0.0022490823175758123,
0.06264536827802658,
0.078256756067276,
-0.07041343301534653,
0.02512729912996292,
0.018597859889268875,
-0.008421757258474827,
-0.06984614580869675,
0.07516631484031677,
0.058803655207157135,
0.06270327419042587,
-0.09261106699705124,
-0.06937313079833984,
-0.10740342736244202,
-0.06236400455236435,
0.029118845239281654,
-0.05802087485790253,
-0.07758114486932755,
-0.1163613349199295,
0.0238497294485569,
0.03321465849876404,
-0.08090860396623611,
-0.0730084553360939,
-0.07498402148485184,
-0.11160007119178772,
-0.06288882344961166,
0.0010007567470893264,
-0.040407586842775345,
0.0016883861972019076,
-0.06706114113330841,
0.056117746978998184,
0.0030049316119402647,
-0.009845116175711155,
-0.11245100945234299,
-0.034487608820199966,
0.03250017389655113,
0.011612444184720516,
0.026201076805591583,
-0.025570297613739967,
0.06886165589094162,
0.13897325098514557,
-0.026718439534306526,
0.07417777925729752,
0.060086384415626526,
0.08773237466812134,
-0.02582896687090397,
0.01731577329337597,
-0.01124369166791439,
-0.03168101981282234,
-0.001824570237658918,
0.017668623477220535,
-0.13377909362316132,
-0.0420345701277256,
-0.03641944378614426,
-0.03362967073917389,
-0.17341580986976624,
-0.07545865327119827,
-0.030233018100261688,
-0.055601418018341064,
-0.04470979794859886,
-0.005963428411632776,
0.05874786898493767,
-0.054757557809352875,
0.09351268410682678,
0.08724768459796906,
0.10573828220367432,
0.05598638951778412,
-0.08767828345298767,
-0.02602190151810646,
0.05450061336159706,
-0.061077043414115906,
0.06858412176370621,
-0.0017444266704842448,
0.06274048984050751,
-0.012411153875291348,
-0.03348838537931442,
0.031202148646116257,
-0.06855983287096024,
-0.023036358878016472,
0.13224157691001892,
0.05367477238178253,
0.08801975846290588,
-0.014321327209472656,
0.04153073951601982,
0.08643358945846558,
0.08430811762809753,
0.07030564546585083,
-0.055313654243946075,
-0.07298806309700012,
-0.05113176628947258,
-0.04674195870757103,
0.08615889400243759,
0.1592828780412674,
0.07338643819093704,
0.000928515859413892,
-0.023218203336000443,
0.15221759676933289,
0.11754605919122696,
0.08017803728580475,
0.049014862626791,
-0.026151029393076897,
0.0831834003329277,
0.07832410931587219,
-0.05640462785959244,
-0.07705691456794739,
0.16827620565891266,
0.1799224615097046,
0.13381892442703247,
-0.006121387705206871,
0.007848674431443214,
0.11615477502346039,
-0.00018444763554725796,
0.14035241305828094,
-0.10773172229528427,
-0.07169557362794876,
-0.04722384363412857,
-0.09260813891887665,
-0.052614349871873856,
0.10521520674228668,
0.17952010035514832,
0.1271427571773529,
0.017716169357299805,
0.0364011712372303,
0.05455784127116203,
-0.02620805986225605,
0.06937510520219803,
0.052735887467861176,
0.08407805114984512,
-0.07088965177536011,
-0.08367453515529633,
0.03307581692934036,
0.054287996143102646,
0.1540481150150299,
0.048697128891944885,
0.09801189601421356,
0.1419314295053482,
0.03558982536196709,
0.14515525102615356,
-0.036020152270793915,
-0.06840605288743973,
0.0007098503992892802,
0.013918546959757805,
0.028383776545524597,
-0.15949583053588867,
-0.11987076699733734,
-0.06168906018137932,
-0.0564146526157856,
-0.1373453140258789,
-0.07051431387662888,
-0.18222209811210632,
-0.03727530688047409,
-0.21962521970272064,
-0.17908966541290283,
-0.053370486944913864,
-0.04301667958498001,
-0.05456969887018204,
0.0008882406982593238,
-0.05364275723695755,
0.027746280655264854,
0.00034456493449397385,
0.09248495101928711,
0.04945465177297592,
-0.047344040125608444,
-0.0010008059907704592,
0.09027928113937378,
0.19947822391986847,
-0.059833746403455734,
0.14095309376716614,
0.16292476654052734,
0.10288342088460922,
-0.05772576853632927,
-0.07943220436573029,
0.10785937309265137,
0.057032641023397446,
0.008963554166257381,
-0.11474595218896866,
-0.05142170190811157,
0.020551150664687157,
0.026594577357172966,
0.006704737897962332,
-0.05809317156672478,
-0.006295804865658283,
-0.03269873559474945,
0.11769627779722214,
-0.00016348953067790717,
-0.042465247213840485,
-0.015844102948904037,
0.0815756693482399,
-0.014646850526332855,
-0.035773180425167084,
-0.031508903950452805,
-0.03754280507564545,
-0.10115871578454971,
-0.11874697357416153,
-0.10621452331542969,
-0.08061408996582031,
0.0977310985326767,
0.016164051368832588,
0.04328940808773041,
0.05807138606905937,
0.04314186051487923,
0.026066573336720467,
0.0023862237576395273,
0.10624828189611435,
0.027170319110155106,
0.050621338188648224,
-0.09710561484098434,
-0.052250925451517105,
0.01705511100590229,
0.02323656529188156,
0.12689712643623352,
-0.009115589782595634,
-0.044299740344285965,
-0.028848836198449135,
-0.007507197093218565,
0.0239475816488266,
0.013799283653497696,
0.036686789244413376,
0.01928502507507801,
0.09205113351345062,
0.06175313517451286,
-0.0027672487776726484,
-0.09137513488531113,
-0.12380623072385788,
-0.03041715733706951,
0.06643303483724594,
-0.0797661691904068,
-0.14933952689170837,
-0.011376061476767063,
-0.025983186438679695,
-0.23201534152030945,
-0.2009100317955017,
-0.07521401345729828,
-0.07156975567340851,
-0.046165309846401215,
0.0006050483789294958,
-0.011713625863194466,
0.004086988512426615,
-0.03919292986392975,
0.027363015338778496,
0.04875606298446655,
-0.027202844619750977,
0.060489147901535034,
0.034418124705553055,
0.024460099637508392,
0.10723903030157089,
-0.09907867759466171,
-0.05423969402909279,
-0.0245013739913702,
-0.09632112085819244,
-0.026519639417529106,
0.023709343746304512,
0.13698892295360565,
0.025574445724487305,
-0.11265654861927032,
-0.11264559626579285,
-0.0698448196053505,
-0.07301533967256546,
-0.06658521294593811,
-0.0056015062145888805,
0.049212872982025146,
-0.02531495690345764,
-0.0974881500005722,
-0.012481520883738995,
0.006365666631609201,
0.04738430678844452,
0.042813658714294434,
-0.047338321805000305,
0.00939107220619917,
0.029573826119303703,
0.04908742383122444,
0.0550411157310009,
-0.09687379747629166,
-0.049426011741161346,
0.08630318194627762,
-0.010718150995671749,
0.08735289424657822,
0.031095795333385468,
-0.06278497725725174,
-0.0962124690413475,
0.013501103036105633,
-0.019806785508990288,
-0.06354115903377533,
-0.0006040618754923344,
-0.02679937332868576,
0.005537578836083412,
0.01661728322505951,
-0.03071572445333004,
-0.06562359631061554,
-0.032397329807281494,
-0.06326491385698318,
-0.1069592833518982,
-0.04767553508281708,
0.06413782387971878,
0.06194132938981056,
-0.029991786926984787,
-0.13534902036190033,
-0.27090999484062195,
-0.060273464769124985,
0.14233548939228058,
-0.00832026731222868,
0.20046116411685944,
-0.026717087253928185,
0.06295765936374664,
0.08122437447309494,
0.015585694462060928,
0.20579679310321808,
0.1894454061985016,
0.08365736901760101,
0.09042274951934814,
-0.03489350154995918,
0.0313105583190918,
-0.007971211336553097,
-0.010269644670188427,
0.06931652128696442,
-0.12691472470760345,
-0.026665255427360535,
0.023422695696353912,
0.023378858342766762,
-0.036500029265880585,
0.011219162493944168,
-0.061271678656339645,
-0.07935260981321335,
0.11142925173044205,
0.05120566114783287,
-0.04651529714465141,
-0.06372658908367157,
0.025247640907764435,
0.04709412902593613,
-0.007493844721466303,
-0.12245330959558487,
-0.018155045807361603,
-0.11974096298217773,
-0.051616374403238297,
-0.11582145094871521,
0.040495555847883224,
0.07949758321046829,
0.0946609377861023,
0.05170300975441933,
0.026140904054045677,
0.05628802999854088,
-0.03327224776148796,
-0.003979239612817764,
0.03649650141596794,
-0.028863199055194855,
-0.08331089466810226,
0.011146721430122852,
0.13602915406227112,
0.12402575463056564,
0.0462023951113224,
0.02218003198504448,
-0.10003747791051865,
-0.07545848190784454,
0.025849206373095512,
0.0574490986764431,
0.028859902173280716,
-0.014682922512292862,
-0.07823601365089417,
-0.1207527294754982,
-0.065926693379879,
-0.07841964066028595,
0.10570142418146133,
0.004482862073928118,
0.04156802222132683,
-0.06660893559455872,
-0.03936915844678879,
0.0908142551779747,
-0.0434039831161499,
-0.023634999990463257,
-0.07626836746931076,
0.014289425686001778,
-0.008836685679852962,
0.02235509268939495,
0.0717913880944252,
-0.10195885598659515,
0.009420393034815788,
0.03531619906425476,
-0.1093171089887619,
0.06904808431863785,
-0.06319278478622437,
0.06016792729496956,
0.0003149838885292411,
-0.018586603924632072,
-0.08153603971004486,
-0.04886417090892792,
0.03960185870528221,
-0.0029685257468372583,
-0.1414594054222107,
-0.06144089996814728,
-0.01389065757393837,
-0.030675746500492096,
-0.10316668450832367,
-0.029918381944298744,
-0.044196102768182755,
-0.008348042145371437,
-0.09282717108726501,
-0.12573543190956116,
-0.0643172487616539,
0.05449847877025604,
0.026050394400954247,
0.034657951444387436,
0.08528675884008408,
0.0684850737452507,
0.09308582544326782,
-0.10646578669548035,
-0.012388832867145538,
0.14333096146583557,
-0.03772599995136261,
-0.1487804800271988,
-0.11510131508111954,
-0.07551458477973938,
0.042878277599811554,
0.18448662757873535,
0.20464536547660828,
0.0964464470744133,
-0.02192099578678608,
0.008696632459759712,
0.02049960382282734,
-0.008311739191412926,
-0.06841079890727997,
-0.07768047600984573,
0.06574860960245132,
0.019777152687311172,
0.039999864995479584,
0.055801164358854294,
-0.13049404323101044,
-0.15202045440673828,
-0.16096143424510956,
0.05469908192753792,
0.01947139948606491,
-0.04946691542863846,
-0.07037592679262161,
-0.08114053308963776,
0.07648243755102158,
-0.0139190424233675,
0.05605923756957054,
0.007460045628249645,
-0.05079718306660652,
0.01933848112821579,
-0.04319019615650177,
-0.03947916254401207,
-0.00659209256991744,
0.02910715714097023,
0.02247045747935772,
0.04292775318026543,
0.009158780798316002,
0.09273403882980347,
0.10858261585235596,
0.0381145104765892,
-0.002672656672075391,
0.03715004771947861,
0.059469036757946014,
0.0895448550581932,
-0.03754233941435814,
0.11943566799163818,
0.11929315328598022,
-0.017952430993318558,
-0.01280734408646822,
0.03493454307317734,
-0.07148245722055435,
-0.10005916655063629,
-0.019601453095674515,
0.09362512826919556,
-0.004492605105042458,
0.010763339698314667,
-0.009979954920709133,
0.009114366956055164,
0.009444612078368664,
-0.014776019379496574,
-0.0010312258964404464,
0.08049245923757553,
0.031869735568761826,
0.032338812947273254,
0.046509839594364166,
-0.011919038370251656,
-0.06702441722154617,
-0.006735220551490784,
0.11164925992488861,
-0.03570093587040901,
-0.028360523283481598,
-0.1620236039161682,
-0.1183651015162468,
-0.1364789605140686,
-0.043800096958875656,
0.08894374221563339,
-0.06303732842206955,
-0.09805504977703094,
0.0633247122168541,
0.08469021320343018,
0.10690457373857498,
0.0905349850654602,
-0.0334702767431736,
-0.058975815773010254,
-0.0365816093981266,
0.01931137405335903,
0.07345213741064072,
-0.09502290189266205,
-0.15890860557556152,
-0.010280946269631386,
-0.010417899116873741,
0.05263213440775871,
-0.053561724722385406,
0.00842316634953022,
0.0164658110588789,
-0.06576251983642578,
-0.09454718977212906,
-0.13323576748371124,
-0.06793708354234695,
-0.056185849010944366,
-0.06533250957727432,
0.06883644312620163,
-0.1172127053141594,
-0.20874495804309845,
-0.02629854902625084,
0.06200277432799339,
0.05661218985915184,
0.10452447831630707,
-0.06637509912252426,
-0.06092275679111481,
0.021895432844758034,
0.06253219395875931,
-0.01874614879488945,
-0.11035249382257462,
-0.008608493953943253,
0.008936453610658646,
-0.0709807500243187,
-0.04144691675901413,
-0.006297585554420948,
0.20018358528614044,
-0.019762109965085983,
-0.0006064708577468991,
-0.009764634072780609,
-0.08666862547397614,
-0.08739002048969269,
-0.05915902927517891,
-0.030235422775149345,
-0.06211266294121742,
-0.2153683304786682,
-0.005779922939836979,
0.076510950922966,
0.06573903560638428,
-0.034363482147455215,
-0.015837477520108223,
0.06392110139131546,
0.054468508809804916,
0.018508775159716606,
0.08009364455938339,
0.15870848298072815,
0.05878507345914841,
0.054355815052986145,
0.04430679976940155,
0.010590894147753716,
-0.031631313264369965,
0.08367956429719925,
0.1309751272201538,
0.03899995982646942,
0.0078037879429757595,
0.11369195580482483,
0.07678750157356262,
-0.00487612234428525,
-0.20151567459106445,
-0.005477619357407093,
0.13944140076637268,
0.0902879387140274,
0.006207902450114489,
-0.09164728969335556,
0.08064465969800949,
-0.10354600101709366,
-0.03695666417479515,
-0.05352397263050079,
0.006102201994508505,
0.11762183159589767,
0.00912102498114109,
0.1341744363307953,
0.0488010011613369,
0.03910145163536072,
0.0320531502366066,
-0.042755622416734695,
0.0873364806175232,
-0.08860486000776291,
0.024410272017121315,
-0.04208768531680107,
-0.05359461531043053,
-0.08773519843816757,
0.03291340917348862,
0.01471766922622919,
-0.15883606672286987,
-0.04454483464360237,
0.08818289637565613,
0.09786435216665268,
0.09407945722341537,
0.01853690668940544,
-0.014957954175770283,
0.1223260909318924,
0.03840800002217293,
-0.004324873443692923,
-0.12172680348157883,
-0.08967325091362,
0.027889275923371315,
0.010747650638222694,
-0.01994946040213108,
-0.020878424867987633,
-0.0009741276735439897,
-0.1115284413099289,
-0.08020403981208801,
-0.11967974901199341,
0.13667593896389008,
0.14245451986789703,
0.038158632814884186,
-0.04042438045144081,
-0.012704353779554367,
-0.0554451122879982,
0.07452915608882904,
0.06103624030947685,
0.06162568926811218,
-0.032386623322963715,
-0.039858561009168625,
-0.021410394459962845,
-0.072288379073143,
-0.039020244032144547,
-0.05086609721183777,
-0.03487471491098404,
0.06418490409851074,
0.17343780398368835,
0.13260027766227722,
-0.0010644226567819715,
0.10912015289068222,
0.1315603107213974,
0.12858957052230835,
0.1050456091761589,
0.1604965329170227,
0.02050873450934887,
0.04650389775633812,
0.06195589154958725,
-0.05465139076113701,
-0.03380012884736061,
-0.0010434308787807822,
0.008861061185598373,
0.0644359141588211,
0.016779178753495216,
-0.0028283975552767515,
0.07493585348129272,
-0.09934669733047485,
0.02446703240275383,
-0.052142199128866196,
0.2409563958644867,
-0.05392681807279587,
0.12590932846069336,
0.04823877289891243,
-0.00551453186199069,
-0.07772315293550491,
-0.05622795224189758,
0.18503326177597046,
0.10416848212480545,
-0.07306544482707977,
-0.11480983346700668,
-0.0021291368175297976,
-0.09248391538858414,
-0.015939677134156227,
-0.09798873215913773,
0.011314788833260536,
-0.01114075630903244,
-0.08995935320854187,
-0.042547136545181274,
-0.007776746992021799,
-0.029315218329429626,
0.03580886498093605,
0.09164591878652573,
-0.023856304585933685,
-0.1092546135187149,
-0.004615205340087414,
-0.016501447185873985,
0.06177407503128052,
0.04920123144984245,
0.00611170893535018,
-0.07734372466802597,
0.0022190148010849953,
0.01855470985174179,
0.041386593133211136,
-0.06044355407357216,
0.02630126290023327,
-0.06357412040233612,
0.06876358389854431,
-0.008786127902567387,
0.058632124215364456,
0.06908083707094193,
-0.06546251475811005,
0.016373656690120697,
-0.06187615171074867,
0.021462000906467438,
-0.011247025802731514,
-0.127789705991745,
0.03401784226298332,
-0.04083062708377838,
-0.11838847398757935,
-0.08638107776641846,
-0.06637183576822281,
-0.06289559602737427,
0.056502729654312134,
-0.02617677114903927,
0.05359530821442604,
0.10411401093006134,
0.042342886328697205,
0.06661756336688995,
0.06621921807527542,
0.07176218181848526,
0.17356471717357635,
0.1412058174610138,
0.11509951204061508,
0.05297659710049629,
-0.03337789326906204,
0.04491711035370827,
0.02131281979382038,
-0.05260324478149414,
0.061201076954603195,
-0.10725913941860199,
0.013630049303174019,
-0.055050820112228394,
-0.11648709326982498,
-0.11033827811479568,
0.07068002969026566,
-0.010178874246776104,
-0.01954525150358677,
-0.010834183543920517,
0.02729353867471218,
0.08047033101320267,
-0.0738760456442833,
0.07720550149679184,
-0.01787424087524414,
-0.040635671466588974,
0.0004552315513137728,
0.07780549675226212,
-0.08750943094491959,
-0.08477158844470978,
-0.10422411561012268,
0.02517230249941349,
0.09838925302028656,
0.012940888293087482,
0.07741478830575943,
0.06939254701137543,
0.07914373278617859,
-0.05923789367079735,
-0.1309761106967926,
-0.05872310325503349,
0.00025802035816013813,
0.04258669167757034,
-0.12226393818855286,
-0.18621820211410522,
-0.08450058847665787,
0.0059290737845003605,
0.10865818709135056,
-0.03165723755955696,
0.0798630639910698,
0.10033911466598511,
0.013854200951755047,
-0.02433878742158413,
0.12041597068309784,
0.044293973594903946,
0.03768254071474075,
0.011401777155697346,
-0.1567416489124298,
0.1531088501214981,
0.12013502418994904,
-0.028723319992423058,
0.04141844063997269,
-0.0608212873339653,
0.09101574122905731,
0.12419212609529495,
0.026326483115553856,
0.08576788753271103,
-0.004033597186207771,
0.03596474975347519,
0.07952652871608734,
0.04116780310869217,
-0.006040850188583136,
-0.025841236114501953,
-0.06420862674713135,
-0.02287769317626953,
0.12147283554077148,
-0.00704755075275898,
0.06042066216468811,
-0.041794873774051666,
0.050462506711483,
-0.024135112762451172,
-0.04077110067009926,
-0.011547878384590149,
-0.021036168560385704,
-0.061496540904045105,
-0.10351597517728806,
-0.01788165420293808,
-0.03175736963748932,
0.045983292162418365,
0.08117935806512833,
-0.04758806154131889,
0.002561981324106455,
0.056861359626054764,
-0.07636897265911102,
-0.07549870759248734,
-0.009226139634847641,
0.004856965504586697,
0.07653214037418365,
-0.06384450942277908,
-0.04769919812679291,
0.06857723742723465,
0.02743382193148136,
0.01680581644177437,
0.025253208354115486,
-0.11495373398065567,
-0.09981788694858551,
-0.09891541302204132,
-0.17188099026679993,
0.017998194321990013,
0.04904833436012268,
0.14004187285900116,
0.04649670049548149,
-0.05538097023963928,
0.028677185997366905,
-0.07107187807559967,
-0.1827622950077057,
0.002864620415493846,
0.0008900625398382545,
-0.01862923987209797,
-0.07239123433828354,
-0.06575820595026016,
-0.09744669497013092,
-0.09192157536745071,
0.026250993832945824,
-0.04173900559544563,
0.0091183977201581,
0.015852775424718857,
0.014649083837866783,
0.02529650367796421,
0.0704011470079422,
0.12885065376758575,
0.06022878363728523,
0.06816694140434265,
0.15891191363334656,
0.09012908488512039,
0.06272044777870178,
0.04483246058225632,
0.014326607808470726,
-0.10331286489963531,
0.004627137444913387,
0.06545975059270859,
0.04103723540902138,
-0.056694500148296356,
-0.03142254054546356,
-0.026376400142908096,
0.023444954305887222,
-0.015113997273147106,
0.1336255669593811,
-0.15455226600170135,
-0.110714852809906,
-0.0669466182589531,
0.09265795350074768,
0.12173768877983093,
-0.012653548270463943,
0.09861665964126587,
0.0355999656021595,
-0.03185207024216652,
-0.1582646369934082,
0.03613123670220375,
0.08550718426704407,
-0.01021712925285101,
-0.03605349734425545,
-0.0283427182585001,
-0.05954141169786453,
-0.1204400360584259,
-0.10720689594745636,
0.05066358670592308,
0.24796174466609955,
-0.06133997440338135,
0.021200252696871758,
0.017971990630030632,
0.09426907449960709,
0.13620662689208984,
-0.0012909119250252843,
0.08952099829912186,
-0.06711861491203308,
0.01820400170981884,
-0.2099355012178421,
0.0625358372926712,
-0.040458306670188904,
-0.0775853618979454,
0.018247582018375397,
-0.05484473332762718,
-0.053074583411216736,
-0.01710764691233635,
0.03273801878094673,
0.09696999937295914,
0.09467717260122299,
0.07729020714759827,
0.1580258160829544,
-0.0029764208011329174,
0.06404969841241837,
0.07903295755386353,
0.0750901997089386,
0.12410639971494675,
0.004538953769952059,
-0.017061054706573486,
-0.008002477698028088,
-0.060303766280412674,
0.12430301308631897,
-0.17994347214698792,
-0.08187482506036758,
-0.06494522839784622,
-0.07869141548871994,
0.0010843640193343163,
-0.07940435409545898,
-0.05978108197450638,
-0.024065442383289337,
-0.10181562602519989,
-0.18968269228935242,
-0.0757608711719513,
0.0032919766381382942,
0.10026442259550095,
-0.05954623967409134,
0.024242976680397987,
-0.018534237518906593,
0.166786789894104,
0.17390942573547363,
-0.024090908467769623,
-0.04596555978059769,
-0.0189416091889143,
0.01298260036855936,
0.02029949240386486,
-0.03222455084323883,
0.08178970962762833,
0.08006631582975388,
-0.1306672841310501,
-0.09374236315488815,
0.08500457555055618,
-0.014260448515415192,
-0.10362979769706726,
-0.04796469956636429,
-0.006088311318308115,
0.0067144460044801235,
-0.11596404761075974,
0.00731565011665225,
0.0567520372569561,
0.024667223915457726,
-0.1612548828125,
-0.0833871141076088,
-0.05571785941720009,
-0.026050280779600143,
-0.06043599918484688,
0.020368335768580437,
-0.06758972257375717,
-0.006349421106278896,
-0.05573844537138939,
0.06875085085630417,
-0.041054338216781616,
-0.09496227651834488,
0.06845484673976898,
0.08766138553619385,
0.0348612517118454,
0.09906177967786789,
0.13330617547035217,
0.11388088762760162,
0.03254425525665283,
-0.07119310647249222,
0.08109205961227417,
0.05584373697638512,
0.03440096229314804,
0.0062146978452801704,
-0.0761357843875885,
-0.027111871168017387,
0.14244873821735382,
0.15249259769916534,
0.06826042383909225,
0.08568210154771805,
0.0006581002380698919,
-0.042717088013887405,
0.07591427862644196,
0.02347562275826931,
-0.05720887705683708,
-0.10122469812631607,
0.0313960425555706,
-0.0020700732711702585,
-0.08930680900812149,
-0.08080155402421951,
0.04508598521351814,
-0.09605976194143295,
-0.09943491965532303,
-0.03516470268368721,
-0.05928242206573486,
-0.10614883154630661,
-0.09034104645252228,
-0.02116943709552288,
0.05152817443013191,
0.040184661746025085,
0.019539538770914078,
-0.05885453522205353,
-0.05067375302314758,
-0.03360158950090408,
0.05417773127555847,
-0.06625472009181976,
0.01209260243922472,
0.08957180380821228,
0.12438283860683441,
0.04727426916360855,
0.03708471357822418,
0.009496558457612991,
0.02803344838321209,
-0.01704471930861473,
-0.09113433957099915,
0.04398678243160248,
-0.010026908479630947,
0.000395695649785921,
-0.04993673413991928,
-0.08646094799041748,
0.0064493403770029545,
0.05315706506371498,
0.10269280523061752,
-0.02376602590084076,
0.021927837282419205,
0.0474669486284256,
-0.009146775119006634,
0.04328453168272972,
0.07470303028821945,
-0.023001648485660553,
-0.05553817376494408,
0.0003118621534667909,
-0.01889709383249283,
0.054861776530742645,
0.03468331694602966,
-0.08549225330352783,
-0.08773373812437057,
0.004610646981745958,
0.011991862207651138,
0.1267736405134201,
0.08617380261421204,
0.019342707470059395,
0.008580551482737064,
-0.11876875907182693,
-0.06829644739627838,
-0.0005466726724989712,
-0.04573892802000046,
-0.0461655855178833,
0.052283599972724915,
-0.09234683215618134,
0.027106616646051407,
-0.047568079084157944,
0.020067613571882248,
-0.08523304760456085,
0.0030255084857344627,
0.03782116621732712,
0.01718384586274624,
0.09010220319032669,
0.11280074715614319,
0.07776113599538803,
-0.05252879858016968,
0.07174614816904068,
-0.011675055138766766,
-0.0431981235742569,
-0.01483647059649229,
0.11638393253087997,
0.020219100639224052,
0.09045691788196564,
0.03813377767801285,
0.06816019862890244,
0.0032042486127465963,
-0.04774376377463341,
-0.16947266459465027,
-0.007772201206535101,
-0.13738147914409637,
0.04093620553612709,
0.09076816588640213,
0.017700226977467537,
0.012626051902770996,
0.03733052685856819,
0.030360383912920952,
0.043119627982378006,
0.0701509639620781,
0.019856778904795647,
0.05486777052283287,
-0.08854565769433975,
0.0011457925429567695,
0.02185494638979435,
-0.05095132812857628,
0.032919012010097504,
-0.07807853817939758,
0.02211865782737732,
-0.005895101930946112,
-0.02245098166167736,
0.061005596071481705,
0.024439828470349312,
-0.06668496876955032,
-0.10156663507223129,
-0.0948561504483223,
-0.03719930723309517,
-0.06201259791851044,
-0.09180839359760284,
-0.1150534600019455,
-0.06550706177949905,
-0.0793532207608223,
0.09938037395477295,
0.01440473087131977,
0.07432016730308533,
-0.05411878600716591,
-0.025839105248451233,
0.00014701955660711974,
0.01854812726378441,
0.0811142548918724,
0.15780167281627655,
0.08312962204217911,
-0.023085076361894608,
0.0009822002612054348,
-0.04589664563536644,
0.098725326359272,
0.21796530485153198,
0.0920664370059967,
-0.08019156008958817,
0.004870891105383635,
-0.07046862691640854,
0.03854828700423241,
0.011282006278634071,
0.05915497615933418,
0.004059356637299061,
0.031839121133089066,
-0.015954846516251564,
0.09585637599229813,
0.12542977929115295,
-0.024219099432229996,
-0.007069732062518597,
0.02373437210917473,
-0.20599745213985443,
0.0765058696269989,
0.06876273453235626,
0.05795798823237419,
-0.003865230130031705,
-0.02289118617773056,
0.014924570918083191,
0.06122947484254837,
-0.06837587058544159,
0.0774630531668663,
-0.009133442305028439,
0.029961327090859413,
0.014956188388168812,
0.04381877928972244,
0.021250149235129356,
-0.023209627717733383,
-0.029066402465105057,
0.01193518377840519,
0.024523215368390083,
-0.00801848154515028,
-0.06142779439687729,
-0.16027429699897766,
-0.14547120034694672,
-0.024711590260267258,
-0.044232916086912155,
-0.0750318318605423,
0.025235064327716827,
0.011383713223040104,
0.03421870619058609,
-0.03133750334382057,
0.014830050058662891,
-0.06136911362409592,
0.10560949146747589,
0.04493246227502823,
0.06681594252586365,
0.11591112613677979,
0.15265309810638428,
0.14962898194789886,
0.17979109287261963,
0.18844009935855865,
0.03314455226063728,
0.07605566084384918,
0.08107959479093552,
0.11077382415533066,
0.16089457273483276,
-0.007943229749798775,
-0.06318844109773636,
0.012301084585487843,
-0.0760657787322998,
0.10851982980966568,
-0.08336310088634491,
-0.035384055227041245,
-0.0729757696390152,
-0.1585799753665924,
-0.05774669721722603,
0.07280469685792923,
0.10056519508361816,
0.05028364434838295,
-0.17054377496242523,
-0.07785120606422424,
0.0727190375328064,
0.15457218885421753,
-0.15377850830554962,
-0.08808918297290802,
-0.008864927105605602,
0.019758233800530434,
-0.004799962975084782,
0.0029886176344007254,
-0.014008771628141403,
-0.07927215099334717,
-0.04993394762277603,
0.042768802493810654,
-0.10620733350515366,
-0.10099451243877411,
-0.09770495444536209,
0.028824960812926292,
0.01613105647265911,
-0.024058932438492775,
0.20162899792194366,
0.07069515436887741,
0.06368592381477356,
0.07385014742612839,
0.13016526401042938,
0.005881636869162321,
0.12099094688892365,
-0.031015997752547264,
-0.07796026021242142,
0.036253415048122406,
0.015358570963144302,
-0.009763936512172222,
-0.03759855031967163,
0.0029805165249854326,
0.03745599463582039,
0.007811984047293663,
-0.049060579389333725,
-0.18163549900054932,
-0.07762828469276428,
-0.0035523436963558197,
0.04627284035086632,
0.03435966745018959,
0.10409637540578842,
0.10838243365287781,
0.098953016102314,
0.023898323997855186,
-0.1492636501789093,
-0.06002216041088104,
-0.05107223615050316,
0.06957203149795532,
0.08907018601894379,
-0.0351005382835865,
0.023088321089744568,
0.12353596091270447,
0.18288592994213104,
0.20465824007987976,
0.05659932643175125,
0.0029315282590687275,
-0.021263033151626587,
-0.0351974219083786,
-0.06397242099046707,
-0.03679017722606659,
0.006193835753947496,
-0.06009747087955475,
0.07464831322431564,
0.0025085844099521637,
-0.07029668241739273,
0.004424842540174723,
-0.17175814509391785,
-0.09050285816192627,
-0.01345402654260397,
0.10777745395898819,
-0.03749653324484825,
0.07494167238473892,
-0.09229323267936707,
-0.02876914106309414,
0.027193410322070122,
-0.05233487859368324,
0.10281497985124588,
0.054293062537908554,
-0.03126872330904007,
-0.007734986953437328,
0.15629462897777557,
0.07984842360019684,
0.03669724985957146,
-0.05970626696944237,
-0.09753242135047913,
0.0631207749247551,
-0.03583349660038948,
0.031899627298116684,
0.03299182653427124,
0.020995263010263443,
-0.056949321180582047,
-0.0033689909614622593,
0.08760394901037216,
0.08851096034049988,
-0.01544189266860485,
0.06545928120613098,
0.10259748250246048,
-0.08485083281993866,
-0.037920478731393814,
-0.05751264840364456,
-0.10463542491197586,
-0.17810919880867004,
-0.030216876417398453,
0.0046781618148088455,
-0.044465579092502594,
0.0764019638299942,
0.06596626341342926,
-0.016348877921700478,
-0.02071372978389263,
0.02322491630911827,
0.05583959445357323,
0.011762178502976894,
0.04992494359612465,
0.04933016002178192,
0.05553640052676201,
-0.09675288200378418,
-0.09179878979921341,
-0.0762585997581482,
-0.03154001757502556,
-0.05540897697210312,
0.013585245236754417,
-0.042281683534383774,
-0.03400791063904762,
-0.056228216737508774,
-0.01871357299387455,
-0.029465865343809128,
-0.06744978576898575,
-0.18637070059776306,
-0.07550495117902756,
-0.05205250903964043,
0.0068758828565478325,
0.0563313290476799,
-0.024524236097931862,
-0.007737028878182173,
0.006746378261595964,
0.11157459020614624,
0.1317843347787857,
0.05788537859916687,
-0.02099379524588585,
0.10101119428873062,
-0.050079867243766785,
-0.08881870657205582,
0.01836971752345562,
0.011846153996884823,
0.010894272476434708,
-0.0703875795006752,
-0.017607862129807472,
0.13779766857624054,
-0.035205695778131485,
-0.06251470744609833,
0.012119065970182419,
0.010496099479496479,
-0.09042783081531525,
-0.029500683769583702,
-0.05944516509771347,
-0.036547377705574036,
0.0641792044043541,
-0.019718462601304054,
-0.11896726489067078,
-0.13684144616127014,
0.004777265712618828,
-0.057697318494319916,
-0.0194883830845356,
0.04085809737443924,
-0.07507649809122086,
0.08065468072891235,
-0.0516478456556797,
-0.07013451308012009,
-0.020655717700719833,
0.00823808740824461,
-0.01688721589744091,
-0.052029017359018326,
0.050503142178058624,
0.12160242348909378,
0.052788980305194855,
-0.025998340919613838,
-0.02728324569761753,
0.08878269046545029,
0.11868450045585632,
0.048090286552906036,
0.13821689784526825,
0.1132517158985138,
0.08581457287073135,
0.06885238736867905,
-0.006669692229479551,
0.11415068060159683,
-0.03915809094905853,
-0.1268882155418396,
0.014330083504319191,
0.09561002999544144,
-0.023661551997065544,
-0.02656746655702591,
-0.14171288907527924,
0.03659133240580559,
-0.03733508288860321,
-0.0473470613360405,
0.017808927223086357,
-0.02349858172237873,
-0.07567647844552994,
-0.04140974581241608,
0.03691917657852173,
-0.18020038306713104,
-0.10903923213481903,
-0.08021330088376999,
0.031127668917179108,
-0.059230949729681015,
-0.054146893322467804,
-0.13859285414218903,
-0.1439591944217682,
-0.07525546103715897,
-0.061885055154561996,
0.0049597471952438354,
0.012132197618484497,
-0.03444676846265793,
0.013094996102154255,
0.12743781507015228,
0.036370549350976944,
-0.02183525636792183,
0.09811064600944519,
0.1114746481180191,
0.023638440296053886,
0.056905895471572876,
-0.05724192410707474,
0.08151862025260925,
0.1393335461616516,
0.00534780090674758,
-0.028273839503526688,
0.07608305662870407,
0.05748619884252548,
-0.06091247871518135,
0.048074569553136826,
-0.007410064339637756,
-0.030756626278162003,
0.012374740093946457,
0.04290320724248886,
0.039641156792640686,
-0.045386042445898056,
-0.03293391689658165,
-0.005275321658700705,
0.0010792446555569768,
0.07164976745843887,
-0.005163249559700489,
-0.11716002970933914,
-0.01491779275238514,
0.022545533254742622,
-0.0633455216884613,
-0.05552486330270767,
-0.0657697468996048,
-0.1764339804649353,
-0.018474604934453964,
-0.016704868525266647,
-0.06504066288471222,
-0.12412266433238983,
-0.004899040330201387,
0.035478465259075165,
-0.10863280296325684,
0.08119407296180725,
0.057956598699092865,
-0.0430862158536911,
0.02800428308546543,
0.03757051005959511,
-0.03608773648738861,
-0.1155199185013771,
-0.022716868668794632,
-0.12814684212207794,
0.20515558123588562,
-0.05166114866733551,
-0.10967929661273956,
0.0013614051276817918,
-0.05208512023091316,
0.025854086503386497,
-0.11636899411678314,
-0.01734773814678192,
0.09067770093679428,
0.13841979205608368,
0.01747785694897175,
-0.04618297889828682,
0.15071989595890045,
0.10033611208200455,
-0.06363381445407867,
0.030495712533593178,
-0.14789649844169617,
0.09536478668451309,
0.11679109185934067,
-0.024039989337325096,
0.0168630238622427,
-0.10886985808610916,
0.10206911712884903,
0.14301858842372894,
0.029665475711226463,
0.05241519212722778,
-0.028894195333123207,
0.060718946158885956,
-0.0027406886219978333,
-0.035737909376621246,
-0.06052933633327484,
0.04229873791337013,
-0.03131742775440216,
0.037572868168354034,
-0.012593795545399189,
-0.017272118479013443,
0.0015725443372502923,
-0.012947402894496918,
-0.06043589487671852,
-0.018679918721318245,
-0.23954151570796967,
-0.2134915441274643,
0.02950507402420044,
0.07686169445514679,
0.04667864367365837,
0.0671767070889473,
-0.17008626461029053,
-0.17462731897830963,
-0.02995653823018074,
-0.0882960632443428,
0.046657364815473557,
0.09384916722774506,
-0.03160402178764343,
-0.10976288467645645,
-0.19251641631126404,
0.17274917662143707,
0.1510346382856369,
0.14489665627479553,
0.042699605226516724,
0.03460235893726349,
-0.0776270404458046,
-0.02270103432238102,
0.1257811188697815,
0.1063184067606926,
0.15346743166446686,
-0.018922897055745125,
0.14692281186580658,
0.19012890756130219,
0.054837144911289215,
0.02900616265833378,
-0.01867886632680893,
0.07570961862802505,
0.07810717076063156,
-0.011898893862962723,
-0.12480556219816208,
-0.0614711195230484,
-0.04743419587612152,
0.1152222603559494,
-0.02618054673075676,
-0.06446759402751923,
-0.012713965028524399,
-0.054044704884290695,
0.018667064607143402,
0.037972450256347656,
-0.03772514685988426,
0.06717883795499802,
0.016154471784830093,
-0.1743413805961609,
-0.04576284438371658,
0.07306372374296188,
-0.016309790313243866,
0.016863152384757996,
-0.028971966356039047,
0.06035885214805603,
0.035242959856987,
-0.11698725074529648,
0.015302218496799469,
-0.03973933309316635,
0.009178047068417072,
-0.08083757013082504,
-0.05946308374404907,
-0.002737664617598057,
-0.043137531727552414,
-0.14791467785835266,
-0.131709486246109,
0.0815172791481018,
0.08608435839414597,
0.015050431713461876,
-0.2281472235918045,
-0.20700375735759735,
0.17304983735084534,
0.06493089348077774,
0.0704353004693985,
-0.04598446190357208,
-0.07179561257362366,
0.09426489472389221,
-0.010181530378758907,
0.008095343597233295,
-0.10076046735048294,
-0.026244087144732475,
0.002135386923328042,
-0.06876266747713089,
0.1652786135673523,
-0.05570698156952858,
0.1339605450630188,
0.05178748816251755,
-0.1389717012643814,
0.010980859398841858,
0.02484312281012535,
0.15320271253585815,
0.021778173744678497,
-0.004632522817701101,
-0.08646037429571152,
0.03846588358283043,
0.08259955048561096,
0.022359715774655342,
-0.02349424734711647,
-0.06843328475952148,
0.008563914336264133,
0.07275094091892242,
-0.07609833776950836,
-0.07051999866962433,
0.04979082942008972,
0.1458708643913269,
0.064177505671978,
0.06802759319543839,
0.06465842574834824,
0.08815308660268784,
-0.06185749173164368,
-0.14085513353347778,
0.15912409126758575,
-0.07590539753437042,
-0.13964809477329254,
-0.16609549522399902,
-0.03774111717939377,
-0.15871389210224152,
-0.043185438960790634,
-0.06755071878433228,
-0.19070285558700562,
-0.054540034383535385,
0.0733053982257843,
0.08940015733242035,
0.030988208949565887,
0.059190452098846436,
0.19795887172222137,
0.020037023350596428,
0.09929783642292023,
0.1412193775177002,
0.04519398510456085,
-0.07244501262903214,
-0.05658317357301712,
-0.07859782129526138,
0.010341744869947433,
0.024085624143481255,
-0.0195742379873991,
-0.12321901321411133,
-0.022053567692637444,
0.0417935810983181,
-0.07868575304746628,
-0.1908903867006302,
0.2089800387620926,
-0.029528578743338585,
0.09297091513872147,
-0.05680514872074127,
-0.13337107002735138,
0.04764151573181152,
-0.0014921611873432994,
0.08119309693574905,
-0.005661979783326387,
0.03810110315680504,
0.11129327863454819,
0.07931667566299438,
-0.08079534024000168,
0.035846203565597534,
0.08665717393159866,
-0.0033232071436941624,
0.032512862235307693,
-0.09689051657915115,
0.12049160152673721,
-0.03996314853429794,
-0.2672191262245178,
0.0031066066585481167,
0.0032820850610733032,
0.06550431251525879,
0.005891516339033842,
-0.03437075763940811,
0.09970582276582718,
0.0601961724460125,
0.013325931504368782,
-0.09531673043966293,
0.0828966349363327,
0.14010176062583923,
0.10399685055017471,
-0.04089146479964256,
-0.2382575273513794,
0.05141725391149521,
0.1120486855506897,
-0.014172781258821487,
0.029758326709270477,
-0.02257806994020939,
0.10904332995414734,
0.1033259704709053,
0.055960025638341904,
-0.20510713756084442,
-0.15202945470809937,
0.02991974912583828,
-0.023933615535497665,
0.004592102486640215,
-0.09476553648710251,
-0.06554248929023743,
-0.17143946886062622,
-0.07795187830924988,
0.09070611000061035,
0.015250029042363167,
0.05822153016924858,
0.02582193911075592,
0.02434481307864189,
0.052149951457977295,
-0.01718009077012539,
0.10123222321271896,
-0.04253136366605759,
-0.046114481985569,
-0.018646100535988808,
0.06737793236970901,
0.028087126091122627,
0.004416306968778372,
-0.1340736746788025,
0.05863500386476517,
-0.11228930950164795,
-0.045133862644433975,
0.06155604124069214,
-0.12118257582187653,
0.035218317061662674,
-0.03704125061631203,
0.033419981598854065,
-0.07622271776199341,
-0.0751400738954544,
0.032021183520555496,
-0.043644171208143234,
0.12729768455028534,
-0.07067009061574936,
-0.04174599051475525,
-0.06329111009836197,
-0.008605269715189934,
0.1255103051662445,
0.01854417286813259,
-0.03216514363884926,
0.033578310161828995,
-0.03493930399417877,
-0.019045304507017136,
0.00578283192589879,
-0.002155801746994257,
0.023489899933338165,
-0.1302156299352646,
-0.1353105902671814,
0.04526267200708389,
-0.023607568815350533,
0.0195255558937788,
0.01714140549302101,
-0.006145232357084751,
-0.02030184678733349,
-0.13139881193637848,
-0.03160765767097473,
0.09422161430120468,
0.09238369017839432,
-0.0563778430223465,
-0.059629254043102264,
0.05291438475251198,
-0.04314189776778221,
0.08706853538751602,
0.10087765753269196,
-0.008783838711678982,
0.011797336861491203,
0.037843890488147736,
-0.0021680074278265238,
-0.22646372020244598,
-0.09691391885280609,
0.023267414420843124,
-0.06772270798683167,
-0.0038848738186061382,
-0.1546807736158371,
0.07117699831724167,
0.048354052007198334,
-0.017391977831721306,
-0.1273641288280487,
0.09102319926023483,
0.12011642754077911,
0.0898282453417778,
-0.0666256844997406,
-0.13853149116039276,
0.07211967557668686,
0.15367946028709412,
0.08920107781887054,
-0.02037131041288376,
-0.03372380882501602,
0.11903169006109238,
0.048774804919958115,
-0.026505455374717712,
-0.027534589171409607,
-0.05493679270148277,
0.07663317024707794,
0.03219348564743996,
-0.09507820755243301,
0.04450223967432976,
-0.015828421339392662,
-0.034206636250019073,
-0.1317949742078781,
0.03337647393345833,
0.1326000690460205,
-0.05162931978702545,
-0.1607324779033661,
-0.03411392122507095,
0.0431237556040287,
0.018417557701468468,
-0.09498155117034912,
0.07921379804611206,
0.1112949475646019,
0.10321829468011856,
-0.14949510991573334,
-0.11064325273036957,
-0.0324554517865181,
-0.019356364384293556,
0.11846882849931717,
0.0290825292468071,
-0.04801888018846512,
-0.056213464587926865,
0.010627426207065582,
0.0326329842209816,
-0.12010788917541504,
-0.1748608648777008,
0.1082148626446724,
-0.02144787460565567,
-0.09851851314306259,
-0.13609406352043152,
-0.16056205332279205,
0.0367506705224514,
0.09749916940927505,
0.07152549177408218,
0.014762427657842636,
0.08616816997528076,
-0.0443933829665184,
-0.08508171141147614,
0.01583210751414299,
0.071452796459198,
0.21469096839427948,
0.0011078902753069997,
0.00985181424766779,
-0.03238288685679436,
-0.05795006453990936,
-0.08069578558206558,
0.006228039041161537,
-0.051434263586997986,
0.03817471116781235,
0.01244339905679226,
0.07095993310213089,
-0.04940102621912956,
-0.09279529750347137,
-0.043412137776613235,
0.025851624086499214,
0.10287731885910034,
-0.015622264705598354,
0.06846346706151962,
0.052695583552122116,
0.061043813824653625,
0.0779692679643631,
0.0766197144985199,
0.11065366119146347,
0.14473086595535278,
0.019926559180021286,
-0.04304612800478935,
0.10360051691532135,
-0.12628619372844696,
-0.0019460649928078055,
-0.058318354189395905,
0.2458830028772354,
0.12484721094369888,
0.10392259061336517,
0.03354867175221443,
-0.17645639181137085,
-0.18752151727676392,
-0.015233597718179226,
-0.03602514788508415,
0.03584514185786247,
-0.06052123382687569,
-0.09514230489730835,
0.05492773652076721,
-0.04579562693834305,
0.1456645131111145,
0.01590350829064846,
0.14153191447257996,
-0.07659594714641571,
-0.06497738510370255,
0.03346294164657593,
0.06733297556638718,
-0.10896369814872742,
0.03301594406366348,
0.05231934413313866,
-0.034769780933856964,
-0.010317228734493256,
-0.08926719427108765,
0.013690504245460033,
0.1137860044836998,
-0.0383957214653492,
-0.007737760432064533,
-0.1432221382856369,
-0.07200906425714493,
0.03552386537194252,
0.008309689350426197,
0.05353610962629318,
-0.01550348475575447,
-0.11879747360944748,
-0.03742356225848198,
-0.01824207976460457,
0.06952102482318878,
-0.06440529972314835,
-0.08618071675300598,
-0.05048040300607681,
-0.025453928858041763,
-0.06968485563993454,
-0.031783487647771835,
-0.20087721943855286,
-0.02826479636132717,
-0.02739345282316208,
-0.10474392026662827,
-0.10646503418684006,
-0.010456535965204239,
0.013190193101763725,
-0.0049302466213703156,
0.009825187735259533,
0.07690850645303726,
0.07699546962976456,
0.034669287502765656,
0.10205380618572235,
0.07460428029298782,
0.1663030982017517,
-0.016281332820653915,
-0.025151250883936882,
0.08802980184555054,
0.047153253108263016,
0.09508820623159409,
0.0738825649023056,
-0.06983137875795364,
-0.02661651186645031,
0.03040340542793274,
0.020403603091835976,
-0.03003159910440445,
-0.05181562155485153,
-0.01378628145903349,
-0.015589471906423569,
0.06657719612121582,
-0.008213341236114502,
-0.0045752148143947124,
-0.154483363032341,
-0.15109658241271973,
-0.13288423418998718,
-0.02061454951763153,
0.02565203420817852,
-0.043334417045116425,
-0.24002663791179657,
-0.07439028471708298,
0.004992665257304907,
-0.03305704891681671,
-0.02752886712551117,
-0.019073622301220894,
0.02099456824362278,
-0.02056652121245861,
-0.035531677305698395,
-0.048864252865314484,
0.014782059006392956,
0.0021352737676352262,
-0.0005491964984685183,
-0.014727340079843998,
0.05176934972405434,
0.05500026419758797,
0.03988521173596382,
-0.09983488917350769,
-0.04824792593717575,
0.14977586269378662,
0.07343137264251709,
0.11146827042102814,
0.06028568372130394,
0.06301699578762054,
-0.012438169680535793,
-0.07344526797533035,
-0.10421247035264969,
0.11657150834798813,
0.08208688348531723,
0.004967034328728914,
0.018836405128240585,
0.11127004027366638,
0.034143608063459396,
0.06916031241416931,
-0.004660488106310368,
0.06041915714740753,
0.07164383679628372,
0.02658022753894329,
0.14928869903087616,
-0.03566313534975052,
0.024711158126592636,
-0.20394395291805267,
0.020748049020767212,
0.115013487637043,
0.03779680281877518,
-0.05291666463017464,
-0.12601147592067719,
-0.002490702085196972,
-0.05314429849386215,
0.03620029613375664,
0.08744139969348907,
0.03222298622131348,
0.03148067742586136,
0.0417342483997345,
-0.033764228224754333,
0.027329523116350174,
-0.09809309244155884,
-0.002301118103787303,
-0.08916544169187546,
-0.054853860288858414,
0.04466908425092697,
-0.10577388107776642,
0.0005726753734052181,
-0.0124212009832263,
0.04144527390599251,
0.011686762794852257,
-0.03344355523586273,
-0.06414472311735153,
-0.02878810465335846,
0.022989625111222267,
-0.04294129088521004,
-0.019036782905459404,
-0.006182382348924875,
-0.018691597506403923,
0.013059768825769424,
-0.0315372496843338,
0.033602502197027206,
0.09086190164089203,
0.045460984110832214,
-0.044972579926252365,
-0.07331432402133942,
0.04608313366770744,
0.07889005541801453,
0.07525139302015305,
-0.007077962625771761,
0.03220105543732643,
0.07671406865119934,
-0.027156611904501915,
-0.007264918182045221,
-0.03096241131424904,
-0.08535581827163696,
-0.05850780010223389,
-0.07505358755588531,
-0.0008061367552727461,
-0.027559155598282814,
-0.14891743659973145,
-0.09248485416173935,
-0.0020052294712513685,
0.019194399937987328,
-0.07289696484804153,
-0.10784713178873062,
-0.13921552896499634,
0.021596260368824005,
0.051197707653045654,
0.023096328601241112,
-0.09053612500429153,
-0.090518519282341,
0.05795549601316452,
0.05968702584505081,
-0.03800071030855179,
0.09211771190166473,
0.06273617595434189,
-0.0803142637014389,
-0.05022649094462395,
0.08175136893987656,
0.03188276290893555,
0.025652950629591942,
-0.10477330535650253,
-0.018647927790880203,
0.15032975375652313,
0.1552118957042694,
0.15070587396621704,
-0.015039216727018356,
0.04776046797633171,
0.013066619634628296,
0.004939056467264891,
0.09237051010131836,
0.04799419268965721,
0.055727578699588776,
0.030027030035853386,
-0.1044721007347107,
-0.19359378516674042,
0.0800708681344986,
0.12262839078903198,
0.033339664340019226,
0.011305897496640682,
-0.08141876757144928,
-0.04334511607885361,
-0.06964507699012756,
-0.016107160598039627,
0.09464545547962189,
0.21608866751194,
0.030434925109148026,
-0.058952007442712784,
-0.06747854501008987,
-0.08051851391792297,
0.032809872180223465,
0.06017862260341644,
-0.07107171416282654,
-0.05926463007926941,
-0.12918531894683838,
-0.11084514111280441,
0.02355143427848816,
0.012704186141490936,
0.047047652304172516,
-0.03897977992892265,
-0.0868753045797348,
0.04307110980153084,
-0.061436839401721954,
0.06622491776943207,
0.07760877907276154,
0.007201346568763256,
0.10903922468423843,
0.11772283166646957,
-0.029983066022396088,
-0.1282932162284851,
-0.043611396104097366,
0.05048837140202522,
0.11645360291004181,
-0.13894134759902954,
-0.06981141120195389,
-0.08995458483695984,
-0.11015913635492325,
0.04766501486301422,
-0.21115949749946594,
0.03717204928398132,
-0.13112562894821167,
-0.0205774437636137,
-0.0014766660751774907,
0.04652189090847969,
0.004266195930540562,
-0.008111978881061077,
-0.04413016512989998,
-0.04927131161093712,
-0.04750010371208191,
-0.03006746619939804,
-0.014981262385845184,
-0.00914766825735569,
0.0740179643034935,
-0.015010185539722443,
0.0012329278979450464,
0.011444893665611744,
-0.027337484061717987,
0.03070405311882496,
0.04081648588180542,
-0.1754116415977478,
-0.19472451508045197,
-0.04526565968990326,
-0.0743403434753418,
-0.0937415361404419,
-0.23675143718719482,
-0.14848101139068604,
-0.0050557758659124374,
-0.02087085321545601,
-0.06887644529342651,
0.045718878507614136,
-0.1570318341255188,
-0.01983976736664772,
-0.06321655958890915,
0.07351557165384293,
0.03745062276721001,
-0.061920423060655594,
-0.12423884123563766,
-0.08484354615211487,
-0.01599329523742199,
0.01816454343497753,
0.10887452214956284,
-0.02983865700662136,
-0.06863514333963394,
0.08184785395860672,
0.13433703780174255,
0.08674739301204681,
0.10277865082025528,
-0.012679223902523518,
0.1624928116798401,
0.13285493850708008,
0.1121988520026207,
0.07188229262828827,
0.10737881809473038,
-0.02966662310063839,
-0.042066141963005066,
0.028360804542899132,
0.11797231435775757,
0.04232603311538696,
0.03643125295639038,
0.026312071830034256,
-0.036244332790374756,
0.02104697749018669,
0.08378615230321884,
0.0036847926676273346,
0.00721027422696352,
0.033575866371393204,
-0.047399744391441345,
-0.0774122104048729,
0.072275809943676,
-0.07166647166013718,
-0.012065703980624676,
-0.07821323722600937,
-0.08711959421634674,
0.03567861020565033,
-0.046590760350227356,
-0.10783038288354874,
0.06814353913068771,
-0.00835264753550291,
0.08064668625593185,
0.01270220521837473,
-0.1502179056406021,
0.06137686222791672,
0.06538108736276627,
0.06555843353271484,
-0.08434346318244934,
-0.08897767215967178,
-0.10703779011964798,
-0.014385458081960678,
-0.052577905356884,
0.014107136987149715,
0.03880727291107178,
0.02535657398402691,
0.04005842283368111,
-0.004652983509004116,
0.04006192460656166,
-0.05646783113479614,
0.07745025306940079,
0.007774063386023045,
0.05334199592471123,
0.015095601789653301,
0.11414226144552231,
0.04182238131761551,
0.05344271659851074,
-0.0028912159614264965,
0.05908950790762901,
0.06353595107793808,
-0.08528278023004532,
-0.00511869415640831,
0.003692339174449444,
-0.006228437647223473,
0.09214314818382263,
-0.0418747216463089,
0.047784868627786636,
-0.03647482395172119,
-0.08062420040369034,
-0.06631056219339371,
-0.0072389324195683,
0.058336202055215836,
0.13555388152599335,
0.2949305474758148,
0.22453881800174713,
-0.003694332903251052,
0.015873676165938377,
0.13220277428627014,
0.13665272295475006,
0.18751710653305054,
0.08155820518732071,
0.15656502544879913,
0.051865823566913605,
0.003628440434113145,
-0.03365882486104965,
0.08317848294973373,
0.10974918305873871,
0.09411972016096115,
0.0879579484462738,
-0.01898743025958538,
0.17111721634864807,
-0.05418791621923447,
0.08443830907344818,
0.023811403661966324,
0.22038419544696808,
0.06472613662481308,
0.0950612872838974,
0.08750880509614944,
-0.07527559250593185,
-0.0019315724493935704,
-0.17561158537864685,
-0.00850746314972639,
-0.05719775706529617,
-0.060439810156822205,
-0.10089778900146484,
0.043110474944114685,
-0.044454220682382584,
0.08288707584142685,
-0.16437336802482605,
0.026698630303144455,
0.08711554855108261,
-0.0019655709620565176,
-0.07280804961919785,
0.056820403784513474,
-0.06358542293310165,
0.06866875290870667,
0.05610400810837746,
-0.14781831204891205,
-0.04052453860640526,
-0.0192819032818079,
0.009323197416961193,
0.06030881032347679,
-0.0734463781118393,
-0.10781009495258331,
-0.05395052954554558,
0.009076966904103756,
0.005092134233564138,
0.09659118205308914,
-0.05387197807431221,
0.030323931947350502,
-0.03524081036448479,
-0.0015249558491632342,
0.11045822501182556,
-0.06275495141744614,
0.04990708455443382,
0.07645914703607559,
-0.06777490675449371,
-0.07448729127645493,
-0.008639509789645672,
0.0507088266313076,
-0.05411196127533913,
0.10032887756824493,
-0.04826897010207176,
-0.1308661252260208,
-0.004689421970397234,
0.01318796630948782,
0.04157809913158417,
0.11862514913082123,
-0.020860381424427032,
-0.0365884006023407,
0.10145861655473709,
-0.02666068822145462,
0.15623487532138824,
0.10717205703258514,
0.1621256172657013,
0.08338858932256699,
0.05272022634744644,
-0.027108101174235344,
0.10523825883865356,
-0.04076769948005676,
0.0360291413962841,
-0.13554085791110992,
-0.06869728118181229,
0.0607604943215847,
-0.19087418913841248,
0.019834384322166443,
-0.0898657962679863,
-0.06882024556398392,
-0.04301506653428078,
0.07494181394577026,
-0.023167982697486877,
-0.013483166694641113,
-0.11357063055038452,
-0.0449414998292923,
0.06555598974227905,
-0.08821742981672287,
0.08675350993871689,
-0.0053075337782502174,
-0.06653021275997162,
0.022506525740027428,
-0.03064361959695816,
0.06182301789522171,
-0.07387720048427582,
-0.18278750777244568,
0.01879691891372204,
-0.04062836617231369,
0.022530032321810722,
0.1102655827999115,
-0.0006777711096219718,
-0.008924328722059727,
-0.02465139888226986,
-0.019512929022312164,
0.09422089904546738,
0.02459719404578209,
-0.023489998653531075,
-0.07981568574905396,
0.0125277666375041,
0.08148987591266632,
0.07906060665845871,
0.22488491237163544,
0.01808265596628189,
0.057328324764966965,
0.07464335113763809,
0.09725674241781235,
0.06954437494277954,
-0.08721024543046951,
-0.050009533762931824,
-0.0003078648296650499,
0.07974737882614136,
0.06510782241821289,
0.08729617297649384,
0.09238541126251221,
0.01638626679778099,
0.003282121615484357,
0.012613825500011444,
0.04406493902206421,
0.04755539447069168,
-0.1762106567621231,
-0.12470133602619171,
-0.12455902248620987,
-0.004802239593118429,
0.009643856436014175,
0.016128459945321083,
-0.00046938570449128747,
-0.04126640781760216,
0.04057848080992699,
0.047897111624479294,
0.12076433002948761,
-0.006911994889378548,
-0.06447692215442657,
0.013471229933202267,
-0.0866531953215599,
-0.0011118737747892737,
-0.14405156672000885,
0.027425775304436684,
0.10829414427280426,
0.020228173583745956,
-0.10435241460800171,
-0.09431271255016327,
-0.04672010987997055,
-0.021558860316872597,
0.12870299816131592,
0.05225538834929466,
-0.014588375575840473,
0.008883294649422169,
-0.0068027726374566555,
-0.029280846938490868,
0.010661711916327477,
0.009327712468802929,
0.051185015588998795,
-0.0958123430609703,
0.008868105709552765,
0.030431516468524933,
-0.0741887018084526,
-0.0028329873457551003,
0.08827029913663864,
-0.012845984660089016,
-0.008840966038405895,
0.024202832952141762,
-0.1139649897813797,
0.02198425680398941,
-0.08191011101007462,
0.12339580059051514,
0.035903457552194595,
-0.16395826637744904,
0.010760396718978882,
-0.045278195291757584,
-0.12505511939525604,
-0.012056967243552208,
-0.00902622938156128,
-0.10597983747720718,
-0.03519844636321068,
6.594109436264262e-06,
-0.002661466132849455,
-0.01380969863384962,
0.1015072911977768,
0.14231792092323303,
0.045584049075841904,
0.016680708155035973,
0.06426717340946198,
-0.06545408815145493,
0.08820877224206924,
0.09484534710645676,
0.08772432059049606,
0.08869187533855438,
-0.01827305369079113,
0.04275494068861008,
0.006293490994721651,
-0.005522510036826134,
-0.0660734474658966,
0.013925260864198208,
-0.05974572151899338,
-0.023876231163740158,
-0.07520531117916107,
-0.12961125373840332,
-0.08699274808168411,
-0.09236212819814682,
0.0513819083571434,
0.07405153661966324,
0.0055586202070117,
0.02863374911248684,
-0.13359063863754272,
-0.1052033081650734,
0.07751307636499405,
0.20265701413154602,
-0.026644503697752953,
0.013766025193035603,
-0.029360907152295113,
-0.004511954262852669,
-0.04796787351369858,
-0.061697784811258316,
-0.002601988846436143,
-0.13721932470798492,
-0.027353506535291672,
-0.0019710666965693235,
-0.06376247853040695,
-0.007060006260871887,
0.021947477012872696,
0.05961616337299347,
0.08878747373819351,
-0.07027027755975723,
-0.06842894852161407,
-0.05296596139669418,
0.04830488935112953,
0.024926340207457542,
-0.02255742810666561,
0.026373716071248055,
-0.06445466727018356,
0.04082989692687988,
-0.1152726262807846,
0.13835234940052032,
0.06613556295633316,
-0.12579427659511566,
-0.10599692910909653,
-0.05424309894442558,
-0.07299713790416718,
-0.14534041285514832,
0.06996335089206696,
0.060997117310762405,
0.013237918727099895,
0.03947669640183449,
0.08588480204343796,
-0.11686927080154419,
-0.017637260258197784,
0.05380835384130478,
-0.020517926663160324,
0.05387645959854126,
-0.10338042676448822,
-0.07942653447389603,
0.03310510888695717,
-0.12124039232730865,
0.1037142425775528,
-0.1367204785346985,
-0.05131451040506363,
-0.06115194782614708,
-0.019268987700343132,
0.025909584015607834,
-0.13494595885276794,
-0.03771068900823593,
-0.004530222155153751,
0.022333906963467598,
-0.22662490606307983,
-0.03007245808839798,
-0.000823892536573112,
0.1423223912715912,
0.06001418083906174,
0.04416336864233017,
-0.1580023616552353,
0.04115476459264755,
0.062045350670814514,
-0.0432114340364933,
0.007563205901533365,
-0.07762134075164795,
-0.07812908291816711,
0.05451240390539169,
-0.12927791476249695,
-0.07562568038702011,
0.07282120734453201,
-0.1212540939450264,
-0.03664702922105789,
0.0807473286986351,
0.09974196553230286,
-0.06522934883832932,
-0.15473012626171112,
-0.1709774136543274,
-0.013013944029808044,
-0.08636308461427689,
-0.07881374657154083,
-0.01605835184454918,
0.03209438920021057,
-0.15879002213478088,
-0.12015415728092194,
-0.03157927468419075,
-0.07361886650323868,
0.008847006596624851,
0.029324917122721672,
-0.09894312918186188,
0.058358464390039444,
-0.010077516548335552,
0.02834583818912506,
0.08296919614076614,
-0.01546299085021019,
0.07847033441066742,
0.14355798065662384,
0.18011242151260376,
0.041832804679870605,
0.042533278465270996,
-0.013143283315002918,
-0.0043505397625267506,
0.0863577201962471,
0.03981597721576691,
-0.07938792556524277,
-0.028121385723352432,
-0.10055571049451828,
-0.08407405018806458,
0.0036045184824615717,
-0.051757555454969406,
0.02186116948723793,
-0.14435963332653046,
-0.030542925000190735,
0.021231550723314285,
-0.1635788083076477,
0.034627143293619156,
-0.043045077472925186,
0.01473210472613573,
-0.08003178238868713,
0.009083629585802555,
-0.05670606344938278,
-0.05676544830203056,
-0.018435528501868248,
0.03431046009063721,
-0.019610699266195297,
-0.17971065640449524,
-0.059371791779994965,
-0.019196175038814545,
0.013751898892223835,
-0.21745571494102478,
-0.13422046601772308,
0.1677597612142563,
0.1147768646478653,
-0.053289707750082016,
0.040070291608572006,
-0.010513787157833576,
0.07014605402946472,
0.11336369812488556,
-0.029296521097421646,
0.01772182621061802,
0.003022311022505164,
0.051395248621702194,
0.003237071679905057,
0.03238622471690178,
0.012827752158045769,
-0.10511820763349533,
0.04046733304858208,
-0.008808383718132973,
0.02373194508254528,
0.04092320054769516,
-0.07212579995393753,
0.0739557221531868,
-0.13778997957706451,
0.009482285007834435,
0.1413218379020691,
0.06542211025953293,
-0.04621129110455513,
-0.10781433433294296,
0.1080533042550087,
0.034279827028512955,
0.002820816123858094,
0.04073157161474228,
0.023803452029824257,
-0.020519085228443146,
0.006561703979969025,
-0.025484740734100342,
-0.02301216684281826,
-0.012941422872245312,
0.004203862976282835,
0.06768722087144852,
-0.02146620862185955,
0.058900266885757446,
0.20686759054660797,
0.07134494930505753,
-0.01645398698747158,
-0.07477756589651108,
-0.09177763760089874,
-0.041804239153862,
-0.03000633977353573,
-0.08496986329555511,
-0.08693612366914749,
0.04148786514997482,
0.06605961918830872,
-0.0617312416434288,
-0.03945682570338249,
-0.09126249700784683,
-0.001814505085349083,
-0.20960670709609985,
-0.04148169234395027,
0.03681124001741409,
0.048962127417325974,
0.17822067439556122,
0.08463521301746368,
-0.03149637579917908,
0.014804569073021412,
0.1132897213101387,
0.01790582202374935,
0.17047075927257538,
-0.02936806157231331,
0.11027978360652924,
0.011238538660109043,
0.08147409558296204,
-0.04828021675348282,
0.04971946030855179,
0.032387252897024155,
0.034427665174007416,
-0.08266178518533707,
-0.00790758803486824,
-0.06189659237861633,
0.026738299056887627,
0.06540099531412125,
-0.04952183738350868,
0.014527983963489532,
-0.0008294887957163155,
0.04823986440896988,
0.1015583723783493,
-0.05402982234954834,
0.045278601348400116,
-0.052329547703266144,
0.043435003608465195,
-0.030009549111127853,
0.017658567056059837,
-0.023464148864150047,
0.06905970722436905,
0.07806078344583511,
0.017391057685017586,
-0.07339484244585037,
-0.047063883394002914,
-0.04946533590555191,
0.11468405276536942,
0.09265639632940292,
0.04223396256566048,
0.043231330811977386,
0.250545859336853,
0.07009383291006088,
-0.004621649626642466,
0.01993659883737564,
0.06030789762735367,
-0.053894106298685074,
0.18646487593650818,
0.060806479305028915,
-0.09576199948787689,
-0.0559401735663414,
-0.16555310785770416,
-0.007964648306369781,
-0.08147168904542923,
-0.053335316479206085,
-0.025165356695652008,
-0.13609185814857483,
-0.06867921352386475,
-0.14334577322006226,
-0.05868533253669739,
0.0068124630488455296,
0.013078005984425545,
0.1522759646177292,
-0.03972255438566208,
-0.047504112124443054,
-0.039860598742961884,
0.03712164983153343,
-0.041932377964258194,
-0.19884519279003143,
0.0073279873467981815,
-0.05725143849849701,
0.031148511916399002,
-0.03646894171833992,
0.02294926531612873,
0.09135527908802032,
0.050636038184165955,
0.08494626730680466,
-0.05126022547483444,
-4.868559699389152e-05,
0.12635700404644012,
0.0773882046341896,
0.01516309566795826,
0.014285930432379246,
0.013376764953136444,
0.058552857488393784,
8.910350152291358e-05,
0.04189237579703331,
0.011267275549471378,
0.017290692776441574,
-0.029847361147403717,
-0.09626688808202744,
-0.000989321037195623,
-0.02273852564394474,
-0.13140268623828888,
-0.1297556757926941,
0.033161334693431854,
0.10473044216632843,
-0.047757476568222046,
-0.13109618425369263,
-0.17874601483345032,
-0.17911602556705475,
-0.01861628331243992,
0.012580889277160168,
-0.002642101841047406,
-0.032887838780879974,
0.016469499096274376,
-0.06141762435436249,
-0.0297728031873703,
-0.045090463012456894,
0.06641259789466858,
0.053749408572912216,
-0.1098095253109932,
-0.07583212852478027,
-0.05647511035203934,
0.06250683963298798,
0.043912436813116074,
-0.10305799543857574,
-0.028661681339144707,
0.13899727165699005,
0.16050396859645844,
0.16410844027996063,
-0.07278138399124146,
-0.0068989526480436325,
-0.08779823780059814,
0.044348493218421936,
0.10809959471225739,
-0.0019468613900244236,
0.09101559221744537,
-0.009590609930455685,
0.039870794862508774,
-0.009781346656382084,
-0.09165378659963608,
0.04453466460108757,
0.056893106549978256,
0.0774955078959465,
0.05466576665639877,
-0.10096824914216995,
0.055456459522247314,
0.08519609272480011,
0.06532198190689087,
0.05387405306100845,
0.060899827629327774,
0.0234808549284935,
-0.042307835072278976,
0.009418518282473087,
0.07048120349645615,
0.08090327680110931,
-0.05398159846663475,
-0.08788774162530899,
0.026553399860858917,
0.10808472335338593,
0.0603344663977623,
0.03350050747394562,
-0.04707067087292671,
0.04592166841030121,
0.011601309292018414,
-0.03400893881917,
-0.02663814276456833,
0.1334475725889206,
0.09475237876176834,
0.06605495512485504,
-0.07658910006284714,
-0.1369219720363617,
-0.11281906068325043,
-0.03085678443312645,
-0.04721398279070854,
0.01953320950269699,
-0.09161892533302307,
-0.08570436388254166,
0.05866450071334839,
0.1918790638446808,
0.07036518305540085,
-0.012948731891810894,
-0.0429241918027401,
-0.04694124683737755,
0.053302254527807236,
0.06726383417844772,
-0.07034085690975189,
-0.04753288999199867,
-0.019320320338010788,
0.11501185595989227,
-0.0019259944092482328,
-0.06301068514585495,
-0.09025806933641434,
0.03068651631474495,
0.04939934238791466,
-0.03779399394989014,
-0.04863854497671127,
-0.028628922998905182,
0.009511763229966164,
0.03404880687594414,
-0.03255343437194824,
0.05248750001192093,
0.046965137124061584,
-0.011909529566764832,
-0.06601282209157944,
0.07463286072015762,
0.007652167696505785,
-0.08424258977174759,
-0.14534462988376617,
-0.14409857988357544,
0.0002754557935986668,
-0.016795817762613297,
-0.019908303394913673,
-0.03757595270872116,
-0.20655538141727448,
0.0063581401482224464,
-0.006819934118539095,
0.020937371999025345,
0.06163850426673889,
0.1303192377090454,
-0.06844005733728409,
-0.1368076354265213,
0.025327622890472412,
0.07073215395212173,
0.13610145449638367,
-0.028097134083509445,
-0.06777564436197281,
-0.05886354669928551,
-0.0778643935918808,
-0.11843490600585938,
-0.027722449973225594,
0.051256775856018066,
0.06565631926059723,
0.18780829012393951,
0.10079160332679749,
-0.011195318773388863,
-0.008962626568973064,
0.07599028199911118,
0.13852085173130035,
0.15204787254333496,
0.0334799624979496,
0.03885934501886368,
0.029059598222374916,
-0.0017060833051800728,
0.10346466302871704,
0.11393633484840393,
0.02650003880262375,
-0.0651807114481926,
-0.11040320992469788,
-0.06686246395111084,
-0.04889070242643356,
0.08181622624397278,
0.17226654291152954,
0.09171709418296814,
0.037484657019376755,
0.014752129092812538,
0.03347012400627136,
0.1647154539823532,
0.15904751420021057,
0.06380073726177216,
0.13745711743831635,
-0.05241067335009575,
0.10016705095767975,
0.01135370321571827,
0.14135390520095825,
0.164519265294075,
0.10672729462385178,
0.04037298262119293,
-0.006296512205153704,
-0.03560689836740494,
0.015762213617563248,
0.1624709963798523,
0.09051576256752014,
-0.028019454330205917,
-0.12972469627857208,
-0.13066422939300537,
-0.052872709929943085,
0.05063188448548317,
0.07212429493665695,
0.049424923956394196,
0.014048364944756031,
-0.0877750813961029,
-0.016916122287511826,
0.2139008790254593,
0.19497689604759216,
0.04610004648566246,
0.06225663423538208,
-0.027827434241771698,
0.11004774272441864,
0.08713454008102417,
0.07466617226600647,
0.14152787625789642,
0.06554048508405685,
0.06218300759792328,
0.07758551836013794,
0.027087122201919556,
0.06923244148492813,
-0.007410661317408085,
-0.006045416463166475,
0.017468903213739395,
0.08589359372854233,
0.07799651473760605,
-0.1691359132528305,
-0.13018018007278442,
-0.10177306085824966,
0.10544950515031815,
0.021583575755357742,
-0.07658413052558899,
-0.12597978115081787,
-0.10487588495016098,
-0.07827743887901306,
-0.09959939867258072,
-0.15403079986572266,
-0.16031359136104584,
-0.12042055279016495,
-0.05870559811592102,
-0.06641396880149841,
0.017109518870711327,
0.07673875242471695,
0.06749031692743301,
-0.044838566333055496,
-0.09170437604188919,
-0.049602340906858444,
0.03149484470486641,
0.13479386270046234,
-0.15860751271247864,
0.030650876462459564,
0.1702043116092682,
0.08429639786481857,
0.05174419283866882,
-0.0923992395401001,
0.14685644209384918,
0.04285469278693199,
-0.024124950170516968,
0.03037019819021225,
-0.003958298359066248,
0.20188353955745697,
0.09664927423000336,
0.005218443926423788,
0.08447971940040588,
0.008001424372196198,
0.10992647707462311,
0.004749951884150505,
0.0073778387159109116,
0.04536764323711395,
-0.07355072349309921,
0.07130112498998642,
-0.0269751138985157,
-0.05946655198931694,
0.0014746924862265587,
0.03371515870094299,
-0.09460537880659103,
-0.13138237595558167,
-0.1292411834001541,
-0.11813171207904816,
0.039752181619405746,
-0.018170170485973358,
-0.05722704157233238,
0.059176865965127945,
0.04403228685259819,
-0.08372524380683899,
-0.0020260093733668327,
0.06326194107532501,
0.06713652610778809,
0.10157497972249985,
-0.11843030899763107,
-0.1242726668715477,
0.022441361099481583,
-0.10792186856269836,
0.019712768495082855,
0.09537901729345322,
-0.06447980552911758,
-0.06168749928474426,
-0.061956822872161865,
-0.04024259001016617,
-0.02891390025615692,
-0.03832137957215309,
0.048721250146627426,
0.14196424186229706,
0.08566764742136002,
-0.01882207952439785,
-0.09253016859292984,
-0.11894532293081284,
-0.10659413039684296,
-0.1421259194612503,
-0.05112583935260773,
-0.05925009027123451,
-0.032448332756757736,
-0.14094114303588867,
-0.23843680322170258,
-0.07580540329217911,
-0.0728471651673317,
-0.02483247220516205,
-0.015364798717200756,
-0.03591695427894592,
-0.042839787900447845,
-0.07296771556138992,
-0.08716019988059998,
-0.009881457313895226,
0.03265305981040001,
0.021501267328858376,
-0.011799242347478867,
-0.025491341948509216,
0.10286746174097061,
0.140272319316864,
-0.06731009483337402,
-0.017016734927892685,
0.05950266867876053,
-0.058289192616939545,
-0.14440351724624634,
-0.015665695071220398,
0.11036394536495209,
0.10878915339708328,
-0.08613240718841553,
-0.169581800699234,
-0.05155425891280174,
-0.037249624729156494,
0.000582655135076493,
-0.014328906312584877,
-0.025150587782263756,
-0.0706077367067337,
-0.04350893571972847,
0.012964560650289059,
0.00431860750541091,
0.12121382355690002,
0.013911556452512741,
-0.006219934672117233,
0.004397346172481775,
-0.06205103546380997,
0.03359551727771759,
-0.0073023694567382336,
0.031627584248781204,
-0.019119935110211372,
0.014658383093774319,
-0.030714357271790504,
0.08533980697393417,
0.13072030246257782,
-0.01686226949095726,
-0.11964964121580124,
0.009761316701769829,
-0.012135569006204605,
0.0214068666100502,
0.05606953799724579,
-0.010691148228943348,
0.028371332213282585,
-0.07640819251537323,
0.0009633594308979809,
0.0017453539185225964,
0.0158570297062397,
-0.01115744560956955,
-0.04029291495680809,
0.017470167949795723,
0.022030111402273178,
-0.006860804278403521,
-0.016960814595222473,
-0.12164127826690674,
-0.13388164341449738,
0.04398106038570404,
0.0832500159740448,
0.06959133595228195,
-0.04415937885642052,
0.06907130777835846,
-0.03951898217201233,
0.07060286402702332,
0.02483089454472065,
0.22843818366527557,
0.15611861646175385,
0.10975266993045807,
0.08730687201023102,
-0.1318129301071167,
0.0662836804986,
0.04476378858089447,
-0.011461333371698856,
0.04058844968676567,
-0.19209201633930206,
-0.005913501139730215,
-0.10266303271055222,
-0.14247071743011475,
-0.043112654238939285,
0.02734764851629734,
-0.10281933099031448,
-0.058386944234371185,
0.03272027522325516,
0.0426982082426548,
0.0060539222322404385,
0.003905001562088728,
0.020678285509347916,
0.02703826315701008,
-0.10817155987024307,
-0.013734948821365833,
0.02126883901655674,
-0.07453127205371857,
-0.15389296412467957,
0.009822053834795952,
0.0635281354188919,
0.10350465774536133,
0.0650109127163887,
0.045402366667985916,
0.05946136265993118,
-0.016154896467924118,
-0.017356622964143753,
-0.05277672037482262,
-0.10493595153093338,
-0.04024416208267212,
-0.00329709704965353,
-0.02069617249071598,
-0.02174687758088112,
0.07642842829227448,
0.04372294992208481,
0.05568166822195053,
-0.07009264081716537,
-0.017324019223451614,
-0.02680344320833683,
0.05636689066886902,
0.0006869073840789497,
0.03461732342839241,
-0.02954217419028282,
-0.10887528955936432,
-0.035122472792863846,
-0.07679209113121033,
0.024160489439964294,
-0.0027958364225924015,
-0.010203019715845585,
-0.09538651257753372,
-0.08668582886457443,
0.08852405846118927,
0.08112741261720657,
0.07483910024166107,
0.04162491112947464,
-0.019488416612148285,
0.06711503118276596,
0.07119965553283691,
0.058382317423820496,
-0.04726073890924454,
-0.10066913813352585,
0.03423658385872841,
-0.04858218878507614,
0.15015475451946259,
-0.018166493624448776,
0.01395094208419323,
-0.028790730983018875,
0.03445027023553848,
-0.0504930354654789,
0.09649190306663513,
0.07129664719104767,
-0.04409072548151016,
-0.06717652082443237,
-0.04239555075764656,
-0.0032922131940722466,
-0.04278415068984032,
0.006542853079736233,
-0.07245482504367828,
-0.01633821800351143,
-0.0007624464342370629,
0.043710269033908844,
-0.0909380316734314,
-0.06517063081264496,
0.0017544568981975317,
0.12118920683860779,
0.14745879173278809,
-0.0253781545907259,
0.04942488670349121,
0.1539509892463684,
-0.04565995931625366,
-0.0170173067599535,
-0.013111405074596405,
-0.04994885250926018,
-0.13824069499969482,
-0.06849761307239532,
-0.17165248095989227,
0.06745040416717529,
0.11324815452098846,
0.13504479825496674,
0.036508895456790924,
-0.030496498569846153,
0.022916050627827644,
-0.022196350619196892,
-0.19943319261074066,
0.02520257793366909,
0.02365073189139366,
0.0356551930308342,
0.01610729470849037,
-0.08931990712881088,
-0.026323432102799416,
-0.0927460789680481,
-0.0913190171122551,
-0.18223220109939575,
0.00682067172601819,
0.05506744235754013,
0.11622617393732071,
0.01748507097363472,
-0.024695148691534996,
-0.01789906807243824,
0.010606865398585796,
0.07150528579950333,
0.052625689655542374,
0.04213075712323189,
-0.03282639756798744,
-0.09336944669485092,
-0.07345346361398697,
-0.0820692703127861,
-0.014664921909570694,
0.10829072445631027,
0.007345390971750021,
-0.055074792355298996,
-0.06676624715328217,
0.10035420209169388,
-0.04953915625810623,
-0.017415139824151993,
0.11164476722478867,
-0.03027222864329815,
0.03391273319721222,
-0.0018108728108927608,
0.04377312585711479,
0.003353877691552043,
-0.08679710328578949,
0.007566575892269611,
0.027374999597668648,
-0.10053925961256027,
-0.2206081598997116,
0.012447936460375786,
0.0034103060606867075,
-0.02382485941052437,
-0.024122172966599464,
0.0626441091299057,
-0.06737101823091507,
-0.04571419954299927,
-0.09536794573068619,
0.052228718996047974,
0.16075773537158966,
-0.10777249932289124,
0.03446878120303154,
0.04381738603115082,
0.08412773907184601,
0.06167086213827133,
0.08445202559232712,
0.06637582927942276,
-0.051527924835681915,
-0.05230355262756348,
-0.14638525247573853,
-0.04509824886918068,
-0.1606791764497757,
-0.05299530550837517,
0.04612209275364876,
-0.013305121101439,
0.00529593788087368,
0.07642275840044022,
0.06913349777460098,
0.043895721435546875,
0.11468462646007538,
0.07133034616708755,
0.01785145327448845,
0.007524313870817423,
0.0428815558552742,
0.019096069037914276,
0.0373852401971817,
0.012920600362122059,
-0.009492184966802597,
-0.0607125498354435,
-0.011893906630575657,
0.036295823752880096,
0.0933396965265274,
0.025561967864632607,
-0.11177119612693787,
-0.010622983798384666,
-0.08204460889101028,
0.05463913083076477,
-0.035892363637685776,
-0.06071211025118828,
0.10382469743490219,
-0.14337791502475739,
-0.12901532649993896,
0.048752304166555405,
0.008281459100544453,
0.13372832536697388,
0.07332567870616913,
-0.08561919629573822,
0.06447086483240128,
0.11086775362491608,
0.2191532552242279,
-0.09045220166444778,
-0.10619056224822998,
-0.037543632090091705,
0.03659103438258171,
-0.005540546029806137,
0.016022682189941406,
0.13254795968532562,
0.14525753259658813,
-0.1372392177581787,
-0.07662996649742126,
0.10188885778188705,
-0.028130577877163887,
-0.05871205776929855,
-0.08101082593202591,
-0.011730368249118328,
-0.05319104343652725,
-0.18351003527641296,
0.009918171912431717,
0.11409689486026764,
0.09115959703922272,
-0.0490608885884285,
-0.09100231528282166,
0.048677925020456314,
0.01701243221759796,
0.03733231872320175,
0.06294459849596024,
0.11323963105678558,
-0.024748625233769417,
-0.026700781658291817,
0.04634101688861847,
-0.11254778504371643,
-0.11303990334272385,
0.09365712106227875,
0.13652169704437256,
-0.005637688096612692,
0.007883778773248196,
0.09230390191078186,
0.07659169286489487,
-0.05254865437746048,
-0.20969395339488983,
0.09535665810108185,
0.12754355370998383,
0.023805364966392517,
-0.02450847066938877,
-0.10218359529972076,
-0.00721826171502471,
0.0457792766392231,
0.15222308039665222,
-0.00999340508133173,
0.07928524911403656,
0.04665341600775719,
0.126168355345726,
0.15571357309818268,
0.01644405536353588,
-0.07212170213460922,
-0.03781783580780029,
0.006875413935631514,
0.1208612322807312,
-0.10558591037988663,
0.0024080732837319374,
-0.005008338950574398,
-0.024481985718011856,
-0.05757245421409607,
0.09469231218099594,
-0.008831082843244076,
-0.1763717532157898,
0.017574872821569443,
0.04271186143159866,
0.17670251429080963,
0.03988152742385864,
-0.010298185981810093,
0.00648520840331912,
0.048353277146816254,
0.027361979708075523,
0.05739864334464073,
-0.10532187670469284,
-0.01957961730659008,
0.07795660197734833,
0.11350665241479874,
0.08323373645544052,
-0.009765531867742538,
-0.061752911657094955,
-0.021673042327165604,
-0.10827742516994476,
-0.09484526515007019,
0.005625919438898563,
0.05298402160406113,
-0.03514934703707695,
-0.06339932978153229,
-0.10454171150922775,
0.006168206688016653,
0.06014956906437874,
0.06741536408662796,
0.04249146953225136,
-0.08197297900915146,
-0.018743524327874184,
-0.02022731490433216,
0.08028700947761536,
0.08394481986761093,
-0.04563028737902641,
-0.10883940756320953,
0.0024762898683547974,
0.07666356861591339,
0.08564545214176178,
-0.008572148159146309,
-0.012726127170026302,
-0.06715598702430725,
0.11272327601909637,
0.07593999058008194,
0.13317258656024933,
-0.03242794796824455,
0.0015875142998993397,
0.053631458431482315,
-0.026768861338496208,
-0.11136502027511597,
0.01714450679719448,
-0.0160529725253582,
0.05851082503795624,
0.06128399074077606,
-0.06923387199640274,
0.053918808698654175,
-0.0735459253191948,
0.006463011726737022,
0.0023135512601584196,
0.08176159113645554,
0.027648387476801872,
-0.025568323209881783,
0.059561461210250854,
-0.04806140810251236,
0.0010652475757524371,
-0.02692236565053463,
-0.08208610117435455,
0.08698786795139313,
-0.06012225151062012,
-0.15351998805999756,
0.0653485655784607,
0.1254567801952362,
0.07901999354362488,
-0.021197650581598282,
0.0076760295778512955,
-0.051480986177921295,
-0.027149852365255356,
-0.09397482126951218,
-0.030271930620074272,
0.027679763734340668,
0.12516666948795319,
0.036872219294309616,
-0.056183528155088425,
0.017645472660660744,
-0.005261631216853857,
0.06484255939722061,
0.04820718988776207,
-0.09432825446128845,
-0.03721989691257477,
0.013845915906131268,
0.03736702725291252,
0.0026066333521157503,
-0.04476030170917511,
-0.011840085498988628,
-0.008251099847257137,
-0.08014803379774094,
-0.029012877494096756,
-0.00482406560331583,
-0.03447683900594711,
0.026564691215753555,
0.06701076775789261,
-0.13781960308551788,
-0.060478560626506805,
-0.04047161713242531,
0.017013199627399445,
-0.04921530932188034,
0.055057380348443985,
0.011575998738408089,
-0.009444006718695164,
-0.052226897329092026,
-0.0178088191896677,
-0.042159877717494965,
0.07996496558189392,
0.20773723721504211,
0.1729273498058319,
-0.04243512451648712,
-0.14505404233932495,
0.10013747215270996,
0.1083998754620552,
0.14973671734333038,
-0.05947326868772507,
-0.08982297033071518,
-0.039571892470121384,
0.049793872982263565,
0.008721131831407547,
0.08228828758001328,
-0.015266068279743195,
-0.13677354156970978,
0.03697934001684189,
-0.04552500694990158,
-0.032315146178007126,
-0.043935973197221756,
0.05725737288594246,
0.1122540757060051,
0.00877372920513153,
-0.00823806319385767,
-0.04952995106577873,
-0.04778193309903145,
-0.030637912452220917,
-0.02934120036661625,
-0.012942829169332981,
0.0328545868396759,
0.11828362196683884,
-0.10029996931552887,
-0.00016109459102153778,
-0.09932179749011993,
0.07807622849941254,
0.004057298880070448,
0.040605947375297546,
-0.005000753793865442,
-0.092200867831707,
0.06910081207752228,
0.1848013699054718,
-0.004974019713699818,
0.019624704495072365,
-0.024083178490400314,
-0.028548816218972206,
0.1227872371673584,
0.16635945439338684,
-0.00752229942008853,
-0.07155518233776093,
0.014069860801100731,
0.1979292631149292,
0.19079045951366425,
0.10424816608428955,
-0.06218904256820679,
-0.05430909991264343,
-0.001264754799194634,
0.08074598014354706,
0.01768302172422409,
-0.059489767998456955,
-0.07899364829063416,
-0.049661390483379364,
-0.016437675803899765,
0.1389915496110916,
-0.12070183455944061,
0.007991773076355457,
0.010503964498639107,
0.10350773483514786,
0.09102800488471985,
0.04254304617643356,
0.016196927055716515,
-0.01813538558781147,
-0.031787049025297165,
-0.109310582280159,
0.03976897522807121,
0.010036943480372429,
-0.04198267310857773,
-0.08744698017835617,
-0.1574970930814743,
-0.021568551659584045,
0.10329974442720413,
0.005573879927396774,
-0.10164227336645126,
-0.03525581955909729,
0.023734910413622856,
-0.017879217863082886,
0.020616918802261353,
-0.062414802610874176,
-0.07906215637922287,
0.011177882552146912,
-0.014936475083231926,
-0.13250847160816193,
-0.09053567051887512,
-0.1162526085972786,
0.020870300009846687,
-0.08244408667087555,
0.0014602921437472105,
-0.00918649509549141,
-0.17816361784934998,
-0.07640401273965836,
-0.04035291075706482,
0.03935953974723816,
0.06503892689943314,
-0.00799605343490839,
-0.07471519708633423,
0.003413945436477661,
0.12173864990472794,
0.15807010233402252,
0.08509602397680283,
0.06260290741920471,
0.1526682823896408,
0.015324401669204235,
0.08295073360204697,
0.01807504892349243,
-0.0696571096777916,
0.008101845160126686,
0.0745972990989685,
0.04616920277476311,
-0.08803529292345047,
-0.0445987693965435,
0.020496297627687454,
0.044126082211732864,
0.017802303656935692,
-0.09888241440057755,
-0.06697635352611542,
0.08000855892896652,
0.06500904262065887,
0.12337426096200943,
-0.04414861649274826,
0.01935346983373165,
-0.025546662509441376,
0.046247947961091995,
0.027702169492840767,
0.01782190054655075,
-0.09162084013223648,
-0.048819590359926224,
-0.023772984743118286,
0.018420198932290077,
0.06580417603254318,
-0.011871207505464554,
0.11475228518247604,
0.10875128954648972,
0.10444255918264389,
0.04839681461453438,
-0.08862779289484024,
0.03130880743265152,
0.15161307156085968,
-0.0038195818196982145,
0.09334181994199753,
-0.07289338111877441,
0.08700531721115112,
0.12061809748411179,
0.1514335721731186,
0.1294545829296112,
0.1394025832414627,
-0.007048340048640966,
-0.058375708758831024,
-0.02687074802815914,
0.051326997578144073,
-0.043551553040742874,
-0.05143648386001587,
-0.12581302225589752,
-0.009608595632016659,
-0.013458368368446827,
-0.02376755140721798,
-0.025686725974082947,
-0.002580394269898534,
0.0003959365130867809,
0.08878747373819351,
0.07211357355117798,
0.04442455247044563,
0.06665152311325073,
0.05155562236905098,
0.05077912658452988,
0.026619333773851395,
0.02116871438920498,
-0.00825338251888752,
-0.009577020071446896,
-0.06782127171754837,
-0.053615666925907135,
-0.09262455999851227,
0.05939091742038727,
-0.11238332837820053,
-0.11105111241340637,
0.044137440621852875,
0.084202840924263,
-0.0227917842566967,
0.022354351356625557,
-0.007685389835387468,
-0.06473112106323242,
-0.07732437551021576,
-0.014251451008021832,
0.0268926452845335,
0.03924044594168663,
0.05594009906053543,
0.010443026199936867,
-0.08195152878761292,
-0.04393715783953667,
-0.0243027675896883,
0.004045066889375448,
-0.008652863092720509,
-0.15587542951107025,
-0.1780308037996292,
0.0007223699940368533,
-0.020691687241196632,
-0.020773762837052345,
-0.011549500748515129,
-0.10895946621894836,
-0.04029626399278641,
-0.03391379117965698,
0.0411049909889698,
0.020625872537493706,
-0.013577866367995739,
-0.016301210969686508,
0.027803273871541023,
-0.05696796253323555,
-0.1294621229171753,
-0.0349709652364254,
0.013465967029333115,
0.15525653958320618,
0.11713730543851852,
0.00986192375421524,
0.013077300041913986,
0.04543573409318924,
0.015329797752201557,
-0.013640806078910828,
0.07034400850534439,
-0.019576547667384148,
-0.09767147898674011,
-0.06594295054674149,
-0.033313650637865067,
0.04848727583885193,
-0.04010084271430969,
-0.116240955889225,
-0.08489125967025757,
0.03689553588628769,
0.12329955399036407,
-0.031167833134531975,
-0.06313630193471909,
-0.07081585377454758,
-0.007497621700167656,
-0.020439350977540016,
0.02103203907608986,
-0.027329500764608383,
-0.08575067669153214,
0.044095300137996674,
0.1476544290781021,
0.13657818734645844,
0.16131606698036194,
-0.030926262959837914,
-0.022582197561860085,
0.007733162026852369,
0.15996892750263214,
0.13827113807201385,
0.0981840193271637,
-0.03456118702888489,
-0.030031094327569008,
0.14416912198066711,
0.055821873247623444,
-0.05220145359635353,
-0.15687386691570282,
-0.14416413009166718,
-0.08213844895362854,
-0.018872760236263275,
-0.038842927664518356,
-0.007632014807313681,
0.01830153912305832,
0.04892053082585335,
-0.023146193474531174,
0.06071433052420616,
-0.0205328781157732,
0.01837853156030178,
0.01259714737534523,
0.02069508098065853,
0.10249042510986328,
-0.05587979033589363,
0.06740549951791763,
-0.06364690512418747,
-0.07602071017026901,
0.03380799666047096,
-0.02818516455590725,
0.024603011086583138,
-0.015649959444999695,
0.0077395751141011715,
0.04491695389151573,
0.005749199539422989,
-0.0005377275520004332,
-0.0007212558994069695,
-0.0011848320718854666,
-0.040567100048065186,
-0.183720201253891,
-0.1229376271367073,
0.10358849167823792,
0.07821924984455109,
0.00917391199618578,
0.03850247710943222,
0.02439364604651928,
0.04248176887631416,
0.036674559116363525,
0.03307720646262169,
-0.00034925341606140137,
0.05171671882271767,
0.011691142804920673,
0.17547878623008728,
-0.12087279558181763,
-0.04135647416114807,
0.03492140769958496,
-0.00021221225324552506,
0.0022872122935950756,
-0.11931244283914566,
-0.02697773650288582,
-0.007827868685126305,
0.08466670662164688,
-0.06686101853847504,
-0.0815221443772316,
0.02761651948094368,
0.010918800719082355,
-0.002292179735377431,
-0.060358185321092606,
-0.03506890684366226,
0.0018702397355809808,
-0.07330251485109329,
-0.046765223145484924,
-0.03047736920416355,
0.041641026735305786,
0.010305389761924744,
0.18212510645389557,
0.28453996777534485,
0.22435574233531952,
-0.020486464723944664,
0.04563627392053604,
0.14129267632961273,
0.1075211614370346,
-0.0014878740767017007,
-0.03462820500135422,
-0.04825964942574501,
-0.07591559737920761,
-0.19485962390899658,
-0.057525377720594406,
-0.029880385845899582,
-0.01311785914003849,
-0.048087529838085175,
-0.0036789807491004467,
0.04509861394762993,
0.03811676800251007,
-0.09049635380506516,
-0.047073788940906525,
-0.03976018726825714,
0.13273411989212036,
-0.11392941325902939,
0.0706278532743454,
0.13397447764873505,
-0.03935185447335243,
-0.09130988270044327,
-0.035722676664590836,
0.13437007367610931,
0.20099970698356628,
-0.05892941355705261,
-0.06542311608791351,
0.009364012628793716,
-0.09337405115365982,
0.017130857333540916,
-0.02920486405491829,
0.024454470723867416,
-0.022226836532354355,
-0.04782876744866371,
0.082351453602314,
-0.07671543955802917,
0.06446990370750427,
-0.014879208989441395,
0.12922924757003784,
-0.018944311887025833,
-0.09695015847682953,
-0.07516393810510635,
0.0347103588283062,
0.0684790164232254,
-0.00500506442040205,
-0.007242701016366482,
-0.10879787057638168,
0.0033810031600296497,
0.03617943450808525,
-0.14204680919647217,
-0.07424289733171463,
0.016073044389486313,
-0.05696244537830353,
0.024070575833320618,
-0.05069862678647041,
-0.044041767716407776,
0.006800760515034199,
-0.06479108333587646,
0.0014630371006205678,
-0.019851375371217728,
-0.029698047786951065,
-0.038609933108091354,
0.03242798149585724,
0.08329007774591446,
-0.029478371143341064,
-0.07917384803295135,
-0.09584622830152512,
-0.199739471077919,
-0.10419640690088272,
0.001644913456402719,
0.18164725601673126,
0.10129611194133759,
0.13073992729187012,
0.08553086966276169,
0.01701289601624012,
0.036200061440467834,
0.21121636033058167,
0.12424589693546295,
0.03574835881590843,
0.15130020678043365,
0.033947959542274475,
0.01051817461848259,
0.03849714994430542,
0.14332734048366547,
0.056832339614629745,
-0.06091805547475815,
-0.046773578971624374,
0.0648549273610115,
-0.18181520700454712,
-0.1554100513458252,
-0.09772980213165283,
-0.001285936334170401,
-0.04374842345714569,
-0.09588135033845901,
0.04017600789666176,
-0.012942120432853699,
-0.0003526215150486678,
0.053867846727371216,
0.027306877076625824,
-0.08301512151956558,
-0.10320336371660233,
-0.08908603340387344,
-0.01930772140622139,
-0.2236708551645279,
-0.013854906894266605,
-0.008781504817306995,
0.054145485162734985,
-0.008328528143465519,
-0.01457150001078844,
-0.021841268986463547,
0.06082954257726669,
0.03922051563858986,
0.08175108581781387,
-0.01945716142654419,
-0.09824100881814957,
-0.0402994230389595,
0.09338313341140747,
0.005599662661552429,
-0.026731746271252632,
0.07596299052238464,
-0.04918583109974861,
0.11132340133190155,
0.08130406588315964,
0.030679598450660706,
0.045780569314956665,
0.019467992708086967,
-0.09215547144412994,
0.08286722749471664,
0.004918284248560667,
-0.03597080335021019,
0.09048064798116684,
0.03928811103105545,
-0.026376666501164436,
-0.004816283937543631,
-0.03290892392396927,
-0.01869485154747963,
-0.01618320681154728,
-0.008396463468670845,
0.07003320008516312,
0.17855504155158997,
0.14438796043395996,
-0.01085800863802433,
-0.04500386491417885,
0.0958310067653656,
-0.004619240295141935,
-0.020077789202332497,
-0.08591941744089127,
-0.06634290516376495,
-0.022533873096108437,
-0.02260676771402359,
-0.03552357852458954,
-0.05382608622312546,
-0.04017218202352524,
0.028562448918819427,
0.007760690990835428,
0.019950533285737038,
-0.056497253477573395,
-0.14118508994579315,
-0.11157204955816269,
0.04617155343294144,
0.13968123495578766,
-0.08395694196224213,
-0.08262099325656891,
-0.027850361540913582,
-0.019884560257196426,
-0.07583018392324448,
-0.10460606217384338,
-0.18789710104465485,
-0.15892291069030762,
-0.0012736431090161204,
0.007287621032446623,
0.12568876147270203,
-0.044440384954214096,
0.009774483740329742,
0.157732754945755,
-0.05328844115138054,
0.01677476428449154,
0.14733731746673584,
-0.055329374969005585,
-0.07720301300287247,
0.0677764043211937,
0.014032714068889618,
0.08852813392877579,
0.1555662602186203,
0.051573894917964935,
-0.03320693224668503,
-0.022676236927509308,
-0.00016626557044219226,
-0.07233701646327972,
-0.23016226291656494,
-0.0873519629240036,
0.045120079070329666,
0.04552723467350006,
0.02938055619597435,
-0.10841275751590729,
-0.20459647476673126,
-0.12111327797174454,
-0.03351620212197304,
-0.13444332778453827,
-0.06430111080408096,
0.011064336635172367,
-0.011876652017235756,
-0.047955386340618134,
-0.007406539283692837,
0.021839777007699013,
-0.003750364761799574,
0.021604787558317184,
0.08474142849445343,
-0.05580144375562668,
-0.05058613792061806,
0.06400929391384125,
-0.03368322178721428,
-0.22253072261810303,
-0.029920974746346474,
0.11567800492048264,
0.08337585628032684,
-0.006409456022083759,
0.09865238517522812,
0.09483501315116882,
0.11620380729436874,
-0.024883687496185303,
0.19183535873889923,
0.057020243257284164,
0.11432314664125443,
0.010767755098640919,
-0.021059058606624603,
0.02649950049817562,
0.08257942646741867,
0.0593852773308754,
0.10142762213945389,
-0.09454021602869034,
-0.0678774043917656,
0.09053421765565872,
-0.02143627032637596,
0.015909066423773766,
0.0006960072205401957,
0.00674733892083168,
-0.06417794525623322,
-0.14427319169044495,
-0.07761792093515396,
0.04485531896352768,
0.1715303212404251,
-0.09672164916992188,
-0.013700194656848907,
0.045232247561216354,
0.18087759613990784,
0.16865073144435883,
0.017733009532094002,
0.008021138608455658,
0.0024401594419032335,
-0.059377387166023254,
-0.15277044475078583,
-0.04341178387403488,
-0.1504012942314148,
0.048561856150627136,
-0.004564096685498953,
-0.0808294340968132,
-0.08113321661949158,
0.13832725584506989,
0.0821210965514183,
-0.01107737235724926,
0.04249896481633186,
0.02339615486562252,
0.09192709624767303,
0.06958082318305969,
-0.023146457970142365,
-0.019194621592760086,
0.07509923726320267,
0.05321943014860153,
0.005744237918406725,
0.06524458527565002,
0.04743782803416252,
-0.06631064414978027,
0.0010988733265548944,
-0.07272923737764359,
0.0050278897397220135,
-0.1000513881444931,
0.0018077484564855695,
-0.07815591990947723,
-0.0013945308746770024,
0.05658518150448799,
0.023515544831752777,
-0.07153259962797165,
-0.008651964366436005,
0.13917024433612823,
0.013294273056089878,
-0.09516140073537827,
-0.061007894575595856,
-0.023620212450623512,
0.023364337161183357,
0.04240894317626953,
0.08222842961549759,
-0.005857275333255529,
-0.16584202647209167,
-0.08900350332260132,
0.08950414508581161,
0.07828999310731888,
0.02876761369407177,
0.08067791908979416,
0.030167341232299805,
-0.11626061052083969,
-0.08515836298465729,
0.017126956954598427,
-0.14989368617534637,
-0.15362206101417542,
0.0026448110584169626,
0.004724533297121525,
-0.054415445774793625,
-0.15209539234638214,
0.08991137892007828,
0.10834052413702011,
-0.027770226821303368,
-0.1593342125415802,
-0.07718498259782791,
0.09839922189712524,
0.025480279698967934,
0.08433124423027039,
0.12989601492881775,
0.10467581450939178,
0.0795886293053627,
0.072938933968544,
0.11754798144102097,
-0.046925138682127,
-0.025001883506774902,
0.10003839433193207,
0.16507288813591003,
0.06666339933872223,
0.0626157894730568,
0.10939222574234009,
0.09675132483243942,
-0.06903059780597687,
-0.02145959436893463,
0.061132922768592834,
0.07536818087100983,
0.0022257082164287567,
0.00959455780684948,
-0.11345241218805313,
-0.15919539332389832,
0.015018829144537449,
0.12889976799488068,
0.10416578501462936,
0.11589527875185013,
-0.019950993359088898,
0.10397771745920181,
0.11750168353319168,
0.005633925553411245,
-0.03463035821914673,
-0.06211439520120621,
0.05137377977371216,
0.1108054593205452,
-0.10477347671985626,
-0.06345576792955399,
0.11840658634901047,
0.03873234614729881,
0.06710924208164215,
0.015563210472464561,
-0.048238418996334076,
-0.08769183605909348,
0.12667687237262726,
0.12245814502239227,
0.03932560980319977,
-0.018838172778487206,
0.050074901431798935,
0.003530261106789112,
-0.09528155624866486,
0.025416886433959007,
0.028887664899230003,
-0.0391278937458992,
0.023069150745868683,
-0.011414837092161179,
0.06787372380495071,
0.09453454613685608,
0.004103783052414656,
0.025326469913125038,
0.09866965562105179,
0.011922337114810944,
0.07790195196866989,
0.1084066852927208,
0.013593628071248531,
0.04228231683373451,
-0.025334805250167847,
0.009246082045137882,
-0.04571967199444771,
0.027239255607128143,
0.04033529385924339,
0.00013564467371907085,
0.013186652213335037,
-0.024590618908405304,
0.023960838094353676,
0.03946417197585106,
0.05325224623084068,
-0.10571585595607758,
-0.057873133569955826,
0.10102678090333939,
0.11138633638620377,
0.22650393843650818,
0.13532356917858124,
0.06926519423723221,
-0.022982601076364517,
0.2334928959608078,
0.09707386046648026,
0.07411869615316391,
0.12531298398971558,
0.0951659232378006,
0.11726757138967514,
0.0011939912801608443,
-0.09069135040044785,
0.018634706735610962,
0.06315888464450836,
0.04699171334505081,
-0.019972573965787888,
-0.07207666337490082,
0.035195160657167435,
0.07169338315725327,
0.009516249410808086,
-0.04785732924938202,
-0.04180622845888138,
0.10091246664524078,
-0.0533873476088047,
-0.05092090740799904,
-0.07640380412340164,
-0.045634929090738297,
-0.2226603627204895,
-0.2186407595872879,
-0.11898388713598251,
0.010963723994791508,
0.17043526470661163,
0.048102010041475296,
0.06436498463153839,
0.09383121132850647,
0.06830646097660065,
-0.0805726870894432,
-0.017255377024412155,
0.11196894943714142,
0.13074292242527008,
0.047912999987602234,
-0.2895350754261017,
-0.08342324197292328,
0.040551673620939255,
0.07105284184217453,
0.04251766577363014,
-0.02559739537537098,
-0.09012886881828308,
0.08412358909845352,
0.1261138767004013,
0.0136819276958704,
-0.047950778156518936,
-0.13050344586372375,
-0.004186741542071104,
0.1272410899400711,
0.16429941356182098,
0.03255065530538559,
-0.07769940793514252,
0.026574792340397835,
0.1546221524477005,
0.04014381393790245,
-0.059631314128637314,
-0.009679858572781086,
0.03947477042675018,
0.0544976145029068,
-0.028964253142476082,
-0.028997451066970825,
0.17631877958774567,
0.0512867271900177,
0.08145757764577866,
-0.022797193378210068,
0.04505017772316933,
0.1280612051486969,
0.20903639495372772,
-0.015917465090751648,
-0.14947199821472168,
-0.11498958617448807,
-0.08906442672014236,
-1.759940460033249e-05,
0.017320798709988594,
0.030966566875576973,
-0.040957339107990265,
-0.21568699181079865,
-0.14761312305927277,
-0.07304428517818451,
0.023749778047204018,
0.1758737564086914,
-0.09455040842294693,
-0.1667824536561966,
-0.003661218099296093,
0.14933547377586365,
0.13260860741138458,
0.01032304484397173,
-0.017208566889166832,
0.003960893023759127,
-0.07080403715372086,
-0.011624230071902275,
-0.005050142295658588,
-0.01702074147760868,
-0.14140193164348602,
-0.22107264399528503,
-0.05839357525110245,
0.013792150653898716,
-0.03560001403093338,
-0.11067741364240646,
-0.13424116373062134,
0.006492954678833485,
0.05407034978270531,
0.13174428045749664,
-0.013313068076968193,
-0.007547508925199509,
-0.04742742329835892,
0.02593853324651718,
-0.06078410893678665,
-0.1249525398015976,
-0.06721065193414688,
-0.07869261503219604,
-0.018225792795419693,
0.02954052947461605,
0.013009380549192429,
0.020446540787816048,
-0.05530998483300209,
-0.04413618892431259,
0.03852832689881325,
0.08507981896400452,
0.03016212210059166,
-0.040098756551742554,
0.08724423497915268,
0.020517878234386444,
-0.06558419018983841,
-0.10279128700494766,
-0.05010019242763519,
-0.07013873010873795,
0.018546875566244125,
0.01538811344653368,
0.060836292803287506,
0.13895754516124725,
0.015057037584483624,
-0.038784220814704895,
-0.00039751335862092674,
0.08142947405576706,
0.12585175037384033,
-0.07718037068843842,
0.03950517624616623,
-0.004076640121638775,
-0.02751852013170719,
-0.07882536947727203,
-0.014110887423157692,
0.13364017009735107,
0.0468604676425457,
0.12374524027109146,
0.1094566062092781,
-0.04294193163514137,
0.0526113398373127,
0.0905880331993103,
0.23299287259578705,
0.02996278740465641,
-0.021594960242509842,
-0.04413914307951927,
-0.002712181070819497,
0.07796040922403336,
0.020549122244119644,
0.049538493156433105,
0.07904069870710373,
0.044115226715803146,
0.07688853144645691,
0.008119809441268444,
-0.08058572560548782,
-0.050468675792217255,
0.06658785790205002,
0.017528394237160683,
0.016592392697930336,
0.026798060163855553,
-0.021408377215266228,
-0.08131980895996094,
-0.023563623428344727,
-0.03941703587770462,
0.04432303085923195,
0.016040196642279625,
-0.2395092248916626,
-0.2491285502910614,
-0.1135629341006279,
0.03423789143562317,
0.011718101799488068,
-0.06856078654527664,
0.12874257564544678,
0.282210111618042,
0.08905540406703949,
0.007705964148044586,
-0.12785016000270844,
-0.0380111038684845,
0.09615260362625122,
-0.11372634768486023,
-0.05713536962866783,
0.030535580590367317,
-0.02657483145594597,
0.03350751847028732,
-0.01246274821460247,
0.07933986186981201,
-0.028980784118175507,
-0.09524683654308319,
0.026294881477952003,
0.08406145870685577,
0.1246023029088974,
-0.10310288518667221,
-0.15079545974731445,
-0.004350382834672928,
0.02457376942038536,
-0.0077648465521633625,
-0.17845721542835236,
-0.11545371264219284,
-0.009573949500918388,
-0.0668700635433197,
-0.06561065465211868,
-0.10588019341230392,
-0.030626069754362106,
0.0004642909625545144,
0.07070566713809967,
0.0034424252808094025,
-0.023686019703745842,
-0.03068246878683567,
-0.06423935294151306,
-0.08066844940185547,
-0.11806897073984146,
0.05331297591328621,
0.019085491076111794,
-0.10706020146608353,
0.14184832572937012,
0.053924012929201126,
-0.02387772686779499,
0.018884990364313126,
-0.12481209635734558,
0.13395529985427856,
0.014872883446514606,
-0.011228378862142563,
-0.01924247108399868,
0.10149310529232025,
-0.061449795961380005,
-0.020931744948029518,
-0.0465405248105526,
-0.020634708926081657,
0.03302062302827835,
-0.04493699595332146,
-0.09304818511009216,
-0.09706580638885498,
-0.045430008322000504,
-0.0774700716137886,
0.054825782775878906,
-0.040984053164720535,
-0.10399676859378815,
-0.11711707711219788,
0.04904184117913246,
0.04844427853822708,
0.019195102155208588,
-0.06921128183603287,
-0.0011563637526705861,
0.15535300970077515,
0.0611211434006691,
0.06746472418308258,
-0.006058441009372473,
-0.05814366415143013,
0.05866912752389908,
0.16102273762226105,
0.05549747124314308,
-0.040853362530469894,
-0.07085981220006943,
-0.04860018193721771,
-0.09081130474805832,
0.05423208326101303,
0.01759149134159088,
-0.10618901252746582,
-0.15500140190124512,
-0.035513393580913544,
0.08433980494737625,
-0.0031535394955426455,
0.0021099471487104893,
-0.060183700174093246,
-0.02972087636590004,
-0.024639423936605453,
0.03604886680841446,
0.16828221082687378,
0.1110711395740509,
0.14290136098861694,
0.05625855177640915,
0.079074427485466,
-0.02214778959751129,
0.003100976115092635,
0.1393357217311859,
0.2178274244070053,
0.08833909779787064,
-0.005233072210103273,
0.0361081063747406,
-0.059419818222522736,
-0.006628950592130423,
0.057397257536649704,
-0.0402035154402256,
-0.21436136960983276,
-0.06781911849975586,
0.06432853639125824,
-0.03934410214424133,
-0.15440011024475098,
-0.034463003277778625,
-0.07650990784168243,
-0.07224276661872864,
-0.18680045008659363,
0.03511878848075867,
0.07979781180620193,
0.11732873320579529,
0.06165001541376114,
0.04850522056221962,
0.1581358164548874,
-0.021892623975872993,
0.02934509702026844,
0.1692841649055481,
0.05445853993296623,
-0.09924764931201935,
-0.07863552123308182,
0.05090100318193436,
-0.0005783176748082042,
-0.14555592834949493,
-0.08420731127262115,
-0.1289818286895752,
0.04043068364262581,
0.048530351370573044,
-0.005739770829677582,
-0.11021299660205841,
-0.048998262733221054,
0.08949015289545059,
0.10552143305540085,
-0.003118567168712616,
-0.1324443817138672,
0.034058939665555954,
-0.028968125581741333,
-0.0010439662728458643,
-0.08931739628314972,
-0.045279260724782944,
0.2274559736251831,
-0.0828109085559845,
-0.1770234853029251,
-0.11410347372293472,
-0.08245956897735596,
0.11865315586328506,
-0.056267719715833664,
-0.03458505868911743,
0.0334174744784832,
-0.09444957971572876,
-0.07118744403123856,
-0.21106411516666412,
-0.057558704167604446,
-0.04779046028852463,
-0.060264952480793,
-0.04793843999505043,
0.004053889773786068,
0.06729903072118759,
0.18414387106895447,
0.06394743174314499,
-0.019603997468948364,
0.03453030809760094,
0.18313202261924744,
0.1846598982810974,
0.02696439065039158,
-0.04566096141934395,
0.22274984419345856,
0.11658306419849396,
-0.054988786578178406,
-0.14822924137115479,
0.02429753728210926,
-0.0221739262342453,
-0.02264680713415146,
-0.02292937971651554,
-0.010198034346103668,
-0.05086403712630272,
0.19042149186134338,
0.027823491021990776,
-0.031222598627209663,
-0.10615786164999008,
-0.18706993758678436,
0.05254126340150833,
0.008827592246234417,
0.008841289207339287,
0.016958976164460182,
0.08162333816289902,
0.05047698691487312,
-0.017763610929250717,
0.017788857221603394,
0.10632140934467316,
0.14985907077789307,
0.047847770154476166,
-0.050889380276203156,
-0.0640166774392128,
0.01019277423620224,
0.038491979241371155,
0.008403241634368896,
0.059195831418037415,
0.015250918455421925,
0.061254337430000305,
0.08475972712039948,
0.08917336165904999,
-0.026937313377857208,
-0.07378987222909927,
-0.058490585535764694,
-0.09564035385847092,
0.0025733246002346277,
0.08927659690380096,
0.12552787363529205,
0.04198251664638519,
-0.004095534328371286,
-0.03726280480623245,
0.04486563801765442,
-0.04817521572113037,
0.14348018169403076,
0.11585380882024765,
-0.12087399512529373,
-0.03717872127890587,
0.009280906058847904,
-0.036470893770456314,
0.026140479370951653,
-0.06828714907169342,
0.09243922680616379,
-0.024933919310569763,
0.01697409711778164,
-0.10054761916399002,
-0.10388636589050293,
-0.06592573970556259,
-0.027530839666724205,
0.11418921500444412,
0.12179752439260483,
0.08487771451473236,
0.12966924905776978,
-0.013305945321917534,
0.05365859344601631,
0.052955299615859985,
-0.108831487596035,
-0.16174399852752686,
-0.2544700503349304,
0.037177395075559616,
0.001356696360744536,
-0.010559851303696632,
-0.07050196081399918,
-0.002950552385300398,
-0.07070533186197281,
0.15304981172084808,
-0.07747893035411835,
-0.13378089666366577,
-0.03154069930315018,
-0.014654112048447132,
-0.003176469588652253,
-0.028392888605594635,
-0.12857583165168762,
-0.009186377748847008,
0.07990790158510208,
0.04751395434141159,
0.08218004554510117,
-0.1328117698431015,
-0.17740176618099213,
0.033552929759025574,
-0.08248505741357803,
0.08826682716608047,
-0.11159468442201614,
-0.1954326629638672,
-0.012404884211719036,
-0.03443620353937149,
-0.01690100133419037,
0.030793599784374237,
0.04208702594041824,
0.09693708270788193,
0.048448655754327774,
0.041873469948768616,
-0.10114311426877975,
0.01822739467024803,
0.05092480778694153,
-0.005565389059484005,
-0.06872381269931793,
-0.1290329396724701,
-0.11509174108505249,
0.08948913216590881,
-0.01927238516509533,
0.17469945549964905,
0.07697612047195435,
0.011762987822294235,
-0.1247083768248558,
-0.007485523819923401,
0.09302961081266403,
0.11617328226566315,
0.015835072845220566,
-0.05576357617974281,
-0.07441078126430511,
-0.001498807454481721,
0.14303180575370789,
0.0921609103679657,
-0.13720612227916718,
0.03879263252019882,
0.07019297778606415,
0.07034098356962204,
-0.012497142888605595,
-0.037189558148384094,
-0.06359969079494476,
0.03599604219198227,
0.008406439796090126,
0.16025584936141968,
0.16836601495742798,
0.03512011468410492,
0.020847776904702187,
-0.03218846768140793,
0.0806935578584671,
0.23671764135360718,
-0.08796421438455582,
-0.011873216368258,
-0.11491939425468445,
0.04860462620854378,
0.04367455467581749,
-0.037200335413217545,
-0.029232341796159744,
-0.06498207151889801,
0.01880851574242115,
0.038171667605638504,
-0.007473491597920656,
0.03681405633687973,
0.1392529308795929,
-0.07795600593090057,
-0.11380449682474136,
0.012798866257071495,
0.12276892364025116,
0.020490523427724838,
-0.06440051645040512,
-0.15972639620304108,
-0.04410606622695923,
0.017193548381328583,
0.12138493359088898,
0.028497356921434402,
0.1385594606399536,
0.003026212565600872,
0.12427989393472672,
0.08810916543006897,
0.09092850983142853,
0.022060737013816833,
-0.15664544701576233,
-0.10096468031406403,
-0.14214205741882324,
-0.0970572978258133,
-0.13133348524570465,
-0.16196508705615997,
-0.05616454407572746,
-0.14790809154510498,
0.03873318433761597,
0.09632014483213425,
0.1425105482339859,
-0.0739208534359932,
-0.17137853801250458,
-0.10456753522157669,
0.0006442009471356869,
0.03964725509285927,
0.06642187386751175,
-0.03326559439301491,
-0.18514305353164673,
-0.16136610507965088,
-0.06604451686143875,
-0.03198714926838875,
-0.08788153529167175,
0.05785407871007919,
0.04016414284706116,
0.001688632182776928,
-0.08529887348413467,
-0.11998673528432846,
0.09069246798753738,
0.1155293881893158,
0.019740764051675797,
0.019407859072089195,
-0.01697281189262867,
-0.004348324611783028,
-0.04246347025036812,
0.028414860367774963,
0.00429500313475728,
-0.01281854510307312,
-0.008748877793550491,
-0.051917362958192825,
-0.08510235697031021,
0.03748655319213867,
0.028546832501888275,
0.028405193239450455,
0.19122274219989777,
0.053499042987823486,
-0.08668980002403259,
-0.08476471155881882,
-0.06042834743857384,
-0.01950983703136444,
-0.10686451196670532,
0.10877043008804321,
0.09050803631544113,
0.022410130128264427,
0.055754154920578,
-0.03883332759141922,
0.10801869630813599,
0.10118716955184937,
-0.005008121021091938,
-0.052082743495702744,
0.10903053730726242,
0.08439793437719345,
0.02066977135837078,
-0.04875476658344269,
0.018094735220074654,
0.06667301803827286,
-0.09031632542610168,
-0.0817960724234581,
-0.04149557277560234,
0.09576316922903061,
-0.04797403886914253,
0.14494751393795013,
-0.02197549119591713,
0.06641086935997009,
0.10818816721439362,
0.009018703363835812,
-0.04985823482275009,
-0.13421748578548431,
-0.0036019054241478443,
0.015927601605653763,
-0.06524752080440521,
0.019442955031991005,
-0.011957352049648762,
-0.006711944006383419,
0.025297943502664566,
0.06963223218917847,
0.11887000501155853,
0.04837900772690773,
-0.06576714664697647,
-0.11614348739385605,
-0.009271157905459404,
-0.02988358959555626,
0.03310699388384819,
0.07103729248046875,
-0.0028968702536076307,
0.066541887819767,
0.002741573378443718,
0.028974231332540512,
0.1434459537267685,
0.046927161514759064,
0.06673350930213928,
0.045335836708545685,
0.029351936653256416,
0.0010145324049517512,
-0.003838546806946397,
-0.05177849903702736,
-0.02201574668288231,
0.007255014032125473,
-0.03599793091416359,
-0.08362655341625214,
0.02558295428752899,
-0.04116450250148773,
-0.003360952716320753,
0.006689386907964945,
0.0934884324669838,
0.05681149661540985,
-0.08718028664588928,
0.01694747619330883,
0.11515098065137863,
0.0076839192770421505,
-0.026587966829538345,
-0.05968080461025238,
-0.07031312584877014,
-0.02258501760661602,
-0.0023290333338081837,
-0.08483784645795822,
0.009867845103144646,
0.1565699577331543,
0.0289683286100626,
-0.0029814725276082754,
-0.020876239985227585,
0.017109714448451996,
-0.14179007709026337,
0.10225750505924225,
0.07876522094011307,
-0.0023650540970265865,
-0.06841037422418594,
-0.08638757467269897,
0.07092595845460892,
0.15186263620853424,
0.04214051365852356,
-0.01473150122910738,
-0.09028292447328568,
0.054937057197093964,
0.11086941510438919,
-0.05871279537677765,
-0.08430564403533936,
-0.12578085064888,
0.024496566504240036,
0.0657787024974823,
-0.06765934824943542,
-0.1377147138118744,
0.032090455293655396,
0.21005626022815704,
0.10098189860582352,
-0.11413129419088364,
-0.05834059789776802,
-0.05181607976555824,
-0.030301200225949287,
-0.09773659706115723,
0.006101585924625397,
0.040343835949897766,
-0.08556384593248367,
0.07420492172241211,
0.18709683418273926,
0.12749147415161133,
0.01447234395891428,
0.06598913669586182,
0.08850688487291336,
0.13461558520793915,
0.05070621520280838,
-0.05653472617268562,
-0.19269634783267975,
-0.10344110429286957,
-0.0026512870099395514,
-0.02419266290962696,
-0.04751824960112572,
-0.09100127220153809,
-0.01258298009634018,
0.10686860978603363,
-0.009829915128648281,
0.020031524822115898,
-0.04592205956578255,
0.0322839692234993,
0.10304393619298935,
0.04741980880498886,
0.05415233597159386,
0.12576307356357574,
0.04782699793577194,
0.03927290812134743,
-0.03717926889657974,
0.03157356381416321,
0.043788451701402664,
0.028663411736488342,
0.008004698902368546,
-0.03102383390069008,
0.05438131093978882,
0.09195403754711151,
0.15526176989078522,
0.1420137584209442,
-0.16013580560684204,
0.021694771945476532,
0.08046535402536392,
-0.03321189805865288,
-0.0007490781135857105,
-0.16392585635185242,
-0.03647926449775696,
0.0019705265294760466,
-0.1309225857257843,
0.03679509460926056,
0.1495506316423416,
0.059527065604925156,
0.07497741281986237,
-0.09038858115673065,
0.13766229152679443,
0.191963329911232,
0.04263622686266899,
-0.027400881052017212,
-0.10428931564092636,
-0.0002153145760530606,
0.06047374755144119,
-0.04302456974983215,
0.003228656481951475,
-0.06250737607479095,
-0.06864578276872635,
-0.0024850093759596348,
-0.06550447642803192,
0.12810549139976501,
0.12472890317440033,
-0.04494773969054222,
-0.030873877927660942,
0.07184331119060516,
-0.031148366630077362,
-0.037363823503255844,
-0.04975191503763199,
0.0028947661630809307,
-0.15732818841934204,
-0.06389535218477249,
-0.012131378054618835,
-0.00023465257254429162,
0.09993171691894531,
-0.02271491475403309,
0.02164958417415619,
0.0998980924487114,
0.05129746347665787,
-0.09803351014852524,
0.01874409057199955,
-0.04561109468340874,
-0.022621797397732735,
-0.18703576922416687,
-0.08733053505420685,
0.060890503227710724,
-0.007167415227741003,
-0.045726362615823746,
-0.015608611516654491,
0.006765512749552727,
-0.0724027156829834,
-0.055545102804899216,
0.007348685525357723,
-0.09346353262662888,
-0.07037390023469925,
-0.07901997864246368,
0.0006856669788248837,
-0.06361249089241028,
-0.009700612165033817,
-0.0974578931927681,
0.046176210045814514,
0.006212323904037476,
-0.058005061000585556,
-0.06497827917337418,
0.028937535360455513,
0.15720327198505402,
0.14483149349689484,
0.11091788858175278,
0.1713074892759323,
-0.015081611461937428,
0.11184500902891159,
0.1637112945318222,
0.023117754608392715,
-0.03966093435883522,
-0.03677191957831383,
-0.02433009259402752,
-0.11571003496646881,
-0.04628509655594826,
0.03698454052209854,
-0.04516615718603134,
0.04485383257269859,
0.046697232872247696,
0.06926857680082321,
0.12202512472867966,
0.021254459396004677,
-0.07647858560085297,
-0.015953222289681435,
0.15284757316112518,
0.06995012611150742,
0.09526203572750092,
-0.03879788517951965,
0.1627301275730133,
0.03778747841715813,
0.02540971338748932,
-0.07141587883234024,
-0.02688615396618843,
0.07867905497550964,
0.050636958330869675,
-0.07842648774385452,
0.03543545678257942,
-0.01658717542886734,
0.045074932277202606,
0.01703394204378128,
-0.11208822578191757,
0.02401050738990307,
-0.09966465830802917,
0.13482287526130676,
0.04340546578168869,
-0.04322661831974983,
-0.03811945766210556,
-0.08905996382236481,
0.1265728622674942,
0.004218000452965498,
-0.04742199555039406,
-0.00736971152946353,
-0.003102129092440009,
0.14925609529018402,
0.09660623222589493,
0.004423325881361961,
-0.020830634981393814,
-0.031991828233003616,
0.0013828298542648554,
0.059178806841373444,
-0.020064672455191612,
-0.0270069632679224,
0.11392326653003693,
0.11771989613771439,
0.006354064680635929,
-0.03861820697784424,
0.000612993142567575,
-0.0554937981069088,
0.1971692144870758,
0.050343625247478485,
-0.09845723956823349,
0.02818993479013443,
-0.30197808146476746,
-0.003567969426512718,
-0.09086151421070099,
-0.04774464666843414,
-0.07561782002449036,
-0.18022595345973969,
-0.13651344180107117,
-0.0029845451936125755,
-0.07629510760307312,
-0.028705937787890434,
-0.01073063351213932,
0.16280566155910492,
0.037182681262493134,
-0.06099401041865349,
0.005602142307907343,
-0.028715144842863083,
-0.07084035873413086,
-0.17396850883960724,
-0.0449933186173439,
0.012674741446971893,
-0.0051479884423315525,
0.0017628342611715198,
-0.032029811292886734,
0.054247960448265076,
-0.01630382612347603,
0.05598277971148491,
-0.0029590760823339224,
-0.021300552412867546,
-0.030574364587664604,
0.1008845642209053,
0.0914185643196106,
0.06312889605760574,
-0.005650247447192669,
0.07588721811771393,
0.038494329899549484,
-0.00035807525273412466,
0.013928906060755253,
-0.03281275928020477,
0.021625300869345665,
0.005592672619968653,
0.035781726241111755,
-0.12938828766345978,
-0.1195274069905281,
-0.07802608609199524,
0.12247543036937714,
-0.08648715168237686,
-0.14969244599342346,
-0.1602317839860916,
-0.040199168026447296,
-0.03717735782265663,
0.038098566234111786,
-0.0606946125626564,
-0.05462538078427315,
-0.043352123349905014,
-0.013860528357326984,
0.05663343146443367,
-0.002797221764922142,
-0.033258017152547836,
0.09245109558105469,
0.011274749413132668,
-0.10367678105831146,
-0.05543350800871849,
-0.003175022779032588,
0.01468907855451107,
0.10627628117799759,
-0.07355442643165588,
0.11420076340436935,
0.1566975861787796,
0.07269857823848724,
0.05932527408003807,
-0.007063237018883228,
-0.01685793697834015,
-0.045333053916692734,
0.05280106142163277,
-0.014400089159607887,
0.009130395017564297,
0.06615942716598511,
0.011611560359597206,
0.05005178973078728,
-0.02865617722272873,
0.021502085030078888,
0.14680910110473633,
0.03567517176270485,
0.09488804638385773,
0.007851248607039452,
-0.023780226707458496,
0.056667935103178024,
0.04952071234583855,
0.07564068585634232,
-0.01717185042798519,
0.11292456835508347,
-0.02575409598648548,
-0.010457608848810196,
-0.050871096551418304,
0.15984031558036804,
0.0364198237657547,
-0.03815004229545593,
-0.01508485060185194,
0.016176488250494003,
0.13246718049049377,
-0.03554008528590202,
0.028094878420233727,
0.055117398500442505,
0.09367025643587112,
0.06338242441415787,
-0.035244327038526535,
-0.04038294032216072,
0.043080151081085205,
0.04639548435807228,
-0.012439904734492302,
-0.09090325981378555,
-0.10297305881977081,
-0.08855843544006348,
-0.02970561943948269,
-0.042847640812397,
-0.04601936414837837,
-0.10120923072099686,
-0.1162419468164444,
0.0842553973197937,
0.09195122867822647,
-0.04466845840215683,
-0.04691362753510475,
-0.07924635708332062,
-0.1250816285610199,
0.03711269423365593,
0.02047402411699295,
0.014189557172358036,
0.000277203565929085,
-0.001136109814979136,
0.17940934002399445,
0.02111843228340149,
-0.003895969595760107,
-0.11687047779560089,
-0.07796530425548553,
0.07908357679843903,
0.0078050182200968266,
0.03635895997285843,
-0.04544169455766678,
-0.03428618237376213,
0.007920798845589161,
-0.019458753988146782,
0.020684370771050453,
0.10507285594940186,
0.0492788627743721,
0.021438397467136383,
-0.0878937691450119,
-0.07323760539293289,
-0.05579813942313194,
0.005903896875679493,
0.009759082458913326,
-0.11924707144498825,
-0.047451432794332504,
-0.0015616053715348244,
-0.07900223135948181,
-0.11844649165868759,
0.04613583907485008,
-0.06591621786355972,
-0.05836116522550583,
-0.015504117123782635,
0.006231897044926882,
-0.031437408179044724,
-0.038840118795633316,
-0.005737097468227148,
0.07271095365285873,
0.10767508298158646,
-0.005448784679174423,
-0.013627720065414906,
-0.07925119996070862,
0.07241808623075485,
-0.009804174304008484,
-0.009215615689754486,
-0.04584570974111557,
0.04528404399752617,
0.11265695840120316,
0.06152549013495445,
0.009821613319218159,
-0.026480399072170258,
-0.049183234572410583,
0.05669591575860977,
0.07248473912477493,
0.01817580685019493,
-0.02995917946100235,
0.0431881807744503,
-0.020107973366975784,
0.04070354625582695,
0.09837938845157623,
0.022612951695919037,
-0.10491686314344406,
-0.03725513070821762,
-0.06379133462905884,
0.06503110378980637,
0.16700203716754913,
0.09287281334400177,
-0.01914476789534092,
-0.021862506866455078,
0.1064934954047203,
0.11159687489271164,
0.07951687276363373,
0.026850799098610878,
0.01402223389595747,
0.19538967311382294,
0.11954004317522049,
-0.012768487446010113,
0.02864498645067215,
0.0909079909324646,
0.13003109395503998,
0.07410997152328491,
-0.06010466068983078,
0.03157484158873558,
0.09008786082267761,
-0.035791847854852676,
0.24534441530704498,
0.007457147818058729,
-0.014836680144071579,
-0.09712494164705276,
-0.12972748279571533,
-0.020002007484436035,
0.1721097230911255,
0.11334331333637238,
0.13975755870342255,
-0.046525049954652786,
0.06225984916090965,
0.019663559272885323,
0.07418551295995712,
0.10710369050502777,
0.07685791701078415,
0.047289930284023285,
-0.04435398429632187,
0.015376386232674122,
-0.04522150382399559,
0.0222722627222538,
0.12877215445041656,
0.10590124875307083,
0.08959003537893295,
0.08428606390953064,
-0.0030056172981858253,
0.12389524281024933,
0.028432026505470276,
0.0025919312611222267,
-0.011836799792945385,
0.04968170076608658,
-0.035821761935949326,
-0.12403127551078796,
-0.006584028247743845,
0.005063385237008333,
-0.024168100208044052,
-0.15281012654304504,
-0.15300631523132324,
-0.08356548845767975,
0.03314239904284477,
-0.14673936367034912,
-0.193895161151886,
-0.10564756393432617,
-0.09736227989196777,
-0.09123808145523071,
0.07637204974889755,
-0.12018843740224838,
-0.11424999684095383,
-0.0025383897591382265,
0.06622888147830963,
0.03022822178900242,
-0.0294716227799654,
-0.05105764418840408,
0.10377838462591171,
0.07521765679121017,
-0.1850772351026535,
0.10058809816837311,
0.13274259865283966,
0.07177931815385818,
-0.04450095817446709,
-0.1905657947063446,
0.09236801415681839,
0.068705253303051,
0.001725324778817594,
-0.12647457420825958,
-0.03427780792117119,
0.08078446984291077,
0.08744248747825623,
-0.0031548235565423965,
0.030915597453713417,
0.044939808547496796,
0.006061752792447805,
0.023018382489681244,
0.07389221340417862,
-0.005107787903398275,
0.011912873014807701,
-0.023495595902204514,
-0.08783774077892303,
-0.035254303365945816,
-0.011897338554263115,
0.03734763711690903,
-0.03681626170873642,
-0.11596516519784927,
-0.09649737179279327,
-0.020857522264122963,
0.06617825478315353,
0.06015060096979141,
0.02386060729622841,
0.13128721714019775,
0.07448824495077133,
-0.011623777449131012,
0.04572981968522072,
0.04527503252029419,
0.032671838998794556,
0.09964074194431305,
-0.10878567397594452,
-0.07446619123220444,
-0.048643626272678375,
-0.07479743659496307,
-0.08000148087739944,
-0.020051974803209305,
-0.00895747635513544,
-0.08070307224988937,
0.013924662955105305,
-0.054519060999155045,
-0.004020549822598696,
0.016101276502013206,
0.08256872743368149,
0.08971402049064636,
0.035274114459753036,
-0.028447235003113747,
-0.130678191781044,
-0.05282220244407654,
-0.07827676087617874,
-0.0034984848462045193,
-0.17958740890026093,
-0.11937098950147629,
-0.06778490543365479,
-0.10979016870260239,
-0.18275897204875946,
-0.1524471491575241,
-0.12511491775512695,
-0.09917143732309341,
-0.06645508855581284,
-0.06798407435417175,
-0.08289177715778351,
-0.06270146369934082,
-0.021451162174344063,
0.040288012474775314,
0.03809753432869911,
-0.169442281126976,
-0.10141178965568542,
0.019423428922891617,
-0.04815913736820221,
-0.16449609398841858,
0.0833955854177475,
-0.03419754281640053,
-0.01535477489233017,
0.009220562875270844,
-0.024829497560858727,
0.11995185166597366,
-0.08512646704912186,
-0.029240328818559647,
0.04576471075415611,
0.11001947522163391,
0.045944683253765106,
-0.055384837090969086,
0.035037774592638016,
0.013244112953543663,
0.008376245386898518,
-0.10057970881462097,
0.0892181247472763,
0.15063050389289856,
0.04872782155871391,
-0.007650732062757015,
-0.07783105969429016,
-0.15398098528385162,
0.04054705426096916,
-0.02162235789000988,
0.08783955127000809,
-0.05059918016195297,
-0.059858787804841995,
-0.12463407218456268,
-0.049025144428014755,
0.056231483817100525,
0.035032741725444794,
0.0374014638364315,
-0.09825703501701355,
0.011289818212389946,
0.04296284541487694,
0.06973187625408173,
0.019767358899116516,
-0.05395010858774185,
0.028591766953468323,
-0.06174434348940849,
-0.03745477274060249,
0.016955139115452766,
0.0802483856678009,
0.030071116983890533,
-0.03887220099568367,
0.08592361211776733,
-0.07654432207345963,
0.08379824459552765,
0.10225942730903625,
0.1723404973745346,
0.017695751041173935,
0.12181726098060608,
-0.15077318251132965,
-0.13988356292247772,
0.0785757303237915,
-0.2121250182390213,
0.060465555638074875,
-0.13385090231895447,
-0.07648732513189316,
-0.23323571681976318,
-0.16263750195503235,
-0.09631436318159103,
0.12926922738552094,
-0.19189369678497314,
-0.16811001300811768,
-0.08625617623329163,
0.07410452514886856,
0.11208964139223099,
-0.02043534256517887,
0.14432112872600555,
0.039815302938222885,
0.07951878011226654,
0.11792058497667313,
0.135198712348938,
0.014580126851797104,
-0.036729149520397186,
-0.008181214332580566,
-0.03627579286694527,
0.03409988805651665,
-0.0481141060590744,
0.13866403698921204,
-0.05703182518482208,
-0.07421451061964035,
0.0978856161236763,
0.09079545736312866,
0.009235781617462635,
0.05021139234304428,
0.009266111068427563,
0.15854471921920776,
0.021121971309185028,
-0.038299642503261566,
-0.04722088947892189,
-0.1992013156414032,
-0.1668439656496048,
-0.03529048338532448,
0.08997399359941483,
-0.0020001644734293222,
0.032241854816675186,
0.001808128203265369,
-0.020926930010318756,
0.067791648209095,
0.011418627575039864,
0.0008456851937808096,
0.010394974611699581,
-0.1964225471019745,
-0.003319063689559698,
-0.09066660702228546,
-0.026449086144566536,
-0.1410108506679535,
-0.02034091018140316,
0.04118892550468445,
0.07520994544029236,
0.08317116647958755,
-0.0005208849906921387,
0.019005952402949333,
-0.15110716223716736,
-0.040676359087228775,
0.01158090028911829,
-0.12023192644119263,
-0.013034100644290447,
-0.06621640920639038,
-0.002605540445074439,
-0.1689891517162323,
-0.11613013595342636,
0.02605380304157734,
0.04200325906276703,
-0.12030066549777985,
-0.11153143644332886,
0.0018794763600453734,
0.029599230736494064,
0.07043669372797012,
-0.04944666847586632,
-0.03966232016682625,
0.10393267124891281,
0.0096044410020113,
0.0635450929403305,
0.04075940325856209,
-0.02014949917793274,
0.0731397345662117,
0.06706690043210983,
0.08176309615373611,
0.023005807772278786,
0.020842766389250755,
0.01931501366198063,
0.09929131716489792,
0.07727497071027756,
0.0335908941924572,
0.03175695240497589,
0.0749848261475563,
0.06955664604902267,
0.14505192637443542,
0.06823719292879105,
0.10586337000131607,
-0.0640309751033783,
-0.05145418643951416,
0.07425466924905777,
0.006944088265299797,
-0.06843472272157669,
-0.23873572051525116,
-0.0008755279122851789,
-0.17746005952358246,
-0.03507717698812485,
0.0910302996635437,
0.009948504157364368,
0.04970681294798851,
-0.10596638172864914,
-0.025982335209846497,
-0.1429508477449417,
-0.09104511141777039,
0.0887044221162796,
0.004408171866089106,
0.02315160073339939,
0.14658528566360474,
0.027869312092661858,
0.030971964821219444,
-0.02177891880273819,
-0.04947220906615257,
0.10352873057126999,
-0.02960679680109024,
0.03576894849538803,
-0.028574859723448753,
-0.026962995529174805,
-0.044214170426130295,
-0.020575858652591705,
0.07682871073484421,
0.1503208875656128,
0.07382013648748398,
-0.0948675349354744,
-0.08500736951828003,
-0.01394050195813179,
-0.04107039049267769,
0.08151625841856003,
-0.05105985701084137,
-0.1575094759464264,
0.03129173070192337,
0.11287043243646622,
0.03408494591712952,
-0.07147231698036194,
0.012069030664861202,
0.11954095959663391,
0.07891194522380829,
0.028670037165284157,
-0.06887198984622955,
-0.06586591899394989,
-0.1351112276315689,
-0.17922528088092804,
0.017277760431170464,
0.1331615149974823,
-0.10070469230413437,
-0.17728866636753082,
-0.08831752836704254,
-0.011688938364386559,
-0.019917793571949005,
0.060025863349437714,
0.10446249693632126,
0.07757706195116043,
-0.03502262756228447,
0.01796967163681984,
0.09364421665668488,
0.02134505659341812,
-0.0026100443210452795,
0.01810504123568535,
0.09112485498189926,
-0.0063491868786513805,
-0.12126623094081879,
0.08434376120567322,
0.05486415699124336,
-0.018057717010378838,
-0.1691637486219406,
-0.21429495513439178,
0.0665677860379219,
-0.050270576030015945,
-0.06553642451763153,
0.10840685665607452,
0.10865228623151779,
0.06883687525987625,
-0.01432188879698515,
0.12923896312713623,
0.01654285192489624,
0.11196189373731613,
0.11087328940629959,
0.04240124672651291,
-0.08702187985181808,
0.006070529576390982,
-0.027758818119764328,
-0.052919358015060425,
-0.008830069564282894,
-0.1599063128232956,
-0.06354143470525742,
0.06108228862285614,
0.06807468831539154,
-0.02227628044784069,
-0.01622016914188862,
-0.03499152138829231,
-0.009158141911029816,
0.08340228348970413,
0.08890548348426819,
-0.03805466741323471,
0.05825713649392128,
0.25897157192230225,
0.029397079721093178,
0.0013759331777691841,
-0.09933706372976303,
0.09006591141223907,
0.08382083475589752,
0.06836313009262085,
0.145587757229805,
-0.0011228708317503333,
-0.01735963113605976,
-0.03850606828927994,
0.02238362841308117,
-0.019817814230918884,
-0.130408376455307,
-0.062210358679294586,
-0.024800391867756844,
0.08181632310152054,
0.04522574320435524,
0.018327930942177773,
-0.11876461654901505,
-0.1754513531923294,
0.1390789896249771,
0.1172056496143341,
-0.12268640846014023,
-0.0060592107474803925,
0.07015983760356903,
-0.004753837361931801,
0.05528651550412178,
-0.14214304089546204,
0.12406639754772186,
0.10652099549770355,
-0.003649084595963359,
0.041230086237192154,
0.042252033948898315,
0.033082325011491776,
-0.025527052581310272,
0.10342630743980408,
0.05562829598784447,
0.04998994991183281,
0.06809855252504349,
0.09821122139692307,
-0.12475275248289108,
-0.1257963925600052,
0.010899360291659832,
-0.15862567722797394,
-0.061016105115413666,
-0.11815528571605682,
-0.07594813406467438,
-0.054643381386995316,
-0.12099485099315643,
-0.1643136441707611,
-0.07432525604963303,
-0.07740375399589539,
0.004805882927030325,
-0.03735973685979843,
0.016287032514810562,
-0.005487990099936724,
0.029440730810165405,
-0.07556934654712677,
0.018346071243286133,
0.18148157000541687,
0.0017261331668123603,
0.06353640556335449,
-0.0981505885720253,
-0.01968987099826336,
-0.037383634597063065,
0.04114887863397598,
0.0338459350168705,
-0.041888896375894547,
-0.053219668567180634,
-0.11572545021772385,
0.03577898442745209,
-0.052438683807849884,
-0.033701345324516296,
0.06882234662771225,
0.009448410011827946,
-0.06051744520664215,
0.04631756618618965,
0.12731072306632996,
0.03070850297808647,
-0.010721435770392418,
-0.0008667100919410586,
0.08948682248592377,
0.07865315675735474,
-0.0655401349067688,
-0.07377889752388,
0.01627897284924984,
0.05062226951122284,
-0.007654941640794277,
0.05155853182077408,
-0.06584589183330536,
0.06443069130182266,
0.09611104428768158,
-0.07104445993900299,
-0.08487284183502197,
-0.08028656989336014,
-0.07876407355070114,
0.035512570291757584,
-0.0036520715802907944,
-0.03503330796957016,
0.00317956879734993,
-0.08764385432004929,
-0.03318033367395401,
0.02738119848072529,
0.04583447799086571,
0.05804220214486122,
0.07231546193361282,
-0.09202978014945984,
-0.028381815180182457,
0.00701131671667099,
0.09336957335472107,
-0.030368037521839142,
-0.05672641471028328,
0.025602176785469055,
-0.04270295798778534,
0.028289692476391792,
0.04562635347247124,
0.0073655047453939915,
-0.11029144376516342,
-0.10086998343467712,
-0.09588438272476196,
-0.06536724418401718,
-0.10507270693778992,
-0.1302647441625595,
-0.109421506524086,
-0.2389611005783081,
-0.17674517631530762,
-0.033377159386873245,
-0.049547892063856125,
0.08902408927679062,
0.0971345603466034,
-0.01909497193992138,
0.01041498314589262,
0.10284006595611572,
0.0925840511918068,
0.07176520675420761,
0.12201299518346786,
0.06660493463277817,
0.027388745918869972,
0.008340520784258842,
0.12288958579301834,
0.0816924124956131,
-0.008708823472261429,
-0.07543792575597763,
-0.10698685795068741,
0.06515300273895264,
-0.20151089131832123,
-0.09275027364492416,
-0.0613076351583004,
-0.019599981606006622,
-0.08741617947816849,
0.011881882324814796,
0.23328380286693573,
0.18202997744083405,
-0.0372345857322216,
0.0007578429649583995,
0.044972579926252365,
-0.009553956799209118,
-0.17627611756324768,
0.015195059590041637,
-0.050546638667583466,
0.0643257275223732,
0.05108274146914482,
0.029391644522547722,
-0.023141590878367424,
-0.009382745251059532,
-0.008149742148816586,
0.0918874591588974,
-0.016522835940122604,
-0.06153196468949318,
0.022316304966807365,
-0.030724311247467995,
0.004886672832071781,
0.21166647970676422,
0.009885599836707115,
-0.007843508385121822,
-0.09331678599119186,
-0.0703682228922844,
0.16754867136478424,
0.01004931889474392,
-0.020505476742982864,
0.06964143365621567,
-0.06380201876163483,
-0.04331134632229805,
-0.0051913512870669365,
0.007881012745201588,
0.09963983297348022,
0.15532666444778442,
0.03332815691828728,
-0.04492880031466484,
-0.015337918885052204,
0.008810034021735191,
0.017564333975315094,
0.08637449145317078,
0.13557757437229156,
0.003045071382075548,
-0.012711318209767342,
-0.14549170434474945,
0.08092256635427475,
0.14054438471794128,
0.09162987768650055,
-0.09970680624246597,
-0.0812269076704979,
-0.1063808798789978,
0.10549046844244003,
0.06917331367731094,
0.09894677996635437,
-0.17588238418102264,
-0.12259293347597122,
0.14538760483264923,
-0.10472990572452545,
-0.04972595348954201,
-0.08076683431863785,
0.057013269513845444,
0.0009695796179585159,
-0.030650338158011436,
-0.002154713496565819,
-0.01269925944507122,
-0.06990288197994232,
-0.17518746852874756,
0.06854384392499924,
-0.017826708033680916,
0.02654884196817875,
-0.004587376955896616,
-0.14318501949310303,
-0.0505836121737957,
-0.09066298604011536,
0.1356474757194519,
-0.020216653123497963,
-0.11576401442289352,
-0.04207369685173035,
-0.08426962792873383,
0.08835101127624512,
0.11661368608474731,
0.028869297355413437,
-0.008806759491562843,
0.0014379508793354034,
-0.006701388396322727,
0.05910268425941467,
0.13154879212379456,
0.011988512240350246,
0.0016833246918395162,
0.13020667433738708,
0.07693471759557724,
0.17317914962768555,
0.15197263658046722,
-0.018602577969431877,
-0.05523127317428589,
-0.0522846095263958,
0.08657759428024292,
0.03800668194890022,
-0.16054442524909973,
-0.17023515701293945,
-0.06825877726078033,
0.002714947098866105,
0.12366556376218796,
0.000716697599273175,
0.0987681970000267,
0.10314913839101791,
0.0596027635037899,
0.07078444957733154,
0.0633770152926445,
0.006220017559826374,
-0.069515660405159,
-0.040739499032497406,
-0.13131073117256165,
0.022802643477916718,
0.13853557407855988,
0.01829252950847149,
-0.013674262911081314,
-0.016478657722473145,
0.030278518795967102,
0.08266656845808029,
0.15784288942813873,
0.07728847116231918,
0.040916651487350464,
0.027190495282411575,
-0.11339180171489716,
0.0008367524715140462,
-0.10733287781476974,
-0.07019224762916565,
0.0979771688580513,
0.07243433594703674,
-0.0868179127573967,
-0.023067861795425415,
-0.06653248518705368,
-0.028512516990303993,
0.014277301728725433,
0.02413737028837204,
-0.05653661862015724,
-0.0851161926984787,
-0.04218398779630661,
0.011018463410437107,
0.036433689296245575,
0.07635024935007095,
0.007744021248072386,
-0.17749488353729248,
0.0620533749461174,
-0.016521530225872993,
0.10562341660261154,
0.0005579819553531706,
0.11752871423959732,
0.1781715601682663,
-0.004726602230221033,
0.06937728822231293,
0.00475440826267004,
-0.006573929451406002,
-0.0961502343416214,
-0.009375600144267082,
-0.0028239476960152388,
-0.016829034313559532,
-0.05157846212387085,
-0.0573098249733448,
0.003012323286384344,
0.02201617881655693,
-0.04623066633939743,
-0.04559466987848282,
0.06550353765487671,
0.008094369433820248,
0.06258317083120346,
-0.016729453578591347,
0.12100424617528915,
0.04450356960296631,
0.0004247275646775961,
0.015420990064740181,
0.05717191845178604,
-0.13040192425251007,
-0.04327421262860298,
-0.00821672286838293,
-0.0036144282203167677,
0.017934152856469154,
-0.06143804267048836,
0.10119712352752686,
0.03088555298745632,
0.013583025895059109,
0.02411557361483574,
-0.010757425799965858,
-0.03586257994174957,
0.016244880855083466,
-0.04264585301280022,
-0.030123122036457062,
-0.15660139918327332,
-0.009445170871913433,
0.0938839390873909,
0.12465867400169373,
0.022671395912766457,
0.22620411217212677,
-0.034565869718790054,
-0.09762889891862869,
0.004097317811101675,
0.0883607417345047,
0.045743126422166824,
-0.04095965996384621,
-0.1569603532552719,
-0.05349629372358322,
-0.014784542843699455,
-0.13600170612335205,
-0.07911330461502075,
-0.07061833143234253,
-0.02961490862071514,
0.06764476746320724,
0.016488390043377876,
-0.014938782900571823,
0.035126447677612305,
-0.014814455062150955,
0.006543335504829884,
-0.02791077084839344,
-0.02686578407883644,
-0.09975090622901917,
-0.008048155345022678,
0.023278679698705673,
0.01062514167279005,
-0.010195755399763584,
-0.012615718878805637,
-0.09652942419052124,
0.02474002167582512,
0.0509871244430542,
0.11826999485492706,
-0.03432103991508484,
-0.07856173813343048,
-0.017697375267744064,
-0.015066857449710369,
-0.03955220803618431,
-0.09651177376508713,
-0.01478411816060543,
0.056119032204151154,
-0.021181927993893623,
0.04340430721640587,
-0.04384208843111992,
-0.06800388544797897,
-0.05629504472017288,
-0.08656869828701019,
0.01549303438514471,
-0.07661862671375275,
-0.15649853646755219,
-0.008603856898844242,
-0.11315940320491791,
0.006638738326728344,
0.0005063050775788724,
-0.01892353594303131,
-0.03746643289923668,
-0.019475964829325676,
0.09490188211202621,
0.06493277847766876,
-0.025230130180716515,
0.024604305624961853,
0.08108208328485489,
-0.07638896256685257,
-0.1325734257698059,
-0.055913086980581284,
0.06178503483533859,
0.11456537246704102,
0.167781800031662,
0.10743600875139236,
-0.021090630441904068,
-0.092519111931324,
-0.05050324648618698,
0.03884558752179146,
-0.007842205464839935,
-0.07891751825809479,
-0.040963005274534225,
-0.12821105122566223,
-0.08417213708162308,
0.046452950686216354,
-0.02687990665435791,
-0.09780102223157883,
-0.010995970107614994,
0.14709042012691498,
0.19973117113113403,
-0.052049413323402405,
-0.07982292026281357,
0.043321963399648666,
0.11970479041337967,
-0.03260413184762001,
-0.04773722216486931,
0.008296475745737553,
-0.10087277740240097,
0.018022775650024414,
-0.016990961506962776,
-0.04038938879966736,
-0.039422936737537384,
0.012958369217813015,
0.0655507892370224,
-0.023611536249518394,
0.14552932977676392,
0.06015141308307648,
0.16948768496513367,
0.06601759791374207,
-0.04543445259332657,
0.08339647203683853,
0.16831615567207336,
-0.03939120098948479,
-0.11417480558156967,
-0.14801917970180511,
-0.045613620430231094,
0.0949045717716217,
-0.06132156401872635,
-0.2146998643875122,
0.0029408177360892296,
0.030061572790145874,
0.06507788598537445,
0.07578936964273453,
-0.07809802889823914,
0.03186894580721855,
-0.061847470700740814,
-0.043382830917835236,
-0.042900700122117996,
-0.08166234195232391,
0.0497802272439003,
-0.0231185182929039,
0.019346222281455994,
0.035407889634370804,
0.024406496435403824,
0.08726999163627625,
-0.012953347526490688,
-0.0853429064154625,
0.11133544892072678,
-2.332032090635039e-05,
0.0036594124976545572,
-0.01826133206486702,
0.016008693724870682,
0.08606095612049103,
-0.21190474927425385,
-0.1885024458169937,
0.05387451872229576,
0.06223585829138756,
-0.03927557170391083,
-0.016183700412511826,
0.005926693323999643,
0.034212201833724976,
0.05112242326140404,
0.09362944215536118,
-0.02239752560853958,
0.0638875812292099,
-0.00846198108047247,
0.005243913270533085,
-0.0937809944152832,
-0.1185610443353653,
0.009623302146792412,
0.005356592126190662,
0.021218763664364815,
-0.11562278121709824,
-0.054658256471157074,
-0.03590630739927292,
0.09228473156690598,
-0.08235125243663788,
0.04092727228999138,
0.0019841755274683237,
0.007055286783725023,
0.07091429084539413,
-0.12436015158891678,
0.014826766215264797,
0.05934989079833031,
-0.05794384703040123,
0.03516709432005882,
0.029757941141724586,
0.045125529170036316,
-0.05952898785471916,
0.08042449504137039,
0.03503688424825668,
0.09227509051561356,
0.07014837861061096,
0.15830688178539276,
0.12526650726795197,
0.14350281655788422,
0.10163706541061401,
-0.02919742837548256,
-0.13435323536396027,
-0.12915268540382385,
-0.11935840547084808,
0.007533826865255833,
-0.07882651686668396,
-0.13865099847316742,
-0.061166912317276,
-0.05596937984228134,
0.06307542324066162,
0.10463236272335052,
-0.12200135737657547,
0.03126576170325279,
0.0014505032449960709,
0.08090425282716751,
0.11568836122751236,
0.07010257989168167,
0.09941811114549637,
-0.026897264644503593,
0.024876577779650688,
-0.1409396082162857,
-0.06780893355607986,
0.07572430372238159,
-0.00489846570417285,
-0.07347309589385986,
0.04303368553519249,
0.15088756382465363,
0.0915893167257309,
-0.04493983834981918,
-0.07406160235404968,
-0.04660205915570259,
0.033560045063495636,
-0.10426793992519379,
-0.03877153620123863,
0.0037479239981621504,
0.0911467969417572,
0.15511147677898407,
0.03802576661109924,
-0.1056610718369484,
-0.05716178938746452,
0.04043658822774887,
0.15314489603042603,
0.05847804993391037,
-0.060134775936603546,
0.004093806259334087,
-0.07925871014595032,
0.08661535382270813,
0.14862287044525146,
-0.024170201271772385,
-0.051509011536836624,
-0.06906183063983917,
0.01842120848596096,
0.1391924023628235,
0.03301649168133736,
0.002223146380856633,
0.039503637701272964,
0.004040383268147707,
0.029297513887286186,
0.030565181747078896,
0.08618520200252533,
0.023060372099280357,
0.039003241807222366,
-0.038198355585336685,
-0.06384166330099106,
-0.023706398904323578,
0.024960670620203018,
0.20368517935276031,
0.08385784924030304,
-0.040213871747255325,
0.07627011835575104,
-0.10925199836492538,
-0.09667319059371948,
-0.05830961838364601,
0.05887206271290779,
0.0318882130086422,
0.005421209614723921,
-0.04294642433524132,
-0.05326628312468529,
0.038384489715099335,
-0.02138315886259079,
0.04747619852423668,
-0.019126983359456062,
-0.04255477711558342,
0.09676530957221985,
-0.09941684454679489,
0.00036074878880754113,
-0.04685211926698685,
-0.1253383308649063,
-0.004921142943203449,
0.038518138229846954,
-0.06379710882902145,
0.010955584235489368,
-0.09540887176990509,
-0.020311586558818817,
0.04872799664735794,
0.017819548025727272,
0.016596106812357903,
0.031669486314058304,
-0.026233594864606857,
0.02665916085243225,
0.08074911683797836,
0.09016995131969452,
-0.022665543481707573,
-0.08383814990520477,
-0.022213028743863106,
0.0007020916673354805,
0.022336682304739952,
0.09363321959972382,
0.04260573536157608,
0.043858278542757034,
0.02511082962155342,
-0.15628567337989807,
-0.04546443000435829,
-0.006204951088875532,
0.12216231971979141,
-0.15221892297267914,
-0.2137877643108368,
-0.15499171614646912,
0.02794034592807293,
0.1153961569070816,
0.05844107270240784,
-0.009338402189314365,
-0.022130334749817848,
-0.0044868746772408485,
0.05823396518826485,
0.033721648156642914,
0.029345957562327385,
0.03277882561087608,
0.046859823167324066,
-0.0974605530500412,
0.02939779683947563,
0.09554065763950348,
0.08947169780731201,
0.04970766603946686,
0.003048430662602186,
-0.04042788967490196,
0.13669587671756744,
0.08515813946723938,
0.05765305459499359,
0.004301168490201235,
0.014288279227912426,
0.12775278091430664,
0.052676111459732056,
0.002564485650509596,
-0.07235866785049438,
-0.05860578268766403,
0.05909796431660652,
0.05209902673959732,
0.07313045114278793,
0.03539757803082466,
-0.045404110103845596,
0.04818546772003174,
0.0640278086066246,
-0.01426494587212801,
-0.013485456816852093,
-0.009196050465106964,
0.1315741091966629,
-0.05530569702386856,
-0.06311145424842834,
-0.023281743749976158,
0.014648551121354103,
0.08604016900062561,
0.07165107876062393,
-0.010918226093053818,
0.11689277738332748,
-0.02042018435895443,
0.026271335780620575,
-0.008967075496912003,
0.11521346867084503,
0.10538921505212784,
-0.11354827135801315,
-0.05938670039176941,
-0.03325368091464043,
0.14482450485229492,
0.061852578073740005,
-0.05919833481311798,
-0.036527425050735474,
0.07995882630348206,
0.0070401644334197044,
-0.05867864936590195,
-0.10665292292833328,
-0.13739438354969025,
-0.07431532442569733,
0.006190672982484102,
-0.04564596340060234,
-0.10029633343219757,
-0.12047755718231201,
-0.13207857310771942,
0.09864027053117752,
0.04168450087308884,
-0.09777946770191193,
-0.024043597280979156,
-0.14123821258544922,
-0.029825979843735695,
0.060772791504859924,
0.17690064013004303,
0.08145153522491455,
0.03609307110309601,
0.0256559569388628,
0.08199869841337204,
0.029076453298330307,
0.014936426654458046,
0.002428361214697361,
-0.05080396309494972,
0.06950630247592926,
0.01885378360748291,
0.1127362921833992,
0.02202555350959301,
-0.028231581673026085,
0.04597724229097366,
0.025073038414120674,
-0.021285224705934525,
0.12199966609477997,
0.031213026493787766,
0.018337443470954895,
-0.19403481483459473,
-0.1497947871685028,
0.011705692857503891,
0.1721368432044983,
0.15464268624782562,
-0.18591831624507904,
-0.1610398292541504,
-0.14137007296085358,
0.022960081696510315,
0.014756318181753159,
0.040681369602680206,
-0.0439959280192852,
-0.14167355000972748,
0.0528629906475544,
-0.06864334642887115,
-0.04804074764251709,
-0.07466775923967361,
-0.05861456319689751,
0.008145359344780445,
0.023570392280817032,
0.033058784902095795,
-0.027681635692715645,
-0.025467343628406525,
0.13951919972896576,
0.11532007902860641,
-0.007028162479400635,
-0.07846549898386002,
-0.02283305861055851,
0.07410060614347458,
0.04352346807718277,
-0.008366667665541172,
-0.0007730228244327009,
-0.010681068524718285,
-0.0029134871438145638,
-0.09313399344682693,
0.12736700475215912,
0.04969042167067528,
0.011435721069574356,
-0.06931370496749878,
-0.04620394855737686,
-0.00949910283088684,
-0.12127611041069031,
-0.05280430614948273,
-0.010460690595209599,
-0.022352317348122597,
0.14818188548088074,
0.20632007718086243,
0.061138566583395004,
0.015490582212805748,
-0.035440851002931595,
0.0673682764172554,
0.19022221863269806,
0.056883554905653,
-0.07917720824480057,
-0.09932872653007507,
0.046523481607437134,
0.05245189368724823,
-0.001006700680591166,
-0.09807752072811127,
-0.008838079869747162,
0.055631522089242935,
0.08941717445850372,
0.0013157639186829329,
-0.0737396702170372,
-0.02603273279964924,
0.02355499006807804,
0.03576091304421425,
-0.09439513832330704,
-0.10853477567434311,
0.04767381027340889,
-0.09792927652597427,
0.15433669090270996,
0.07681307941675186,
0.21093346178531647,
0.10380864143371582,
0.05625281482934952,
0.167683407664299,
-0.02161257527768612,
0.022389164194464684,
0.035549480468034744,
-0.05945739522576332,
-0.027278795838356018,
-0.06034817919135094,
-0.1265113651752472,
-0.06248579919338226,
0.029206708073616028,
0.21205087006092072,
0.16804960370063782,
-0.03575614467263222,
-0.019800445064902306,
-0.009882290847599506,
0.14693689346313477,
-0.04985174909234047,
-0.0384800098836422,
-0.026801150292158127,
-0.07478683441877365,
-0.14494848251342773,
-0.06499867886304855,
-0.04673653468489647,
0.023104466497898102,
-0.06575082242488861,
-0.22963926196098328,
-0.1038644015789032,
0.011253085918724537,
0.08970648795366287,
-0.022137079387903214,
-0.11108086258172989,
-0.07998533546924591,
-0.01826653629541397,
0.09729932248592377,
0.015121758915483952,
-0.05778925120830536,
-0.08371327817440033,
0.013562414795160294,
0.0953562930226326,
-0.011125264689326286,
-0.09895539283752441,
-0.04207064211368561,
0.03841545432806015,
0.06527268886566162,
-0.016686437651515007,
0.036371007561683655,
0.1730509102344513,
0.03219393640756607,
-0.07093996554613113,
-0.19224809110164642,
-0.11531559377908707,
0.001437951112166047,
-0.05013233795762062,
-0.09951687604188919,
-0.09870436042547226,
0.0880354791879654,
-0.0036236168816685677,
-0.026782559230923653,
-0.04658856242895126,
0.043587010353803635,
0.035796619951725006,
0.00480043375864625,
-0.07213932275772095,
0.022609354928135872,
-0.02474057488143444,
-0.12216268479824066,
-0.09564290195703506,
0.022567324340343475,
0.08022899180650711,
-0.07668463885784149,
-0.056439608335494995,
-0.02112695761024952,
0.0012930876109749079,
0.036638423800468445,
0.05237486585974693,
0.058173224329948425,
0.015923568978905678,
0.10912543535232544,
0.06652434915304184,
-0.012502951547503471,
-0.019490037113428116,
0.0603228323161602,
0.028884069994091988,
0.050428781658411026,
-0.14865434169769287,
-0.05273286625742912,
0.020261483266949654,
-0.02604534476995468,
-0.04825789853930473,
0.008390882983803749,
0.05196337774395943,
0.04054206237196922,
0.02627089060842991,
0.030541693791747093,
0.025883778929710388,
0.062186624854803085,
0.08633068948984146,
0.09802167862653732,
0.029081735759973526,
0.00317860278300941,
-0.0964779257774353,
-0.07804577052593231,
0.0458066500723362,
0.12072815001010895,
-0.1965603530406952,
-0.08582421392202377,
-0.09373871982097626,
-0.05195564776659012,
0.024943187832832336,
-0.0699097141623497,
-0.06646141409873962,
-0.1311848908662796,
-0.14109940826892853,
-0.01996275782585144,
-0.051007963716983795,
-0.05505090579390526,
-0.03913811221718788,
-0.05425543338060379,
-0.05266411229968071,
-0.05600906163454056,
-0.026060154661536217,
0.057461656630039215,
0.05265742912888527,
-0.013898856937885284,
0.09879482537508011,
0.08302094042301178,
0.029716022312641144,
0.07467854022979736,
-0.00841529667377472,
0.16980288922786713,
-0.04140244796872139,
-0.03498271107673645,
0.040653496980667114,
-0.06696735322475433,
-0.09389999508857727,
-0.10037088394165039,
-0.13809125125408173,
0.023304395377635956,
-0.00065597053617239,
0.011744393967092037,
-0.023766491562128067,
0.015519751235842705,
0.07647185772657394,
0.1376507729291916,
-0.10979295521974564,
-0.05570182204246521,
-0.009314053691923618,
-0.013922628946602345,
-0.03827228024601936,
0.018788911402225494,
0.022705912590026855,
0.027733629569411278,
-0.03660639002919197,
0.015565435402095318,
0.00909874215722084,
-0.05667101964354515,
-0.05830701068043709,
-0.018401052802801132,
-0.04234812408685684,
0.047880832105875015,
-0.011087293736636639,
-0.05480119585990906,
0.00040389265632256866,
0.0752025693655014,
-0.012381432577967644,
0.03986002504825592,
0.07592686265707016,
0.04310503974556923,
0.08245278149843216,
-0.10750807076692581,
-0.15068145096302032,
-0.0036129013169556856,
0.041976314038038254,
-0.005371666047722101,
0.04871932417154312,
0.10578940063714981,
0.00925478059798479,
-0.05255059152841568,
0.11568674445152283,
-0.037708643823862076,
0.07133758068084717,
-0.17830638587474823,
-0.09881270676851273,
-0.095293328166008,
0.10090573132038116,
0.002365470863878727,
-0.011059189215302467,
-0.13891682028770447,
-0.11345791816711426,
0.024240873754024506,
0.1016036793589592,
0.10928221791982651,
-0.04014864191412926,
0.011062211357057095,
0.04189709946513176,
0.051813580095767975,
0.05800265073776245,
0.08842810243368149,
0.026312099769711494,
-0.004797046072781086,
0.08300759643316269,
-0.012760420329868793,
0.17583993077278137,
-0.01036849245429039,
-0.020111514255404472,
-0.0620555579662323,
0.06242946535348892,
0.1416427344083786,
0.08286521583795547,
-0.004058429971337318,
0.025864753872156143,
-0.00011690382962115109,
0.07221471518278122,
-0.058921974152326584,
-0.06185457110404968,
-0.06679625809192657,
-0.07898017764091492,
0.02880159765481949,
0.03766583651304245,
-0.012269697152078152,
0.013687127269804478,
-0.04028225690126419,
-0.07961376756429672,
0.12058635801076889,
-0.05809607729315758,
-0.091398224234581,
-0.07333677262067795,
-0.02242419309914112,
0.09561990201473236,
0.02015678957104683,
0.0751839354634285,
0.1065664142370224,
0.0277626384049654,
0.02986033260822296,
0.08405891805887222,
0.12922492623329163,
0.10575984418392181,
-0.036343079060316086,
-0.21738934516906738,
-0.022593995556235313,
-0.09242241829633713,
-0.061568982899188995,
-0.11011836677789688,
-0.16387249529361725,
0.019787786528468132,
0.010805514641106129,
-0.07036644965410233,
-0.020036375150084496,
0.02602159045636654,
-0.004317331127822399,
-0.06502743065357208,
-0.08266182243824005,
-0.05990474671125412,
-0.04480956867337227,
0.05789310112595558,
0.008120211772620678,
-0.04082352668046951,
-0.023230811581015587,
-0.0738075003027916,
0.011644436046481133,
-0.0021605240181088448,
0.07477765530347824,
0.09468217194080353,
0.062116678804159164,
0.018024848774075508,
-0.012573986314237118,
0.06669320911169052,
-0.03817423805594444,
0.12948766350746155,
0.09541654586791992,
0.1266871690750122,
0.024817582219839096,
0.06352729350328445,
0.1095186397433281,
0.08099795132875443,
0.06622395664453506,
0.031370971351861954,
0.06956074386835098,
0.06149306893348694,
-0.027787648141384125,
-0.10624589025974274,
-0.03463789075613022,
0.061864085495471954,
0.06444790959358215,
-0.27974018454551697,
-0.08795436471700668,
0.06298816949129105,
-0.10016563534736633,
-0.1276816576719284,
-0.05066177248954773,
-0.09996902197599411,
-0.017232464626431465,
-0.05418642982840538,
-0.028945092111825943,
0.012132133357226849,
0.017017116770148277,
0.022043980658054352,
0.08534150570631027,
0.10718270391225815,
-0.031283553689718246,
-0.0927007645368576,
-0.025616222992539406,
-0.030654599890112877,
0.12368734180927277,
-0.05372042953968048,
0.11248372495174408,
-0.006712574046105146,
0.00726578151807189,
0.03122188337147236,
0.23468650877475739,
0.1300523579120636,
-0.003215055214241147,
0.07254164665937424,
-0.034507866948843,
-0.021944474428892136,
-0.01847563311457634,
-0.04203839227557182,
-0.08440173417329788,
-0.08565741777420044,
0.06799149513244629,
-0.02268507331609726,
-0.04703705385327339,
0.047999173402786255,
0.04657929018139839,
0.016751399263739586,
-0.022071346640586853,
-0.12083388864994049,
0.009886233136057854,
0.025471091270446777,
-0.23607958853244781,
-0.07620062679052353,
0.03586581349372864,
-0.04858412593603134,
0.04242279380559921,
-0.06708189845085144,
-0.04029392823576927,
-0.03647436574101448,
0.059956394135951996,
-0.016882754862308502,
0.04290539771318436,
-0.040394335985183716,
0.031424038112163544,
0.024064818397164345,
-0.07772065699100494,
0.06089279428124428,
0.07697343826293945,
0.01660265028476715,
0.14788918197155,
0.059016741812229156,
0.0510563999414444,
0.06828964501619339,
0.06873756647109985,
0.02810271829366684,
-0.03307649865746498,
0.03253796696662903,
-0.04548311233520508,
-0.014796826988458633,
0.07218968868255615,
-0.03183698654174805,
-0.03944464772939682,
-0.014866126701235771,
0.002557596191763878,
-0.03277122229337692,
-0.024932192638516426,
0.03826483339071274,
-0.027187906205654144,
-0.06006365641951561,
-0.030534865334630013,
-0.06335130333900452,
-0.00944580603390932,
0.0017195830587297678,
-0.000518936081789434,
-0.016185827553272247,
0.0582183301448822,
0.08435114473104477,
-0.022073572501540184,
-0.013010524213314056,
0.017851442098617554,
-0.07013970613479614,
0.12065022438764572,
0.09471184015274048,
0.016640622168779373,
-0.05416394770145416,
0.10259408503770828,
-0.007428825832903385,
0.005638128612190485,
-0.035084813833236694,
-0.018829477950930595,
-0.032774269580841064,
-0.09282124042510986,
0.044365543872117996,
0.021218104287981987,
-0.04146699234843254,
-0.01829659752547741,
-0.05623646453022957,
-0.028327688574790955,
-0.012605910189449787,
0.06881862878799438,
0.1493643969297409,
0.03386132791638374,
0.04677420109510422,
0.03545953333377838,
0.09579507261514664,
-0.0796283483505249,
0.06436387449502945,
0.05242908373475075,
-0.08540056645870209,
-0.042038578540086746,
-0.01770775020122528,
-0.018736865371465683,
-0.05679739639163017,
-0.07585429400205612,
0.043019335716962814,
0.05082627385854721,
-0.023862889036536217,
-0.008019988425076008,
-0.06292425841093063,
0.04542355611920357,
0.05739868804812431,
-0.013572490774095058,
-0.09857093542814255,
0.05678929015994072,
0.06411640346050262,
0.18984617292881012,
-0.11108662933111191,
-0.1606607288122177,
-0.09762255847454071,
-0.024686194956302643,
0.05761333182454109,
-0.13245393335819244,
-0.139440655708313,
-0.019600989297032356,
-0.017437176778912544,
-0.06654808670282364,
0.13033427298069,
-0.005007507279515266,
0.1036461591720581,
0.05548204481601715,
-0.14414794743061066,
0.12855711579322815,
0.098258838057518,
0.0029439437203109264,
0.006879654712975025,
-0.022998705506324768,
-0.0074064964428544044,
0.09939603507518768,
-0.136116161942482,
-0.006041365675628185,
0.026570817455649376,
-0.040752191096544266,
-0.03319342061877251,
-0.05894733592867851,
0.05185393989086151,
-0.03877738118171692,
-0.08293547481298447,
-0.047672610729932785,
-0.07983675599098206,
0.07910964637994766,
0.011912200599908829,
-0.048000480979681015,
-0.042843297123909,
-0.007073416840285063,
-0.04693944752216339,
0.0503697395324707,
-0.04186641052365303,
0.04259263724088669,
0.070134237408638,
-0.08613887429237366,
-0.07941637933254242,
-0.028657637536525726,
-0.026938073337078094,
-0.04756926745176315,
0.06493488699197769,
0.004151634406298399,
-0.06385557353496552,
0.05821804329752922,
-0.07780884951353073,
0.06822327524423599,
0.008445093408226967,
0.06680820137262344,
-0.0031973302830010653,
0.04047249257564545,
0.034613240510225296,
-0.10013144463300705,
-0.11144371330738068,
-0.12122206389904022,
-0.04873919486999512,
-0.1313346028327942,
-0.11587099730968475,
0.03801565617322922,
-0.0035545662976801395,
-0.028204159811139107,
-0.06420879811048508,
0.09739656001329422,
-0.011954509653151035,
0.05699324607849121,
0.022154299542307854,
0.020533176138997078,
-0.12903065979480743,
-0.02736293524503708,
-0.08702937513589859,
-0.13535243272781372,
-0.1023731455206871,
-0.053606461733579636,
-0.15545570850372314,
-0.15628661215305328,
-0.2886759340763092,
-0.19870291650295258,
-0.061150770634412766,
-0.011338124983012676,
0.01253195758908987,
0.06698622554540634,
0.0653911605477333,
-0.005105259362608194,
0.0306466706097126,
0.09298575669527054,
-0.018529731780290604,
0.01279033999890089,
-0.046230968087911606,
-0.01846923679113388,
-0.04595877602696419,
0.019649559631943703,
-0.0009028437198139727,
0.21999171376228333,
0.026594161987304688,
0.12026029825210571,
0.07906599342823029,
-0.05845886841416359,
-0.1159997284412384,
0.10152983665466309,
0.05530969798564911,
0.07919605821371078,
0.002662610961124301,
-0.1993771344423294,
-0.02521393448114395,
-0.007234134711325169,
0.04942867532372475,
-0.010954960249364376,
0.0017569338670000434,
-0.005979275330901146,
-0.06774133443832397,
-0.10141821950674057,
-0.0034012177493423223,
0.08511276543140411,
0.060546036809682846,
0.06732147186994553,
-0.02941146306693554,
-0.08884919434785843,
-0.08326387405395508,
0.028812814503908157,
0.08517155051231384,
0.006149949040263891,
0.019035324454307556,
-0.061351265758275986,
0.05006394162774086,
0.048918988555669785,
-0.08904162794351578,
-0.09644468873739243,
-0.001206733169965446,
-0.02574453502893448,
0.07290636003017426,
-0.07982785999774933,
0.027240073308348656,
0.03816615417599678,
-0.036722972989082336,
-0.11110752075910568,
-0.014405361376702785,
-0.026799384504556656,
0.04221415892243385,
-0.15864597260951996,
-0.07713333517313004,
-0.09809146821498871,
-0.10279496759176254,
-0.18114259839057922,
-0.11444225162267685,
-0.0009539912571199238,
0.02976970188319683,
0.1311311274766922,
0.1314423531293869,
0.07030228525400162,
0.06973452121019363,
0.020331410691142082,
0.07194840162992477,
0.05474062263965607,
0.11317787319421768,
0.04856526479125023,
0.08348515629768372,
0.029832487925887108,
-0.016483841463923454,
0.10563960671424866,
0.03978551924228668,
-0.0056860437616705894,
0.005948376376181841,
-0.1539582461118698,
0.03325674310326576,
-0.07276605069637299,
-0.09097511321306229,
0.031730663031339645,
0.06725089997053146,
0.0035179888363927603,
0.016210295259952545,
0.06559579819440842,
0.06030328571796417,
0.005543750710785389,
-0.05650720372796059,
0.06663497537374496,
0.04768200218677521,
-0.031656522303819656,
-0.05084255710244179,
0.023534787818789482,
-0.1326991766691208,
-0.027542514726519585,
0.003820461221039295,
0.05937013402581215,
0.01946484111249447,
0.06459595263004303,
0.0834645926952362,
0.12443733960390091,
0.05765421688556671,
-0.021666904911398888,
-0.056979741901159286,
-0.0985264927148819,
0.005814439617097378,
0.14303770661354065,
-0.12620405852794647,
-0.1845760941505432,
-0.042538806796073914,
0.056984152644872665,
0.20274941623210907,
0.021966928616166115,
0.04752568528056145,
0.02952316403388977,
0.03806360438466072,
0.03660207986831665,
0.16900001466274261,
0.06219486892223358,
0.009540850296616554,
-0.024142371490597725,
-0.20440031588077545,
0.052671778947114944,
0.03171183541417122,
0.01381819136440754,
0.01874714344739914,
-0.0477631613612175,
0.07047651708126068,
0.15755628049373627,
0.11505891382694244,
0.06239725649356842,
-0.08044607937335968,
0.03854789212346077,
0.026727478951215744,
0.04861477017402649,
-0.15722574293613434,
-0.14990806579589844,
-0.040963903069496155,
0.032849572598934174,
-0.03091348707675934,
-0.14005354046821594,
0.04844779148697853,
-0.04578452929854393,
0.14286431670188904,
0.0535472109913826,
0.008397608064115047,
-0.014358998276293278,
-0.0619809590280056,
-0.04010859504342079,
-0.02220693975687027,
-0.08721917122602463,
-0.0351606160402298,
0.038194119930267334,
-0.017292654141783714,
0.01764654368162155,
-0.040900278836488724,
0.027645694091916084,
-0.07206603139638901,
-0.05282464995980263,
-0.017951704561710358,
0.11541446298360825,
0.1101280152797699,
-0.1180698350071907,
-0.020809177309274673,
0.13526812195777893,
0.1785215437412262,
0.11497153341770172,
-0.07999107986688614,
-0.07177523523569107,
-0.050304755568504333,
-0.08554196357727051,
-0.22400353848934174,
0.048312146216630936,
0.0550764724612236,
0.13767535984516144,
0.06789509952068329,
-0.04121289402246475,
0.05501031503081322,
-0.0047792959958314896,
-0.17182479798793793,
0.027036022394895554,
0.027412017807364464,
-0.035338032990694046,
-0.11814742535352707,
-0.08993890881538391,
-0.06070815399289131,
-0.127633735537529,
-0.013833390548825264,
-0.06364204734563828,
0.015642015263438225,
0.007799667771905661,
-0.01946207322180271,
0.05376546457409859,
-0.012620372697710991,
0.052301399409770966,
0.0458647720515728,
-0.016227316111326218,
0.10584007948637009,
0.03914211317896843,
0.029144033789634705,
0.10721514374017715,
2.8736074455082417e-05,
-0.04854845628142357,
-0.02215460315346718,
0.08688966929912567,
-0.01590142585337162,
0.03110240213572979,
-0.04877657815814018,
0.06999669224023819,
-0.04872531816363335,
0.10496039688587189,
0.22722649574279785,
-0.21478082239627838,
-0.0646476298570633,
-0.07220185548067093,
-0.008336919359862804,
0.1440095603466034,
-0.015903959050774574,
0.00268883747048676,
0.00685315765440464,
-0.05543925240635872,
-0.20812702178955078,
0.10719790309667587,
0.05480951815843582,
0.0015131894033402205,
0.04075722396373749,
0.011288691312074661,
0.013651895336806774,
-0.046630214899778366,
0.012136336416006088,
0.20709332823753357,
0.13202257454395294,
-0.07901520282030106,
0.021920155733823776,
0.06525271385908127,
0.04119313880801201,
0.09360012412071228,
-0.01573016121983528,
-0.004134193994104862,
0.010551811195909977,
0.004121669102460146,
-0.19611620903015137,
-0.002487248508259654,
-0.046942200511693954,
0.004402025602757931,
-0.012849331833422184,
-0.0037719919346272945,
-0.03428623452782631,
-0.0657682791352272,
0.11650625616312027,
-0.005323674064129591,
0.09470979869365692,
0.13073348999023438,
0.12481530755758286,
0.029013575986027718,
0.08211591839790344,
-0.01824362576007843,
0.17147409915924072,
0.09092535078525543,
-0.026775237172842026,
-0.027444783598184586,
-0.08493919670581818,
0.07190322875976562,
0.04546331241726875,
-0.023305634036660194,
-0.19362278282642365,
-0.10371106117963791,
-0.07368198037147522,
0.0380282960832119,
0.01264533493667841,
-0.002140727825462818,
0.0531652607023716,
-0.1549941450357437,
-0.10312364250421524,
-0.03484588488936424,
0.032642874866724014,
-0.0006707036518491805,
0.004789155442267656,
0.004431579727679491,
0.1487482637166977,
0.14566630125045776,
0.23161181807518005,
0.040627457201480865,
0.070268914103508,
0.09531296044588089,
0.041853394359350204,
-0.041611265391111374,
0.07939101755619049,
0.0648498386144638,
0.04424089565873146,
-0.19657644629478455,
-0.0954740047454834,
0.001814376562833786,
-0.049179259687662125,
0.05042130500078201,
-0.01827297732234001,
0.017693590372800827,
-0.11413935571908951,
-0.03738268464803696,
-0.06807371973991394,
0.029127148911356926,
0.02336905337870121,
-0.1351843923330307,
-0.10499102622270584,
0.017828280106186867,
0.06477825343608856,
0.1583283394575119,
-0.07645051926374435,
-0.1766664981842041,
-0.021606480702757835,
0.07881437987089157,
0.12837278842926025,
-0.12195821851491928,
-0.17616775631904602,
0.055999383330345154,
0.10058923810720444,
0.08529278635978699,
0.14026358723640442,
0.030810581520199776,
0.01649349182844162,
-0.004159729462116957,
-0.22538931667804718,
0.12865367531776428,
0.04775446280837059,
0.13922420144081116,
0.04028869792819023,
-0.05051923543214798,
0.007201333064585924,
0.15627136826515198,
0.058423496782779694,
0.07161183655261993,
0.08570060133934021,
0.012739988975226879,
-0.03774639219045639,
-0.012795639224350452,
0.04918074607849121,
-0.007926843129098415,
-0.13363116979599,
-0.07452487200498581,
-0.13387681543827057,
-0.07167712599039078,
-0.09389784187078476,
0.017587309703230858,
-0.1470360904932022,
-0.0906476229429245,
0.006570822559297085,
-0.01308754924684763,
-0.11918716877698898,
-0.0947137251496315,
-0.03096395917236805,
0.020214935764670372,
0.005125568248331547,
-0.026914279907941818,
-0.07717932760715485,
-0.059960439801216125,
-0.05287481099367142,
0.11482889950275421,
-0.06607390940189362,
0.01608463004231453,
-0.0022842425387352705,
0.15728440880775452,
0.16822803020477295,
0.04074028134346008,
0.048110563308000565,
0.0067663732916116714,
-0.0524536594748497,
-0.08974248915910721,
-0.03267793357372284,
-0.010853900574147701,
-0.01700703799724579,
-0.05223928764462471,
-0.04317142814397812,
-0.009908469393849373,
0.014311643317341805,
0.044107645750045776,
0.02259986847639084,
0.052586693316698074,
-0.04471861198544502,
0.02793954126536846,
0.013734300620853901,
-0.05984688177704811,
-0.10686659067869186,
-0.06094058230519295,
0.009925676509737968,
0.027310451492667198,
0.12035124748945236,
0.24670587480068207,
-0.09608712047338486,
-0.10852696001529694,
-0.05859249085187912,
0.011316160671412945,
0.056722529232501984,
0.03163852542638779,
0.03037366084754467,
0.005441757384687662,
-0.13546565175056458,
-0.06875017285346985,
0.06113976240158081,
0.058349333703517914,
0.056420233100652695,
0.0014369781129062176,
-0.12161659449338913,
0.1292637288570404,
-0.03045204095542431,
-0.08175130188465118,
-0.014657873660326004,
0.08594869822263718,
0.022457493469119072,
0.04160457104444504,
0.12615680694580078,
0.04963476210832596,
0.1263347864151001,
-0.2108922302722931,
-0.007466347888112068,
0.05406797304749489,
0.002121253637596965,
0.06524677574634552,
0.04832629859447479,
0.21480581164360046,
0.030781833454966545,
0.033025819808244705,
-0.06006454676389694,
0.009093139320611954,
0.0035023342352360487,
-0.08886265009641647,
-0.08663108944892883,
-0.10893603414297104,
0.07273795455694199,
0.1830091029405594,
-0.00416834419593215,
-0.12496478110551834,
-0.0897989273071289,
-0.0018423628062009811,
0.060362670570611954,
0.11276735365390778,
-0.03373871371150017,
-0.05898265913128853,
-0.03149838000535965,
-0.013490593992173672,
0.07093151658773422,
0.03188147768378258,
0.029025573283433914,
-0.02337193302810192,
-0.03300820663571358,
0.0018324967240914702,
-0.04030719771981239,
-0.02552609331905842,
0.052365776151418686,
-0.051122937351465225,
-0.01621943898499012,
-0.005884785205125809,
0.06615539640188217,
0.12699268758296967,
0.16055044531822205,
-0.03932906687259674,
-0.096283458173275,
-0.05240769311785698,
-0.03554553538560867,
0.14870239794254303,
0.14175231754779816,
0.09233913570642471,
0.047835614532232285,
-0.0586283877491951,
-0.10162990540266037,
0.11002147942781448,
0.12125994265079498,
0.19715750217437744,
-0.17563259601593018,
-0.19113928079605103,
-0.17001280188560486,
-0.013905293308198452,
0.19032911956310272,
0.13079766929149628,
-0.047332581132650375,
-0.11807823181152344,
-0.05897760018706322,
-0.07273874431848526,
0.011788526549935341,
-0.12435929477214813,
-0.18039825558662415,
-0.11725649237632751,
0.026451893150806427,
0.0415387898683548,
-0.006264446768909693,
-0.12565293908119202,
-0.07033759355545044,
0.08303724974393845,
-0.051989734172821045,
0.05949531868100166,
-0.008438672870397568,
-0.06303368508815765,
0.05418887361884117,
-0.002500715432688594,
0.06520567089319229,
0.0390622541308403,
-0.021612780168652534,
0.030592868104577065,
0.0058467998169362545,
-0.011335862800478935,
0.05643787235021591,
0.023485427722334862,
-0.03233221545815468,
-0.01552086602896452,
-0.06262383610010147,
0.025748996064066887,
-0.0007273441879078746,
0.056313805282115936,
0.019159816205501556,
-0.07039285451173782,
-0.08264990895986557,
-0.044228147715330124,
0.021436482667922974,
0.07179700583219528,
0.021738670766353607,
-0.05973101407289505,
0.16227294504642487,
-0.0023835618048906326,
-0.09807070344686508,
-0.05091913416981697,
0.009612149558961391,
0.1281151920557022,
0.14636649191379547,
0.018343288451433182,
0.008534211665391922,
0.032092511653900146,
0.12737655639648438,
0.23779155313968658,
-0.09451976418495178,
0.06534130126237869,
0.15570230782032013,
0.19266779720783234,
0.07801785320043564,
-0.014135641045868397,
0.11490462720394135,
0.025397568941116333,
-0.03131594508886337,
0.0023676040582358837,
-0.05374660715460777,
0.06633161753416061,
-0.07020475715398788,
0.0017907456494867802,
-0.05377286672592163,
-0.06901241838932037,
0.026315776631236076,
0.085347481071949,
-0.0990772396326065,
-0.10091812163591385,
-0.09669246524572372,
0.08114303648471832,
0.0006255240296013653,
0.01437380164861679,
0.0021503791213035583,
-0.02903023175895214,
-0.03346674516797066,
-0.0038691724184900522,
-0.1064479798078537,
-0.07960230112075806,
-0.1304096132516861,
-0.10895882546901703,
-0.05642198771238327,
-0.03422650322318077,
0.04601098969578743,
-0.07567714899778366,
0.060708239674568176,
0.05635480210185051,
0.26141074299812317,
0.041612930595874786,
0.15299572050571442,
0.13665033876895905,
0.08979326486587524,
0.1765424907207489,
0.11609503626823425,
0.014570982195436954,
-0.1531844288110733,
-0.11237983405590057,
0.022322356700897217,
-0.057938966900110245,
0.00261035468429327,
-0.06521429866552353,
-0.13483823835849762,
-0.01540627982467413,
0.08064477890729904,
-0.08245467394590378,
0.03430410474538803,
-0.050082236528396606,
-0.07272796332836151,
-0.051148004829883575,
0.1801861822605133,
0.13162082433700562,
0.023096801713109016,
-0.05874854698777199,
0.02061951905488968,
-0.1555003821849823,
-0.09971511363983154,
-0.02172395959496498,
0.015835903584957123,
0.038410987704992294,
-0.03350643813610077,
-0.036812301725149155,
0.07809002697467804,
0.20349876582622528,
0.03105464205145836,
-0.11080926656723022,
-0.04321449622511864,
0.060520242899656296,
-0.0310645904392004,
-0.08180363476276398,
-0.07040587812662125,
-0.028266647830605507,
0.10845420509576797,
0.03466500714421272,
0.04770909249782562,
0.14761067926883698,
-0.038377244025468826,
-0.09920474886894226,
-0.08659935742616653,
0.09403451532125473,
0.08030056208372116,
-0.04726015776395798,
-0.10727717727422714,
-0.04497406259179115,
0.01735716313123703,
-0.05392149090766907,
-0.045503921806812286,
0.005401549395173788,
0.05518561229109764,
0.03316882625222206,
0.022168027237057686,
-0.06624539196491241,
-0.06163427233695984,
-0.03818795457482338,
0.012102644890546799,
-0.06590736657381058,
-0.043122097849845886,
-0.0546969473361969,
0.15985655784606934,
0.23160529136657715,
-0.03749438375234604,
-0.034103576093912125,
0.09600064903497696,
-0.020868010818958282,
-0.03522035852074623,
0.0331658311188221,
0.08560673892498016,
-0.07099109143018723,
-0.03465057909488678,
-0.0667896643280983,
-0.03997364640235901,
-0.06771726161241531,
-0.027507085353136063,
-0.020309705287218094,
-0.03185812011361122,
0.07967723160982132,
0.19844122231006622,
0.16777215898036957,
-0.027978260070085526,
-0.08090967684984207,
-0.02064736746251583,
0.12759822607040405,
0.023716406896710396,
0.10336367785930634,
0.026784874498844147,
-0.11125878989696503,
-0.040788713842630386,
-0.057699594646692276,
-0.004120624624192715,
-0.09231020510196686,
0.0896240621805191,
-0.013990791514515877,
0.10361264646053314,
-0.06977217644453049,
-0.10870657861232758,
0.047233160585165024,
0.038924746215343475,
-0.013665406964719296,
-0.05194542929530144,
-0.1757347732782364,
-0.063741534948349,
0.10959283262491226,
0.03825193643569946,
0.10097648203372955,
0.053584273904561996,
0.028086040169000626,
0.08473245054483414,
0.050566062331199646,
0.08566439151763916,
0.1502535343170166,
-0.14710023999214172,
-0.07560229301452637,
0.004549826495349407,
0.04871979355812073,
0.01870592124760151,
0.045057546347379684,
0.05375164747238159,
0.16788709163665771,
-0.03869367763400078,
-0.11428795009851456,
-0.0019093598239123821,
0.15377195179462433,
0.006398775149136782,
-0.05611490085721016,
-0.06826607882976532,
-0.03544359281659126,
-0.005797837395220995,
-0.06578194350004196,
-0.08459664136171341,
-0.10147014260292053,
0.1820676326751709,
-0.019102763384580612,
-0.03730401024222374,
0.1231222078204155,
-0.040268611162900925,
0.110285185277462,
0.05626792833209038,
-0.02969535067677498,
0.037910811603069305,
0.1317344605922699,
-0.012596498243510723,
-0.004318924155086279,
-0.058750756084918976,
0.04779798537492752,
0.1880297064781189,
-0.08779332786798477,
-0.15989162027835846,
-0.06234091892838478,
0.06292830407619476,
0.015362128615379333,
-0.08982670307159424,
-0.03374863415956497,
0.18728111684322357,
0.10206712782382965,
0.026415731757879257,
-0.1138744130730629,
-0.03647538647055626,
-0.022592691704630852,
0.00031303532887250185,
0.076795794069767,
-0.04572869837284088,
0.07720734179019928,
0.005429035518318415,
-0.039138007909059525,
0.020945314317941666,
0.17724385857582092,
0.11307460069656372,
-0.024209527298808098,
-0.05981419235467911,
-0.044938016682863235,
0.018765417858958244,
-0.13274535536766052,
-0.14293129742145538,
0.05929114297032356,
-0.0064644282683730125,
0.03263891115784645,
-0.07655363529920578,
-0.1495085507631302,
-0.051659561693668365,
0.0018118596635758877,
0.1102081686258316,
-0.008180997334420681,
0.058379169553518295,
0.05964856967329979,
0.14331796765327454,
-0.005308633204549551,
0.09539641439914703,
0.14697061479091644,
0.17579291760921478,
0.23920413851737976,
-0.0291283056139946,
-0.01609627902507782,
0.011416036635637283,
-0.02949366346001625,
0.043822772800922394,
0.006498043425381184,
0.008284828625619411,
-0.04686250537633896,
0.009885923005640507,
-0.05110352113842964,
0.05060179904103279,
-0.028574474155902863,
0.020658409222960472,
0.04483114182949066,
0.027695663273334503,
-0.03317103907465935,
-0.03522045537829399,
0.030354605987668037,
0.065993532538414,
0.0686761662364006,
0.09414461255073547,
0.12240105867385864,
0.0274211335927248,
-0.00806522462517023,
-0.08757440000772476,
0.008309612050652504,
-0.058236878365278244,
-0.04037062078714371,
-0.07507725805044174,
-0.05446774140000343,
-0.08855727314949036,
-0.08962059766054153,
-0.11360561102628708,
-0.07544522732496262,
0.022733597084879875,
-0.004087316337972879,
-0.02033284679055214,
0.04379734396934509,
0.01942516677081585,
0.14800390601158142,
-0.05703306943178177,
0.01097494550049305,
0.06147455424070358,
0.02223033271729946,
0.03733751177787781,
0.08888421952724457,
0.2566254138946533,
0.0005930091720074415,
-0.0883898064494133,
-0.05043569579720497,
-0.015916649252176285,
-0.1504719853401184,
-0.0322735421359539,
-0.07890450209379196,
0.026756921783089638,
-0.032485634088516235,
-0.003312310902401805,
-0.013300688937306404,
0.028506942093372345,
0.07350317388772964,
-0.01381620392203331,
0.0038270086515694857,
-0.10331298410892487,
0.030457772314548492,
0.012946119531989098,
-0.002803813898935914,
-0.04146037995815277,
-0.1365477293729782,
-0.056617822498083115,
0.03493460267782211,
0.09018517285585403,
-0.03992769867181778,
-0.13303297758102417,
-0.10843576490879059,
-0.006123439408838749,
0.015539192594587803,
-0.05907595530152321,
-0.10411567986011505,
0.015915988013148308,
0.0887736976146698,
-0.025701096281409264,
-0.051022935658693314,
-0.06024474278092384,
0.04366234317421913,
-0.04009642079472542,
-0.15230794250965118,
-0.011132856830954552,
-0.008760388009250164,
-0.07275598496198654,
-0.06998889148235321,
-0.13516587018966675,
-0.22632579505443573,
0.0029261945746839046,
0.024691767990589142,
-0.0052124205976724625,
0.2613072991371155,
0.10964249074459076,
0.05279173329472542,
0.03389597684144974,
0.10020844638347626,
0.20808012783527374,
0.1579340398311615,
0.19703666865825653,
0.02938653714954853,
-0.035052262246608734,
0.021834446117281914,
-0.035754602402448654,
0.08156125247478485,
-0.0035795599687844515,
-0.18281157314777374,
0.019968189299106598,
-0.014291016384959221,
0.019814036786556244,
-0.010048405267298222,
0.02755490504205227,
0.005785628221929073,
-0.04403632506728172,
0.07264195382595062,
0.01490494329482317,
-0.02382037043571472,
-0.057252176105976105,
0.0394439660012722,
0.03125403821468353,
0.04970740154385567,
-0.044449932873249054,
-0.0367007702589035,
-0.07271811366081238,
-0.05379432812333107,
-0.12280357629060745,
-0.008478039875626564,
0.0647476315498352,
0.03067498467862606,
0.07242801040410995,
0.04809078201651573,
0.03421298414468765,
-0.10128821432590485,
0.04642445221543312,
0.0565064512193203,
-0.05406663939356804,
-0.11709664016962051,
0.026398155838251114,
-0.04591165855526924,
0.10936998575925827,
-0.03087165392935276,
0.11067711561918259,
-0.0954175665974617,
0.06429725885391235,
0.11382395029067993,
0.0812472552061081,
0.011419342830777168,
0.029196403920650482,
0.07024217396974564,
0.01903829351067543,
0.0024681889917701483,
-0.016480248421430588,
0.061219796538352966,
0.03816214203834534,
-0.03393810614943504,
-0.03813629597425461,
-0.11949309706687927,
0.07990821450948715,
0.02464551478624344,
-0.19236662983894348,
-0.04677887633442879,
-0.02253241464495659,
0.00430648447945714,
-0.02341623418033123,
0.011675299145281315,
0.022892562672495842,
-0.021876661106944084,
-0.031868889927864075,
-0.1371990144252777,
0.01535170990973711,
-0.1460597813129425,
-0.019742056727409363,
0.07997652143239975,
0.005567793734371662,
-0.13260602951049805,
-0.1003875732421875,
0.040064774453639984,
0.05069807916879654,
-0.055881794542074203,
-0.13842640817165375,
-0.102964386343956,
0.003398675937205553,
-0.01767130009829998,
-0.021377738565206528,
0.002072057221084833,
0.030222570523619652,
-0.018203433603048325,
-0.059698496013879776,
0.013153084553778172,
0.07373585551977158,
-0.06924046576023102,
0.04395493119955063,
0.031697873026132584,
0.02636367455124855,
0.12976662814617157,
-0.17722280323505402,
-0.07661496102809906,
0.13765572011470795,
-0.04024111106991768,
-0.0977766290307045,
-0.028067469596862793,
-0.1825989931821823,
0.0775192603468895,
0.10274551063776016,
0.14199894666671753,
0.03974179923534393,
-0.05480848625302315,
0.04552353918552399,
-0.001585125457495451,
-0.08716272562742233,
-0.07766066491603851,
-0.03623451665043831,
0.004300307482481003,
-0.00807645358145237,
0.04103618860244751,
-0.02841988205909729,
-0.04242352023720741,
-0.12756943702697754,
-0.10915645956993103,
0.08749137073755264,
0.03217972442507744,
0.010764105245471,
-0.06052996590733528,
0.06118175759911537,
0.23987320065498352,
0.09205111861228943,
0.08353804051876068,
-0.03363201394677162,
0.042766984552145004,
0.0251297727227211,
0.009065932594239712,
-0.07346996665000916,
-0.05686424672603607,
-0.06969030946493149,
-0.021991539746522903,
-0.03810497000813484,
-0.015530330128967762,
0.12216540426015854,
0.06853090226650238,
0.007628368213772774,
-0.06923956423997879,
0.01791464537382126,
-0.03235865384340286,
-0.054317135363817215,
-0.011901814490556717,
0.07370880246162415,
0.1520974040031433,
-0.14278782904148102,
0.050366442650556564,
0.009464126080274582,
0.0006340346299111843,
-0.05827772244811058,
0.05070473253726959,
0.06954879313707352,
-0.04638213664293289,
-0.087339386343956,
-0.03870982304215431,
-0.041147906333208084,
-0.033961545675992966,
-0.0713372752070427,
-0.03555658832192421,
0.08863135427236557,
0.004540744703263044,
-0.04999535158276558,
0.025711026042699814,
0.02043355442583561,
0.014520535245537758,
-0.0020753927528858185,
0.13452833890914917,
-0.09077534079551697,
0.07130499929189682,
-0.1172640398144722,
-0.03241210803389549,
-0.09106684476137161,
-0.01962636597454548,
-0.011918970383703709,
-0.04004739969968796,
-0.06738454848527908,
-0.004202915821224451,
0.039777565747499466,
0.07003814727067947,
0.11030004918575287,
0.01920768991112709,
-0.12283474206924438,
-0.1506747156381607,
-0.0018987387884408236,
0.13186927139759064,
-0.05955588072538376,
-0.040844086557626724,
-0.04794362187385559,
0.06819247454404831,
0.03986024856567383,
-0.1080782487988472,
0.021509060636162758,
-0.17115314304828644,
-0.061057090759277344,
-0.0668080598115921,
-0.09858249127864838,
-0.06739802658557892,
-0.17840605974197388,
-0.031794071197509766,
0.019919397309422493,
-0.03572916239500046,
-0.32054078578948975,
-0.07125097513198853,
0.04874911531805992,
0.12671546638011932,
0.054226819425821304,
-0.12773962318897247,
-0.18063819408416748,
-0.08468116819858551,
0.050728097558021545,
0.03112172894179821,
-0.0730847641825676,
-0.02859153412282467,
-0.05526696518063545,
-0.000542297144420445,
-0.009348583407700062,
0.056419212371110916,
0.15014855563640594,
-0.04505002871155739,
0.036402832716703415,
0.04484831169247627,
-0.09170819073915482,
-0.1708194464445114,
-0.1092001348733902,
-0.060285165905952454,
0.026239823549985886,
-0.1967477798461914,
-0.06581123918294907,
0.09302779287099838,
0.005352514795958996,
-0.07833195477724075,
0.017674686387181282,
0.055789764970541,
0.048936985433101654,
-0.05069352686405182,
0.0768965557217598,
0.09063668549060822,
0.05419542267918587,
-0.09978490322828293,
-0.032129865139722824,
-0.0021888120099902153,
-0.02871233969926834,
0.13455717265605927,
0.15330085158348083,
0.08292020857334137,
0.017968738451600075,
0.1342889368534088,
0.08852849155664444,
0.00015137853915803134,
-0.08170841634273529,
0.10305403918027878,
0.12618736922740936,
0.02480199560523033,
-0.05767378583550453,
-0.1285363882780075,
0.04584963619709015,
0.04348970577120781,
-0.09392218291759491,
-0.07727464288473129,
0.03304276987910271,
0.138968363404274,
-0.026560351252555847,
0.0702604129910469,
-0.010318298824131489,
0.0005256875301711261,
-0.0026206558104604483,
-0.123341865837574,
-0.0724538192152977,
-0.06356677412986755,
0.029053855687379837,
-0.0267065167427063,
-0.06334976851940155,
-0.14843331277370453,
0.04451240971684456,
0.03352706506848335,
-0.1525111198425293,
-0.1257680207490921,
0.08973454684019089,
0.15990598499774933,
0.04568125680088997,
-0.028973447158932686,
0.08311311155557632,
0.04297037795186043,
0.003336565801873803,
-0.011029413901269436,
-0.14049051702022552,
-0.042625345289707184,
-0.008836163207888603,
0.003031047061085701,
0.008404722437262535,
0.06042320281267166,
-0.000917117518838495,
-0.1482180804014206,
-0.0322260819375515,
-0.11003100872039795,
0.16911156475543976,
0.03357473015785217,
-0.08535768836736679,
0.022193605080246925,
-0.055710285902023315,
-0.006662258878350258,
0.06297853589057922,
0.11146582663059235,
-0.03406580537557602,
0.00216098059900105,
-0.041459787636995316,
0.024279648438096046,
-0.04506333917379379,
-0.08787230402231216,
-0.019047893583774567,
-0.020115980878472328,
0.1134272962808609,
0.07634143531322479,
-0.05155663192272186,
-0.08507856726646423,
0.11276691406965256,
0.021891912445425987,
0.03458145260810852,
-0.02622293308377266,
0.14100278913974762,
0.04219546541571617,
0.09524442255496979,
0.09890959411859512,
-0.026318317279219627,
-0.03861556947231293,
0.05881228297948837,
-0.020589586347341537,
0.05492768809199333,
0.025783544406294823,
-0.008573699742555618,
0.0857938826084137,
0.053588591516017914,
-0.029991259798407555,
-0.024092035368084908,
0.04316949471831322,
0.0729537159204483,
0.09249512106180191,
0.025545967742800713,
0.09912113845348358,
0.0753297507762909,
-0.1081978902220726,
-0.06378106027841568,
-0.11473213136196136,
0.024901892989873886,
0.013337009586393833,
-0.002488990779966116,
0.05989659205079079,
-0.0447823628783226,
0.04695570841431618,
-0.004536921624094248,
0.10191672295331955,
-0.061942972242832184,
-0.07909031212329865,
0.00709430081769824,
-0.0888284221291542,
0.009721944108605385,
0.11464163661003113,
-0.018831046298146248,
-0.001986119197681546,
-0.01649964600801468,
0.02637265995144844,
-0.012992492876946926,
0.16070027649402618,
-0.04486710578203201,
0.033843301236629486,
-0.10723958909511566,
-0.06827262789011002,
0.1237090602517128,
0.06242964789271355,
0.0036530664656311274,
-0.08008286356925964,
0.004875334911048412,
0.08149788528680801,
-0.026056766510009766,
-0.007513558026403189,
0.003159409388899803,
-0.03864983469247818,
-0.04057499021291733,
-0.061986081302165985,
0.11643676459789276,
-0.10243704169988632,
-0.045866020023822784,
-0.11036088317632675,
-0.07860055565834045,
-0.11418288946151733,
0.1503470540046692,
0.12817063927650452,
0.08091986924409866,
-0.14290769398212433,
-0.11131344735622406,
0.10212473571300507,
-0.0008478240924887359,
0.10599557310342789,
0.09366890788078308,
0.045309897512197495,
0.04996512457728386,
0.08649004995822906,
-0.14902353286743164,
0.08229885995388031,
0.20819997787475586,
0.01801740936934948,
-0.08274156600236893,
-0.019325776025652885,
-0.05274485796689987,
0.034148965030908585,
-0.03864257037639618,
0.04625217989087105,
0.02198157273232937,
-0.009621244855225086,
0.07683046907186508,
0.07540374994277954,
0.07566165924072266,
-0.0174251701682806,
-0.058760035783052444,
0.08106407523155212,
-0.12836208939552307,
0.016991659998893738,
0.006711313035339117,
-0.002375922165811062,
-0.012017304077744484,
0.023587511852383614,
0.029272785410284996,
0.05525405332446098,
-0.18037079274654388,
-0.03393647447228432,
-0.007260261103510857,
0.03480084240436554,
0.03896625339984894,
0.05837984383106232,
0.02552151493728161,
-0.05623370036482811,
-0.055187515914440155,
-0.012068867683410645,
0.003841177560389042,
-0.01902356743812561,
-0.047999169677495956,
-0.13126245141029358,
-0.21073578298091888,
-0.07125943154096603,
0.057370204478502274,
0.009964123368263245,
0.06549320369958878,
0.08860215544700623,
0.06751960515975952,
0.029269862920045853,
0.04363645240664482,
0.07048920542001724,
0.1346440464258194,
0.045708466321229935,
-0.03811056539416313,
0.10979658365249634,
0.09801018238067627,
0.09212903678417206,
0.0761817991733551,
0.09509819746017456,
0.039526015520095825,
0.018740549683570862,
0.054028354585170746,
0.06053837016224861,
0.07769111543893814,
-0.005571430083364248,
-0.03457728773355484,
0.1096402257680893,
-0.0020548002794384956,
0.1482464075088501,
0.006130115129053593,
-0.0033182462211698294,
-0.016010647639632225,
-0.036644212901592255,
-0.056959837675094604,
-0.026625048369169235,
0.04046962410211563,
0.07746776193380356,
-0.07688253372907639,
-0.028861461207270622,
0.06553668528795242,
0.09530903398990631,
-0.08184110373258591,
-0.07218308001756668,
0.08300825208425522,
0.029882149770855904,
0.09788978844881058,
0.04786789044737816,
-0.03246616572141647,
0.05554332956671715,
0.004753765184432268,
0.02712627686560154,
-0.09675884246826172,
-0.12451619654893875,
-0.04534203186631203,
0.002968307351693511,
0.002494104905053973,
-0.12266626209020615,
0.14958757162094116,
-0.001625719596631825,
-0.04033678397536278,
-0.02566761150956154,
0.015685176476836205,
0.0720498114824295,
0.006434796378016472,
-0.019755639135837555,
-0.1330823302268982,
0.006868357304483652,
0.0511903278529644,
-0.057205040007829666,
-0.045873045921325684,
0.03998247906565666,
-0.04313031584024429,
0.0336935929954052,
0.01063513197004795,
-0.19456402957439423,
-0.00878413300961256,
-0.021821971982717514,
0.03762805834412575,
0.13239841163158417,
0.15119978785514832,
0.19185897707939148,
0.06939424574375153,
-0.006694486364722252,
-0.12692803144454956,
-0.05371879041194916,
0.07286801189184189,
0.11874149739742279,
0.08940067887306213,
-0.016219928860664368,
0.06444334238767624,
0.03353497013449669,
0.07300107181072235,
0.08248923718929291,
-0.0029933666810393333,
0.0731993019580841,
-0.0432107113301754,
-0.039403073489665985,
-0.045819543302059174,
-0.02780589647591114,
-0.031155483797192574,
-0.13558626174926758,
-0.031092097982764244,
0.03526964783668518,
-0.07502514868974686,
-0.11336648464202881,
-0.19245906174182892,
-0.120878666639328,
0.017109157517552376,
0.1217317208647728,
0.05626032501459122,
0.019088363274931908,
0.018490102142095566,
0.01589859277009964,
0.02028212696313858,
0.02805698662996292,
-0.004938024561852217,
-0.05443701148033142,
-0.13306143879890442,
-0.09983457624912262,
0.08123581111431122,
0.017999820411205292,
-0.04366585239768028,
-0.037872955203056335,
0.0343758761882782,
0.025912081822752953,
-0.04652531072497368,
-0.009482690133154392,
0.04231816157698631,
0.10499828308820724,
-0.009404837153851986,
-0.005183224566280842,
-0.002812337363138795,
0.0024309982545673847,
-0.018197620287537575,
0.1003413274884224,
0.14569994807243347,
-0.022201932966709137,
-0.10220329463481903,
-0.03985310718417168,
-0.06644155085086823,
-0.06536497175693512,
-0.021448887884616852,
0.016633257269859314,
-0.04719852656126022,
0.00813421793282032,
0.06129748001694679,
0.07637424767017365,
-0.0024977163411676884,
-0.07650721073150635,
-0.01488285232335329,
0.06346242874860764,
0.10449892282485962,
0.09915059059858322,
-0.03272613510489464,
-0.08310747146606445,
-0.08108679950237274,
-0.07676300406455994,
0.03447341173887253,
-0.05828741192817688,
0.021060682833194733,
0.015177295543253422,
0.047366417944431305,
-0.06168622896075249,
-0.08197039365768433,
0.06268651783466339,
-0.09285681694746017,
-0.07203273475170135,
-0.046471599489450455,
0.06682556122541428,
-0.022448230534791946,
0.11333294212818146,
-0.00913809984922409,
0.08155448734760284,
0.06316681206226349,
0.09055165201425552,
0.08381162583827972,
0.0694795772433281,
-0.0011400498915463686,
0.11130333691835403,
-0.12203136086463928,
-0.13575507700443268,
-0.02860533818602562,
0.025622479617595673,
0.0123649463057518,
-0.04909729212522507,
0.09569914638996124,
0.04563979431986809,
-0.07688820362091064,
-0.09181412309408188,
0.016303233802318573,
0.10904862731695175,
-0.04780017212033272,
-0.057726696133613586,
-0.00517804641276598,
0.023497065529227257,
-0.1048431396484375,
-0.17662455141544342,
-0.19125615060329437,
-0.20247609913349152,
-0.005008201580494642,
-0.14530369639396667,
-0.03468981385231018,
0.019686875864863396,
-0.12945665419101715,
0.12427522242069244,
0.026422375813126564,
-0.08676660805940628,
0.014046025462448597,
0.09916986525058746,
0.051586415618658066,
0.01249061431735754,
0.029654264450073242,
0.14130178093910217,
0.0659407302737236,
0.021630706265568733,
-0.07427637279033661,
-0.0014216657727956772,
-0.021523531526327133,
-0.015304388478398323,
0.06845733523368835,
0.007071072701364756,
-0.00018210172129329294,
0.0010530933504924178,
0.02206144668161869,
-0.058015819638967514,
-0.17168080806732178,
-0.10729514062404633,
0.057010602205991745,
0.14486466348171234,
-0.07345879077911377,
-0.027211887761950493,
-0.19744868576526642,
0.08358880132436752,
0.027667423710227013,
0.014457101933658123,
0.026735126972198486,
-0.028525052592158318,
-0.14543657004833221,
-0.014992075972259045,
0.060541898012161255,
-0.21864290535449982,
-0.1055770292878151,
-0.03187893331050873,
0.023925505578517914,
-0.0400613397359848,
-0.03245557099580765,
-0.07273773103952408,
-0.06325354427099228,
-0.017302406951785088,
-0.0538349449634552,
0.007512903772294521,
0.049041878432035446,
-0.0016049458645284176,
-0.091263547539711,
0.12251055985689163,
0.040601491928100586,
0.034113623201847076,
0.08755679428577423,
0.030916672199964523,
0.06574322283267975,
-0.030886908993124962,
-0.04455563798546791,
-0.002022857777774334,
0.009584194049239159,
0.0886860117316246,
0.038106393069028854,
-0.0015128299128264189,
0.036505065858364105,
0.04808060824871063,
0.09433423727750778,
0.0008101031417027116,
0.05216477811336517,
0.05542079359292984,
0.04101967439055443,
-0.0017552159260958433,
-0.06539954990148544,
-0.10696640610694885,
-0.13005246222019196,
-0.08625312894582748,
0.004104347433894873,
-0.08300390094518661,
-0.2188333421945572,
-0.10306069999933243,
0.04629360884428024,
0.08750338852405548,
0.028029194101691246,
-0.02213367447257042,
-0.029805762693285942,
-0.005968683864921331,
-0.03385225683450699,
-0.046928584575653076,
-0.08463865518569946,
-0.08461352437734604,
-0.07934530079364777,
-0.05294804647564888,
-0.027730342000722885,
0.01830257661640644,
-0.12480881810188293,
-0.04945670813322067,
-0.18610313534736633,
-0.036696065217256546,
-0.048227060586214066,
-0.021055757999420166,
0.006801703944802284,
0.006278020329773426,
0.14761897921562195,
-0.07559680193662643,
-0.0009303117403760552,
0.005661779548972845,
0.053857073187828064,
-0.0789141058921814,
0.013322853483259678,
0.06143270432949066,
0.03306151553988457,
-0.008595702238380909,
-0.035454314202070236,
0.08348388224840164,
-0.013398179784417152,
-0.10331111401319504,
-0.026587145403027534,
-0.0019286476308479905,
0.05675378441810608,
0.1452268809080124,
-0.02720138616859913,
-0.022326195612549782,
-0.025589996948838234,
-0.022569555789232254,
0.05991099402308464,
-0.014632039703428745,
0.04177218675613403,
0.014463906176388264,
-0.09571061283349991,
-0.028828540816903114,
0.0686684101819992,
-0.03813306987285614,
-0.013511012308299541,
-0.1336022913455963,
0.012172393500804901,
0.01743614859879017,
0.021333297714591026,
0.051284920424222946,
-0.05010800063610077,
-0.07213371247053146,
-0.022612053900957108,
-0.07393138855695724,
-0.04646594077348709,
0.008388224057853222,
0.02639857307076454,
-0.060717612504959106,
-0.01001996174454689,
-0.17674148082733154,
-0.0502440519630909,
0.03859245404601097,
-0.08206778019666672,
0.1643436849117279,
0.1273537576198578,
0.09443453699350357,
0.054849762469530106,
-0.018015049397945404,
0.10275805741548538,
0.0672762542963028,
0.0832519605755806,
0.0741415023803711,
0.1343095749616623,
-0.09384734183549881,
-0.06207389011979103,
0.048889946192502975,
0.01933065429329872,
0.1079770028591156,
-0.004185063764452934,
0.032166093587875366,
0.07249731570482254,
-0.0799410417675972,
-0.11508264392614365,
0.044437456876039505,
0.025882212445139885,
0.1260925680398941,
-0.09597088396549225,
-0.0831603929400444,
-0.09837807714939117,
-0.027716783806681633,
-0.03499560058116913,
-0.03770948201417923,
-0.08157236129045486,
-0.05459645390510559,
-0.09020866453647614,
0.016783561557531357,
0.012189820408821106,
0.033483874052762985,
0.04443442076444626,
-0.008516688831150532,
-0.06105911359190941,
-0.01278210710734129,
0.07953128963708878,
-0.05318702757358551,
0.04796157404780388,
0.027882294729351997,
0.027957476675510406,
-0.02715381793677807,
-0.019301947206258774,
0.04675431177020073,
-0.008132411167025566,
-0.03486587852239609,
-0.086960569024086,
-0.014128759503364563,
0.03331826999783516,
0.0343046560883522,
-0.06269239634275436,
-0.11745434254407883,
0.025431327521800995,
-0.04777850955724716,
-0.035046663135290146,
-0.009303545579314232,
0.1096850335597992,
0.09477563947439194,
0.010340002365410328,
-0.015432055108249187,
0.07722298800945282,
0.14717845618724823,
0.08491155505180359,
-0.06518952548503876,
0.04252970963716507,
0.047156259417533875,
0.04731130599975586,
0.003602579701691866,
0.025215908885002136,
0.06227371096611023,
0.00424301577731967,
0.10431802272796631,
-0.07241576910018921,
-0.12574249505996704,
0.021200597286224365,
0.010231323540210724,
0.145745649933815,
0.03759587183594704,
-0.00799557100981474,
-0.0776461809873581,
-0.05325529724359512,
-0.09130266308784485,
0.0021940809674561024,
-0.04109513387084007,
-0.13101497292518616,
-0.03916621953248978,
-0.017974114045500755,
-0.08283184468746185,
-0.11849938333034515,
-0.03514275327324867,
0.00223680236376822,
-0.09388213604688644,
-0.07600245624780655,
-0.032959599047899246,
-0.01715424843132496,
-0.1379978060722351,
-0.16771429777145386,
0.18456600606441498,
0.04480547830462456,
-0.03980517014861107,
-0.13324739038944244,
-0.02240958996117115,
0.17755553126335144,
0.04209498316049576,
-0.09662595391273499,
0.01809879019856453,
0.167649507522583,
0.14867067337036133,
0.1420707106590271,
0.12215619534254074,
0.018691519275307655,
0.060468219220638275,
0.055823009461164474,
0.011409570463001728,
0.03565922752022743,
-0.09709098935127258,
-0.09450201690196991,
-0.019061855971813202,
0.012155180796980858,
0.07385312765836716,
-0.021397512406110764,
-0.13109031319618225,
-0.08933687210083008,
-0.1166166216135025,
-0.06967449188232422,
-0.010622628964483738,
-0.16645486652851105,
-0.0706995502114296,
-0.06131714582443237,
0.0968158170580864,
-0.0002996015828102827,
-0.07214221358299255,
0.06454425305128098,
0.0014155671233311296,
0.05415864661335945,
0.05204693228006363,
0.019948897883296013,
-0.02608518674969673,
-0.004723038990050554,
-0.029178321361541748,
-0.04479594528675079,
0.003383869305253029,
0.12267550081014633,
0.044479675590991974,
0.0447775274515152,
-0.1250467449426651,
-0.005749151110649109,
0.04431013762950897,
0.03549191355705261,
-0.04211214929819107,
0.07352018356323242,
0.018155740574002266,
-0.07062892615795135,
0.07364090532064438,
0.07674910873174667,
-0.05573747307062149,
-0.07759688049554825,
0.0522843599319458,
0.17502501606941223,
0.05521789565682411,
-0.010399417951703072,
0.0017746502999216318,
0.03755190968513489,
-0.021329069510102272,
-0.04879971593618393,
-0.10498981922864914,
-0.09774451702833176,
0.08790404349565506,
0.06169443577528,
0.03845647722482681,
-0.02860121801495552,
0.019939947873353958,
-0.021402686834335327,
0.030948679894208908,
0.040753073990345,
0.011310973204672337,
-0.0008284324430860579,
-0.04935523867607117,
-0.006118642166256905,
-0.030591612681746483,
0.06026527285575867,
0.010241101495921612,
-0.09221307188272476,
-0.03973236680030823,
0.12815551459789276,
-0.001854514586739242,
0.06933056563138962,
-0.02181115373969078,
-0.03673776239156723,
0.039367400109767914,
0.06741859018802643,
0.011110103689134121,
-0.029515808448195457,
-0.06156810000538826,
0.08095075190067291,
0.09620577096939087,
0.014468729496002197,
-0.0918356329202652,
-0.1295222043991089,
-0.08415822684764862,
0.06797639280557632,
-0.0346631221473217,
0.033195611089468,
-0.08243192732334137,
0.03733697906136513,
0.00800312403589487,
-0.01727481000125408,
0.004543181508779526,
-0.1489015519618988,
-0.07347280532121658,
0.09302052110433578,
0.0004644538275897503,
-0.014440708793699741,
-0.14495691657066345,
-0.08065309375524521,
-0.09770549088716507,
-0.07910379022359848,
0.04402587190270424,
-0.03623964264988899,
-0.005327549297362566,
-0.04867687448859215,
0.0244344063103199,
-0.014916124753654003,
-0.008745165541768074,
0.08494855463504791,
-0.0047645242884755135,
0.04191235825419426,
0.02612961269915104,
-0.11777074635028839,
-0.02636226825416088,
0.0922609344124794,
-0.002838682383298874,
0.041288428008556366,
-0.12918373942375183,
-0.006670322269201279,
-0.040876585990190506,
-0.06638571619987488,
0.06636974960565567,
0.10097891092300415,
0.006471364758908749,
-0.07674559950828552,
-0.13980692625045776,
0.01607474870979786,
0.07920582592487335,
0.10840608924627304,
-0.021934418007731438,
-0.1330871284008026,
0.015680713579058647,
0.11721879243850708,
0.020095746964216232,
0.02059330977499485,
0.020469749346375465,
-0.07476510852575302,
0.16442860662937164,
0.09933415055274963,
0.036116767674684525,
-0.01884203590452671,
-0.015634793788194656,
0.07340964674949646,
0.11237109452486038,
0.0447869710624218,
-0.06504882127046585,
0.08988696336746216,
0.05319223180413246,
0.04482864588499069,
0.03816235810518265,
0.014748970977962017,
0.1819925755262375,
0.08592664450407028,
-0.026965152472257614,
-0.016649359837174416,
0.04428376257419586,
-0.028015414252877235,
-0.046908412128686905,
0.003786590648815036,
0.01678089238703251,
0.04627196490764618,
-0.08539575338363647,
0.018048986792564392,
0.03320132941007614,
-0.01870056241750717,
-0.05666070431470871,
0.05466516315937042,
0.12191622704267502,
0.11721377074718475,
-0.04310740530490875,
0.0013992136809974909,
-0.028941219672560692,
-0.02433948777616024,
0.00525630684569478,
-0.1030048131942749,
-0.07299698144197464,
-0.10582748800516129,
-0.06397560983896255,
0.04147455468773842,
-0.06247081607580185,
-0.0795939639210701,
0.1454787701368332,
0.08097448945045471,
-0.06147072836756706,
-0.05046343803405762,
0.02722477726638317,
0.15228106081485748,
0.1680688112974167,
0.07217146456241608,
0.05246726796030998,
0.12778913974761963,
-0.017639795318245888,
0.019554652273654938,
0.035016074776649475,
0.07480891793966293,
0.03861068934202194,
-0.02684904634952545,
-0.03559746965765953,
-0.011792795732617378,
-0.007822897285223007,
0.04847593978047371,
0.0018103828188031912,
0.07286703586578369,
0.09880214184522629,
0.08634801208972931,
-0.025363262742757797,
0.09868619590997696,
0.07221440225839615,
0.16094723343849182,
0.16260772943496704,
0.07799208909273148,
0.012218830175697803,
0.0915321335196495,
0.03654392436146736,
0.03805544972419739,
0.04711703211069107,
0.04352337867021561,
0.07254853844642639,
0.012448438443243504,
0.02516292966902256,
-0.02304120920598507,
0.04741460829973221,
-0.17413859069347382,
-0.007923304103314877,
-0.02165810391306877,
0.14582765102386475,
0.03562955930829048,
0.03793908283114433,
0.08429080247879028,
-0.08118418604135513,
-0.138573557138443,
-0.030867071822285652,
-0.019534820690751076,
0.1687338948249817,
-0.02435045875608921,
-0.1358383148908615,
-0.003495618933811784,
0.0194000992923975,
0.1850438266992569,
-0.032804060727357864,
0.02742701955139637,
-0.03275702893733978,
0.03466518968343735,
-0.03691549599170685,
-0.0591202937066555,
-0.05923262611031532,
0.04254692792892456,
0.059293799102306366,
-0.08108998090028763,
-0.11339443922042847,
-0.013704206794500351,
0.005029669497162104,
0.1712554693222046,
-0.035493604838848114,
-0.02416519820690155,
-0.052057307213544846,
-0.006776050198823214,
0.13465546071529388,
0.001628821948543191,
0.01557132974267006,
0.05528765171766281,
-0.08140037208795547,
0.023514188826084137,
-0.04584288224577904,
-0.025358101353049278,
0.001499792910180986,
-0.0015218413900583982,
-0.059864312410354614,
-0.003265571314841509,
-0.07969248294830322,
-0.009896848350763321,
-0.05831669643521309,
0.04565611854195595,
0.010311601683497429,
-0.058652594685554504,
-0.041097577661275864,
-0.08136177808046341,
0.07286352664232254,
0.06912082433700562,
0.04738038033246994,
0.10615137964487076,
-0.078425332903862,
-0.05954650044441223,
0.04063888266682625,
0.0893857553601265,
0.13233613967895508,
-0.04647843539714813,
-0.11831436306238174,
0.017732709646224976,
-0.013025972992181778,
-0.0004271360521670431,
0.058088745921850204,
0.011825905181467533,
-0.018000293523073196,
0.048826489597558975,
-0.014944679103791714,
-0.04935620725154877,
-0.15183594822883606,
-0.06316046416759491,
-0.019433852285146713,
-0.006664424668997526,
-0.060372330248355865,
-0.0507931150496006,
-0.10325076431035995,
-0.12545205652713776,
-0.08734052628278732,
0.05302700772881508,
0.021052805706858635,
-0.0881374403834343,
-0.1531062126159668,
0.01273429486900568,
-0.010028216987848282,
-0.05500863119959831,
-0.07928872853517532,
0.045664090663194656,
0.04941915348172188,
0.00421097269281745,
-0.010042250156402588,
0.017754457890987396,
-0.020291496068239212,
0.048158369958400726,
0.007750925607979298,
-0.045792195945978165,
0.02796195074915886,
0.07330670952796936,
0.06525387614965439,
-0.10708919912576675,
-0.10749327391386032,
0.08287413418292999,
0.07328707724809647,
0.0744810551404953,
0.0607050359249115,
-0.045820172876119614,
0.011759571731090546,
0.0238974466919899,
-0.002851120661944151,
-0.016415558755397797,
-0.06336521357297897,
-0.0390453040599823,
0.04339347779750824,
0.16189631819725037,
-0.02124033123254776,
0.017736714333295822,
0.03506861999630928,
0.03884883224964142,
0.08378840982913971,
0.050784263759851456,
0.13086438179016113,
0.031049944460392,
0.009282700717449188,
-0.12554095685482025,
0.053459640592336655,
0.10613779723644257,
-0.016375374048948288,
-0.10263893753290176,
-0.14904898405075073,
-0.046435292810201645,
0.12119561433792114,
0.07121992856264114,
0.03200512006878853,
0.02233600988984108,
0.01694002002477646,
0.06627281755208969,
0.021366644650697708,
-0.000305664143525064,
-0.03751744329929352,
0.022315796464681625,
0.008874337188899517,
0.02605615183711052,
-0.013525486923754215,
-0.10730902850627899,
0.0443095937371254,
-0.059912458062171936,
-0.0422029122710228,
-0.0641675591468811,
-0.09801260381937027,
-0.0976477712392807,
-0.0830175131559372,
0.07955856621265411,
0.07980158925056458,
0.00883892085403204,
-0.05408367142081261,
0.06154019385576248,
0.09910121560096741,
0.04524656757712364,
0.0973949134349823,
0.05590575188398361,
0.06672055274248123,
0.0016950330464169383,
0.07819080352783203,
0.0491163432598114,
0.0037525335792452097,
-0.046938780695199966,
-0.0050874450244009495,
-0.06685829162597656,
0.0064289504662156105,
-0.03821880370378494,
-0.06753715872764587,
-0.07858649641275406,
-0.014936137944459915,
-0.03843514248728752,
-0.02108856290578842,
-0.051897741854190826,
-0.03280868008732796,
-0.13817211985588074,
-0.16877584159374237,
0.05145318806171417,
-0.008326479233801365,
-0.005027825944125652,
-0.02496223896741867,
0.03743400424718857,
-0.09159111231565475,
-0.006184807978570461,
-0.024061501026153564,
-0.09318466484546661,
0.057800453156232834,
0.03313194215297699,
0.08891302347183228,
-0.024618053808808327,
0.0955900326371193,
0.12300474941730499,
-0.06806331127882004,
-0.036669109016656876,
0.10004029422998428,
0.0688781812787056,
0.004067877307534218,
-0.08695893734693527,
0.010617764666676521,
0.14632511138916016,
0.17008577287197113,
0.0952223464846611,
0.04903199523687363,
-0.004645553883165121,
-0.023542428389191628,
-0.05178367346525192,
-0.02981889806687832,
0.04404822736978531,
-0.040362648665905,
-0.12545862793922424,
-0.057076096534729004,
-0.039946697652339935,
0.027009380981326103,
0.024449346587061882,
0.04147844761610031,
0.07631787657737732,
0.08106543123722076,
-0.0658528134226799,
-0.04875856265425682,
0.045790307223796844,
0.11246741563081741,
0.09980087727308273,
-0.03191208094358444,
-0.02522355504333973,
0.03595278412103653,
-0.06752525269985199,
0.015298200771212578,
0.0809764564037323,
-0.08448077738285065,
-0.04885679483413696,
-0.06901983171701431,
-0.13705098628997803,
0.06643056869506836,
-0.03405222296714783,
0.08342303335666656,
0.03635568171739578,
-0.06506428122520447,
0.05279785767197609,
-0.06013345718383789,
-0.039574675261974335,
-0.011219358071684837,
-0.003244682913646102,
0.11665480583906174,
0.1448618769645691,
0.02838447503745556,
-0.05508796498179436,
-0.03352748975157738,
0.10141721367835999,
0.11847023665904999,
-0.1125846654176712,
-0.14678461849689484,
-0.13101248443126678,
-0.01907115988433361,
0.10681173950433731,
-0.12029591202735901,
-0.08899401873350143,
-0.07762690633535385,
0.0590016171336174,
0.042718324810266495,
-0.04556775838136673,
0.004049026872962713,
0.005129227880388498,
0.026830095797777176,
0.084702268242836,
-0.03416135907173157,
-0.11048819869756699,
0.008248814381659031,
0.03219945356249809,
0.12024509906768799,
0.13063012063503265,
0.03969953954219818,
0.03813710808753967,
0.019564291462302208,
0.06340589374303818,
-0.007363033015280962,
-0.030853137373924255,
-0.11822226643562317,
0.024423234164714813,
-0.047026630491018295,
-0.13940966129302979,
-0.19655868411064148,
-0.10249730199575424,
-0.005900155287235975,
0.0998867079615593,
0.06670793890953064,
0.09694912284612656,
-0.008153882808983326,
-0.07904476672410965,
0.025414803996682167,
-0.004754950292408466,
0.00775566603988409,
-0.07944498211145401,
-0.09962986409664154,
-0.06384889036417007,
0.03255287930369377,
0.12107294052839279,
0.1915561854839325,
0.046078555285930634,
-0.025763152167201042,
0.0316263847053051,
0.12190023064613342,
0.16413527727127075,
0.01552935317158699,
-0.08128436654806137,
0.07476754486560822,
0.10979314148426056,
0.11603869497776031,
-0.040463004261255264,
-0.08519402891397476,
-0.14308233559131622,
-0.13568559288978577,
0.11698860675096512,
0.06710944324731827,
-0.017370745539665222,
0.04471367970108986,
0.05831113085150719,
0.03038538433611393,
-0.11441560089588165,
0.008161843754351139,
0.10975474119186401,
0.012397690676152706,
0.0072684031911194324,
-0.07653795927762985,
0.03489565849304199,
0.08014602959156036,
-0.02636539191007614,
-0.18970409035682678,
-0.004318923223763704,
-0.011199950240552425,
0.01756492629647255,
-0.07268926501274109,
-0.06398174911737442,
0.10305502265691757,
0.05374271050095558,
0.02642989344894886,
0.028715064749121666,
-0.014859069138765335,
-0.002510134130716324,
0.06493167579174042,
-0.010629507713019848,
0.03280019760131836,
-0.004066893365234137,
-0.05890955775976181,
-0.03646370396018028,
-0.03503221645951271,
0.055713314563035965,
0.04178813844919205,
0.04660150408744812,
0.0884750708937645,
0.02945997752249241,
0.14299316704273224,
0.06590481847524643,
-0.05546054244041443,
-0.028417857363820076,
0.10889976471662521,
0.04331720247864723,
0.07106301188468933,
-0.08860325813293457,
-0.01224854588508606,
0.014734741300344467,
0.05786353722214699,
0.03858210891485214,
-0.07590919733047485,
0.005457418039441109,
0.015906784683465958,
-0.011503531597554684,
-0.051649708300828934,
0.007919305004179478,
0.01036840584129095,
-0.028967123478651047,
-0.046842724084854126,
-0.05948704481124878,
-0.014800140634179115,
-0.0031517271418124437,
0.10583540797233582,
0.2756411135196686,
0.14952345192432404,
-0.09916768223047256,
-0.0409616157412529,
0.17890623211860657,
0.15226703882217407,
-0.009801771491765976,
-0.03756866976618767,
0.0025014784187078476,
-0.10873231291770935,
-0.16979393362998962,
-0.0870516300201416,
-0.021006280556321144,
-0.06567393243312836,
0.030332189053297043,
0.02329784445464611,
0.04968041926622391,
0.124791219830513,
-0.025929393246769905,
0.0732869803905487,
-0.0552637055516243,
0.05120367184281349,
-0.04765613004565239,
-0.0399625301361084,
-0.0008708801469765604,
-0.0022638863883912563,
0.1318385899066925,
-0.18464480340480804,
-0.050189074128866196,
-0.02933145873248577,
-0.08456522971391678,
0.0914851650595665,
0.05640524625778198,
-0.05969821289181709,
0.09776928275823593,
-0.1353185623884201,
0.004112064838409424,
0.03113427385687828,
0.12065857648849487,
0.0012569671962410212,
0.02638627588748932,
-0.03710923343896866,
-0.04169071465730667,
0.03029019385576248,
-0.1268691122531891,
-0.06801758706569672,
0.040370408445596695,
-0.05076246336102486,
0.05581801012158394,
-0.0856437236070633,
-0.09510297328233719,
0.026491746306419373,
0.036808308213949203,
-0.03352806344628334,
0.00017984742589760572,
0.013666190207004547,
0.024987760931253433,
0.035261135548353195,
-0.0774712935090065,
0.08727512508630753,
-0.05352026969194412,
-0.022346368059515953,
0.020746935158967972,
-0.020514631643891335,
-0.00148379011079669,
-0.0011082873679697514,
0.013606577180325985,
0.1521606743335724,
0.19763539731502533,
0.02539200894534588,
-0.03607429191470146,
0.09376909583806992,
-0.03230811282992363,
0.08887825906276703,
0.0569537878036499,
-0.1299382895231247,
-0.12358590215444565,
-0.0087952995672822,
-0.07067246735095978,
0.172172412276268,
0.08756053447723389,
0.11173069477081299,
-0.12230948358774185,
-0.09010769426822662,
-0.08947698771953583,
-0.07613320648670197,
0.02544957585632801,
-0.07005511969327927,
-0.14270387589931488,
-0.0013923258520662785,
0.10670682787895203,
-0.06633514165878296,
-0.04920457676053047,
0.013304552063345909,
-0.031049882993102074,
-0.07614699751138687,
0.0005735539016313851,
0.006450851913541555,
-0.07901660352945328,
-0.12449432909488678,
-0.12299250066280365,
0.01958615519106388,
0.04510298743844032,
0.01708400994539261,
-0.10557142645120621,
-0.10431116074323654,
0.03375919535756111,
-0.035133231431245804,
0.04035823419690132,
0.04468916356563568,
-0.05815897881984711,
0.018581919372081757,
0.011908427812159061,
-0.07641460001468658,
0.018757913261651993,
-0.12136942893266678,
-0.010123253799974918,
-0.0070001534186303616,
0.055140722543001175,
0.11289265751838684,
-0.0031792428344488144,
-0.11369116604328156,
0.06941760331392288,
0.1515825390815735,
0.15194928646087646,
0.010257882066071033,
-0.057908620685338974,
0.07768537104129791,
0.07026175409555435,
0.014172477647662163,
-0.009520321153104305,
0.1169971451163292,
-0.05792753025889397,
-0.03433739021420479,
-0.05940564349293709,
0.22253893315792084,
0.2711663544178009,
-0.06252437084913254,
-0.04379156231880188,
-0.01261002104729414,
0.034081000834703445,
-0.011914853006601334,
-0.10742562264204025,
-0.031313952058553696,
-0.22270295023918152,
-0.08726871013641357,
-0.03695302829146385,
-0.03904644399881363,
0.07097651064395905,
-0.10842239856719971,
0.0290217287838459,
-0.06129340082406998,
0.051495570689439774,
-0.01855665072798729,
0.03137952834367752,
0.049636222422122955,
-0.046544089913368225,
0.04310718923807144,
-0.17629355192184448,
-0.039406780153512955,
-0.11175931245088577,
5.860585588379763e-05,
0.11541309952735901,
-0.02334189973771572,
0.004645413253456354,
0.03379861265420914,
0.045750267803668976,
-0.06002243235707283,
0.09465300291776657,
-0.0019432775443419814,
-0.007454905193299055,
-0.023042555898427963,
-0.003863015677779913,
-0.03730711340904236,
0.0518774650990963,
-0.08509766310453415,
0.0647401511669159,
-0.02308293990790844,
0.060796476900577545,
0.0001251002831850201,
-0.2520875334739685,
-0.031893134117126465,
0.12859657406806946,
0.0477880984544754,
0.03526788949966431,
0.08086751401424408,
0.07556038349866867,
0.048553407192230225,
-0.09590474516153336,
-0.04888809472322464,
-0.08385922759771347,
-0.0677175521850586,
0.027755480259656906,
-0.09250356256961823,
0.0735301524400711,
-0.08700992166996002,
-0.0011957013048231602,
0.07304702699184418,
0.02657213807106018,
0.12937024235725403,
0.048772331327199936,
0.05109791085124016,
0.0643809512257576,
0.1022881343960762,
-0.049332842230796814,
0.03125457093119621,
0.08341014385223389,
-0.10070964694023132,
0.06963103264570236,
-0.02898981235921383,
0.016984406858682632,
0.04614981636404991,
-0.10828214138746262,
-0.01312402542680502,
-0.047114282846450806,
-0.11076299846172333,
-0.025193512439727783,
0.04410625249147415,
-0.02364182099699974,
-0.04622368514537811,
-0.07681304216384888,
-0.07706886529922485,
0.036613017320632935,
-0.096336729824543,
0.01850034110248089,
-0.05765223875641823,
-0.08266731351613998,
0.2395966649055481,
0.03198833763599396,
0.02136276662349701,
-0.002133139641955495,
-0.005659075453877449,
0.07497351616621017,
-0.02285204455256462,
-0.06694507598876953,
0.012065604329109192,
0.1358996033668518,
-0.08828499913215637,
-0.05731770396232605,
-0.10480733215808868,
0.014032802544534206,
0.05150189623236656,
0.011978126130998135,
-0.03509894013404846,
0.01761133223772049,
-0.11094268411397934,
0.005590653978288174,
-0.015622913837432861,
-0.08595112711191177,
-0.07568792998790741,
-0.04996196925640106,
-0.06543644517660141,
0.03188346326351166,
0.05464442819356918,
-0.02066899463534355,
0.018002033233642578,
0.11868814378976822,
0.08399104326963425,
0.1195402592420578,
-2.6185593014815822e-05,
-0.033912207931280136,
-0.04427185654640198,
-0.032124411314725876,
-0.0730021595954895,
0.010458879172801971,
0.06476157903671265,
-0.09584136307239532,
-0.07751073688268661,
-0.07742340862751007,
-0.20512498915195465,
-0.15804752707481384,
0.014348257333040237,
-0.10187526047229767,
0.009826033376157284,
-0.0858021154999733,
-0.007052284199744463,
0.04506523162126541,
-0.16094884276390076,
0.05153941735625267,
-0.11720196902751923,
0.0627877414226532,
0.003828098066151142,
0.03244129568338394,
0.011641008779406548,
-0.01899620331823826,
0.05248027667403221,
-0.06382227689027786,
0.17523348331451416,
-0.03564334660768509,
0.021891916170716286,
0.010722348466515541,
0.07359161227941513,
0.0300737414509058,
0.02666451781988144,
-0.13034747540950775,
-0.16325438022613525,
-0.1433568000793457,
-0.016634900122880936,
-0.009278867393732071,
-0.0781622901558876,
-0.1280537247657776,
-0.022839738056063652,
-0.038578782230615616,
-0.007550773676484823,
-0.08791447430849075,
0.0589413195848465,
0.07696454972028732,
0.062150806188583374,
0.12101420760154724,
-0.062416043132543564,
-0.040291693061590195,
-0.11955223977565765,
0.06019663065671921,
0.05824491009116173,
0.006294645369052887,
0.04186929017305374,
-0.06603735685348511,
0.0030586188659071922,
0.06330633163452148,
-0.03869685158133507,
-0.07589684426784515,
-0.12914854288101196,
0.13854672014713287,
0.0869060531258583,
0.06516185402870178,
-0.048385996371507645,
-0.024559779092669487,
0.228944793343544,
0.10188865661621094,
0.0754290372133255,
-0.006475069560110569,
0.15506617724895477,
-0.09226199984550476,
-0.08729623258113861,
-0.0568237267434597,
-0.004281253553926945,
0.1936960518360138,
-0.14069487154483795,
-0.1226293221116066,
-0.15350811183452606,
-0.07616811990737915,
0.05909881368279457,
-0.0896381288766861,
-0.09787914156913757,
-0.1502504050731659,
-0.15213610231876373,
-0.08790909498929977,
-0.10098101943731308,
-0.09107538312673569,
0.002561285626143217,
-0.15236149728298187,
-0.06508712470531464,
0.06480847299098969,
0.028462013229727745,
-0.03918200358748436,
-0.04165501147508621,
0.06265468150377274,
0.05277084559202194,
0.08960246294736862,
-0.039002932608127594,
0.024321608245372772,
-0.040864747017621994,
0.08308703452348709,
-0.04259473830461502,
-0.12278811633586884,
0.12984490394592285,
0.03433752804994583,
0.0304728876799345,
0.06657832860946655,
0.04236709326505661,
0.035932157188653946,
0.033524904400110245,
0.07299567013978958,
0.03379299119114876,
-0.012690155766904354,
-0.03750954195857048,
-0.11090782284736633,
-0.08150795847177505,
-0.00564890680834651,
0.024923663586378098,
0.12002111226320267,
0.0802806094288826,
-0.0033372731413692236,
0.02552914246916771,
-0.07798250019550323,
0.11090066283941269,
0.011406284756958485,
-0.03929021582007408,
0.03941389173269272,
0.020518159493803978,
-0.08101053535938263,
-0.05423285812139511,
0.015179691836237907,
0.05573471263051033,
-0.01920435018837452,
-0.05253661423921585,
0.061412665992975235,
0.05716099590063095,
0.06791036576032639,
0.017461271956562996,
-0.09011314809322357,
-0.13505756855010986,
0.1280880719423294,
0.12884125113487244,
0.10479022562503815,
-0.0040313671343028545,
-0.017546413466334343,
-0.020934343338012695,
0.02580752782523632,
-0.047952957451343536,
0.05046660080552101,
0.13512195646762848,
-0.11958622187376022,
-0.08979819715023041,
-0.06168559193611145,
0.04927164688706398,
0.1315942406654358,
-0.0070937820710241795,
-0.01499983575195074,
-0.0006008868222124875,
-0.10973389446735382,
0.13037019968032837,
0.01992982067167759,
-0.013030040077865124,
-0.06555622816085815,
-0.0799286961555481,
-0.05518238991498947,
0.126730814576149,
0.07735985517501831,
-0.17035531997680664,
0.014227412641048431,
-0.05316148325800896,
0.0317186675965786,
-0.13640400767326355,
-0.076587975025177,
-0.04099574685096741,
0.08338242769241333,
0.030341869220137596,
-0.10027896612882614,
-0.05391189455986023,
0.06305054575204849,
-0.05562400817871094,
0.06870700418949127,
-0.04358614608645439,
-0.05973777920007706,
0.1397199183702469,
-0.00432403851300478,
0.09734531491994858,
-0.13104116916656494,
-0.08307387679815292,
0.07888098061084747,
-0.02405829168856144,
0.008546007797122002,
-0.0676819309592247,
-0.06592146307229996,
-0.054115451872348785,
-0.008060229942202568,
-0.06564106047153473,
-0.04719060659408569,
-0.09461966902017593,
0.053457170724868774,
0.017474818974733353,
0.017915334552526474,
-0.05907797813415527,
-0.07892865687608719,
-0.0257688257843256,
-0.03519413620233536,
-0.2650179862976074,
-0.17187999188899994,
-0.0982053279876709,
-0.011555994860827923,
-0.1394410878419876,
0.07427383214235306,
-0.13839763402938843,
-0.04801075533032417,
-0.022238949313759804,
0.011872231028974056,
0.26985985040664673,
0.09006251394748688,
0.05125396326184273,
0.04052824154496193,
0.02069430984556675,
0.16922815144062042,
0.17702239751815796,
0.0705164223909378,
0.0335397832095623,
0.10163934528827667,
0.0232141874730587,
-0.09431786835193634,
0.059258610010147095,
-0.09456297755241394,
0.09216804802417755,
-0.010381346568465233,
0.17385105788707733,
0.13103294372558594,
0.05993344634771347,
0.03902945667505264,
0.058643072843551636,
0.07108540087938309,
0.03839965909719467,
0.04701437056064606,
0.018438739702105522,
-0.14357702434062958,
-0.011462545953691006,
0.03170134872198105,
0.08734830468893051,
-0.09516078233718872,
-0.10457862168550491,
-0.09886882454156876,
0.15035380423069,
-0.08259005844593048,
0.05282377824187279,
0.03072066605091095,
0.0004958800855092704,
0.029439318925142288,
0.008557096123695374,
0.1013476625084877,
-0.041577618569135666,
-0.018331872299313545,
0.08083970844745636,
0.04121982678771019,
-0.07356564700603485,
-0.024437107145786285,
-0.05135288089513779,
-0.10379986464977264,
0.0074034808203577995,
0.05860123038291931,
-0.05033392459154129,
0.07305066287517548,
0.08595737814903259,
-0.027259115129709244,
-0.02290850505232811,
0.09031526744365692,
0.11573002487421036,
0.1677101105451584,
-0.07340864837169647,
-0.07561817765235901,
0.08332076668739319,
0.1111060231924057,
0.03546633571386337,
0.058686479926109314,
0.0083203399553895,
0.0886620432138443,
0.014928711578249931,
-0.05137404054403305,
0.02737070433795452,
0.03781701996922493,
0.013955045491456985,
-0.050817955285310745,
0.08024195581674576,
-0.10474232584238052,
0.08923929184675217,
0.00769619969651103,
-0.0637979730963707,
-0.0713946670293808,
-0.08983966708183289,
-0.003956041298806667,
0.08697706460952759,
0.00019510627316776663,
-0.010598772205412388,
-0.0724349245429039,
-0.06245902180671692,
0.05840630456805229,
-0.06341143697500229,
-0.13662183284759521,
-0.11861149221658707,
0.05299971625208855,
-0.028510086238384247,
0.052066512405872345,
0.0568227656185627,
0.02523212693631649,
-0.05887637287378311,
0.0005746475653722882,
0.10005558282136917,
-0.017390768975019455,
-0.15529365837574005,
-0.197040393948555,
0.10821906477212906,
-0.04222317039966583,
-0.013148205354809761,
0.06348999589681625,
0.05127968266606331,
0.013143797405064106,
-0.0273163840174675,
0.005992963444441557,
-0.06306714564561844,
0.05027298629283905,
0.06683707237243652,
0.03547584265470505,
0.15062196552753448,
0.11827223002910614,
0.027833858504891396,
0.008572236634790897,
0.14506863057613373,
0.03196565434336662,
-0.0066610537469387054,
-0.11080211400985718,
-0.09948065876960754,
-0.07727431505918503,
0.03619379922747612,
0.0924304872751236,
0.00793529488146305,
-0.0006440486758947372,
0.10060064494609833,
0.09451984614133835,
0.05319634824991226,
-0.2207232266664505,
0.03705545514822006,
0.008452743291854858,
0.19590897858142853,
0.04174371063709259,
-0.08076104521751404,
-0.0055587138049304485,
0.07506053149700165,
0.07128660380840302,
0.10701485723257065,
0.04118462651968002,
0.08225339651107788,
-0.01120467483997345,
-0.036043718457221985,
-0.05014131963253021,
0.07857614755630493,
0.09230378270149231,
-0.016436507925391197,
0.043231550604104996,
0.07310540229082108,
0.019786782562732697,
-0.03720124065876007,
-0.07322797179222107,
-0.05832613632082939,
-0.0024527348577976227,
0.19050797820091248,
-0.08270367234945297,
0.06891746819019318,
0.08037206530570984,
-0.0016775315161794424,
-0.05772192031145096,
0.11875949800014496,
0.20639480650424957,
0.09126262366771698,
-0.0696568712592125,
-0.09368988871574402,
0.07272762060165405,
0.04821630194783211,
0.05667690932750702,
0.028291087597608566,
-0.01881079562008381,
0.0361124612390995,
0.0428977906703949,
0.03910055011510849,
-0.08464173972606659,
-0.03383133187890053,
-0.019280090928077698,
-0.002077518031001091,
0.004323919303715229,
-0.050743404775857925,
-0.09988271445035934,
-0.02413695678114891,
0.036491915583610535,
0.0032741189934313297,
0.05216230824589729,
-0.06328431516885757,
-0.06528866291046143,
-0.08078110218048096,
0.08207780122756958,
0.08090190589427948,
0.009273652918636799,
0.051681987941265106,
-0.09507458657026291,
-0.05873468518257141,
0.04169299453496933,
0.0022471596021205187,
0.009288380853831768,
-0.06887222826480865,
-0.02135947160422802,
-0.0037687579169869423,
-0.045507095754146576,
-0.11487440764904022,
-0.0932253897190094,
-0.09274329990148544,
-0.059524863958358765,
-0.13109679520130157,
-0.10275506228208542,
-0.09941907227039337,
0.033831022679805756,
-0.018550006672739983,
-0.03083091229200363,
-0.09618952870368958,
-0.21502436697483063,
-0.11846082657575607,
0.04728451743721962,
0.06445591896772385,
0.0563272088766098,
-0.04207133501768112,
-0.10053682327270508,
-0.08087192475795746,
-0.03895337134599686,
0.15409505367279053,
0.05817034840583801,
0.014652760699391365,
-0.12568220496177673,
-0.06628395617008209,
-0.04294869303703308,
-0.08795052021741867,
0.04172246530652046,
-0.04537243768572807,
0.0569089911878109,
-0.043526675552129745,
-0.20789282023906708,
-0.02095021866261959,
-0.04731893539428711,
-0.016019446775317192,
0.008739124983549118,
-0.032903723418712616,
-0.023913893848657608,
-0.006789290811866522,
-0.036610037088394165,
0.017360586673021317,
0.03180859982967377,
0.014382103458046913,
-0.0047850701957941055,
-0.045380979776382446,
-0.04402681067585945,
-0.004305856768041849,
-0.0028010092210024595,
0.08605659008026123,
-0.06620585918426514,
0.00747193256393075,
0.04613847658038139,
0.09768357127904892,
0.036409102380275726,
0.07240065187215805,
-0.0011099549010396004,
0.15284813940525055,
0.16841666400432587,
0.05253632366657257,
-0.07753464579582214,
0.10690903663635254,
0.07301687449216843,
0.15714454650878906,
-0.0067032393999397755,
-0.03248903900384903,
0.23825527727603912,
0.011595338582992554,
-0.1738164871931076,
0.05825735256075859,
-0.001171025913208723,
0.2365487962961197,
-0.1022825762629509,
-0.0654790997505188,
0.04655947908759117,
0.0794011577963829,
-0.09707209467887878,
-0.20956453680992126,
-0.21254584193229675,
0.019317790865898132,
0.015154632739722729,
-0.05940450355410576,
-0.11322765797376633,
-0.10940869897603989,
-0.03483569622039795,
-0.053260400891304016,
0.04894782602787018,
-0.0004565305425785482,
0.024673165753483772,
-0.0737905278801918,
-0.06255771964788437,
-0.05736889690160751,
-0.007986651733517647,
0.008135220967233181,
-0.013980956748127937,
-0.02310708351433277,
-0.13768137991428375,
0.036702778190374374,
0.011173614300787449,
-0.067624531686306,
-0.14280368387699127,
0.14367322623729706,
0.05923567712306976,
-0.022105518728494644,
-0.0023820612113922834,
-0.0509285032749176,
0.12308400124311447,
0.1050373986363411,
-0.04534748196601868,
0.052448105067014694,
0.08179917186498642,
-0.03972717002034187,
-0.0077549428679049015,
0.085084930062294,
0.019181082025170326,
0.09910523146390915,
-0.029553299769759178,
-0.03460182249546051,
-0.05128028616309166,
-0.04556071013212204,
-0.038800857961177826,
-0.01837999001145363,
0.07779938727617264,
-0.007131410762667656,
0.013572636991739273,
0.056120969355106354,
0.02434675581753254,
-0.06991437077522278,
-0.11425001174211502,
-0.05344484746456146,
0.21275395154953003,
0.04465392604470253,
0.11408204585313797,
0.030341973528265953,
0.013804658316075802,
0.036406002938747406,
0.11683249473571777,
0.09881673008203506,
0.046142347157001495,
0.05096827447414398,
-0.019009092822670937,
-0.005192542914301157,
0.10696278512477875,
0.032239899039268494,
-0.008715858682990074,
0.022780971601605415,
0.16492362320423126,
0.016164831817150116,
-0.12011581659317017,
0.007917018607258797,
0.0274965800344944,
0.11064453423023224,
-0.019638609141111374,
-0.16251486539840698,
-0.002660645404830575,
-0.05409473925828934,
-0.018575996160507202,
-0.10158412158489227,
-0.054413389414548874,
-0.016340741887688637,
0.034785009920597076,
0.09364451467990875,
-0.009334718808531761,
-0.07551775127649307,
0.08220960944890976,
0.034458644688129425,
-0.014923385344445705,
-0.051001861691474915,
-0.10167896002531052,
0.0395682156085968,
0.031950950622558594,
0.0013743613380938768,
-0.046346597373485565,
-0.07021060585975647,
0.03292759135365486,
0.02139342948794365,
0.012556571513414383,
-0.10138940811157227,
0.008626441471278667,
0.027076056227087975,
0.02226897142827511,
0.0088766785338521,
-0.09336432814598083,
0.021314091980457306,
0.04746177792549133,
0.09168628603219986,
0.006733275949954987,
-0.058757711201906204,
-0.00020230434893164784,
0.08598324656486511,
0.07186806201934814,
-0.17981775104999542,
-0.07602990418672562,
0.06531849503517151,
0.021985478699207306,
0.041829913854599,
0.12101084738969803,
-0.05170590430498123,
-0.07507956773042679,
-0.03276810050010681,
-0.10456624627113342,
0.2098502218723297,
0.05443809926509857,
0.07802269607782364,
-0.016239821910858154,
-0.02287941798567772,
0.12248072028160095,
0.09171698987483978,
0.06257592141628265,
0.03780188411474228,
-0.01999804377555847,
0.05187881737947464,
-0.11206924915313721,
0.05478307604789734,
-0.03176415339112282,
-0.002271671313792467,
0.011126861907541752,
0.12771153450012207,
0.21961519122123718,
0.0771767869591713,
0.0020156865939497948,
0.014762802980840206,
0.1321035921573639,
-0.012440994381904602,
0.08051559329032898,
0.011312650516629219,
-0.10893475264310837,
0.04705648496747017,
0.12293834984302521,
0.13514293730258942,
-0.06660483777523041,
-0.07854950428009033,
0.12070105969905853,
0.04659762606024742,
-0.08523203432559967,
-0.06722570210695267,
0.032377906143665314,
-0.021945031359791756,
-0.0037827847991138697,
-0.01843487285077572,
0.03860710188746452,
-0.030641479417681694,
-0.016206786036491394,
0.08075010031461716,
0.01957663893699646,
-0.06077345088124275,
-0.02172006294131279,
0.04771475866436958,
0.024679692462086678,
0.07905382663011551,
0.03931741043925285,
-0.039103928953409195,
0.12165340036153793,
0.07391668111085892,
0.05313592404127121,
0.05126753821969032,
0.0057806032709777355,
0.14493192732334137,
0.1552799940109253,
-0.011594207026064396,
-0.1538921296596527,
0.010397199541330338,
0.015006698668003082,
0.009703047573566437,
-0.04991656914353371,
-0.16024184226989746,
0.10563842952251434,
-0.138536274433136,
-0.19729474186897278,
-0.09851010888814926,
-0.03790785372257233,
-0.028397204354405403,
-0.07927925884723663,
-0.02305564656853676,
-0.04224972054362297,
0.10044637322425842,
0.08621876686811447,
-0.08797939121723175,
0.00783570483326912,
-0.12818558514118195,
-0.08510809391736984,
0.07528114318847656,
-0.0837584137916565,
-0.040524743497371674,
-0.11267852038145065,
0.10421986877918243,
0.12549415230751038,
0.029211657121777534,
-0.07873905450105667,
-0.11389673501253128,
0.08975477516651154,
0.03524073213338852,
0.11482701450586319,
0.10761437565088272,
0.04700577259063721,
0.046739354729652405,
0.12794169783592224,
0.1587844043970108,
0.07010502368211746,
-0.06805270910263062,
-0.08128226548433304,
-0.06025795638561249,
-0.0403686985373497,
-0.011738641187548637,
0.0352804996073246,
-0.06365315616130829,
-0.0690724179148674,
-0.020261231809854507,
-0.01776738278567791,
-0.1404775232076645,
-0.08554613590240479,
-0.025740718469023705,
-0.06860234588384628,
0.10114488750696182,
0.018583305180072784,
-0.06867015361785889,
-0.00401461124420166,
0.06347858160734177,
0.08575929701328278,
-0.030454332008957863,
-0.06696932017803192,
-0.07232332974672318,
-0.07797258347272873,
0.0995691642165184,
0.09924402832984924,
0.19261330366134644,
-0.057215552777051926,
0.15242984890937805,
0.05511331558227539,
0.06070377677679062,
-0.0377703495323658,
0.12292984127998352,
0.07227427512407303,
0.1877347230911255,
0.07547580450773239,
-0.056369055062532425,
-0.02568737044930458,
0.009152721613645554,
0.0668831318616867,
-0.009234920144081116,
-0.04328674450516701,
0.151035875082016,
-0.032329097390174866,
-0.16244865953922272,
-0.11390304565429688,
-0.03770539537072182,
0.07631707191467285,
-0.0853123888373375,
-0.047275152057409286,
-0.009813123382627964,
-0.05907779932022095,
-0.08080483227968216,
-0.10287006199359894,
0.04187910258769989,
0.07320433855056763,
0.17877197265625,
-0.04742848500609398,
0.046772655099630356,
0.02288929745554924,
0.08036074787378311,
0.005100110080093145,
-0.028730392456054688,
0.05982087552547455,
0.004620208404958248,
-0.12181705981492996,
-0.1394656002521515,
0.04980999976396561,
0.09178457409143448,
0.07225469499826431,
-0.052932072430849075,
-0.009823502972722054,
0.12728051841259003,
-0.006453913636505604,
0.012663651257753372,
-0.10367231070995331,
-0.10793034732341766,
-0.08236774057149887,
-0.058004554361104965,
0.020691489800810814,
0.04017065837979317,
0.009997894056141376,
-0.037132058292627335,
0.07875239849090576,
0.004699572920799255,
-0.07309664040803909,
-0.0027732604648917913,
-0.09696146845817566,
-0.07724300026893616,
-0.008160298690199852,
0.024031708016991615,
-0.02247272990643978,
-0.1061757430434227,
-0.19137701392173767,
-0.09948568791151047,
-0.032695166766643524,
0.004180962219834328,
-0.10473901033401489,
-0.083411805331707,
-0.010488796979188919,
-0.07027070969343185,
-0.03189139813184738,
-0.10531355440616608,
-0.023429181426763535,
-0.007724273018538952,
-0.01347886398434639,
-0.014886753633618355,
-0.09878645837306976,
-0.05035799741744995,
-0.006637778133153915,
-0.04943764954805374,
-0.03575362265110016,
0.04016728699207306,
-0.18357990682125092,
-0.09977271407842636,
0.027779996395111084,
0.14790476858615875,
0.13585294783115387,
-0.012569431215524673,
-0.17578671872615814,
-0.1071595698595047,
-0.09779916703701019,
0.07747762650251389,
0.07542026787996292,
-0.009984827600419521,
-0.08033664524555206,
-0.03992748633027077,
-0.004749536048620939,
-0.08860576152801514,
0.026603566482663155,
0.07026921957731247,
0.12076623737812042,
-0.01391203049570322,
-0.07473338395357132,
-0.04885025694966316,
-0.11812794208526611,
-0.11308843642473221,
0.0017800841014832258,
0.043849628418684006,
-0.09962105751037598,
-0.015025570057332516,
0.06787647306919098,
-0.021518293768167496,
-0.06586188077926636,
0.03564217686653137,
0.019651448354125023,
-0.05499856919050217,
-0.09865297377109528,
-0.10710779577493668,
-0.0023213226813822985,
0.02799592912197113,
-0.08654646575450897,
0.05846100673079491,
0.06545620411634445,
-0.01799856498837471,
-0.06010421738028526,
-0.000198362409719266,
-0.022153612226247787,
0.011672667227685452,
0.08916763961315155,
0.09076538681983948,
-0.04082365706562996,
0.0388290174305439,
-0.01413267944008112,
0.0001267401094082743,
-0.05587724968791008,
-0.07689420878887177,
0.17192715406417847,
-0.022474052384495735,
-0.26060837507247925,
-0.1440260410308838,
-0.060840021818876266,
0.17475859820842743,
-0.13790050148963928,
-0.1494372934103012,
-0.007960722781717777,
0.07721775770187378,
-0.01682552695274353,
-0.11401207745075226,
-0.16580353677272797,
0.05811957269906998,
0.025197932496666908,
-0.06267235428094864,
-0.04884102940559387,
-0.1139165386557579,
-0.11848041415214539,
-0.014524186961352825,
0.007043840363621712,
-0.19465027749538422,
-0.042474955320358276,
0.04088045656681061,
0.03964872658252716,
-0.015340343117713928,
0.07837419956922531,
0.10203603655099869,
0.055282361805438995,
0.04218395799398422,
-0.07947602868080139,
-0.02690158411860466,
0.03218621015548706,
-0.04008248820900917,
-0.08691760152578354,
0.1165512427687645,
-0.021862365305423737,
-0.13630418479442596,
-0.0020314392168074846,
-0.06526509672403336,
0.0008716133888810873,
0.04386938363313675,
-0.07011549919843674,
-0.024951009079813957,
-0.0712609812617302,
0.01791919767856598,
0.08098053932189941,
0.030886473134160042,
-0.025024516507983208,
0.03785542771220207,
-0.010296680964529514,
-0.000765311939176172,
-0.08413603156805038,
-0.1005953773856163,
0.019817233085632324,
-0.025278443470597267,
-0.02816818840801716,
-0.032351817935705185,
-0.20569919049739838,
-0.12766486406326294,
0.05712740868330002,
-0.010506576858460903,
-0.24776197969913483,
-0.1465248316526413,
0.10650884360074997,
0.10472352802753448,
0.0676913857460022,
0.05744333192706108,
0.01800105907022953,
0.10652018338441849,
0.04864485189318657,
0.016683226451277733,
-0.04207346588373184,
0.0004068276030011475,
0.05757163092494011,
-0.015511175617575645,
-0.10344235599040985,
0.015120225958526134,
-0.03505983203649521,
-0.10591678321361542,
0.11621707677841187,
0.07062661647796631,
0.15365847945213318,
0.001940022106282413,
0.0231404360383749,
-0.042440738528966904,
0.018392173573374748,
0.05656902492046356,
-0.09100579470396042,
0.14945697784423828,
0.10867981612682343,
-0.03175023943185806,
0.1316106617450714,
-0.10024861991405487,
-0.08841973543167114,
-0.04472221061587334,
0.09610270708799362,
-0.026912536472082138,
0.04524349048733711,
-0.0512496754527092,
-0.011642098426818848,
0.007089448161423206,
-0.07043738663196564,
-0.03710675239562988,
0.054898809641599655,
-0.021086297929286957,
0.01925024949014187,
-0.11094983667135239,
-0.036446452140808105,
0.010565077885985374,
0.0439453162252903,
0.06369229406118393,
-0.051234956830739975,
0.017133353278040886,
0.06519811600446701,
0.11543188244104385,
0.06514590978622437,
0.00671424763277173,
-0.02882104553282261,
0.0288429856300354,
0.05404104292392731,
-0.04093730449676514,
-0.028804004192352295,
-0.06902442127466202,
-0.03912485018372536,
0.11162061244249344,
0.08027452975511551,
0.09585059434175491,
0.0032987105660140514,
0.0869910940527916,
0.02991618774831295,
0.10999606549739838,
0.06541505455970764,
-0.11339773237705231,
0.02294427901506424,
-0.18654800951480865,
-0.047112349420785904,
-0.012520629912614822,
0.048745907843112946,
-0.04435129836201668,
-0.08946821838617325,
-0.21580614149570465,
0.03943854197859764,
-0.05538162216544151,
-0.03208030015230179,
-0.038022711873054504,
-0.03245130926370621,
0.03587694093585014,
0.061095014214515686,
-0.06092943996191025,
0.03672173246741295,
0.013969800435006618,
0.04337028041481972,
0.03039243444800377,
-0.061279743909835815,
-0.01548556424677372,
-0.031930405646562576,
-0.10666020959615707,
-0.04141116887331009,
-0.02915811911225319,
-0.027176840230822563,
-0.025992924347519875,
-0.08804793655872345,
-0.03758940473198891,
0.1204800233244896,
0.035414278507232666,
0.04290581867098808,
0.015159737318754196,
0.0020639155991375446,
0.04597611352801323,
-0.0011700574541464448,
0.020552225410938263,
-0.05906656011939049,
-0.07949783653020859,
-0.02926245518028736,
-0.014553253538906574,
-0.06180829182267189,
0.004955126903951168,
-0.019219661131501198,
-0.0025633336044847965,
-0.018344389274716377,
-0.08545006811618805,
0.05349269136786461,
0.021414676681160927,
-0.1374519020318985,
-0.06773318350315094,
-0.1147323027253151,
-0.04448351263999939,
-0.1010175347328186,
0.06039727106690407,
-0.11759617179632187,
-0.14324404299259186,
0.07745712250471115,
0.1020074188709259,
0.15139546990394592,
-0.03893226385116577,
0.1004401296377182,
0.0530257523059845,
0.04231327399611473,
0.07812513411045074,
-0.023924710229039192,
0.022440869361162186,
-0.18194018304347992,
-0.06600942462682724,
0.012152855284512043,
0.07606572657823563,
-0.08757033944129944,
-0.10877832770347595,
0.040437065064907074,
-0.018131233751773834,
0.016379276290535927,
0.005577241536229849,
-0.02659374102950096,
0.022585583850741386,
-0.08972252905368805,
0.0872342512011528,
0.04713393375277519,
0.01645287498831749,
-0.10192596167325974,
-0.011137516237795353,
0.16279488801956177,
0.03546813130378723,
-0.11637935787439346,
-0.10597292333841324,
0.046551596373319626,
0.06196105480194092,
0.01919517293572426,
-0.015599205158650875,
-0.026819437742233276,
0.05045364052057266,
0.1072746217250824,
0.0742284506559372,
0.07193053513765335,
-0.038943417370319366,
0.019044404849410057,
0.002978749107569456,
0.008448539301753044,
0.04206961393356323,
-0.2080090492963791,
0.052802447229623795,
0.04881381243467331,
0.05889647826552391,
0.11163012683391571,
0.05708072707056999,
0.028692111372947693,
-0.12732988595962524,
-0.09857679903507233,
0.02868310920894146,
-0.10981142520904541,
0.0011560166021808982,
0.00887234415858984,
-0.09015951305627823,
-0.007035346236079931,
0.05035562813282013,
-0.0025924337096512318,
-0.05146578699350357,
-0.051275186240673065,
0.062983438372612,
-0.006262515671551228,
0.02450275421142578,
0.04444224759936333,
0.09641874581575394,
0.0153493108227849,
0.057360634207725525,
0.14091458916664124,
-0.10175742954015732,
0.0701601579785347,
-0.019853968173265457,
-0.03370167687535286,
0.0014718098100274801,
-0.09152524918317795,
0.07352573424577713,
0.02506362833082676,
-0.08032692223787308,
0.012369132600724697,
0.08580582588911057,
-0.010943526402115822,
-0.040875405073165894,
0.013427973724901676,
0.0019327817717567086,
-0.027946004644036293,
-0.06983820348978043,
-0.002147950930520892,
-0.07479093968868256,
-0.07227315753698349,
-0.08266565948724747,
-0.108293816447258,
-0.022920243442058563,
-0.018019868060946465,
-0.12394358217716217,
-0.1754167228937149,
-0.01924433745443821,
-0.07606875896453857,
0.056417156010866165,
0.16762259602546692,
-0.04847347363829613,
-0.010030766949057579,
0.025100383907556534,
0.054579902440309525,
0.1108398586511612,
0.0731237381696701,
-0.019524022936820984,
0.03581670671701431,
0.0008935045334510505,
-0.1281723827123642,
0.08135765790939331,
0.008098808117210865,
-0.031413204967975616,
-0.03419006988406181,
-0.17655935883522034,
0.011699669994413853,
-0.01498227659612894,
-0.08822645992040634,
0.08981426805257797,
0.11915634572505951,
0.03636300563812256,
0.12743021547794342,
0.011581924743950367,
-0.02057063579559326,
0.07956837117671967,
0.018239721655845642,
-0.172762930393219,
-0.10375038534402847,
-0.015675920993089676,
-0.05213502049446106,
-0.10146597772836685,
0.0760662853717804,
-0.17034398019313812,
-0.12893161177635193,
0.0826268121600151,
0.06658238917589188,
0.0071205152198672295,
-0.08226972073316574,
-0.026679104194045067,
0.023043973371386528,
-0.03164500370621681,
0.10126376897096634,
-0.09423545747995377,
-0.09048747271299362,
0.16212788224220276,
0.07072582840919495,
0.018659507855772972,
-0.1438596546649933,
0.01802127994596958,
0.0068427990190684795,
0.1108727678656578,
-0.016121283173561096,
-0.11355756968259811,
-0.1297953873872757,
0.007474194280803204,
0.043791286647319794,
0.007740227039903402,
-0.15700918436050415,
-0.0800527036190033,
-0.05963115766644478,
0.03635038807988167,
0.1116483062505722,
-0.02201317623257637,
-0.08742683380842209,
-0.05875479429960251,
0.062133900821208954,
-0.040549054741859436,
-0.06945190578699112,
-0.076741062104702,
-0.004368736408650875,
0.038828372955322266,
0.20244428515434265,
-0.04628889635205269,
-0.030415477231144905,
0.03398820385336876,
0.04427697882056236,
0.03028922528028488,
-0.04294484481215477,
0.02391725778579712,
0.03618559241294861,
0.07088818401098251,
0.03299381956458092,
-0.01481370348483324,
-0.04916611313819885,
-0.019844703376293182,
0.009172030724585056,
-0.12736353278160095,
-0.09248775988817215,
-0.14298634231090546,
-0.01501617580652237,
-0.028019225224852562,
-0.1473362296819687,
-0.041161276400089264,
-0.08937142044305801,
-0.04470721259713173,
-0.17607960104942322,
-0.14170800149440765,
-0.01509029045701027,
0.05230063572525978,
0.18498684465885162,
-0.06534920632839203,
-0.05570518970489502,
-0.07101382315158844,
-0.014473837800323963,
0.12376899272203445,
-0.008125866763293743,
0.0447743758559227,
-0.04172384738922119,
-0.08601494133472443,
-0.0883689820766449,
0.04094840958714485,
-0.04093533754348755,
-0.008141262456774712,
-0.1129528060555458,
-0.1425352394580841,
0.05307924374938011,
-0.03232863172888756,
-0.04975553974509239,
-0.023044738918542862,
-0.01181845460087061,
-0.002634944161400199,
0.018659893423318863,
0.018582025542855263,
0.09178109467029572,
0.06159193068742752,
-0.025453221052885056,
-0.11652588844299316,
-0.06501880288124084,
0.08849580585956573,
0.03695829212665558,
-0.037790752947330475,
0.014135031029582024,
0.0163811556994915,
0.01967526040971279,
-0.02804325520992279,
0.03292649984359741,
0.06535917520523071,
-0.024101031944155693,
-0.017370089888572693,
-0.04398147016763687,
-0.07131103426218033,
-0.07376652210950851,
-0.06136924400925636,
0.04287924990057945,
0.08726666122674942,
-0.15267032384872437,
0.032937586307525635,
-0.06857705116271973,
0.11157944053411484,
-0.02327105775475502,
0.0005189453368075192,
0.007805452216416597,
0.038936369121074677,
0.0032870047725737095,
-0.01997498981654644,
0.004395870957523584,
0.0025039087049663067,
-0.028450658544898033,
-0.026712691411376,
0.04999253898859024,
-0.003001335309818387,
0.05289001762866974,
-0.0565602071583271,
-0.180856853723526,
-0.119237519800663,
-0.05115467682480812,
-0.09927001595497131,
-0.06720626354217529,
-0.09481391310691833,
-0.14375664293766022,
-0.19869835674762726,
-0.06096486374735832,
-0.11141353100538254,
-0.08276095241308212,
0.11621180921792984,
-0.04720301181077957,
-0.05537302419543266,
-0.07155304402112961,
0.03553549945354462,
0.09508710354566574,
-0.04871468245983124,
-0.009909607470035553,
0.037368495017290115,
-0.03763609007000923,
-0.08145849406719208,
-0.11934038251638412,
-0.040157120674848557,
-0.0011576992692425847,
0.02335995063185692,
0.04081204533576965,
0.03980021923780441,
0.09897169470787048,
0.026847470551729202,
-0.030507193878293037,
0.17111244797706604,
-0.0002942855644505471,
-0.14870840311050415,
-0.07203790545463562,
-0.013742256909608841,
-0.07917163521051407,
0.047713376581668854,
0.014376092702150345,
0.11633209884166718,
-0.02272147499024868,
-0.003112149192020297,
-0.06602539122104645,
-0.03141399100422859,
-0.027782632037997246,
0.0008510530460625887,
0.04201478511095047,
-0.016377868130803108,
-0.0735180675983429,
-0.04793580248951912,
-0.05675020441412926,
-0.00739654153585434,
0.008625376038253307,
0.0068854643031954765,
-0.18072012066841125,
-0.06515559554100037,
-0.005493122152984142,
0.060809794813394547,
-0.05844860523939133,
-0.07793392241001129,
-0.07309726625680923,
-0.027192478999495506,
0.04066777974367142,
0.08153168112039566,
0.019669929519295692,
0.05452018231153488,
0.025052405893802643,
0.0764041319489479,
0.08321288973093033,
0.044709667563438416,
0.04955751448869705,
0.02452452853322029,
-0.0796307921409607,
-0.03859725221991539,
-0.05168388783931732,
-0.09060371667146683,
-0.07006656378507614,
0.14797240495681763,
0.08393222093582153,
0.019065143540501595,
-0.0801745355129242,
0.005048719234764576,
-0.007158006075769663,
0.0037679714150726795,
0.11972375959157944,
-0.06250625103712082,
-0.004777809605002403,
-0.12506572902202606,
-0.0717056468129158,
0.06467690318822861,
-0.08459626883268356,
-0.017724787816405296,
-0.013605494052171707,
0.025300029665231705,
-0.06294165551662445,
-0.06457561254501343,
-0.053501665592193604,
0.01914108917117119,
-0.002183003816753626,
-0.003734180238097906,
-0.04185418784618378,
-0.044988106936216354,
0.007982133887708187,
0.06386245787143707,
-0.1382189393043518,
0.08270759135484695,
0.041024353355169296,
-0.028236115351319313,
-0.0010216189548373222,
0.04407176002860069,
-0.07047807425260544,
0.03395587205886841,
0.07765316963195801,
-0.06639820337295532,
-0.05216800048947334,
-0.12457066029310226,
0.029609480872750282,
0.017519913613796234,
0.10850978642702103,
0.018404632806777954,
-0.08799591660499573,
-0.12108306586742401,
0.13655301928520203,
0.13879211246967316,
0.04860454052686691,
-0.10412904620170593,
-0.07513787597417831,
-0.01991756074130535,
0.08432379364967346,
0.04428926110267639,
-0.06552267074584961,
0.010719693265855312,
0.03049229271709919,
-0.005621164571493864,
0.031938593834638596,
0.10380556434392929,
0.14853528141975403,
0.03965572640299797,
-0.09983626753091812,
-0.10959619283676147,
-0.02158983238041401,
-0.002850156743079424,
-0.06567046046257019,
-0.13536393642425537,
-0.12051697820425034,
-0.06138249486684799,
0.06082125008106232,
-0.003555572358891368,
-0.10243820399045944,
-0.06682036072015762,
0.13638143241405487,
0.052525345236063004,
0.059734709560871124,
-0.07715070992708206,
-0.06088458374142647,
-0.02346165105700493,
-0.05319606885313988,
0.027008146047592163,
-0.10445602983236313,
-0.11403091251850128,
0.01743393950164318,
-0.03061545267701149,
0.018033411353826523,
-0.007109266705811024,
0.03557658940553665,
0.04682347923517227,
0.050884757190942764,
-0.06645745038986206,
0.06404213607311249,
-0.016888584941625595,
0.0058493162505328655,
-0.0006957148434594274,
0.05618910491466522,
-0.044297341257333755,
0.006728700362145901,
-0.13317720592021942,
-0.04332948476076126,
0.13412167131900787,
0.0017762018833309412,
-0.0035814051516354084,
-0.21641281247138977,
-0.1153927892446518,
0.06923729926347733,
-0.02447214350104332,
0.008849050849676132,
0.0932544618844986,
0.06459776312112808,
0.06830137968063354,
0.09759723395109177,
0.06366346776485443,
0.016094699501991272,
-0.02918463945388794,
0.0504952035844326,
-0.013112475164234638,
-0.005143438931554556,
-0.09550952911376953,
0.06567886471748352,
0.08821646124124527,
-0.015347184613347054,
0.07818782329559326,
-0.0737399309873581,
0.006351578049361706,
-0.04450397193431854,
-0.06217718869447708,
-0.03786842152476311,
-0.04501909390091896,
0.028582042083144188,
0.020146526396274567,
0.06694459170103073,
0.06756484508514404,
0.05813809484243393,
0.015152265317738056,
-0.034164637327194214,
-0.06399452686309814,
-0.0694626122713089,
-0.08180031925439835,
-0.0525786466896534,
0.05926795303821564,
-0.042928118258714676,
-0.04533986747264862,
0.03601223975419998,
-0.135189488530159,
0.1669933944940567,
-0.045743316411972046,
-0.02025492675602436,
-0.23286522924900055,
-0.19774726033210754,
0.08440152555704117,
0.056446440517902374,
-0.0057477024383842945,
0.027155863121151924,
-0.05236467346549034,
-0.07891788333654404,
-0.01045981328934431,
0.05552654713392258,
0.0790533795952797,
0.14908313751220703,
0.0409247949719429,
0.0012529704254120588,
-0.029184047132730484,
0.025091785937547684,
0.044401492923498154,
-0.029997004196047783,
-0.0863785445690155,
-0.06915007531642914,
-0.179470494389534,
-0.03982948884367943,
-0.01613086462020874,
-0.027142340317368507,
-0.01551874727010727,
0.03558298200368881,
0.05544599890708923,
-0.02588098868727684,
0.11984767019748688,
-0.009104888886213303,
0.1174594908952713,
0.11013626307249069,
0.05979973077774048,
0.01467390637844801,
0.0012135350843891501,
0.009503697045147419,
0.002637958386912942,
-0.021370219066739082,
0.0394328348338604,
-0.01208534836769104,
-0.007877234369516373,
0.0016482884529978037,
-0.12556886672973633,
-0.15572652220726013,
-0.11896492540836334,
-0.023176876828074455,
0.029226498678326607,
-0.03953693434596062,
-0.01935565285384655,
0.051781632006168365,
0.19526098668575287,
0.08924491703510284,
-0.02922784723341465,
0.02691289782524109,
-0.05705840885639191,
0.1264650821685791,
0.08571585267782211,
-0.0005095997476018965,
-0.07843571156263351,
-0.10966258496046066,
0.058525845408439636,
-0.043187838047742844,
0.06046608090400696,
-0.05489201843738556,
0.13292081654071808,
0.11808457225561142,
-0.031053824350237846,
-0.031205924227833748,
-0.0764482319355011,
-0.15076108276844025,
-0.11470761150121689,
-0.0645156055688858,
-0.009608740918338299,
-0.13224059343338013,
-0.05700623244047165,
-0.019678262993693352,
0.13541388511657715,
0.013622952625155449,
0.005487935617566109,
0.006942410487681627,
0.06579551845788956,
0.06260567903518677,
0.04918842017650604,
-0.03238356485962868,
-0.17075878381729126,
-0.0021059969440102577,
0.013011698611080647,
0.07256290316581726,
-0.07583565264940262,
-0.020390862599015236,
0.018777646124362946,
0.029925163835287094,
0.09035046398639679,
0.06613622605800629,
-0.002986556151881814,
-0.06087292730808258,
-0.13442456722259521,
0.09796323627233505,
0.15071788430213928,
0.07287862151861191,
-0.11268877238035202,
-0.1482103168964386,
0.048857830464839935,
0.03389700874686241,
0.09676385670900345,
-0.036745913326740265,
-0.017036104574799538,
-0.07523351907730103,
0.11369451135396957,
0.16750329732894897,
0.10568904876708984,
0.08432833850383759,
-0.06568688154220581,
0.04163692146539688,
-0.0732218399643898,
-0.08387596160173416,
0.0173525121062994,
-0.06346935778856277,
0.01816301979124546,
-0.13361281156539917,
-0.09387010335922241,
-0.03213369473814964,
0.08638790994882584,
-0.03064483031630516,
-0.02785601280629635,
0.0006639034836553037,
0.001119546010158956,
0.08627219498157501,
0.023406576365232468,
0.02592628449201584,
-0.04538969695568085,
0.05888402462005615,
-0.039811260998249054,
0.015194345265626907,
-0.017320699989795685,
0.06288547813892365,
-0.00882860366255045,
-0.005076693370938301,
0.04333171620965004,
0.02928145043551922,
0.042168669402599335,
0.015007301233708858,
0.02524768002331257,
0.08384238928556442,
-0.003609182545915246,
-0.05448422580957413,
-0.04409947618842125,
-0.04881560802459717,
-0.030994458124041557,
0.012137350626289845,
-0.10332159698009491,
-0.10318855941295624,
-0.027931442484259605,
0.028929080814123154,
-0.07831421494483948,
0.03399229422211647,
0.07817934453487396,
0.130924254655838,
-0.01223274040967226,
-0.09170178323984146,
0.025991743430495262,
0.0027264354284852743,
0.014529180712997913,
0.02419300191104412,
0.04044513776898384,
-0.09082350134849548,
-0.041278962045907974,
-0.0259683970361948,
0.010621032677590847,
-0.03054782934486866,
-0.054861824959516525,
0.02326267585158348,
0.04100356623530388,
0.07045987248420715,
-0.13308627903461456,
-0.1767839789390564,
-0.28390344977378845,
0.10916375368833542,
-0.00018876678950618953,
0.07007792592048645,
-0.06879404187202454,
0.008643064647912979,
0.0473182387650013,
0.07511962950229645,
0.09677550196647644,
0.16024094820022583,
0.12248396128416061,
0.0014427772257477045,
-0.0056413570418953896,
-0.03435629606246948,
0.04755910485982895,
0.0457410104572773,
-0.08144815266132355,
0.06823398917913437,
0.05430469661951065,
0.02484258823096752,
0.04282690957188606,
0.06320322304964066,
0.05260692164301872,
-0.05572788789868355,
-0.023074328899383545,
0.016278458759188652,
0.15036541223526,
0.011928517371416092,
-0.12630793452262878,
0.07766290009021759,
-0.05350586026906967,
-0.09365219622850418,
-0.19066879153251648,
-0.21609798073768616,
-0.04223190248012543,
0.061677634716033936,
0.0166222732514143,
-0.02263587713241577,
0.07260223478078842,
0.03719186410307884,
0.06320089101791382,
-0.036357708275318146,
-0.10442772507667542,
-0.0509193055331707,
0.03737214580178261,
-0.027582481503486633,
-0.013254547491669655,
-0.10751776397228241,
-0.01481586042791605,
0.05310848727822304,
-0.03961946815252304,
0.07098287343978882,
-0.13688282668590546,
-0.05352647602558136,
0.10729651898145676,
0.015116388909518719,
0.01534293033182621,
-0.13332311809062958,
-0.09968062490224838,
0.053384456783533096,
-0.027911681681871414,
-0.04238363727927208,
0.014346055686473846,
0.08291588723659515,
0.09444841742515564,
0.07600253075361252,
-0.17376193404197693,
-0.12704068422317505,
-0.04955146834254265,
0.07471483945846558,
-0.014890593476593494,
0.06831425428390503,
0.004095724318176508,
-0.10493522882461548,
-0.07572370022535324,
-0.003106822492554784,
0.15286879241466522,
0.10979557037353516,
-0.024054551497101784,
-0.13996127247810364,
-0.05821589007973671,
0.13676172494888306,
0.10934519022703171,
0.04304241016507149,
-0.14776886999607086,
-0.021948065608739853,
-0.08272872120141983,
0.051002759486436844,
0.1275162249803543,
-0.05955185741186142,
0.12131381034851074,
0.04119767248630524,
0.08376797288656235,
0.0440731942653656,
0.06448114663362503,
0.062247518450021744,
-0.04934532940387726,
0.0811731368303299,
0.058980800211429596,
0.05811755731701851,
-0.04632747173309326,
0.03747045248746872,
-0.05696743354201317,
0.04438404738903046,
0.12567949295043945,
-0.05647265538573265,
-0.02635808102786541,
0.013386071659624577,
0.1081509217619896,
0.042691830545663834,
-0.046933863312006,
0.010998329147696495,
-0.09478144347667694,
-0.09567508846521378,
-0.003319063689559698,
0.05078598111867905,
-0.0026548802852630615,
0.035787250846624374,
-0.011515503749251366,
-0.03871648758649826,
0.03692273423075676,
0.026034507900476456,
-0.022403627634048462,
-0.08914009481668472,
-0.043779030442237854,
0.10720998793840408,
0.048429377377033234,
0.16240732371807098,
0.1273171305656433,
-0.02840888686478138,
-0.06345539540052414,
0.10506583005189896,
0.17052514851093292,
0.15135058760643005,
-0.03226098790764809,
-0.2018074244260788,
-0.027918297797441483,
-0.06734588742256165,
-0.09073159843683243,
-0.19474723935127258,
-0.20831763744354248,
-0.04687555134296417,
-0.034172795712947845,
-0.12818284332752228,
-0.07251767814159393,
-0.057341497391462326,
-0.016871055588126183,
-0.03325635939836502,
0.00024372574989683926,
-0.023802943527698517,
0.04802405834197998,
0.007863633334636688,
-0.003939810674637556,
-0.11039521545171738,
0.031538862735033035,
-0.038821637630462646,
0.009329542517662048,
-0.023623410612344742,
-0.004057256039232016,
0.13637906312942505,
0.08404450863599777,
-0.017086252570152283,
-0.06463658064603806,
0.11646083742380142,
0.07713838666677475,
0.11591847985982895,
0.09590752422809601,
0.06829938292503357,
0.10493044555187225,
0.06963202357292175,
0.028751162812113762,
0.027594782412052155,
0.0898604691028595,
0.06297002732753754,
-0.03728605806827545,
-0.0969771295785904,
-0.06370613723993301,
-0.051095541566610336,
-0.07085826992988586,
0.029524153098464012,
0.018595213070511818,
-0.2721680700778961,
-0.13081972301006317,
-0.09838702529668808,
-0.13986839354038239,
-0.07862265408039093,
0.005990574602037668,
-0.03803243115544319,
-0.02107098698616028,
0.03924103453755379,
0.03591092303395271,
-0.013636474497616291,
0.09259769320487976,
0.018620571121573448,
-0.038034338504076004,
0.07079289853572845,
-0.04178239777684212,
-0.02940947562456131,
-0.045002929866313934,
-0.015176731161773205,
0.1359950304031372,
-0.07089967280626297,
0.08577804267406464,
0.04130331054329872,
-0.00744565250352025,
-0.14581865072250366,
0.19364334642887115,
0.10583153367042542,
0.08832410722970963,
-0.013324208557605743,
-0.04228998348116875,
-0.03913998231291771,
-0.08580061793327332,
-0.10509806126356125,
-0.05430774390697479,
-0.10569454729557037,
0.07760636508464813,
0.010713807307183743,
-0.07213731855154037,
-0.01662016473710537,
0.08603467047214508,
-0.0029102773405611515,
-0.020469028502702713,
-0.0624893419444561,
-0.00014686709619127214,
0.037115368992090225,
-0.19377364218235016,
0.01787308044731617,
0.1088009923696518,
0.03717254847288132,
0.10147465020418167,
0.04883087798953056,
0.08395570516586304,
0.12395080178976059,
0.053460296243429184,
-0.03326217085123062,
0.11918187141418457,
0.025726284831762314,
0.03955228626728058,
-0.0666765570640564,
-0.17636646330356598,
0.011356855742633343,
0.051386550068855286,
0.013188972137868404,
0.029220012947916985,
0.056735336780548096,
-0.0429384708404541,
-0.012405430898070335,
0.009395820088684559,
-0.07061242312192917,
0.03955257311463356,
-0.012526648119091988,
-0.06544890254735947,
0.04887273535132408,
-0.012009401805698872,
0.04307796061038971,
-0.0792362168431282,
-0.10344827175140381,
-0.0012500062584877014,
-0.09272380918264389,
0.018724849447607994,
0.014335738494992256,
0.020054837688803673,
0.005768641363829374,
-0.010744184255599976,
0.037233926355838776,
-0.004540554713457823,
-0.11761001497507095,
0.02325407601892948,
-0.03140442818403244,
-0.000869931245688349,
0.049015145748853683,
-0.007588322274386883,
-0.03400048613548279,
0.05186178535223007,
-0.0339900366961956,
-0.007496741134673357,
0.007593200542032719,
0.052665840834379196,
0.05589589104056358,
-0.061966754496097565,
-0.09888988733291626,
-0.1100543960928917,
0.053475819528102875,
-0.048280566930770874,
-0.0894937664270401,
-0.04265212640166283,
0.007804843131452799,
0.1440424919128418,
0.03387700766324997,
0.022962111979722977,
0.02164548635482788,
-0.02865191362798214,
-0.04534553736448288,
-0.03889158368110657,
-0.02181830443441868,
-0.004374641925096512,
0.0620468407869339,
0.06161058321595192,
0.0003223504463676363,
-0.0045241075567901134,
0.04766833037137985,
-0.015573237091302872,
-0.08290605992078781,
0.04835111275315285,
-0.029715174809098244,
-0.10468263179063797,
-0.21003098785877228,
-0.1148289293050766,
0.06504163891077042,
-0.02542204223573208,
-0.008517637848854065,
0.02787182852625847,
0.06533696502447128,
0.03512697294354439,
0.030924057587981224,
0.04082575440406799,
-0.10050921887159348,
0.01894034817814827,
0.05732322111725807,
0.09486378729343414,
-0.12778827548027039,
-0.1250683069229126,
0.020816940814256668,
0.02649219147861004,
-0.010933207347989082,
0.05013781040906906,
0.04863715171813965,
0.09103619307279587,
0.024831591174006462,
-0.07704175263643265,
0.12899504601955414,
0.14084850251674652,
0.07641121000051498,
0.01601453684270382,
-0.1369110345840454,
0.06397835165262222,
0.09991979598999023,
-0.0075476281344890594,
-0.08432082831859589,
-0.12136496603488922,
0.03781512379646301,
0.03754136711359024,
-0.19642731547355652,
0.03457973152399063,
-0.011634185910224915,
-0.01940867304801941,
-0.05576936528086662,
-0.15299342572689056,
0.033818021416664124,
0.06361157447099686,
-0.052574966102838516,
-0.1199420690536499,
-0.13678698241710663,
0.017730990424752235,
-0.007173668593168259,
-0.014476721175014973,
0.040759798139333725,
0.015882184728980064,
-0.024947164580225945,
-0.05023328214883804,
0.06543391942977905,
0.10282248258590698,
0.134683758020401,
-0.10019290447235107,
-0.04836488887667656,
0.015575028955936432,
0.00904818158596754,
0.005282326601445675,
0.018618706613779068,
0.05719376355409622,
-0.034668292850255966,
0.02348746918141842,
0.005633250344544649,
-0.05109024792909622,
-0.09495311975479126,
0.12161919474601746,
0.06522509455680847,
0.05237188562750816,
-0.010993968695402145,
-0.15733939409255981,
0.0183927770704031,
-0.09222550690174103,
0.002729840576648712,
-0.14834560453891754,
-0.05918825417757034,
0.015523805283010006,
-0.02743762731552124,
-0.0913878008723259,
-0.015787631273269653,
0.16093991696834564,
-0.01226605661213398,
0.04373600333929062,
0.02779632806777954,
-0.028164129704236984,
-0.0490625835955143,
-0.011972435750067234,
-0.05184789001941681,
-0.07125301659107208,
-0.057323161512613297,
0.019872093573212624,
-0.03900556266307831,
-0.1255049854516983,
-0.24317415058612823,
-0.1504896581172943,
0.027549156919121742,
0.1485377699136734,
0.08127564191818237,
0.1752847284078598,
0.11706364154815674,
0.0756390243768692,
0.13450320065021515,
0.14245258271694183,
0.11268220096826553,
-0.013697149232029915,
-0.05635621026158333,
0.06740511953830719,
-0.09774469584226608,
0.016945229843258858,
0.016894498839974403,
0.027071183547377586,
0.1873602569103241,
0.12983202934265137,
-0.012477120384573936,
-0.031944647431373596,
-0.020853489637374878,
-0.04949808120727539,
-0.1011296883225441,
-0.0038307502400130033,
-0.016712743788957596,
-0.021009882912039757,
0.0398673415184021,
0.14835429191589355,
0.11975560337305069,
0.0016428109956905246,
0.04143843054771423,
0.03175732120871544,
0.018774067983031273,
-0.116652712225914,
0.0038710918743163347,
-0.04520970582962036,
0.009820706211030483,
0.09853263199329376,
0.027957729995250702,
-0.08225367963314056,
0.022732028737664223,
0.007031557150185108,
0.09530298411846161,
0.03077530302107334,
-0.033898983150720596,
-0.035800058394670486,
-0.03563131019473076,
0.001980910310521722,
0.1866597980260849,
0.06582809239625931,
-0.03758474439382553,
-0.0865045115351677,
-0.005668298806995153,
0.10563281923532486,
-0.018772413954138756,
0.01631116308271885,
0.030544187873601913,
-0.03290862217545509,
-0.04359063878655434,
-0.05480435863137245,
0.018122879788279533,
-0.0623013898730278,
0.058199770748615265,
0.007063147611916065,
-0.07783418893814087,
0.03000408224761486,
0.12328683584928513,
0.23434951901435852,
0.10529555380344391,
-0.061547353863716125,
0.02563704177737236,
-0.11733593046665192,
-0.10969845205545425,
0.0010811997344717383,
0.062210869044065475,
-0.001867094892077148,
-0.11119261384010315,
-0.08280698210000992,
-0.056890346109867096,
-0.03460993617773056,
0.12908707559108734,
0.04545126110315323,
-0.16032180190086365,
-0.09762613475322723,
0.07639836519956589,
-0.009586742147803307,
-0.02627972885966301,
0.006425774190574884,
0.07518595457077026,
0.03507924824953079,
0.07452995330095291,
0.07177369296550751,
0.10437895357608795,
-0.11183749884366989,
-0.07063493877649307,
-0.004988508764654398,
-0.004784017335623503,
-0.009002088569104671,
-0.005996968597173691,
-0.073882095515728,
0.07536803930997849,
0.017627036198973656,
0.11580891907215118,
0.06327123939990997,
-0.03449350595474243,
-0.0006590589182451367,
-0.04780833423137665,
-0.040196049958467484,
0.02576192282140255,
-0.026433167979121208,
0.03862805292010307,
-0.017783112823963165,
-0.09361010789871216,
0.11184363812208176,
0.13934560120105743,
-0.012285825796425343,
-0.16313312947750092,
-0.10053972899913788,
-0.0689302533864975,
0.12233792245388031,
0.11101461946964264,
0.014896044507622719,
0.004984235856682062,
-0.018492400646209717,
0.05261825770139694,
0.06658940762281418,
-0.10142290592193604,
-0.010011814534664154,
0.019936298951506615,
-0.01551892887800932,
0.03980761393904686,
-0.004452241584658623,
0.11174486577510834,
0.1234952062368393,
0.10364975035190582,
0.0782373771071434,
-0.0009628511033952236,
0.03625873848795891,
-0.04846532270312309,
-0.06259527057409286,
-0.08559022098779678,
0.06747907400131226,
0.012330843135714531,
0.08290131390094757,
-0.048068270087242126,
-0.04451928287744522,
-0.018612079322338104,
0.11074309051036835,
0.004750253167003393,
0.021086152642965317,
-0.04334387555718422,
0.0185070913285017,
-0.008066296577453613,
0.06340492516756058,
-0.0943029448390007,
-0.06428777426481247,
0.08910221606492996,
0.11437598615884781,
-0.09997936338186264,
-0.0871116891503334,
0.0035055268090218306,
0.0415985994040966,
0.0671309158205986,
0.07757338136434555,
-0.025079548358917236,
0.01018503401428461,
0.09069491922855377,
0.019584672525525093,
0.06543343514204025,
0.06576941907405853,
0.015499469824135303,
-0.06849349290132523,
-0.03499110788106918,
-0.0030932703521102667,
0.16270217299461365,
0.04429164156317711,
-0.04077425226569176,
0.06558909267187119,
0.12470114976167679,
0.04700688272714615,
0.017102189362049103,
-0.14584340155124664,
-0.24551062285900116,
-0.08622495085000992,
-0.0441223606467247,
-0.03446240350604057,
-0.028992991894483566,
0.006270979531109333,
0.027178365737199783,
0.05997934564948082,
-0.08160076290369034,
-0.17833159863948822,
0.021050531417131424,
-0.0270583126693964,
0.03165857121348381,
0.03830894082784653,
0.15292535722255707,
0.23078876733779907,
0.018268557265400887,
-0.048921748995780945,
0.07108963280916214,
-0.057232312858104706,
0.003226232947781682,
-0.01799849048256874,
-0.032437264919281006,
-0.025322791188955307,
-0.008528019301593304,
0.13500989973545074,
0.10270929336547852,
0.06926241517066956,
0.043165724724531174,
0.0818646028637886,
-0.04252903163433075,
-0.023875735700130463,
-0.09341633319854736,
-0.031085645779967308,
-0.15170270204544067,
-0.12853920459747314,
0.002373297931626439,
0.1930905431509018,
-0.007731307297945023,
-0.04524591565132141,
-0.18464234471321106,
-0.09915795922279358,
-0.06383601576089859,
0.053695689886808395,
-0.009659452363848686,
-0.06083150953054428,
-0.20231576263904572,
-0.0005515470984391868,
0.028695333749055862,
-0.07342679798603058,
-0.05267869681119919,
-0.010891792364418507,
-0.051583871245384216,
0.05018800497055054,
0.05667032673954964,
0.03398042917251587,
0.09073486179113388,
0.037187956273555756,
-0.003705998882651329,
0.007664302829653025,
-0.009746129624545574,
-0.06841946393251419,
-0.05621233582496643,
-0.017023244872689247,
-0.026709269732236862,
-0.07183107733726501,
0.022974133491516113,
0.02697604149580002,
0.008549151942133904,
0.13326804339885712,
0.17832928895950317,
-0.007521030027419329,
-0.03700244799256325,
-0.020069506019353867,
0.03279929235577583,
-0.19616951048374176,
-0.047838449478149414,
-0.010557453148066998,
0.008493228815495968,
0.00021275648032315075,
0.11151619255542755,
-0.01502973772585392,
-0.03130442649126053,
-0.09791136533021927,
0.012009060010313988,
0.11457789689302444,
-0.06207418814301491,
-0.09307679533958435,
-0.013748576864600182,
-0.07696782797574997,
0.020027659833431244,
-0.04035654664039612,
-0.05662354826927185,
0.08754340559244156,
0.020476171746850014,
0.09999443590641022,
0.00886134896427393,
-0.04663703963160515,
-0.003658057190477848,
0.09939336031675339,
0.05208645388484001,
-0.13337694108486176,
-0.12600749731063843,
0.022173060104250908,
0.0340554378926754,
0.1883448362350464,
0.0074778771959245205,
0.017702825367450714,
0.02154119499027729,
0.03178180381655693,
0.23447176814079285,
0.05011006444692612,
-0.11681423336267471,
-0.038557469844818115,
-0.11760162562131882,
-0.14632239937782288,
-0.0819224864244461,
-0.07692641019821167,
-0.005705381277948618,
-0.06429540365934372,
0.14361904561519623,
0.177788645029068,
-0.04069586098194122,
-0.11494409292936325,
-0.03149639815092087,
0.12093716114759445,
-0.03279414400458336,
-0.09188087284564972,
-0.037310875952243805,
-0.003183571854606271,
-0.0767906978726387,
-0.010821823962032795,
-0.11899010837078094,
0.06458815932273865,
-0.09135708957910538,
-0.2182261049747467,
-0.10603664070367813,
0.04821877181529999,
0.08401352167129517,
0.02245878055691719,
-0.018597513437271118,
-0.07883155345916748,
-0.03208761662244797,
0.09006441384553909,
-0.007528297603130341,
-0.12268836796283722,
-0.07518767565488815,
0.023791568353772163,
0.11062553524971008,
0.042291827499866486,
-0.1867026686668396,
0.02726280502974987,
0.03813880681991577,
0.12069512903690338,
0.0635078102350235,
-0.014169693924486637,
0.06401924788951874,
0.046536464244127274,
-0.07320865243673325,
-0.06880252063274384,
-0.17751967906951904,
-0.08373820036649704,
0.0015212049474939704,
-0.035997990518808365,
-0.10264246165752411,
-0.008364110253751278,
-0.07828890532255173,
0.028824038803577423,
-0.03261031210422516,
0.08300148695707321,
-0.040394704788923264,
-0.0010619756067171693,
-0.06028544157743454,
-0.01632741652429104,
0.15829557180404663,
-0.25698983669281006,
-0.1885247826576233,
-0.008602122776210308,
0.07136248052120209,
-0.11568915843963623,
0.057244375348091125,
-0.03752894699573517,
0.03370759263634682,
0.027743671089410782,
0.07395874708890915,
0.02080889791250229,
-0.0013506633695214987,
0.011479122564196587,
0.04516172781586647,
0.0012654901947826147,
-0.04311558976769447,
0.017180517315864563,
0.10002128034830093,
0.07285583019256592,
-0.09319493174552917,
-0.06463934481143951,
-0.03461635857820511,
0.04692387953400612,
-0.029195448383688927,
0.021399522200226784,
-0.04641473665833473,
0.0161445252597332,
0.05836465582251549,
0.025554034858942032,
0.00831982959061861,
0.041995808482170105,
0.005614019930362701,
-0.04879281669855118,
0.0033924004528671503,
0.0008888568845577538,
-0.10189362615346909,
-0.0029743039049208164,
-0.0016073145670816302,
0.11956332623958588,
-0.09636665880680084,
-0.07822422683238983,
-0.18684904277324677,
0.010729716159403324,
-0.040394943207502365,
-0.05661769211292267,
-0.11532039940357208,
-0.1349753588438034,
-0.17537739872932434,
-0.02258606068789959,
-0.08704891800880432,
-0.05566267669200897,
-0.11529894918203354,
-0.03256994113326073,
0.04707690328359604,
0.024007167667150497,
-0.06386349350214005,
-0.04625591263175011,
-0.11051652580499649,
0.028905052691698074,
-0.13010503351688385,
0.006649327464401722,
0.02298573963344097,
-0.023031849414110184,
-0.07350178807973862,
-0.05722179263830185,
-0.030145103111863136,
0.12458486109972,
-0.01783810555934906,
0.0599014051258564,
0.11492516100406647,
0.12352057546377182,
0.09917347133159637,
0.06650768965482712,
-0.01751585118472576,
-0.03745580092072487,
-0.07276644557714462,
-0.0007508935523219407,
-0.04292086139321327,
-0.16149286925792694,
0.07551614195108414,
0.08604838699102402,
0.10036322474479675,
-0.0015496191335842013,
-0.02509373612701893,
0.05540991947054863,
0.04350562393665314,
0.023494992405176163,
-0.0036888413596898317,
-0.011893936432898045,
-0.04829766973853111,
-0.0017785584786906838,
-0.03428785130381584,
-0.010129029862582684,
0.03845958039164543,
-0.06380738317966461,
0.037933409214019775,
-0.03749917075037956,
-0.02365383878350258,
-0.022172769531607628,
-0.04484965279698372,
-0.00428272970020771,
-0.016050109639763832,
-0.10905978828668594,
-0.021785983815789223,
0.07909692078828812,
0.125001922249794,
-0.051924578845500946,
-0.0326005220413208,
-0.13011421263217926,
-0.08116871118545532,
0.004855775274336338,
0.0011335094459354877,
0.14102503657341003,
0.006305878981947899,
-0.10401435196399689,
-0.05413302779197693,
0.09188361465930939,
0.10830245167016983,
0.12306275963783264,
-0.18605490028858185,
-0.14940674602985382,
-0.044089850038290024,
0.026425732299685478,
0.17423388361930847,
0.02108113281428814,
0.05442285165190697,
-0.03237810358405113,
0.00695325993001461,
0.05293955281376839,
0.03276011347770691,
-0.12908750772476196,
0.008633443154394627,
-0.09984823316335678,
-0.09055143594741821,
0.009653955698013306,
-0.025059103965759277,
-0.08151527494192123,
-0.1762969195842743,
-0.03736063838005066,
-0.04132447391748428,
0.05325512960553169,
-0.03043496608734131,
-0.15663547813892365,
-0.031111877411603928,
-0.05655302479863167,
-0.07009878009557724,
0.0281321220099926,
0.07692684233188629,
0.03010808303952217,
-0.021173791959881783,
0.04044494405388832,
0.020382674410939217,
-0.05293045938014984,
-0.03243772312998772,
0.05935388058423996,
0.0067154522985219955,
0.04988081753253937,
0.10488526523113251,
0.03759866580367088,
0.03146300092339516,
-0.006040981505066156,
0.03432317450642586,
-0.012104921042919159,
-0.1373414695262909,
0.011650701984763145,
0.019500216469168663,
-0.04007658362388611,
-0.002490058308467269,
-0.09089735150337219,
0.024480974301695824,
-0.08457078039646149,
-0.0528988316655159,
0.03545822575688362,
0.16158168017864227,
0.043614763766527176,
-0.002897613449022174,
0.04227788373827934,
0.08526355773210526,
0.21100153028964996,
-0.02369004487991333,
0.06337349116802216,
0.19875088334083557,
0.13144783675670624,
0.017949620261788368,
0.05203595757484436,
0.11239498108625412,
0.021843191236257553,
-0.05477520078420639,
-0.053601764142513275,
-0.10237357765436172,
0.018782587721943855,
-0.06218437850475311,
0.09000833332538605,
0.07587801665067673,
-0.0864928737282753,
0.022468313574790955,
-0.059696465730667114,
-0.02867918461561203,
-0.15104661881923676,
-0.08314383774995804,
0.0011563105508685112,
-0.033082205802202225,
0.05808042362332344,
-0.16189709305763245,
-0.06395555287599564,
-0.08958252519369125,
-0.062419261783361435,
-0.05925473943352699,
-0.15852728486061096,
-0.11360892653465271,
-0.10999610275030136,
-0.036035917699337006,
0.018813975155353546,
-0.02826884388923645,
0.0795513316988945,
0.1130373626947403,
0.006172586232423782,
0.08063455671072006,
-0.013927648775279522,
0.19340793788433075,
0.1539929360151291,
-0.03190324455499649,
0.16947074234485626,
0.2791961133480072,
0.04163295775651932,
0.012456229887902737,
-0.016591612249612808,
3.7235022318782285e-05,
0.041096281260252,
0.01881079375743866,
-0.03342737630009651,
0.04821699857711792,
-0.047067247331142426,
-0.05335570126771927,
-0.0018259503412991762,
0.035033777356147766,
-0.0034832796081900597,
-0.09187030047178268,
-0.20449703931808472,
0.06339297443628311,
-0.09340296685695648,
-0.05481483042240143,
-0.10622388124465942,
-0.023107273504137993,
-0.15803366899490356,
-0.09083468466997147,
-0.08132949471473694,
-0.12826991081237793,
-0.08972793817520142,
0.02325480617582798,
0.0056124222464859486,
0.05479345843195915,
0.143632709980011,
0.15648268163204193,
-0.10083141177892685,
-0.012235634960234165,
0.10769045352935791,
0.07529950141906738,
-0.03491014987230301,
0.012209206819534302,
0.09794289618730545,
0.18125484883785248,
0.015120647847652435,
0.06103788688778877,
0.22761768102645874,
0.08996295183897018,
-0.02168489247560501,
-0.07678478956222534,
-0.12139715999364853,
0.05696393549442291,
0.04726873338222504,
0.0034475771244615316,
-0.03563539683818817,
0.029160158708691597,
0.005508123897016048,
0.01050607766956091,
0.0902385339140892,
0.07298174500465393,
0.08141380548477173,
0.027194038033485413,
-0.061971791088581085,
0.007690683007240295,
-0.04242793843150139,
-0.003941332455724478,
0.01792963035404682,
-0.035662516951560974,
-0.0427272692322731,
-0.010718746110796928,
0.08023753017187119,
0.0393507219851017,
-0.05277002230286598,
0.03257790207862854,
-0.06531426310539246,
-0.011199825443327427,
0.031230874359607697,
0.04448041692376137,
0.07954715937376022,
0.02083253674209118,
-0.024123016744852066,
0.025271743535995483,
-0.03201746568083763,
0.012925751507282257,
-0.01518101617693901,
-0.005978305358439684,
0.08162865042686462,
0.11298379302024841,
0.10735681653022766,
-0.05093177780508995,
-0.10936898738145828,
0.03255017101764679,
0.08834785968065262,
0.05112152546644211,
0.03845004364848137,
-0.031138572841882706,
-0.04838451370596886,
-0.04649393633008003,
-0.0295285452157259,
0.0715048611164093,
-0.030916528776288033,
0.05843276157975197,
0.012530898675322533,
0.05133706331253052,
0.029921893030405045,
-0.042311880737543106,
0.050708573311567307,
0.11139524728059769,
0.01871492899954319,
-0.023792492225766182,
-0.1477760672569275,
-0.04458899796009064,
0.018567083403468132,
0.119925357401371,
0.061841290444135666,
-0.08547715097665787,
-0.031253594905138016,
-0.030696112662553787,
0.01743428036570549,
0.013970823958516121,
0.010125539265573025,
-0.08065411448478699,
-0.06921019405126572,
0.0077810767106711864,
0.00454144598916173,
-0.02204662375152111,
0.037527233362197876,
-0.044208478182554245,
0.06934775412082672,
0.06732207536697388,
-0.012157916091382504,
-0.03936382383108139,
0.009613839909434319,
0.08019319921731949,
0.01286731380969286,
-0.05654703825712204,
0.013540524989366531,
0.10521960258483887,
-0.03843642398715019,
-0.03073728270828724,
-0.05610765144228935,
0.15116310119628906,
0.0846843421459198,
0.03705424442887306,
0.1061859056353569,
0.07394594699144363,
0.02644391544163227,
0.10397687554359436,
-0.03035804070532322,
0.03326340764760971,
0.08332765847444534,
-0.0834835097193718,
-0.04681616649031639,
-0.08422287553548813,
-0.049546558409929276,
0.17021718621253967,
-0.05663791671395302,
-0.007659327704459429,
-0.0299611184746027,
0.1116778776049614,
0.03512643650174141,
-0.05694591626524925,
0.016856972128152847,
0.16826963424682617,
0.13387922942638397,
0.03653803467750549,
-0.017968520522117615,
0.07768825441598892,
0.03706816956400871,
-0.0002332530275452882,
-0.06426027417182922,
0.036023400723934174,
0.007687215227633715,
0.08618427067995071,
-0.04758038744330406,
-0.012117600999772549,
0.10123330354690552,
0.09027037024497986,
0.1209012120962143,
0.04943631589412689,
-0.10099054872989655,
0.053975239396095276,
0.08869045227766037,
-0.021264465525746346,
-0.05354977399110794,
-0.0229096207767725,
0.007802520412951708,
-0.011913356371223927,
-0.040290381759405136,
-0.0467587485909462,
-0.06561161577701569,
0.03388107195496559,
0.07088987529277802,
-0.01116512343287468,
-0.005589427892118692,
0.009007802233099937,
-0.0028360518626868725,
-0.009736686013638973,
0.12081161886453629,
0.08229733258485794,
0.17681516706943512,
0.06458539515733719,
0.03800664469599724,
0.0708136335015297,
0.1088179424405098,
0.16325077414512634,
-0.05771775543689728,
-0.012801336124539375,
0.0005557792610488832,
0.027398094534873962,
-0.03751898929476738,
-0.03983833268284798,
0.0025933824945241213,
-0.02047678828239441,
0.025954850018024445,
0.03721636161208153,
-0.022811446338891983,
0.05796058475971222,
0.14733347296714783,
0.25071561336517334,
0.14349406957626343,
0.03129354491829872,
0.11792280524969101,
0.3083685338497162,
0.18320372700691223,
-0.005388504359871149,
0.018919285386800766,
0.020661735907197,
-0.047894250601530075,
0.023290609940886497,
-0.03765605390071869,
-0.07171077281236649,
0.031019430607557297,
0.018121972680091858,
0.013092223554849625,
0.03943878784775734,
0.050153203308582306,
0.10524016618728638,
0.04731442779302597,
0.08149204403162003,
0.07665575295686722,
0.15882937610149384,
-0.053726647049188614,
-0.1141672432422638,
-0.07654722034931183,
0.06236954405903816,
-0.03334316238760948,
-0.18165527284145355,
-0.15909531712532043,
0.00979471206665039,
-0.0002129347121808678,
-0.008765853941440582,
0.005061437841504812,
-0.024849742650985718,
-0.046755917370319366,
0.03655648231506348,
0.05197826400399208,
0.05210025981068611,
-0.08946789056062698,
0.05066980421543121,
-0.08713465183973312,
0.09740572422742844,
-0.0043020183220505714,
-0.00993613712489605,
0.056927792727947235,
-0.05114252120256424,
0.01287437230348587,
-0.038067955523729324,
-0.00854465737938881,
0.013087699189782143,
-0.012022679671645164,
0.01754932478070259,
-0.09189900010824203,
0.2233509123325348,
0.07577649503946304,
-0.060556910932064056,
-0.09432729333639145,
-0.08461546897888184,
0.03968288376927376,
0.04887426644563675,
-0.017515525221824646,
0.07261162996292114,
-0.06901607662439346,
0.003030510852113366,
0.053473543375730515,
0.02936449460685253,
-0.10173806548118591,
-0.07388126850128174,
0.016649901866912842,
0.002741884207352996,
0.03777323290705681,
0.15307959914207458,
0.007411451078951359,
-0.04761262610554695,
-0.019003815948963165,
-0.08639385551214218,
0.13127310574054718,
-0.042926229536533356,
0.11451087892055511,
-0.04732035472989082,
0.0372583232820034,
-0.031610239297151566,
0.034599173814058304,
-0.11718093603849411,
-0.02228027582168579,
0.060909610241651535,
-0.008956232108175755,
-0.18999691307544708,
-0.019931958988308907,
0.03217048570513725,
0.12352278083562851,
-0.0015443020965903997,
0.11799953132867813,
0.11127005517482758,
-0.02061222307384014,
0.057159073650836945,
0.053822651505470276,
-0.007018902339041233,
-0.01903391256928444,
-0.05242374539375305,
-0.0494859404861927,
0.01649087853729725,
-0.007652978878468275,
0.019160939380526543,
-0.06896083801984787,
-0.10372830182313919,
-0.08930559456348419,
0.13501189649105072,
0.02750816009938717,
-0.08430953323841095,
-0.05584873631596565,
-0.09129970520734787,
-0.009498883970081806,
0.02414654567837715,
0.03929067775607109,
-0.015071687288582325,
-0.045896805822849274,
0.006095558870583773,
0.061046719551086426,
0.09035291522741318,
-0.0497787781059742,
-0.06616971641778946,
0.15273717045783997,
0.047195613384246826,
0.08044032752513885,
0.1318187713623047,
-0.008662660606205463,
0.01620609499514103,
-0.015692729502916336,
-0.01636776141822338,
0.05276825278997421,
-0.06812875717878342,
0.07371331006288528,
0.03848246484994888,
-0.0651359036564827,
-0.10064638406038284,
0.07149215042591095,
0.04341523349285126,
0.013723366893827915,
-0.024043358862400055,
-0.07570330053567886,
0.07288885116577148,
-0.013956929557025433,
-0.1366916447877884,
-0.06397324800491333,
-0.17260201275348663,
-0.024867963045835495,
0.03388875350356102,
0.1297529637813568,
0.03760282322764397,
0.0301006231456995,
0.031528156250715256,
0.020897196605801582,
0.07585304230451584,
0.10936760157346725,
0.017862193286418915,
-0.02214784547686577,
-0.11433763056993484,
0.07536124438047409,
-0.03733663260936737,
0.05585900694131851,
0.06674401462078094,
-0.028787823393940926,
-0.006522148381918669,
-0.011320758610963821,
0.055684126913547516,
0.021770484745502472,
0.08469346910715103,
0.07533786445856094,
-0.012066733092069626,
0.03003450110554695,
0.038102321326732635,
0.11338333785533905,
0.07617003470659256,
-0.012138700112700462,
-0.08987382054328918,
-0.10755149275064468,
-0.05485270544886589,
-0.08293212205171585,
0.009258037433028221,
-0.09886770695447922,
-0.13264963030815125,
0.05460787191987038,
-0.017913682386279106,
-0.006009974982589483,
-0.025085067376494408,
0.04869643598794937,
-0.06933129578828812,
-0.05859564244747162,
-0.004321983549743891,
0.018795017153024673,
-0.04047827050089836,
0.021336166188120842,
0.07436106353998184,
-0.06364123523235321,
-0.09625481069087982,
-0.05423916131258011,
0.03863271325826645,
-0.023421840742230415,
0.13152256608009338,
0.11385931819677353,
0.034676652401685715,
0.13053235411643982,
0.04828145354986191,
-0.075247623026371,
-0.06759447604417801,
0.056723546236753464,
0.0620231069624424,
-0.007549225818365812,
0.02132248505949974,
-0.053863029927015305,
0.02877933159470558,
0.014188580214977264,
-0.04475700482726097,
-0.013150116428732872,
-0.07429996132850647,
0.05149700120091438,
0.0018332418985664845,
-0.07777352631092072,
-0.05485936254262924,
-0.03754722699522972,
-0.15012596547603607,
-0.1530458629131317,
0.0004017807950731367,
0.15994976460933685,
0.014134269207715988,
0.09835584461688995,
-0.011590293608605862,
-0.03239315375685692,
0.056914474815130234,
0.08858297020196915,
0.04351426288485527,
-0.009970909915864468,
-0.019524239003658295,
0.020009703934192657,
0.0034646044950932264,
-0.08816275000572205,
0.009753749705851078,
-0.019201502203941345,
-0.14343243837356567,
-0.1690554916858673,
0.01150421891361475,
0.06992729753255844,
0.08309638500213623,
0.050529830157756805,
0.012752177193760872,
-0.0030687369871884584,
-0.026389429345726967,
-0.09306997805833817,
-0.12757229804992676,
-0.005424777045845985,
-0.0665409043431282,
0.005829714238643646,
0.0011423444375395775,
-0.07120701670646667,
0.05252266675233841,
-0.0031753696966916323,
0.09521444141864777,
-0.05216391384601593,
-0.09379033744335175,
-0.003425212576985359,
-0.005752922501415014,
0.01913958601653576,
-0.08647032082080841,
-0.0351027175784111,
0.05944454297423363,
-0.052319616079330444,
-0.11327826231718063,
-0.05652085319161415,
-0.040213387459516525,
-0.06631475687026978,
-0.054070889949798584,
-0.019861700013279915,
0.0009668064885772765,
-0.06297282129526138,
-0.08569552004337311,
-0.050181854516267776,
-0.09885527193546295,
0.14210735261440277,
-0.02047545462846756,
-0.09232228249311447,
-0.024044133722782135,
-0.032329149544239044,
0.08907371014356613,
-0.10353869199752808,
-0.08692046254873276,
0.13764430582523346,
-0.0007350302184931934,
-0.010176937095820904,
0.038699451833963394,
0.07851121574640274,
0.021440230309963226,
0.07449260354042053,
-0.019022822380065918,
-0.0317964144051075,
-0.1107691302895546,
-0.07995402812957764,
0.0982939600944519,
-0.03881477192044258,
-0.10556617379188538,
-0.10098271816968918,
-0.12293178588151932,
-0.08187881112098694,
-0.04565325751900673,
0.05030866712331772,
0.04250504821538925,
0.005576524883508682,
-0.020411012694239616,
0.031138643622398376,
-0.04251604154706001,
-0.08100241422653198,
0.08298853784799576,
0.03528236970305443,
0.04825416952371597,
-0.06929675489664078,
-0.015697985887527466,
0.01595703884959221,
-0.009827472269535065,
0.05911609157919884,
0.014072504825890064,
0.01419681217521429,
-0.12376818060874939,
-0.09587695449590683,
0.0592588409781456,
0.07804307341575623,
0.06429898738861084,
0.16695646941661835,
0.15555812418460846,
-0.039094265550374985,
0.011494901962578297,
0.08434782922267914,
0.04253320023417473,
-0.046903032809495926,
-0.11139025539159775,
0.015069087035953999,
-0.023942897096276283,
-0.08616571873426437,
-0.04630572348833084,
-0.030252354219555855,
-0.06749223172664642,
-0.10157172381877899,
0.12537702918052673,
-0.14450497925281525,
-0.1452166885137558,
-0.13529428839683533,
-0.08428909629583359,
-0.052912015467882156,
-0.15080614387989044,
-0.05090596526861191,
0.0322837270796299,
0.017640026286244392,
-0.038681548088788986,
0.005540833808481693,
0.010862917639315128,
0.012817786075174809,
-0.05573050677776337,
0.05955486372113228,
0.020564204081892967,
0.009775154292583466,
-0.09576860815286636,
0.007102631032466888,
0.1724100261926651,
-0.10032816976308823,
-0.081394724547863,
-0.09070709347724915,
0.05364568531513214,
-0.04787137359380722,
0.017699506133794785,
0.04125838354229927,
0.09180452674627304,
0.048439521342515945,
0.048982348293066025,
-0.024666085839271545,
-0.009293281473219395,
-0.14292830228805542,
-0.10653432458639145,
0.00519502442330122,
-0.03480595350265503,
-0.09509605169296265,
-0.028747092932462692,
-0.08464542776346207,
-0.03869078308343887,
-0.07857207953929901,
0.01408073678612709,
0.0009057809365913272,
-0.02700948528945446,
-0.018376464024186134,
0.03369671851396561,
-0.0071742236614227295,
0.050679177045822144,
0.020301874727010727,
0.015107044018805027,
0.05948512628674507,
-0.038435399532318115,
-0.002584754955023527,
-0.0026125009171664715,
0.06364820152521133,
-0.06027563288807869,
0.06967904418706894,
-0.0661701187491417,
0.054030418395996094,
-0.029986001551151276,
0.08552725613117218,
-0.13435640931129456,
-0.02129458449780941,
0.151058167219162,
0.05201881378889084,
0.01898811198771,
0.06420246511697769,
0.07341227680444717,
0.05842769891023636,
0.0017361718928441405,
0.028865037485957146,
-0.063442163169384,
-0.05732453614473343,
-0.010169879533350468,
0.008470495231449604,
-0.06240853667259216,
-0.04396230727434158,
0.11747858673334122,
-0.05244092270731926,
0.001288659288547933,
-0.0037539710756391287,
0.14659136533737183,
0.07290266454219818,
0.07648805528879166,
0.014196583069860935,
0.0181135106831789,
0.09010758996009827,
0.04128535836935043,
-0.059732042253017426,
-0.007829929701983929,
0.13337299227714539,
0.030802281573414803,
-0.04958314821124077,
-0.07673215121030807,
0.029920408502221107,
-0.07836241275072098,
-0.12943536043167114,
-0.0757027342915535,
0.16224688291549683,
-0.026136592030525208,
0.0635107234120369,
-0.03805643692612648,
-0.07222539186477661,
0.05683189630508423,
-0.019160930067300797,
0.0607619509100914,
0.046982817351818085,
-0.10537698864936829,
0.04010399430990219,
0.012204034253954887,
0.10932771116495132,
-0.03768705949187279,
-0.08971957862377167,
0.014881310984492302,
-0.010228457860648632,
0.12309123575687408,
0.1094590276479721,
-0.05091185122728348,
0.11649346351623535,
0.060624752193689346,
-0.01353576872497797,
0.008106480352580547,
-0.03645462170243263,
0.011915664188563824,
0.05729037523269653,
0.04805457592010498,
-0.041461654007434845,
-0.0456392876803875,
-0.01579764485359192,
-0.06792555004358292,
0.1082783192396164,
0.12391048669815063,
0.03059135191142559,
0.12259361147880554,
-0.18449681997299194,
-0.06827126443386078,
-0.09830398857593536,
0.05522150918841362,
-0.045931458473205566,
0.004752504173666239,
0.004263518378138542,
-0.020342599600553513,
0.032707564532756805,
-0.14350852370262146,
0.08793279528617859,
0.107159823179245,
-0.07653674483299255,
0.00979409459978342,
-0.12837877869606018,
0.004020598251372576,
-0.06222110614180565,
-0.13359475135803223,
0.010947941802442074,
-0.025243021547794342,
0.032924678176641464,
0.048162803053855896,
0.024203499779105186,
0.12594711780548096,
0.11881805211305618,
0.013655966147780418,
0.08467912673950195,
0.015731172636151314,
0.10870412737131119,
0.07272093743085861,
0.00803544744849205,
0.07435654103755951,
-0.03775579109787941,
0.013054284267127514,
0.033231593668460846,
-0.02784866839647293,
0.03690692409873009,
0.10415512323379517,
0.1036345511674881,
0.029005717486143112,
0.005300078075379133,
-0.0628267452120781,
-0.08009333163499832,
-0.037157390266656876,
0.07549584656953812,
-0.04404015839099884,
-0.21573428809642792,
-0.13977257907390594,
-0.011677424423396587,
0.03771399334073067,
-0.10942022502422333,
-0.08061153441667557,
0.051154326647520065,
0.08130667358636856,
0.06671502441167831,
-0.010417982004582882,
-0.0641033798456192,
0.021753976121544838,
0.03755194693803787,
-0.12672492861747742,
0.01631731353700161,
0.06010281294584274,
0.08573607355356216,
-0.026265397667884827,
-0.07926739007234573,
-0.030140653252601624,
0.03716271370649338,
0.02395707555115223,
0.008145659230649471,
0.17099983990192413,
0.012975229881703854,
-0.08863340318202972,
-0.05764726549386978,
-0.012114949524402618,
-0.04382045194506645,
0.008380119688808918,
0.09957655519247055,
0.0024698262568563223,
-0.06571046262979507,
0.002917339326813817,
-0.020842382684350014,
0.1276445984840393,
0.06481842696666718,
-0.09319987893104553,
0.0029064600821584463,
0.018198853358626366,
0.12395411729812622,
-0.01992412656545639,
-0.08888297528028488,
0.019389137625694275,
0.1238115057349205,
0.05483393743634224,
-0.04536967724561691,
-0.021076936274766922,
0.15132053196430206,
0.03671565279364586,
-0.029882721602916718,
-0.061541635543107986,
0.03171554580330849,
0.14479246735572815,
-0.08630112558603287,
0.015023858286440372,
0.11869987100362778,
0.24052613973617554,
0.08007471263408661,
-0.08093713223934174,
-0.04144863784313202,
0.03483790159225464,
0.004796372260898352,
-0.21054740250110626,
-0.12257303297519684,
-0.1483396291732788,
0.04317770153284073,
0.009484607726335526,
-0.17438344657421112,
0.028256015852093697,
-0.030151966959238052,
-0.1319877803325653,
0.09959486126899719,
0.027354201301932335,
-0.0008930769399739802,
-0.05623064562678337,
-0.12156422436237335,
0.051122818142175674,
0.07642056047916412,
0.05777009576559067,
0.04743305593729019,
0.1035703495144844,
0.11570364981889725,
0.18946589529514313,
-0.024282027035951614,
-0.027262505143880844,
-0.047872237861156464,
0.043543849140405655,
0.1403137445449829,
0.049005016684532166,
0.05310487747192383,
0.10026227682828903,
0.029179014265537262,
-0.054733384400606155,
0.02797676809132099,
0.010153181850910187,
0.04650865122675896,
0.011352966539561749,
-0.04672182351350784,
-0.01573541760444641,
-0.06070183217525482,
-0.12449637055397034,
-0.06086767092347145,
0.05435625836253166,
-0.21459421515464783,
-0.14432793855667114,
-0.1053089052438736,
-0.02551085501909256,
-0.03770928829908371,
-0.0819099172949791,
-0.07854484766721725,
-0.12734320759773254,
0.04382818192243576,
-0.029216967523097992,
-0.03827853128314018,
-0.0445442795753479,
0.0017730520339682698,
-0.004516261629760265,
0.12567436695098877,
0.08448857814073563,
0.0296295415610075,
0.049070149660110474,
0.0691462829709053,
0.008239242248237133,
-0.06925377249717712,
0.04077222943305969,
0.05603926628828049,
0.131417915225029,
0.009442131966352463,
-0.038335684686899185,
0.041399165987968445,
0.03283124789595604,
0.0719013661146164,
-0.022616608068346977,
0.07445754110813141,
0.0156997200101614,
-0.03168083354830742,
0.03728528320789337,
0.05331907421350479,
0.0022897222079336643,
-0.07381759583950043,
-0.07119046151638031,
0.033151328563690186,
-0.0360843725502491,
0.061463162302970886,
0.09372171759605408,
0.08418706804513931,
0.0953223779797554,
0.04318438470363617,
0.09511825442314148,
0.005473567172884941,
0.026023127138614655,
0.024148324504494667,
0.028239747509360313,
0.03394218906760216,
0.07932070642709732,
0.024967746809124947,
-0.1530759036540985,
0.055046189576387405,
0.009927735663950443,
0.1351795345544815,
-0.027951598167419434,
-0.04775245115160942,
0.09062227606773376,
-0.0646330863237381,
-0.017149172723293304,
-0.06668302416801453,
-0.08249137550592422,
-0.009207835420966148,
-0.030870473012328148,
0.08094584196805954,
0.030154138803482056,
0.12812873721122742,
0.24335967004299164,
0.06103656068444252,
0.06730429828166962,
0.06253650784492493,
0.12520599365234375,
0.10885624587535858,
-0.004954627249389887,
0.08882538229227066,
0.07733303308486938,
-0.018502574414014816,
-0.0679108202457428,
0.0076319328509271145,
0.16608846187591553,
0.08317209035158157,
-0.14013263583183289,
0.06540931761264801,
-0.06013109162449837,
0.010205172933638096,
-0.04796977713704109,
0.0282968170940876,
0.04919378459453583,
-0.008947675116360188,
-0.05095700919628143,
-0.03605959936976433,
-0.0375894270837307,
0.052753645926713943,
0.016855811700224876,
-0.15653938055038452,
-0.11912818253040314,
-0.003228099551051855,
0.013376333750784397,
-0.14648637175559998,
-0.28566229343414307,
-0.14882266521453857,
-0.07558362185955048,
-0.04008824750781059,
-0.017390016466379166,
-0.10439445823431015,
0.003611080115661025,
0.0049218181520700455,
-0.06478454917669296,
-0.007563441526144743,
0.015827469527721405,
-0.01851477287709713,
0.10770953446626663,
0.03676329180598259,
-0.024364924058318138,
0.08727378398180008,
0.14509256184101105,
0.05732286721467972,
0.051039692014455795,
0.00013749886420555413,
-0.008791379630565643,
0.06190502271056175,
0.005900482181459665,
-0.06024372577667236,
-0.013926506973803043,
0.0711686983704567,
-0.020266572013497353,
0.004275287035852671,
-0.012976341880857944,
-0.010653522796928883,
-0.03852646425366402,
-0.09475357085466385,
-0.04367683455348015,
0.07449214160442352,
-0.14567609131336212,
-0.23498918116092682,
-0.07924732565879822,
0.10447194427251816,
0.03026030957698822,
0.0276815053075552,
-0.01912083849310875,
-0.09254401177167892,
0.01107758842408657,
0.0544862374663353,
0.012532563880085945,
-0.04418647661805153,
0.059271469712257385,
0.14499124884605408,
0.16495324671268463,
-0.03320303559303284,
-0.029541637748479843,
-0.003044624114409089,
0.019978951662778854,
-0.040863387286663055,
-0.15213868021965027,
-0.06463611871004105,
-0.015369358472526073,
-0.07754065096378326,
-0.17872384190559387,
0.024019163101911545,
-0.01307680830359459,
-0.011308310553431511,
-0.025124017149209976,
-0.13172629475593567,
0.034019045531749725,
0.010243775323033333,
0.030671438202261925,
0.05115682631731033,
0.01820324920117855,
-0.036292992532253265,
-0.15748237073421478,
-0.0943027064204216,
-0.0913892611861229,
-0.008583125658333302,
-0.1320021003484726,
-0.14040599763393402,
-0.21428287029266357,
-0.1085769534111023,
-0.13317663967609406,
-0.1553763747215271,
-0.11538618803024292,
-0.16644205152988434,
-0.14629389345645905,
-0.08553238958120346,
-0.09023506194353104,
-0.11372800171375275,
-0.09156035631895065,
-0.03239139914512634,
0.013662689365446568,
0.022908225655555725,
-0.06247755512595177,
0.03819598630070686,
-0.008914618752896786,
0.12409263104200363,
0.0912594422698021,
0.006684252060949802,
0.0957697182893753,
-0.12082002311944962,
-0.07469609379768372,
0.030274640768766403,
-0.048366744071245193,
0.055913060903549194,
0.007560486439615488,
-0.06272241473197937,
-0.04033998027443886,
-0.01323375292122364,
0.017902396619319916,
-0.02086230367422104,
0.036055658012628555,
-0.10075877606868744,
0.04717651754617691,
0.09558375924825668,
0.016470912843942642,
-0.05286450684070587,
0.022897133603692055,
-0.0033605594653636217,
-0.048916045576334,
-0.10834556818008423,
-0.07473167032003403,
0.009288760833442211,
0.06601748615503311,
-0.05601336434483528,
-0.056936077773571014,
-0.10705456137657166,
0.003543348517268896,
-0.033241745084524155,
0.00852879323065281,
0.039617955684661865,
0.018003277480602264,
-0.08368852734565735,
-0.10821820795536041,
-0.07288993149995804,
0.06536953151226044,
-0.09980127215385437,
0.004315326455980539,
0.02973673865199089,
0.0578196682035923,
0.06850098073482513,
-0.02611655928194523,
0.03834227845072746,
0.0007479721098206937,
0.035076964646577835,
-0.029158389195799828,
-0.048719629645347595,
-0.047382984310388565,
0.027428505942225456,
-0.01802312210202217,
0.047854695469141006,
0.10646548122167587,
-0.020490244030952454,
-0.030684251338243484,
-0.015862273052334785,
0.027977876365184784,
0.18620111048221588,
-0.1351848840713501,
-0.1169239953160286,
-0.03390360251069069,
-0.1002444475889206,
0.01756124757230282,
0.02507326379418373,
0.027913851663470268,
0.03717915713787079,
0.031828925013542175,
0.02743729203939438,
0.05524621158838272,
-0.1134767159819603,
-0.03769927844405174,
0.032634831964969635,
0.06552277505397797,
-0.08898197114467621,
-0.09562412649393082,
-0.17174690961837769,
-0.09648416936397552,
-0.1245592013001442,
0.12126804143190384,
-0.08393793553113937,
-0.06728954613208771,
-0.16201826930046082,
-0.049389082938432693,
0.00837614294141531,
-0.037651177495718,
0.029138019308447838,
0.11525365710258484,
-0.06285764276981354,
-0.04362029209733009,
-0.13490211963653564,
-0.031980399042367935,
-0.009371484629809856,
-0.0006029223441146314,
0.07140611857175827,
0.07571948319673538,
0.007371657062321901,
0.0564989410340786,
0.1354440301656723,
0.03456021845340729,
0.04905654862523079,
0.11749595403671265,
0.038419898599386215,
0.09732130914926529,
0.16829195618629456,
0.11186131089925766,
0.0380425825715065,
0.045418623834848404,
-0.014941631816327572,
0.09320295602083206,
0.035820960998535156,
0.05071084201335907,
0.07741519063711166,
0.06797579675912857,
-0.1545431762933731,
-0.11857139319181442,
-0.12715700268745422,
-0.06073157116770744,
-0.009731898084282875,
-0.07888814061880112,
0.058368977159261703,
-0.0195661298930645,
0.05167722702026367,
-0.21538151800632477,
-0.06832387298345566,
0.11807708442211151,
-0.0625915378332138,
-0.016480591148138046,
-0.1266307532787323,
-0.01820371486246586,
0.04741114377975464,
-0.09327926486730576,
0.1255645602941513,
-0.07545437663793564,
-0.011822827160358429,
-0.03006141632795334,
-0.019527891650795937,
0.10686052590608597,
-0.020366504788398743,
-0.12824326753616333,
-0.13315124809741974,
0.18342678248882294,
0.10242368280887604,
-0.030854422599077225,
0.016804777085781097,
-0.0373438261449337,
-0.012691682204604149,
-0.018029525876045227,
-0.07157643139362335,
-0.05480283871293068,
-0.05198385939002037,
0.049978107213974,
0.10687930881977081,
0.04871899634599686,
-0.16739994287490845,
0.004640693310648203,
0.033916208893060684,
0.03813312202692032,
-0.004779984708875418,
-0.01735386811196804,
0.04910384863615036,
0.004956004209816456,
0.10163553059101105,
0.11939021944999695,
0.08188747614622116,
-0.03636729344725609,
-0.1372331976890564,
-0.061252303421497345,
0.03769019991159439,
0.038279324769973755,
-0.015367967076599598,
0.04018738865852356,
-0.05946730822324753,
0.04052027314901352,
0.07969937473535538,
0.06236168369650841,
-0.08513450622558594,
-0.17719978094100952,
-0.06420871615409851,
-0.014138580299913883,
-0.020290909335017204,
-0.11068841814994812,
-0.09367047995328903,
0.0029169602785259485,
0.02812584675848484,
-0.041435886174440384,
-0.062201764434576035,
-0.027075637131929398,
0.009847511537373066,
0.025346728041768074,
-0.101324163377285,
-0.19616073369979858,
0.026730522513389587,
0.015768542885780334,
-0.06707017123699188,
0.011784427799284458,
0.13173221051692963,
0.05551177263259888,
0.10057555884122849,
-0.0642881840467453,
0.08303315937519073,
0.08974696695804596,
0.07286854833364487,
0.13339948654174805,
0.11050527542829514,
0.06295493990182877,
0.174514040350914,
-0.11340929567813873,
-0.027632122859358788,
0.2089889645576477,
0.009336685761809349,
-0.026912808418273926,
-0.03974415734410286,
-0.04947008565068245,
0.08474928885698318,
-0.014617515727877617,
0.04489624872803688,
0.007597494870424271,
-0.014741356484591961,
-0.03548470139503479,
-0.07562906295061111,
0.08361149579286575,
0.0922272801399231,
0.17224635183811188,
-0.07458388805389404,
-0.023238452151417732,
-0.06786821037530899,
0.01714327745139599,
0.1506018489599228,
-0.01554058026522398,
-0.06087014451622963,
-0.012159744277596474,
-0.14437493681907654,
0.010493517853319645,
0.046500880271196365,
-0.037278931587934494,
0.09015118330717087,
-0.03659426048398018,
-0.1463976800441742,
0.04687957093119621,
0.060841210186481476,
0.03782771900296211,
-0.08674013614654541,
-0.011120075359940529,
0.06233765557408333,
0.01816665381193161,
-0.010822744108736515,
-0.09031519293785095,
-0.15815138816833496,
0.015695348381996155,
0.15015268325805664,
-0.12359466403722763,
-0.05846573784947395,
-0.02087141014635563,
-0.0010082407388836145,
0.013325602747499943,
-0.06472541391849518,
0.09032019972801208,
-0.05440187454223633,
-0.011436368338763714,
0.00939484965056181,
0.0026999758556485176,
0.043368641287088394,
-0.030964573845267296,
0.020007885992527008,
0.16250813007354736,
0.19255073368549347,
-0.0027690092101693153,
-0.11495187878608704,
-0.08495155721902847,
0.06967172771692276,
0.05923320725560188,
-0.03573819622397423,
-0.0790242850780487,
-0.061908528208732605,
0.017093881964683533,
0.05560468137264252,
-0.027101851999759674,
-0.10658466070890427,
-0.06481967866420746,
-0.027507862076163292,
-0.14994944632053375,
-0.06623119860887527,
-0.14884598553180695,
-0.0818868950009346,
-0.12183346599340439,
0.029313944280147552,
0.09267032146453857,
-0.02488843910396099,
-0.03085700236260891,
0.06834922730922699,
0.1624596118927002,
0.02844914048910141,
-0.07815203070640564,
-0.036300722509622574,
-0.12740103900432587,
0.03012920543551445,
0.13852310180664062,
0.22633086144924164,
-0.015906119719147682,
0.02050817757844925,
0.04375903680920601,
0.16440987586975098,
0.17040659487247467,
0.03870135173201561,
0.03251216560602188,
0.1665049046278,
0.10747455805540085,
0.12825754284858704,
0.11861435323953629,
0.03589294105768204,
-0.13332127034664154,
-0.09632661938667297,
0.07693679630756378,
0.03650911524891853,
0.033470697700977325,
-0.03723118454217911,
-0.03660988435149193,
-0.08378461003303528,
-0.14522762596607208,
-0.04148906096816063,
0.06902490556240082,
0.10920174419879913,
0.012688604183495045,
-0.11903588473796844,
0.043586067855358124,
0.04771065711975098,
-0.04883410036563873,
-0.05721217766404152,
-0.02697804383933544,
-0.039434704929590225,
0.051720425486564636,
-0.02787047065794468,
-0.03463386744260788,
0.18487130105495453,
0.14035533368587494,
0.1303700953722,
0.01961219683289528,
-0.11635282635688782,
0.01928676851093769,
0.22001048922538757,
-0.026756420731544495,
-0.0994412899017334,
-0.0943693220615387,
0.04520706832408905,
0.049245335161685944,
-0.02402622625231743,
-0.00997702032327652,
0.019503852352499962,
0.07357572019100189,
0.09603754431009293,
-0.016785668209195137,
0.05364004150032997,
0.05038268864154816,
-0.026843557134270668,
0.017426764592528343,
0.21207241714000702,
0.11541587859392166,
0.090715691447258,
-0.0095334118232131,
-0.06987835466861725,
0.029913216829299927,
0.023669052869081497,
0.07345850020647049,
-0.08770599216222763,
-0.11193855851888657,
-0.12350399792194366,
-0.056057803332805634,
0.009421256370842457,
-0.03741202503442764,
-0.00458623468875885,
-0.04934345930814743,
0.003951034974306822,
-0.11165852099657059,
-0.06983722001314163,
0.02889181487262249,
0.056931741535663605,
0.22610358893871307,
0.14360558986663818,
0.015807604417204857,
-0.0012906077317893505,
0.13499319553375244,
0.09440245479345322,
-0.008623434230685234,
0.1310066133737564,
0.05173468589782715,
0.020029136911034584,
0.1430460810661316,
0.002501819748431444,
0.045077428221702576,
0.10502348840236664,
0.03017139807343483,
0.04804438352584839,
-0.009464850649237633,
0.07530797272920609,
0.05251806974411011,
-0.00940594170242548,
-0.03419644385576248,
-0.12463869899511337,
-0.07977479696273804,
-0.04231427237391472,
-0.002786154393106699,
0.07844093441963196,
0.1320716291666031,
-0.0683446004986763,
-0.028887059539556503,
0.010863641276955605,
-0.01606028899550438,
0.01978241838514805,
0.036692000925540924,
0.13939747214317322,
-0.013894805684685707,
0.05049590766429901,
-0.016952835023403168,
0.07642120867967606,
-0.06904177367687225,
-0.0816253051161766,
-0.06141776964068413,
0.10111726820468903,
0.04273286461830139,
0.005213872529566288,
0.031237473711371422,
-0.004497526213526726,
0.033446118235588074,
0.011745233088731766,
-0.007882358506321907,
-0.00836057960987091,
0.006622153799980879,
0.019129572436213493,
0.015599719248712063,
-0.06210380792617798,
-0.04344363510608673,
-0.03493857383728027,
0.0026181600987911224,
-0.0141732357442379,
-0.003042358672246337,
-0.0317191444337368,
-0.08272507786750793,
-0.03066311776638031,
0.07109590619802475,
-0.015549070201814175,
0.013846351765096188,
-0.043572038412094116,
0.05300338566303253,
0.08198833465576172,
0.04645587503910065,
-0.015883972868323326,
-0.011766494251787663,
-0.07129038870334625,
0.006084900349378586,
0.034184232354164124,
0.06019633635878563,
0.14786553382873535,
0.059633515775203705,
-0.03699442371726036,
-0.14239446818828583,
0.08154872804880142,
0.049891531467437744,
0.11103598028421402,
-0.10331801325082779,
-0.09645896404981613,
-0.17189157009124756,
0.03237095847725868,
0.10655953735113144,
-0.005878199823200703,
0.01990189030766487,
-0.05872892960906029,
-0.0560784675180912,
0.0051629203371703625,
0.03696288540959358,
-0.0017669163644313812,
0.03587076812982559,
-0.016695747151970863,
-0.04930385202169418,
0.022911643609404564,
0.025930235162377357,
0.011173578910529613,
0.08545873314142227,
0.07371893525123596,
0.0018252470763400197,
-0.019357644021511078,
0.022513601928949356,
0.035635218024253845,
-0.006071318872272968,
-0.0524960532784462,
-0.01292912196367979,
0.10736251622438431,
-0.004309913143515587,
0.02105393446981907,
-0.016583889722824097,
0.0207284577190876,
0.11998659372329712,
0.024820810183882713,
-0.06841666996479034,
0.03274378553032875,
0.09738544374704361,
0.0300191268324852,
0.003364971373230219,
0.02010197751224041,
0.03174736350774765,
0.02908139117062092,
-0.04632441699504852,
-0.0598398819565773,
-0.032008226960897446,
-0.00320227537304163,
-0.020708736032247543,
0.02762223407626152,
0.18289536237716675,
0.01192258670926094,
-0.072883240878582,
-0.14969898760318756,
-0.011000363156199455,
0.04927236586809158,
0.14365462958812714,
-0.10904722660779953,
-0.05320192873477936,
0.024565638974308968,
0.08848516643047333,
0.06650951504707336,
0.012564752250909805,
-0.017703797668218613,
0.07736200839281082,
0.04622174799442291,
0.051784008741378784,
-0.033199410885572433,
0.008437752723693848,
-0.07404531538486481,
-0.07109008729457855,
0.03916217386722565,
-0.07181640714406967,
0.055120550096035004,
-0.15439750254154205,
-0.12115927040576935,
-0.057377953082323074,
-0.03083626553416252,
-0.05404428765177727,
0.08877314627170563,
-0.12813597917556763,
-0.03472341597080231,
0.0100967762991786,
0.06910571455955505,
-0.08627469092607498,
-0.029738450422883034,
-0.04422647878527641,
-0.033476971089839935,
-0.05655209720134735,
-0.05356070399284363,
-0.04786597192287445,
-0.07419364899396896,
-0.007721026428043842,
-0.051671285182237625,
-0.05366908013820648,
0.0010061279172077775,
-0.06358176469802856,
0.016698196530342102,
0.11746320128440857,
0.08948710560798645,
0.2792542278766632,
0.04871637746691704,
0.11862152814865112,
0.07177131623029709,
0.10701040178537369,
0.16262087225914001,
0.156753271818161,
-0.04365196451544762,
-0.11328623443841934,
0.0025354076642543077,
0.05664121359586716,
-0.042299479246139526,
-0.03877425938844681,
0.0068793948739767075,
0.10008504986763,
-0.014377146027982235,
0.006328538991510868,
0.019732294604182243,
0.10668531060218811,
-0.015470631420612335,
0.07777675986289978,
-0.016298264265060425,
0.03298909217119217,
0.04933670535683632,
-0.014187975786626339,
0.07839598506689072,
-0.015392002649605274,
-0.1873183399438858,
-0.07486668229103088,
-0.00822792574763298,
0.04054434970021248,
-0.03617342934012413,
-0.12233638018369675,
-0.04951159656047821,
0.04201843589544296,
0.13599149882793427,
0.054015401750802994,
-0.04770181328058243,
0.06418447941541672,
-0.027913840487599373,
-0.04827903211116791,
-0.0030263392254710197,
0.010195123963057995,
0.0374135784804821,
0.07192650437355042,
-0.03347630798816681,
-0.07560413330793381,
0.17010536789894104,
0.051330141723155975,
-0.056751005351543427,
-0.04294425621628761,
0.014985313639044762,
0.024581678211688995,
0.031014857813715935,
-0.07510509341955185,
0.05533084645867348,
0.12406804412603378,
-0.13986337184906006,
-0.016412751749157906,
0.00023267271171789616,
-0.0026337362360209227,
0.03175630792975426,
0.04207402095198631,
0.024328110739588737,
0.009030637331306934,
-0.0889851450920105,
-0.1192556694149971,
-0.050290606915950775,
-0.013786815106868744,
0.009121568873524666,
0.05558197200298309,
0.10111387819051743,
-0.07151682674884796,
0.011035501956939697,
0.11351530998945236,
-0.004216520115733147,
0.0018641841597855091,
0.035744622349739075,
0.023643292486667633,
-0.04626767337322235,
0.030499786138534546,
-0.09950228780508041,
-0.06093699112534523,
-0.008518293499946594,
-0.04868309572339058,
-0.030853286385536194,
-0.03733108937740326,
-0.02457888238132,
0.011477702297270298,
0.09963192045688629,
-0.01813472993671894,
-0.024718966335058212,
-0.04428916424512863,
-0.040730465203523636,
-0.027170497924089432,
0.11445026099681854,
0.0714145302772522,
-0.027184225618839264,
-0.044690489768981934,
0.031680379062891006,
0.055833734571933746,
-0.024530867114663124,
0.05916328355669975,
0.007990402169525623,
0.08412939310073853,
0.002168751321732998,
-0.041792239993810654,
0.03549348562955856,
0.011516529135406017,
-0.035837892442941666,
-0.006962116342037916,
-0.13951243460178375,
0.0016765722539275885,
0.06807775795459747,
0.024631936103105545,
-0.00293705053627491,
-0.059685882180929184,
-0.008604022674262524,
0.009425959549844265,
0.07465644180774689,
0.03218381106853485,
0.06784086674451828,
-0.05867677927017212,
-0.03415922820568085,
2.3909477022243664e-05,
0.17222926020622253,
0.08987439423799515,
-0.100772425532341,
-0.0436122864484787,
0.14018665254116058,
-0.0729454904794693,
0.015787404030561447,
0.012891892343759537,
0.06252698600292206,
-0.057224877178668976,
0.008839879184961319,
-0.06436852365732193,
-0.00910585094243288,
0.11580833047628403,
0.05734672024846077,
-0.014932495541870594,
0.00988486222922802,
0.0892905443906784,
0.0498405359685421,
0.020886510610580444,
0.1325089931488037,
-0.06950980424880981,
0.14314857125282288,
0.03440311923623085,
-0.056833695620298386,
-0.061016995459795,
-2.9435139367706142e-05,
-0.07409349828958511,
-0.06199442595243454,
-0.027402695268392563,
0.02271646074950695,
0.037515539675951004,
-0.09259834885597229,
-0.05581584945321083,
0.007203896064311266,
0.07272820919752121,
0.06207890808582306,
-0.0288168303668499,
-0.12288430333137512,
0.054015807807445526,
0.07443220168352127,
0.05507531762123108,
0.05524856224656105,
0.04013888165354729,
-0.009001873433589935,
0.0023570265620946884,
0.10156629979610443,
0.015480270609259605,
0.07712153345346451,
-0.05382697656750679,
0.029163626953959465,
0.03728821128606796,
0.08824734389781952,
0.09275149554014206,
-0.10220939666032791,
0.018005574122071266,
0.06867864727973938,
0.07475738972425461,
-0.12300194799900055,
-0.0636800080537796,
-0.016535747796297073,
-0.039227597415447235,
0.07289233803749084,
-0.0633767619729042,
-0.01904800534248352,
-0.08317653089761734,
-0.0034463375341147184,
0.0351296067237854,
-0.01807224564254284,
-0.03611631691455841,
-0.0035301027819514275,
0.07996349036693573,
-0.03024287335574627,
0.020710507407784462,
0.0244526918977499,
0.08172697573900223,
0.09141698479652405,
-0.08295122534036636,
0.005922262091189623,
0.062107834964990616,
0.013579880818724632,
0.04842561483383179,
0.0460689440369606,
-0.007886014878749847,
-0.02964967116713524,
-0.03822113946080208,
-0.08713195472955704,
0.01952049881219864,
-0.0874084010720253,
-0.03275322541594505,
0.04032927006483078,
0.059011060744524,
0.026358136907219887,
-0.020577145740389824,
0.052530184388160706,
0.02407449670135975,
0.016841312870383263,
0.1100103035569191,
0.11312370002269745,
-0.007352941669523716,
0.03444281592965126,
-0.09457666426897049,
0.02007855661213398,
-0.03549307584762573,
-0.07507515698671341,
-0.020716233178973198,
-0.0444016270339489,
-0.07962282001972198,
-0.035885199904441833,
-0.06813071668148041,
-0.06374018639326096,
0.05238613113760948,
-0.03986295312643051,
0.11688041687011719,
-0.0013784837210550904,
0.07827451825141907,
0.014648869633674622,
-0.0002339991187909618,
-0.0967768207192421,
-0.1878933310508728,
0.03246598318219185,
-0.019358286634087563,
0.07167796045541763,
-0.020676465705037117,
-0.14866088330745697,
0.010943976230919361,
0.03459417447447777,
-0.08778972923755646,
-0.12724362313747406,
-0.11523274332284927,
-0.04471827670931816,
0.010564924217760563,
0.03000720404088497,
0.02448219619691372,
-0.03822273761034012,
0.09542880207300186,
0.03447350114583969,
-0.02172606810927391,
-0.11219353973865509,
0.032844576984643936,
0.03364856541156769,
0.02496347576379776,
0.0317019522190094,
-0.07029896229505539,
0.028528349474072456,
0.07251367717981339,
0.02040441520512104,
0.0017124431906268,
-0.12093580514192581,
0.0642944723367691,
0.06117572635412216,
-0.04935218021273613,
-0.028987891972064972,
-0.09733784943819046,
0.06309809535741806,
0.011951313354074955,
0.05525428429245949,
0.009337402880191803,
0.048380427062511444,
0.05254827439785004,
0.010005406104028225,
0.04988536611199379,
-0.10619023442268372,
-0.11735685169696808,
-0.005577818024903536,
0.03842255473136902,
0.07401725649833679,
0.07644514739513397,
-0.12551778554916382,
-0.07526815682649612,
-0.0625029057264328,
-0.16805560886859894,
0.1811162680387497,
0.11020281910896301,
0.07251661270856857,
-0.09715728461742401,
-0.12496570497751236,
0.14647126197814941,
0.20685669779777527,
-0.02157929725944996,
0.01110032107681036,
0.026626335456967354,
-0.09203088283538818,
-0.044748373329639435,
0.011165985837578773,
-0.04309796541929245,
0.03866298124194145,
-0.033321790397167206,
0.11994379013776779,
0.08143401145935059,
0.001928222132846713,
0.027824632823467255,
0.02310139127075672,
0.08107782900333405,
0.12792348861694336,
0.025417383760213852,
-0.0037721393164247274,
-0.06542380154132843,
0.023260723799467087,
0.022128628566861153,
0.1168496161699295,
-0.0809740498661995,
0.014232941903173923,
-0.011194087564945221,
-0.010717231780290604,
-0.12431367486715317,
-0.006014901213347912,
0.013724859803915024,
0.020405270159244537,
-0.041596315801143646,
0.052551813423633575,
-0.012078833766281605,
-0.024549661204218864,
0.01855292171239853,
-0.023350311443209648,
-0.03512849286198616,
-0.07584216445684433,
0.020024007186293602,
0.12194866687059402,
-0.01499572116881609,
-0.07480548322200775,
0.002087109023705125,
-0.023657364770770073,
0.028032470494508743,
0.042114272713661194,
-0.05324724316596985,
0.007365180179476738,
-0.022960036993026733,
0.0726669579744339,
-0.016524851322174072,
-0.054267868399620056,
-0.22514253854751587,
0.08741623908281326,
-0.05713972449302673,
0.013765482231974602,
-0.09891517460346222,
-0.11568116396665573,
0.04878757521510124,
-0.12441068142652512,
-0.10830514878034592,
-0.01566309481859207,
-0.021679449826478958,
-0.0078018964268267155,
-0.11838658899068832,
0.05937812477350235,
0.09086772054433823,
0.12751096487045288,
0.06588898599147797,
-0.05189542472362518,
0.0627652034163475,
-0.005878984462469816,
-0.002692411420866847,
-0.015931524336338043,
-0.05094291642308235,
-0.003426729468628764,
0.011130843311548233,
0.12273086607456207,
0.04642653092741966,
-0.0006053532706573606,
-0.020358989015221596,
-0.04811637103557587,
0.08965810388326645,
0.0030221298802644014,
0.005724717862904072,
0.010883265174925327,
0.015896465629339218,
0.0971883162856102,
0.0369960255920887,
0.07160641998052597,
0.05082923173904419,
-0.05381139740347862,
-0.061947476118803024,
0.0034685381688177586,
-0.01959073171019554,
-0.12476464360952377,
-0.1373577117919922,
-0.0937790647149086,
-0.1424434334039688,
-0.1099795326590538,
-0.02915678173303604,
-0.1508035659790039,
-0.05377321317791939,
0.09404002875089645,
0.04457265883684158,
0.03630202263593674,
0.04609738662838936,
0.024460243061184883,
-0.005991088226437569,
0.10468187928199768,
0.08818797767162323,
-0.013352726586163044,
-0.06393951177597046,
0.012172821909189224,
-0.05394100397825241,
0.004606517963111401,
0.12918779253959656,
0.14611542224884033,
-0.02642025239765644,
0.04389927536249161,
0.05443664267659187,
-0.025987066328525543,
-0.11201561987400055,
0.13878418505191803,
0.05394870042800903,
0.08753462135791779,
0.023919839411973953,
-0.020865682512521744,
-0.011374041438102722,
-0.028025755658745766,
-0.0029525598511099815,
-0.07232920825481415,
-0.08665527403354645,
0.06411799788475037,
-0.04456769675016403,
-0.17924845218658447,
-0.092142753303051,
0.020900234580039978,
-0.0017563439905643463,
-0.008830626495182514,
-0.09132204204797745,
-0.03247674182057381,
-0.04566996917128563,
-0.09482459723949432,
0.0031931090634316206,
-0.04451262950897217,
0.0737338438630104,
0.06936138868331909,
0.017161991447210312,
0.0221717469394207,
0.11049634218215942,
0.06227927654981613,
0.006087513640522957,
-0.03275962173938751,
0.03511030972003937,
-0.017151623964309692,
-0.11555659770965576,
-0.12772072851657867,
-0.02768334001302719,
0.07825348526239395,
-0.028732644394040108,
-0.11396956443786621,
-0.00010674102668417618,
0.06269750744104385,
0.04093373939394951,
0.010937435552477837,
-0.07914941012859344,
-0.006628128234297037,
-0.04562484100461006,
0.05480892211198807,
-0.0273514986038208,
-0.056919895112514496,
0.058974046260118484,
-0.07848440855741501,
0.036065392196178436,
-0.093937449157238,
-0.04356753081083298,
0.04743916541337967,
-0.09140752255916595,
-0.02395901083946228,
0.027854327112436295,
0.03526690602302551,
0.05872240662574768,
-0.06193233281373978,
-0.16153302788734436,
-0.04170764982700348,
0.05524463951587677,
-0.021420009434223175,
-0.05982857942581177,
-0.06969037652015686,
0.01346600241959095,
0.022579293698072433,
0.046188537031412125,
-0.07571633160114288,
0.002126520499587059,
0.08080759644508362,
0.047830209136009216,
-0.012613993138074875,
-0.106541208922863,
-0.010833196341991425,
0.009580506011843681,
-0.057719625532627106,
0.018298055976629257,
-0.03259813413023949,
-0.1369267851114273,
-0.05094920098781586,
0.09639391303062439,
0.14811073243618011,
0.02643437683582306,
-0.08080124109983444,
-0.08602909743785858,
-0.13964250683784485,
-0.03712695837020874,
-0.0049317823722958565,
-0.03563758358359337,
0.02039564959704876,
-0.009879328310489655,
0.03108750842511654,
0.04836539179086685,
-0.032754458487033844,
0.038711462169885635,
0.08607611060142517,
0.061042141169309616,
0.008036956191062927,
-0.08682024478912354,
-0.09777171909809113,
-0.05761443451046944,
-0.06741062551736832,
-0.003974128980189562,
-0.07010114192962646,
-0.004642386920750141,
-0.04817304015159607,
0.037737369537353516,
0.05491503328084946,
0.042458485811948776,
0.010545036755502224,
0.013125598430633545,
-0.06685579568147659,
-0.04833834245800972,
0.019469011574983597,
-0.032382313162088394,
-0.03699224814772606,
-0.08596524596214294,
0.006972542963922024,
0.1490035206079483,
0.017563430592417717,
-0.013071514666080475,
0.0003698659420479089,
0.0042447675950825214,
0.15486286580562592,
0.13026607036590576,
0.04577820003032684,
-0.1266605108976364,
0.018504668027162552,
0.05027399957180023,
-0.023260626941919327,
-0.10437799245119095,
-0.10303059220314026,
0.1087007150053978,
-0.055350568145513535,
-0.15955446660518646,
-0.13626141846179962,
-0.03817996755242348,
0.08702698349952698,
-0.043826401233673096,
-0.11509715020656586,
0.09433842450380325,
0.08163900673389435,
0.0007439243490807712,
0.004612563643604517,
-0.011495192535221577,
0.007347662467509508,
0.06257862597703934,
-0.13579905033111572,
-0.02295941673219204,
-0.02192418836057186,
-0.03284270688891411,
0.02963048405945301,
0.06397620588541031,
-0.0020159275736659765,
0.05770484358072281,
-0.05824219062924385,
0.03211287781596184,
0.016536066308617592,
0.012859534472227097,
0.13330096006393433,
0.06435348093509674,
0.0010371541138738394,
-0.05297010764479637,
-0.06458140909671783,
0.02963247336447239,
-0.14892488718032837,
-0.1558530181646347,
0.035649579018354416,
0.008579565212130547,
-0.12468039989471436,
-0.0899275466799736,
-0.19072739779949188,
0.15058943629264832,
-0.001712427823804319,
0.002315241377800703,
-0.051689159125089645,
-0.043622687458992004,
-0.00159604346845299,
0.0502663217484951,
-0.018796958029270172,
0.009174620732665062,
0.09413408488035202,
-0.025851722806692123,
0.005902400705963373,
-0.06296057254076004,
-0.0076619707979261875,
0.04502756521105766,
-0.0012259368086233735,
0.011536240577697754,
-0.09010373800992966,
-0.15434058010578156,
-0.13068510591983795,
0.018948405981063843,
0.020863153040409088,
-0.10336323827505112,
-0.06863857060670853,
0.12208878248929977,
0.09387066215276718,
0.03228818625211716,
0.07340299338102341,
0.06826451420783997,
0.09268151968717575,
0.03483761474490166,
0.04886598140001297,
0.05408226326107979,
-0.009057790972292423,
-0.011498174630105495,
-0.02896597608923912,
-0.10269556939601898,
-0.009423622861504555,
-0.16668571531772614,
-0.028781509026885033,
0.10285881161689758,
0.037772323936223984,
-0.026446061208844185,
-0.07386543601751328,
0.006587082985788584,
0.07854257524013519,
-0.02601753920316696,
-0.0706595778465271,
-0.04066010192036629,
0.03899755701422691,
0.05840636417269707,
-0.15541519224643707,
0.11130482703447342,
0.027266504243016243,
0.08963155001401901,
0.013548173941671848,
0.04771283641457558,
0.10051210969686508,
0.07564752548933029,
-0.1381145864725113,
0.04174059256911278,
-0.009381874464452267,
-0.08471114933490753,
0.0570155531167984,
-0.022163979709148407,
0.026466842740774155,
0.01928948424756527,
-0.15874648094177246,
-0.0437646210193634,
-0.03956516459584236,
0.0038631397765129805,
-0.05962395668029785,
-0.07325500249862671,
-0.007113305851817131,
0.057871922850608826,
-0.019756242632865906,
-0.06929758191108704,
-0.10485590249300003,
0.02007349580526352,
-0.06955558061599731,
0.06722912192344666,
-0.04591402783989906,
-0.0073819514364004135,
-0.06650468707084656,
-0.041944652795791626,
-0.17398548126220703,
-0.07106480747461319,
0.05207815766334534,
-0.057701073586940765,
-0.014857707545161247,
0.09307220578193665,
0.003603442572057247,
-0.11796393990516663,
-0.07651924341917038,
0.06759831309318542,
0.04508388414978981,
-0.020392997190356255,
0.09461288899183273,
0.025443606078624725,
-0.04647123068571091,
-0.1201617419719696,
-0.1183609589934349,
0.08998183161020279,
-0.06789766997098923,
0.11604385077953339,
-0.04073042422533035,
-0.13340437412261963,
0.056647978723049164,
-0.004493419546633959,
0.19423680007457733,
-0.023935165256261826,
0.060710661113262177,
0.24189868569374084,
0.10310106724500656,
-0.054248787462711334,
0.0592653863132,
0.0431479811668396,
-0.1558373123407364,
-0.0927007868885994,
-0.11917150765657425,
-0.021874701604247093,
-0.022655965760350227,
-0.11696682870388031,
0.016344061121344566,
-0.03915463387966156,
0.0006488030194304883,
0.04519949480891228,
0.09069892019033432,
0.08748666197061539,
0.038209158927202225,
-0.05016448721289635,
-0.09568344801664352,
-0.1022225096821785,
-0.09547571837902069,
0.04551928490400314,
0.0039308033883571625,
0.06280484795570374,
0.10820750892162323,
0.10014001280069351,
-0.07692818343639374,
-0.026690909639000893,
0.057646408677101135,
0.050228461623191833,
0.03028123266994953,
-0.10730917006731033,
-0.03732328489422798,
0.10334546864032745,
0.053837887942790985,
-0.13485634326934814,
-0.0716661587357521,
0.0007387121440842748,
0.030639879405498505,
0.08102498948574066,
0.03571547940373421,
0.19695772230625153,
-0.03920300304889679,
0.06380815804004669,
0.033976368606090546,
0.06389295309782028,
0.11729046702384949,
0.07173696160316467,
0.05484921857714653,
-0.1807212233543396,
-0.06685101985931396,
-0.10449374467134476,
0.006748097948729992,
-0.027156200259923935,
0.013112729415297508,
-0.035735659301280975,
-0.049043603241443634,
0.06267689168453217,
-0.12006483972072601,
-0.11013767868280411,
0.033379677683115005,
0.04007680341601372,
0.13290174305438995,
-0.04535456374287605,
-0.09527219831943512,
-0.06574059277772903,
-0.03866738826036453,
0.07048405706882477,
0.023924145847558975,
-0.01738406904041767,
-0.023577269166707993,
-0.003547544591128826,
0.003859470598399639,
0.002337459707632661,
-0.025590647011995316,
-0.020685404539108276,
-0.10845309495925903,
0.05454163998365402,
0.0643063485622406,
0.07856473326683044,
-0.18459507822990417,
-0.17021028697490692,
0.11328642815351486,
0.013935375958681107,
-0.10259507596492767,
-0.16310246288776398,
0.06889651715755463,
0.08842841535806656,
0.12454789131879807,
0.07561779767274857,
-0.02536642923951149,
0.1850225329399109,
-0.011806946247816086,
-0.023430587723851204,
-0.046299681067466736,
-0.05463995411992073,
0.12596674263477325,
0.026716679334640503,
0.028365954756736755,
0.236304372549057,
-0.045347485691308975,
-0.12296538800001144,
-0.0388994961977005,
-0.029936574399471283,
0.19222062826156616,
0.06572042405605316,
-0.02219885028898716,
0.04326532781124115,
0.15940222144126892,
0.05694499611854553,
-0.00205317628569901,
-0.09681573510169983,
0.03917170688509941,
0.049572233110666275,
0.09194375574588776,
0.041804239153862,
-0.06692338734865189,
-0.0604892373085022,
0.15169960260391235,
0.03564856946468353,
0.011028919368982315,
0.10684160888195038,
0.02037227153778076,
-0.009731520898640156,
-0.03769845888018608,
-0.05769309028983116,
0.11720771342515945,
0.08648217469453812,
-0.060669466853141785,
0.01991027593612671,
0.032216884195804596,
-0.1330956071615219,
0.027459999546408653,
-0.11038447171449661,
0.09213749319314957,
-0.07838235050439835,
-0.08447568863630295,
-0.07070267200469971,
0.06052545830607414,
0.015668701380491257,
-0.024716133251786232,
0.04198167473077774,
0.0770244300365448,
0.1451493203639984,
0.035135418176651,
0.015490147285163403,
-0.030353538691997528,
0.0684429183602333,
0.01882454939186573,
0.09524563699960709,
-0.01985245756804943,
-0.12201695144176483,
0.10999517142772675,
-0.030727071687579155,
-0.04474900662899017,
-0.23225097358226776,
-0.11455829441547394,
0.040138956159353256,
-0.10604668408632278,
0.043017514050006866,
-0.029051052406430244,
-0.00807181466370821,
0.06193063035607338,
0.09277623146772385,
0.035209424793720245,
0.022777419537305832,
-0.05215279757976532,
0.015090948902070522,
-0.11674311757087708,
-0.033326223492622375,
0.039539407938718796,
0.042824886739254,
-0.006240024697035551,
-0.005440888460725546,
-0.17899572849273682,
-0.14989179372787476,
-0.0224896389991045,
-0.008250334300100803,
-0.013906429521739483,
-0.08487769961357117,
-0.015216151252388954,
-0.047161586582660675,
-0.07854808121919632,
0.009703295305371284,
-0.15634608268737793,
0.06123366206884384,
0.06967771053314209,
0.032369207590818405,
-0.117137610912323,
-0.002721513621509075,
0.05850783735513687,
-0.08458159118890762,
0.012809278443455696,
-0.03660718351602554,
-0.031547822058200836,
-0.07166678458452225,
0.012617658823728561,
0.0076372153125703335,
0.06489326804876328,
-0.1728796511888504,
-0.10495991259813309,
-0.15964385867118835,
0.10275865346193314,
0.05139488726854324,
-0.00610276497900486,
-0.23483487963676453,
-0.14142721891403198,
-0.05643487349152565,
-0.1054200828075409,
-0.15582513809204102,
-0.08527763932943344,
0.05166013911366463,
-0.13119305670261383,
-0.0496305376291275,
-0.07103922963142395,
0.042002659291028976,
-0.040153250098228455,
0.06763847172260284,
-0.0032560001127421856,
-0.045193422585725784,
-0.029591746628284454,
-0.09789932519197464,
0.02374652773141861,
0.06111699715256691,
0.017478056252002716,
0.05307549610733986,
-0.06105240434408188,
-0.03362301364541054,
-0.03160781413316727,
0.014294208958745003,
-0.03696713596582413,
-0.002067323075607419,
0.027787497267127037,
0.10188920795917511,
0.04059417545795441,
-0.0522872619330883,
0.06538739055395126,
-0.0960681140422821,
-0.056914668530225754,
0.002668206114321947,
-0.06884720921516418,
0.1080392450094223,
0.07155902683734894,
0.03775724023580551,
-0.011862693354487419,
0.06491146236658096,
0.05219997838139534,
0.1493367701768875,
0.10001153498888016,
-0.1323428899049759,
-0.06296923756599426,
-0.06555157899856567,
0.151889830827713,
-0.05300905928015709,
-0.06177571415901184,
-0.10888177901506424,
-0.014510062523186207,
0.06185581535100937,
-0.19504545629024506,
-0.13572868704795837,
0.07105806469917297,
0.03349066898226738,
-0.06758136302232742,
-0.031025046482682228,
0.07115350663661957,
0.06574033945798874,
-0.030383892357349396,
0.1364402025938034,
0.07218523323535919,
0.05435977876186371,
-0.13652709126472473,
-0.09315425902605057,
-0.09883025288581848,
0.07065980136394501,
0.011383998207747936,
-0.013133115135133266,
-0.1519860327243805,
-0.007882214151322842,
0.09887166321277618,
-0.0337783619761467,
-0.09171919524669647,
-0.13332366943359375,
0.07515717297792435,
0.03003530763089657,
0.07134270668029785,
0.030088946223258972,
0.08516163378953934,
0.01670602522790432,
0.04585052281618118,
-0.038595303893089294,
0.16362212598323822,
0.11724085360765457,
-0.0966109186410904,
-0.05385959520936012,
0.04870957136154175,
-0.03734341636300087,
0.09958832710981369,
-0.012617314234375954,
-0.005170778837054968,
-0.0861586332321167,
-0.12615656852722168,
0.02484717220067978,
0.09352011978626251,
0.06223524734377861,
0.02546938881278038,
0.038254376500844955,
-0.04235069081187248,
0.03930583596229553,
0.03448069840669632,
-0.011038544587790966,
0.07273658365011215,
0.018589120358228683,
0.012022021226584911,
0.06788109242916107,
-0.05958696827292442,
-0.0179604422301054,
0.1474931240081787,
0.08284180611371994,
0.06764933466911316,
0.0035848827101290226,
0.055880121886730194,
0.03713572397828102,
-0.04513740539550781,
-0.05304991826415062,
-0.01241810992360115,
-0.044939905405044556,
-0.22893519699573517,
-0.0841374397277832,
-0.03271292895078659,
0.07304751127958298,
0.09573763608932495,
0.039230573922395706,
-0.049268756061792374,
-0.018745057284832,
0.12191402912139893,
0.025339854881167412,
0.1330270767211914,
0.051780980080366135,
0.13120178878307343,
0.09519823640584946,
0.029374975711107254,
-0.06762612611055374,
0.0024816528894007206,
0.0755339115858078,
0.031321726739406586,
-0.0962866023182869,
0.011634587310254574,
-0.06322891265153885,
-0.007335612550377846,
0.07281254976987839,
-0.00292206066660583,
0.03684331476688385,
-0.016191240400075912,
0.07920923829078674,
0.032090477645397186,
-0.07701697200536728,
0.05713392049074173,
0.005724015180021524,
0.11056650429964066,
-0.10089550912380219,
0.0078055355697870255,
-0.0002470890758559108,
-0.006581458263099194,
0.058134134858846664,
-0.059105996042490005,
-0.06367404013872147,
-0.029849493876099586,
-0.005011390894651413,
0.07604803144931793,
-0.010280406102538109,
0.006048963405191898,
-0.039951980113983154,
0.26270610094070435,
0.1578536033630371,
0.006645939778536558,
-0.05899707227945328,
0.03829265385866165,
-0.09617038816213608,
0.14618535339832306,
0.03544466942548752,
-0.032841622829437256,
0.0696677416563034,
-0.23093554377555847,
-0.03125850111246109,
-0.06790933012962341,
-0.010214071720838547,
-0.027238264679908752,
-0.21456710994243622,
-0.12126695364713669,
-0.033258043229579926,
-0.01506230141967535,
0.031791843473911285,
-0.021569829434156418,
0.12660054862499237,
-0.015904970467090607,
-0.08627612888813019,
0.02991112321615219,
0.011057098396122456,
-0.10600381344556808,
-0.13238483667373657,
-0.06510160118341446,
-0.03803359344601631,
-0.013398128561675549,
-0.03479134291410446,
0.029385343194007874,
-0.016711920499801636,
-0.0061102937906980515,
0.05954573675990105,
-0.0012309307930991054,
-0.11741732060909271,
-0.017181040719151497,
0.06671299040317535,
0.085573710501194,
-0.04829571023583412,
0.012289365753531456,
0.08740749955177307,
0.01718858815729618,
0.04743306338787079,
-0.01453198492527008,
-0.06269204616546631,
-0.018932607024908066,
-0.059174131602048874,
0.0769205167889595,
-0.013032355345785618,
-0.1016610711812973,
-0.049621839076280594,
0.01641078293323517,
0.09881111979484558,
-0.03724483400583267,
-0.07315792888402939,
-0.07530535012483597,
-0.22876012325286865,
0.07708972692489624,
-0.07027123868465424,
-0.039382271468639374,
0.001657107612118125,
0.05717902630567551,
-0.013527962379157543,
-0.09947028756141663,
-0.08792907744646072,
0.15217837691307068,
0.2674185633659363,
-0.12237896025180817,
-0.1061038002371788,
0.035687848925590515,
0.0890919640660286,
0.1569097936153412,
-0.09634701162576675,
-0.01172939408570528,
0.13026846945285797,
0.0813460722565651,
0.1309463381767273,
-0.058493901044130325,
0.020827317610383034,
-0.09444039314985275,
0.09381291270256042,
-0.025711847469210625,
-0.03307352587580681,
0.006903477944433689,
-0.08701261878013611,
-0.01103899348527193,
-0.016813024878501892,
-0.07098700851202011,
0.01788061484694481,
0.019971787929534912,
0.06645631790161133,
-0.027602581307291985,
-0.09622693061828613,
0.04801987111568451,
0.06688714772462845,
0.09795600920915604,
-0.012041190639138222,
-0.047684140503406525,
-0.0727812647819519,
-0.07663952559232712,
-0.011210307478904724,
0.025909770280122757,
0.008983848616480827,
-0.0925772488117218,
-0.12719249725341797,
-0.03375838324427605,
0.08469808846712112,
0.07437919825315475,
0.11264904588460922,
0.05214499309659004,
0.02136058174073696,
0.07495608925819397,
0.1611369401216507,
0.013799495995044708,
0.0712677463889122,
0.14356879889965057,
0.18080618977546692,
-0.056254345923662186,
-0.021585581824183464,
-0.14343030750751495,
-0.09023411571979523,
-0.004763047210872173,
-0.014724203385412693,
-0.13699111342430115,
-0.001405921415425837,
0.05365850031375885,
0.11584853380918503,
0.08288420736789703,
0.051567208021879196,
-0.01937234401702881,
-0.10604800283908844,
-0.09056032449007034,
0.056899700313806534,
-0.149187833070755,
-0.12291830778121948,
-0.008704391308128834,
0.08114246279001236,
-0.11130981147289276,
-0.029354969039559364,
-0.18935874104499817,
-0.05489843338727951,
0.0851268321275711,
-0.0776568204164505,
-0.05464634299278259,
-0.06948881596326828,
0.05415993556380272,
0.11844856292009354,
-0.06452389806509018,
0.04349006339907646,
0.02476438134908676,
0.0460948646068573,
0.006610042881220579,
0.048485010862350464,
0.0533197745680809,
0.0511515736579895,
-0.14990290999412537,
-0.12083327025175095,
0.04455084353685379,
0.05677992105484009,
0.031189780682325363,
-0.061970848590135574,
-0.25844138860702515,
-0.040326207876205444,
-0.08493755012750626,
0.047294069081544876,
0.03604768589138985,
0.09598419070243835,
-0.009686118923127651,
-0.09018115699291229,
-0.01874346286058426,
0.14521843194961548,
0.12592774629592896,
-0.03679836168885231,
-0.13882796466350555,
-0.09304378181695938,
-0.060114745050668716,
-0.09491492062807083,
-0.022202221676707268,
0.008379434235394001,
0.006069280672818422,
0.08301369100809097,
0.10175655037164688,
0.06825194507837296,
0.018827181309461594,
0.05433875694870949,
0.05845135450363159,
0.13788846135139465,
0.0649157166481018,
0.03804352879524231,
-0.005911695305258036,
0.09844596683979034,
0.04932760074734688,
0.1082521602511406,
0.0796031504869461,
-0.023078080266714096,
-0.08327149599790573,
-0.04690123349428177,
0.02385849691927433,
0.09370337426662445,
0.09353990107774734,
0.04723852500319481,
-0.05625208839774132,
0.0784490555524826,
0.07231424003839493,
0.04258813336491585,
0.1763860136270523,
0.047326236963272095,
0.04401952028274536,
-0.050528619438409805,
-0.032285355031490326,
0.11260829865932465,
0.09251312166452408,
0.15775059163570404,
0.04959291219711304,
-0.012571817263960838,
0.027672380208969116,
0.013196582905948162,
-0.025338660925626755,
0.19241179525852203,
0.0988377034664154,
0.024137098342180252,
-0.1754866987466812,
-0.13448971509933472,
-0.036477070301771164,
0.07871527224779129,
0.03320730850100517,
0.02332121506333351,
0.0033061883877962828,
-0.07929645478725433,
-0.002480662427842617,
0.10999935120344162,
0.15390364825725555,
0.04100632667541504,
0.05919065326452255,
-0.05750380828976631,
0.07881364971399307,
0.013392404653131962,
-0.0014209593646228313,
0.02916691266000271,
-0.005138017237186432,
0.10385549813508987,
0.06557784974575043,
0.017744028940796852,
0.09485677629709244,
0.004762771539390087,
0.004027083516120911,
-0.03498324006795883,
0.10738355666399002,
0.06489011645317078,
-0.05449044331908226,
-0.08806701749563217,
-0.03364107757806778,
0.18786948919296265,
0.14883579313755035,
-0.005030385218560696,
-0.08820271492004395,
-0.03233751654624939,
-0.007167064119130373,
-0.01346632745116949,
-0.03682053089141846,
-0.14314481616020203,
-0.07692836225032806,
-0.06655523180961609,
-0.11788754910230637,
-0.049285996705293655,
-0.012945486232638359,
0.18340398371219635,
-0.10493209213018417,
-0.046447351574897766,
-0.004603440873324871,
0.05874941125512123,
0.11647564172744751,
-0.14860232174396515,
0.004318731836974621,
0.1527925282716751,
0.0885535404086113,
0.07317493855953217,
-0.057912010699510574,
0.130833700299263,
0.029082657769322395,
-0.034352824091911316,
-0.010119612328708172,
0.07628946006298065,
0.13733918964862823,
0.04291268438100815,
-0.08410585671663284,
0.06864891946315765,
0.10249420255422592,
0.06559104472398758,
0.0659303367137909,
0.06722606718540192,
-0.005495588760823011,
-0.002734656445682049,
0.05694461613893509,
-0.019767478108406067,
0.0015837093815207481,
-0.059758711606264114,
0.07905292510986328,
-0.01965894177556038,
-0.14346672594547272,
-0.12714539468288422,
-0.03846430033445358,
0.02931065857410431,
-0.02076389268040657,
-0.06274690479040146,
0.0031495830044150352,
0.15743936598300934,
-0.04420068487524986,
0.03941931203007698,
0.06691475957632065,
0.06805393099784851,
0.1918860375881195,
-0.028614889830350876,
0.009253722615540028,
0.01586577296257019,
0.05084313824772835,
0.09403350204229355,
0.03577161580324173,
-0.08347265422344208,
-0.08694367855787277,
-0.08824154734611511,
-0.07854759693145752,
0.01801251992583275,
-0.04702126979827881,
0.0681309700012207,
0.03788662701845169,
0.10544055700302124,
0.014034117572009563,
0.024478740990161896,
-0.06936352699995041,
0.05177929997444153,
-0.0020724644418805838,
0.03543507307767868,
0.05414559319615364,
0.18658466637134552,
-0.04427717626094818,
-0.18348610401153564,
-0.057814255356788635,
-0.058648109436035156,
-0.10866604745388031,
0.0016936745960265398,
0.01335224136710167,
-0.1130158007144928,
-0.04040517657995224,
-0.06695576757192612,
-0.025699341669678688,
0.02556934766471386,
-0.15184259414672852,
-0.04165508598089218,
-0.0454484187066555,
-0.07570771872997284,
-0.07247647643089294,
-0.16895924508571625,
0.027051156386733055,
0.0843493789434433,
0.06592504680156708,
-0.019403373822569847,
0.22677284479141235,
0.18763671815395355,
0.1361245959997177,
-0.04677934944629669,
0.008940502069890499,
-0.0036722994409501553,
-0.14869482815265656,
-0.07845941185951233,
0.0040877750143408775,
0.07882995158433914,
-0.0946161299943924,
-0.01159631460905075,
0.13177230954170227,
-0.08328111469745636,
0.11408336460590363,
-0.03441038355231285,
-0.033708345144987106,
-0.029073910787701607,
0.05237169936299324,
0.019626434892416,
0.023577723652124405,
-0.08630985021591187,
-0.11774960160255432,
-0.02756386250257492,
0.03365166112780571,
0.11001494526863098,
0.030618058517575264,
-0.2690722346305847,
-0.122127965092659,
0.048637717962265015,
0.1147565171122551,
0.04564405232667923,
-0.14396816492080688,
0.024214385077357292,
0.016324158757925034,
-0.0026619338896125555,
0.09614521265029907,
0.03710982948541641,
-0.08777713030576706,
-0.0996592789888382,
-0.06911414116621017,
-0.10228133946657181,
-0.011975773610174656,
0.011011039838194847,
-0.11162824183702469,
-0.09910960495471954,
-0.18231628835201263,
-0.05552861467003822,
0.04910428076982498,
0.125541090965271,
0.03296441212296486,
0.07377339154481888,
-0.0938667356967926,
-0.07796911895275116,
-0.007400798611342907,
0.03042919561266899,
0.06577542424201965,
0.18185105919837952,
-0.027397537603974342,
-0.06854234635829926,
-0.07519347220659256,
0.14896757900714874,
0.10248126834630966,
-0.15477806329727173,
-0.002205284545198083,
0.0744437649846077,
0.02754109539091587,
-0.055447667837142944,
0.05565856397151947,
-0.024624472483992577,
0.006025456823408604,
0.025415785610675812,
0.047101348638534546,
0.166627898812294,
-0.041589561849832535,
0.0694013386964798,
-0.04820748046040535,
-0.035164959728717804,
0.02955775335431099,
-0.02277768775820732,
0.02841886878013611,
-0.12813962996006012,
0.049629077315330505,
0.19813808798789978,
0.03249908983707428,
0.012285629287362099,
0.04228096827864647,
-0.01669817976653576,
-0.07036805897951126,
0.014566321857273579,
0.08573935180902481,
0.03982839360833168,
-0.06892823427915573,
-0.09435072541236877,
0.019242655485868454,
0.07772164046764374,
-0.09260626137256622,
0.038061078637838364,
-0.13265706598758698,
-0.1919165402650833,
-0.020684417337179184,
0.03402366489171982,
0.039547547698020935,
0.005349410232156515,
-0.082842618227005,
0.17670807242393494,
0.10697829723358154,
0.05368515104055405,
-0.04162122309207916,
0.06364193558692932,
-0.013252687640488148,
-0.03323040530085564,
-0.018599361181259155,
0.005548981484025717,
0.004469684790819883,
0.021792344748973846,
0.03336641192436218,
0.033285677433013916,
0.09900491684675217,
0.09978113323450089,
0.0339248850941658,
-0.05783013999462128,
-0.062302231788635254,
-0.05755004286766052,
-0.09769251942634583,
0.03143010288476944,
-0.07413909584283829,
-0.12553958594799042,
-0.05541866272687912,
0.030950406566262245,
-0.03540929779410362,
0.09990587830543518,
-0.04195157065987587,
0.09023467451334,
-0.05452737212181091,
-0.10624706745147705,
-0.05092928186058998,
0.06420066207647324,
0.01596311293542385,
-0.060710154473781586,
-0.04550289735198021,
-0.05415388196706772,
-0.0820140689611435,
-0.023930126801133156,
-0.11816215515136719,
-0.03248191997408867,
0.009113168343901634,
-0.030156373977661133,
-0.026839641854166985,
-0.06291262060403824,
0.11448214203119278,
0.013897780328989029,
0.1319834589958191,
-0.010819635353982449,
0.09652986377477646,
0.03096039965748787,
-0.04457196965813637,
0.016194546595215797,
-0.027389593422412872,
0.009455826133489609,
0.053491778671741486,
0.14310084283351898,
0.09615106135606766,
0.011052371934056282,
0.017953822389245033,
0.09875889867544174,
0.05349472910165787,
0.05972566083073616,
0.039678651839494705,
0.06088615953922272,
0.08524143695831299,
-0.12854275107383728,
0.0447094589471817,
-0.10041547566652298,
-0.1682870239019394,
-0.15651899576187134,
-0.1987316906452179,
-0.040689315646886826,
0.0072747450321912766,
-0.011249038390815258,
0.05800812691450119,
-0.09150922298431396,
0.0715627670288086,
0.006390468217432499,
0.019642449915409088,
-0.001778752775862813,
-0.07788267731666565,
-0.04293505474925041,
0.03213903680443764,
0.06098434329032898,
-0.01259324699640274,
0.005847950465977192,
0.08760719746351242,
0.11404728144407272,
0.08699894696474075,
0.25025197863578796,
0.23695215582847595,
0.05372597649693489,
-0.06733298301696777,
-3.1008022460810025e-07,
-0.0584404356777668,
0.03388958424329758,
0.09097900986671448,
-0.03884129226207733,
-0.12168161571025848,
-0.1219337210059166,
-0.006229914724826813,
0.043317630887031555,
-0.0046731880865991116,
-0.006863810587674379,
0.10562938451766968,
0.08997095376253128,
0.10780913382768631,
0.04314224049448967,
0.039215292781591415,
0.04525507614016533,
0.02907084859907627,
0.011052255518734455,
0.038512248545885086,
0.02097194455564022,
0.03223163262009621,
0.05315452814102173,
0.08879117667675018,
0.03852080553770065,
0.01230702456086874,
-0.00966968946158886,
0.05149056762456894,
-0.00067178561585024,
0.014725705608725548,
-0.056894734501838684,
-0.06599929183721542,
-0.1716143786907196,
0.023506803438067436,
0.1570785641670227,
-0.054626911878585815,
0.014318609610199928,
0.021500149741768837,
0.0795663595199585,
0.0020205506589263678,
0.05561186745762825,
0.013699392788112164,
-0.03260898217558861,
-0.007309311535209417,
0.021023504436016083,
0.08110219240188599,
0.07555246353149414,
-0.061042286455631256,
0.03302041068673134,
0.06166806444525719,
0.03280327469110489,
0.05421138554811478,
-0.004725417587906122,
-0.04553887993097305,
-0.0063638766296207905,
0.022971510887145996,
-0.01886915974318981,
-0.1275900900363922,
-0.07022584229707718,
0.09044086933135986,
-0.0016159395454451442,
-0.14829950034618378,
0.0011716937879100442,
0.07912885397672653,
0.02871605008840561,
-0.08422983437776566,
0.03680499643087387,
-0.07794097810983658,
-0.08451499789953232,
-0.00795409083366394,
0.011063545010983944,
0.09086345136165619,
-0.07096216082572937,
0.06643944978713989,
0.05148344859480858,
-0.056444767862558365,
0.15012913942337036,
0.16185148060321808,
0.05511818081140518,
0.0014835295733064413,
0.021034499630331993,
-0.03494416922330856,
-0.20347122848033905,
-0.15500159561634064,
0.060272376984357834,
0.09359762817621231,
-0.0048478106036782265,
-0.09332204610109329,
-0.015467408113181591,
0.09128206968307495,
-0.029178008437156677,
0.002947196364402771,
0.053683821111917496,
0.10037382692098618,
0.11920622736215591,
0.09131091088056564,
-0.01119704358279705,
0.05817276984453201,
0.02602481096982956,
-0.04751526191830635,
-0.044869739562273026,
-0.16872601211071014,
-0.04686669260263443,
0.06299882382154465,
-0.009271669201552868,
-0.15561310946941376,
0.00883865263313055,
0.11483809351921082,
0.139760360121727,
-0.03862452134490013,
-0.13524571061134338,
0.07648631930351257,
0.2570820748806,
0.13526247441768646,
0.10703407973051071,
-0.048039425164461136,
-0.021172605454921722,
0.04971114546060562,
0.006044076289981604,
0.08679039031267166,
0.049858298152685165,
0.13302892446517944,
0.10652468353509903,
0.06181684136390686,
0.03944028913974762,
-0.04522765800356865,
0.033298324793577194,
0.0011094504734501243,
-0.006339941173791885,
-0.010741492733359337,
0.07318595051765442,
-0.02465713582932949,
-0.06780825555324554,
-0.0017642317106947303,
0.05089457333087921,
0.02806825563311577,
-0.12686435878276825,
0.17211668193340302,
0.16561001539230347,
-0.047532640397548676,
-0.09146086126565933,
0.06416810303926468,
-0.011988687328994274,
-0.06009391322731972,
-0.0468437485396862,
-0.07002262026071548,
-0.09494324773550034,
0.007570079993456602,
-0.02578730136156082,
0.11149189621210098,
0.075759157538414,
0.016206489875912666,
0.08449091762304306,
0.04878032207489014,
0.08641066402196884,
-0.01341403927654028,
0.09300824999809265,
0.048777833580970764,
0.03876139968633652,
-0.0194694884121418,
0.06963296234607697,
-0.06061842665076256,
-0.05852608382701874,
-0.016944309696555138,
-0.024142079055309296,
0.06548695266246796,
-0.08296260237693787,
-0.10621718317270279,
-0.04882887378334999,
-0.0290408693253994,
-0.04713832214474678,
-0.0738428458571434,
0.09559597074985504,
0.0479079931974411,
0.11604330688714981,
-0.010072075761854649,
0.07080838829278946,
-0.06186375766992569,
0.08573945611715317,
-0.026588493958115578,
-0.11937140673398972,
-0.012839183211326599,
0.05324354022741318,
0.10481078177690506,
0.04513602331280708,
-0.030314557254314423,
0.1827995628118515,
0.16657203435897827,
0.13185174763202667,
0.04445381462574005,
0.05222543329000473,
0.14746737480163574,
0.08746084570884705,
0.05860592797398567,
0.06957665085792542,
0.1995319426059723,
0.04166662320494652,
0.05927759408950806,
-0.05024208500981331,
-0.050540562719106674,
0.10414320975542068,
-0.02634049393236637,
0.016124825924634933,
-0.07899036258459091,
0.045415882021188736,
-0.1305469572544098,
-0.04184504225850105,
0.007427932694554329,
-0.08721923828125,
-0.04508932679891586,
0.05705300346016884,
0.07595933228731155,
0.017024165019392967,
-0.0995962992310524,
0.008864347822964191,
0.10513229668140411,
0.08554045110940933,
-0.03355422243475914,
-0.0899038165807724,
-0.032552607357501984,
-0.07936309278011322,
-0.0023541308473795652,
-0.002383809071034193,
-0.06333880126476288,
-0.036945000290870667,
-0.0005275863222777843,
0.010358445346355438,
-0.11137591302394867,
0.02518986538052559,
0.035163648426532745,
-0.050136420875787735,
0.019650373607873917,
-0.168369859457016,
-0.0479142963886261,
0.025011224672198296,
0.06882812827825546,
0.03801307454705238,
-0.10635481774806976,
0.055971164256334305,
0.11418920755386353,
0.01582813449203968,
-0.05536719039082527,
0.054801736027002335,
0.057921163737773895,
0.028933458030223846,
-0.02637668512761593,
-0.026216749101877213,
-0.09711100161075592,
0.07174242287874222,
0.10948700457811356,
0.09946713596582413,
0.1947105973958969,
-0.03517056256532669,
0.08289021253585815,
0.08792132139205933,
0.16807197034358978,
0.06414598971605301,
0.0021443599835038185,
-0.06781300902366638,
-0.06307903677225113,
-0.07469753921031952,
0.067575603723526,
0.003981209825724363,
-0.08407614380121231,
-0.037191420793533325,
0.009260899387300014,
0.0463360920548439,
-0.013557146303355694,
0.07047417014837265,
0.007952550426125526,
0.05302920565009117,
0.02776450477540493,
-0.01240129116922617,
-0.03931461274623871,
0.03304523974657059,
0.036384403705596924,
-0.031658388674259186,
-0.032081786543130875,
0.021375475451350212,
0.0356111079454422,
-0.07256052643060684,
-0.09017454832792282,
0.02419479936361313,
0.027015049010515213,
-0.08260290324687958,
-0.06979811936616898,
-0.061955370008945465,
-0.09307994693517685,
0.13490177690982819,
0.032716792076826096,
-0.04764213785529137,
0.034745100885629654,
0.04275457561016083,
0.15027450025081635,
0.0229253638535738,
-0.0057633924297988415,
0.0232688058167696,
0.08642473816871643,
0.07896667718887329,
0.036594241857528687,
0.26959413290023804,
0.032395221292972565,
0.11750640720129013,
0.09888792037963867,
0.13404880464076996,
0.0577872209250927,
0.044449515640735626,
0.0441405288875103,
0.07824215292930603,
0.05880522355437279,
-0.06861419230699539,
-0.08107324689626694,
-0.04233113303780556,
-0.04456895589828491,
-0.08593007177114487,
-0.14534176886081696,
-0.0012209682026878,
0.0005010508466511965,
-0.12151758372783661,
-0.07115422934293747,
-0.17251929640769958,
-0.04578477889299393,
-0.030514204874634743,
-0.053702183067798615,
-0.03874088078737259,
-0.09473087638616562,
-0.02557363174855709,
0.04295067489147186,
-0.044556356966495514,
-0.14489175379276276,
-0.07440974563360214,
-0.014239062555134296,
-0.06700386106967926,
-0.002713538473471999,
-0.08359416574239731,
-0.030393512919545174,
-0.05098958685994148,
-0.10750698298215866,
0.06053530424833298,
0.0013037252938374877,
0.04488823562860489,
0.05305144935846329,
0.029399294406175613,
0.04777303710579872,
-0.051123715937137604,
-0.06447608768939972,
-0.0730014219880104,
0.010578162036836147,
0.034551654011011124,
0.0511680506169796,
0.04107228294014931,
-0.20823390781879425,
-0.09602128714323044,
0.1185651570558548,
0.16270291805267334,
0.06265997141599655,
-0.06135615333914757,
0.058028001338243484,
-0.05324152857065201,
0.04396185278892517,
-0.17190465331077576,
0.04667120799422264,
-0.017689982429146767,
0.05716601759195328,
-0.024523841217160225,
-0.06767823547124863,
-0.023785486817359924,
0.08824262022972107,
0.024546071887016296,
-0.05979297682642937,
-0.042963966727256775,
0.033682502806186676,
0.0637066587805748,
0.0572076290845871,
0.06654535233974457,
0.061067335307598114,
0.010112249292433262,
0.11730260401964188,
0.022404905408620834,
-0.018024075776338577,
-0.05034622922539711,
0.061174530535936356,
0.06450963765382767,
0.11506669223308563,
0.10036148130893707,
0.05065951868891716,
-0.0326751247048378,
-0.03651381656527519,
0.005802321247756481,
0.02692243456840515,
-0.06194654107093811,
0.013693103566765785,
-0.014337309636175632,
0.017689893022179604,
-0.030082110315561295,
0.05253320932388306,
-0.04328494146466255,
-0.06478361040353775,
0.09045277535915375,
0.11822231858968735,
0.05143100023269653,
0.18198920786380768,
-0.03930811583995819,
0.0719911977648735,
0.0591769739985466,
0.1577814519405365,
0.1404469758272171,
0.02758193016052246,
0.0161826740950346,
-0.004696805030107498,
-0.06572748720645905,
-0.025942934677004814,
-0.024870164692401886,
-0.08348710834980011,
-0.01618032343685627,
-0.022259779274463654,
0.051629628986120224,
0.06368816643953323,
0.1486203819513321,
0.0486113466322422,
0.0940808579325676,
-0.053517233580350876,
-0.09399009495973587,
-0.033040210604667664,
-0.029106246307492256,
0.031701408326625824,
-0.036616671830415726,
-0.005005181767046452,
0.03494322672486305,
-0.12254337221384048,
-0.08432523161172867,
0.011384496465325356,
0.04796981066465378,
-0.027591697871685028,
-0.07698977738618851,
-0.11078628152608871,
-0.08987604826688766,
-0.0026440599467605352,
0.06818024069070816,
-0.030762627720832825,
0.04074835777282715,
0.0634145587682724,
-0.07338107377290726,
-0.07332652807235718,
-0.024619972333312035,
-0.08461343497037888,
-0.07707607001066208,
-0.0449962317943573,
-0.17103268206119537,
-0.017591005191206932,
0.007526916917413473,
-0.08878058195114136,
-0.019918130710721016,
-0.01212326716631651,
0.0029975122306495905,
-0.15025195479393005,
-0.12196598947048187,
-0.08890704810619354,
0.056876011192798615,
-0.032201021909713745,
-0.11697189509868622,
0.04988668113946915,
-0.060650620609521866,
0.10896342992782593,
0.01831834577023983,
-0.0008819810464046896,
0.04774995893239975,
0.12024810165166855,
-0.0727165937423706,
-0.08452319353818893,
-0.06411591917276382,
-0.007996879518032074,
0.02092740312218666,
0.008345212787389755,
0.02794848382472992,
-0.07755677402019501,
-0.0997418686747551,
-0.05330430343747139,
0.011739213950932026,
0.0555841438472271,
-0.0007708521443419158,
-0.12534280121326447,
-0.11067011207342148,
-0.024813620373606682,
-0.13959580659866333,
-0.14565463364124298,
-0.05871572718024254,
-0.024956881999969482,
-0.012416359968483448,
0.025929350405931473,
-0.009535109624266624,
-0.07338253408670425,
-0.09271235764026642,
0.13785792887210846,
0.16096597909927368,
0.15707769989967346,
0.011148976162075996,
-0.06049111858010292,
0.09500817209482193,
0.2468620240688324,
0.11988265812397003,
0.18187595903873444,
0.08290290087461472,
0.08781726658344269,
0.0768524557352066,
0.13337688148021698,
0.03622021526098251,
0.04562780261039734,
-0.08297384530305862,
0.018745897337794304,
-0.05620519071817398,
-0.018947379663586617,
-0.011769631877541542,
-0.06981799751520157,
-0.10770202428102493,
-0.1402871310710907,
0.07857289910316467,
-0.11932951211929321,
-0.16080908477306366,
-0.0719873234629631,
-0.011719625443220139,
-0.014912597835063934,
-0.1710740476846695,
-0.02928120456635952,
-0.004265751224011183,
0.07136709243059158,
-0.013974970206618309,
-0.0136317303404212,
-0.1433684080839157,
-0.022198248654603958,
-0.03468615934252739,
0.1282976120710373,
0.033981241285800934,
-0.17635668814182281,
-0.06815187633037567,
0.008044899441301823,
-0.017575891688466072,
-0.06852605938911438,
-0.06103947013616562,
0.07139810919761658,
0.03379908949136734,
0.04675794392824173,
0.11868691444396973,
0.01758512668311596,
0.07424057275056839,
0.13934661448001862,
-0.008741539902985096,
-0.031346578150987625,
-0.018846699967980385,
0.017468057572841644,
0.015234223566949368,
0.04808470606803894,
-0.008517995476722717,
0.03154444694519043,
0.04146544262766838,
0.06659238040447235,
-0.0011281686602160335,
-0.03064412996172905,
-0.043042320758104324,
-0.07921555638313293,
-0.1440557986497879,
0.0509064756333828,
0.04185296967625618,
-0.0639665499329567,
0.0040186685509979725,
-0.08032973855733871,
-0.04129614681005478,
-0.022023305296897888,
-0.10598954558372498,
-0.11957018822431564,
-0.04754800722002983,
0.0025505570229142904,
0.04514404758810997,
0.11637360602617264,
0.03899483010172844,
0.01992536149919033,
0.09162463992834091,
0.08312378078699112,
-0.05382303521037102,
-0.043920278549194336,
0.14768387377262115,
0.10217442363500595,
0.07073870301246643,
0.0702204704284668,
0.020151594653725624,
-0.039557795971632004,
0.0741923525929451,
0.0009680520161055028,
-0.012446669861674309,
0.01240237895399332,
0.02951575256884098,
0.18705855309963226,
0.10936356335878372,
-0.02956448122859001,
0.029119467362761497,
0.09562653303146362,
0.02109665237367153,
-0.06530612707138062,
-0.11325455456972122,
0.010662916116416454,
0.09996844828128815,
-0.2078564614057541,
-0.030594008043408394,
-0.13682834804058075,
-0.02648427151143551,
-0.04591808095574379,
0.013392454013228416,
0.15125855803489685,
-0.02125328779220581,
-0.01447825226932764,
-0.07135403901338577,
0.09867893904447556,
-0.012398486956954002,
-0.1770118921995163,
-0.05223006382584572,
-0.03234531730413437,
0.09954321384429932,
0.07635337114334106,
0.022253885865211487,
0.03254421427845955,
-0.008525683544576168,
0.03315242379903793,
-0.02749241143465042,
0.020915545523166656,
0.03477846458554268,
0.01777840219438076,
-0.0841326117515564,
-0.10850558429956436,
0.200252503156662,
-0.005091902334243059,
-0.031834110617637634,
-0.04522599279880524,
-0.029374949634075165,
0.1359783262014389,
-0.0681162178516388,
0.07041122764348984,
0.014767732471227646,
-0.02937259152531624,
-0.03250579908490181,
0.046765487641096115,
0.09249584376811981,
0.04220465570688248,
0.0670517161488533,
-0.008437850512564182,
-0.056276142597198486,
0.04452262446284294,
-0.005082776769995689,
0.013998021371662617,
0.07657263427972794,
0.013403987511992455,
-0.14421208202838898,
0.15316328406333923,
-0.10394254326820374,
0.2042776346206665,
0.09990974515676498,
0.09082744270563126,
0.0526743121445179,
0.03839918598532677,
-0.12192318588495255,
0.1554042100906372,
0.12481331825256348,
0.05801714211702347,
-0.21568326652050018,
-0.1620638072490692,
0.061629317700862885,
-0.13124507665634155,
0.014018542133271694,
0.058593519032001495,
-0.014664735645055771,
-0.05768667533993721,
0.008306974545121193,
0.012897796928882599,
0.0829915702342987,
0.002032891381531954,
-0.11819493770599365,
0.08994527906179428,
-0.12518754601478577,
0.0860632061958313,
0.09165938198566437,
-0.05395372956991196,
-0.0891597792506218,
-0.05112375691533089,
0.038276176899671555,
0.004631517920643091,
-0.17651799321174622,
-0.017065584659576416,
-0.04309946671128273,
0.02519964426755905,
0.16960807144641876,
0.07849213480949402,
0.03910363093018532,
-0.03636271506547928,
-0.036800894886255264,
0.10685660690069199,
0.04153347760438919,
-0.15736845135688782,
-0.027497701346874237,
0.06965302675962448,
0.001671871985308826,
0.07044301927089691,
0.06338392943143845,
0.019007647410035133,
0.07788415253162384,
0.010557965375483036,
0.09778840094804764,
0.05467163026332855,
-0.11657582223415375,
-0.1466751992702484,
-0.039881348609924316,
-0.005035664886236191,
0.07134567946195602,
0.14883510768413544,
0.022105414420366287,
0.10638163238763809,
0.07580649852752686,
0.05773067846894264,
0.015853531658649445,
-0.04262145236134529,
-0.024331945925951004,
0.00690104765817523,
0.0009651739383116364,
-0.03605606034398079,
-0.010149754583835602,
0.10711066424846649,
0.04682812839746475,
0.03261769935488701,
-0.009643055498600006,
-0.029343724250793457,
0.14230506122112274,
-0.0660511925816536,
0.012723692692816257,
-0.008446880616247654,
-0.10009212791919708,
0.036658138036727905,
-0.17680315673351288,
-0.06400878727436066,
0.02722555212676525,
0.08862987905740738,
-0.11782902479171753,
-0.07693462818861008,
0.04276767373085022,
-0.018557440489530563,
0.0709693506360054,
0.08070314675569534,
-0.024917729198932648,
-0.0009724118863232434,
-0.039820194244384766,
-0.014966131187975407,
-0.014056215062737465,
-0.03852865844964981,
-0.017540549859404564,
-0.05579764023423195,
0.007103095296770334,
-0.04833570122718811,
0.04603524133563042,
-0.12075583636760712,
0.1526414006948471,
0.09445403516292572,
-0.0353214293718338,
0.09014735370874405,
0.03751597926020622,
0.009105263277888298,
-0.059263233095407486,
0.03394557535648346,
0.116876021027565,
-0.10133734345436096,
-0.046102359890937805,
-0.022816108539700508,
-0.02874683029949665,
0.004679290112107992,
-0.03553013876080513,
-0.05230288580060005,
0.10888025909662247,
0.04346539080142975,
0.08652620762586594,
0.058207277208566666,
0.0687771812081337,
0.17102137207984924,
0.11604495346546173,
0.04434014484286308,
-0.019479786977171898,
-0.11255545169115067,
-0.028074679896235466,
0.07524698227643967,
0.12954969704151154,
0.03905593976378441,
-0.011920953169465065,
0.05535413324832916,
0.10433211922645569,
0.04976390674710274,
-0.0952153205871582,
0.014048359356820583,
-0.03411686792969704,
-0.11677122116088867,
-0.10577555000782013,
-0.13566778600215912,
-0.06366324424743652,
-0.06108959764242172,
0.021831726655364037,
-0.026100769639015198,
-0.025579458102583885,
0.23869545757770538,
-0.08519108593463898,
-0.11615978181362152,
0.09837634861469269,
0.22367995977401733,
0.03667224943637848,
0.04729499667882919,
-0.029571998864412308,
-0.017665572464466095,
0.05054745450615883,
-0.16865861415863037,
-0.002473714528605342,
-0.07270295917987823,
-0.06671573966741562,
-0.06718212366104126,
0.0291446540504694,
-0.005510938819497824,
-0.02375885099172592,
-0.1345638930797577,
0.017664095386862755,
-0.008235755376517773,
-0.03153345361351967,
-0.10724115371704102,
0.05117229372262955,
0.08612165600061417,
-0.11438410729169846,
0.07735858857631683,
0.05625596269965172,
0.004456121474504471,
-0.030093640089035034,
0.012126871384680271,
0.1499590277671814,
-0.15374302864074707,
-0.0812365859746933,
-0.06720797717571259,
-0.046015314757823944,
-0.09208918362855911,
-0.005064630880951881,
0.03135084733366966,
0.008081847801804543,
0.018107589334249496,
-0.029643166810274124,
-0.03691837936639786,
-0.005207872483879328,
0.004938581492751837,
-0.14750264585018158,
-0.09375534951686859,
0.03859281167387962,
-0.022508785128593445,
0.04744509607553482,
-0.18724529445171356,
-0.10563134402036667,
0.0504792146384716,
0.031184667721390724,
-0.09544690698385239,
0.011564659886062145,
-0.005286119878292084,
0.0361708365380764,
-0.13784745335578918,
-0.10386538505554199,
0.07472265511751175,
-0.19286252558231354,
-0.05978565290570259,
0.06563964486122131,
0.09823920577764511,
0.054545678198337555,
0.052331581711769104,
0.007227052468806505,
-0.037383534014225006,
-0.13054192066192627,
-0.030307943001389503,
0.06370801478624344,
-0.03751856088638306,
-0.01736316829919815,
0.055113352835178375,
-0.1344507783651352,
-0.17097464203834534,
0.13623207807540894,
0.12874740362167358,
0.034206781536340714,
-0.03228675574064255,
0.0610029436647892,
0.08326406031847,
-0.15782713890075684,
-0.18623164296150208,
0.09033863246440887,
0.025718189775943756,
-0.030413875356316566,
-0.09015960991382599,
-0.032537125051021576,
-0.00688916677609086,
0.000789117009844631,
0.019343320280313492,
-0.14279285073280334,
-0.2200613170862198,
0.0522434338927269,
0.10154004395008087,
0.03249302878975868,
0.04763570427894592,
0.0024651363492012024,
0.18950283527374268,
0.1575150489807129,
-0.07129453867673874,
0.06531379371881485,
0.1639297753572464,
-0.02601073496043682,
-0.02368791773915291,
-0.0577344074845314,
0.056035734713077545,
0.05117616802453995,
-0.1489962786436081,
-0.1095004677772522,
0.0011238125152885914,
-0.07146716117858887,
-0.12484028935432434,
0.12859950959682465,
-0.09744245558977127,
0.005146319046616554,
-0.0813719853758812,
-0.06011573597788811,
-0.02889973483979702,
-0.14039483666419983,
-0.0745045393705368,
0.02707921341061592,
0.11179730296134949,
-0.04467748478055,
-0.0017482833936810493,
-0.053851883858442307,
0.022016296163201332,
0.03536834567785263,
0.03610862046480179,
0.034862615168094635,
-0.08764719218015671,
-0.03477149456739426,
-0.024639839306473732,
0.06279119104146957,
-0.23512975871562958,
-0.15574288368225098,
0.13629601895809174,
0.07878442853689194,
-0.0012020900612697005,
-0.0064085619524121284,
0.011327371932566166,
0.024728214368224144,
0.00729568675160408,
0.02156738191843033,
-0.12811756134033203,
-0.012689840979874134,
-0.08294286578893661,
-0.030526703223586082,
0.05713193118572235,
-0.09365043044090271,
-0.11264932155609131,
0.023392952978610992,
0.043325312435626984,
0.043608780950307846,
-0.0143069326877594,
-0.029374850913882256,
-0.05336218699812889,
-0.05285836011171341,
0.023274103179574013,
0.1157425194978714,
0.07445446401834488,
0.05013259872794151,
-0.08043170720338821,
0.06264617294073105,
0.07271171361207962,
-0.004154584836214781,
0.027900330722332,
0.05359620228409767,
0.08595500141382217,
-0.06749696284532547,
0.054979074746370316,
-0.06953062862157822,
-0.03234539553523064,
0.1105005070567131,
0.16603875160217285,
0.03986167907714844,
0.011809085495769978,
0.19083651900291443,
0.09714795649051666,
-0.05513407662510872,
-0.017376095056533813,
-0.03442555293440819,
0.012874938547611237,
-0.10968466848134995,
-0.10571078956127167,
-0.10214643180370331,
-0.09854677319526672,
-0.0043836054392158985,
-0.0571608692407608,
-0.03862796723842621,
-0.05878633260726929,
-0.11416012048721313,
-0.29056644439697266,
-0.020201191306114197,
-0.03608780354261398,
-0.030795572325587273,
0.1598435342311859,
0.06708307564258575,
-0.02330140396952629,
-0.008579210378229618,
-0.03296886757016182,
0.0025557060725986958,
0.24781179428100586,
0.07118508964776993,
-0.01666693389415741,
0.06013276427984238,
0.06249379366636276,
-0.07961124926805496,
-0.03638994321227074,
0.07715310901403427,
0.07044759392738342,
0.011949252337217331,
-0.12462516129016876,
-0.13435813784599304,
-0.007752073463052511,
0.1050211638212204,
0.040393076837062836,
0.07506080716848373,
-0.04387558624148369,
-0.05098944902420044,
-0.014650143682956696,
0.023195328190922737,
0.04594307020306587,
-0.029387978836894035,
0.007138118613511324,
-0.03182262182235718,
0.0225576963275671,
0.0001331552630290389,
0.02548421174287796,
0.03346044570207596,
-0.050292324274778366,
-0.038294658064842224,
-0.008424527943134308,
0.02389344945549965,
0.07114250212907791,
0.07005417346954346,
-0.02618693746626377,
0.005082049407064915,
0.184013232588768,
-0.003635960165411234,
0.03970588743686676,
0.0008526758174411952,
0.11248386651277542,
0.06745491921901703,
0.20912066102027893,
-0.08460245281457901,
-0.21914705634117126,
-0.12023328244686127,
-0.14811359345912933,
-0.027943454682826996,
-0.027143875136971474,
-0.025601988658308983,
-0.14952291548252106,
-0.17302776873111725,
-0.19897988438606262,
-0.005363107193261385,
-0.09754252433776855,
0.02172848954796791,
-0.12233691662549973,
0.09192406386137009,
0.062412627041339874,
-0.05650089308619499,
0.09273669123649597,
0.005111056845635176,
-0.004973023198544979,
0.06770745664834976,
0.04527028277516365,
-0.06713731586933136,
0.05856441333889961,
0.03732085973024368,
-0.02974596433341503,
-0.026271909475326538,
-0.020573437213897705,
0.08612924069166183,
-0.026896417140960693,
-0.07270333170890808,
0.1284998506307602,
0.10431841760873795,
0.046817559748888016,
0.0965350940823555,
0.04765038192272186,
0.1540314108133316,
-0.010711833834648132,
0.05310896784067154,
-0.0005591356894001365,
-0.17854748666286469,
-0.10537991672754288,
-0.029409879818558693,
0.033039335161447525,
0.04787915199995041,
0.02875467948615551,
-0.01487666554749012,
-0.052768684923648834,
0.002536813961341977,
-0.050259850919246674,
-0.06944054365158081,
-0.08405604213476181,
-0.24400770664215088,
-0.060017213225364685,
-0.043177083134651184,
-0.006842734757810831,
-0.05215468630194664,
-0.003516713622957468,
-0.07987463474273682,
0.033231791108846664,
0.016979994252324104,
0.05666288733482361,
0.15646357834339142,
-0.01663121208548546,
-0.07614780217409134,
0.05634009465575218,
0.06611418724060059,
0.18571513891220093,
-0.11531465500593185,
-0.024649908766150475,
0.03491436317563057,
0.05684538558125496,
0.15725171566009521,
-0.006792278029024601,
-0.08252907544374466,
0.01749197021126747,
0.15333272516727448,
0.15678972005844116,
0.053061697632074356,
-0.0533125177025795,
-0.13350458443164825,
0.03525697812438011,
-0.0389057882130146,
0.03807957097887993,
0.019788207486271858,
-0.04001987725496292,
0.03537623584270477,
0.03079075925052166,
0.061335399746894836,
0.16383056342601776,
0.0997791588306427,
0.05184246227145195,
0.025019006803631783,
-0.025120606645941734,
-0.0490950383245945,
-0.06505946815013885,
-0.012744931504130363,
0.039841897785663605,
0.11691950261592865,
0.08316951990127563,
-0.11299624294042587,
-0.096722811460495,
-0.07123386114835739,
0.1453041136264801,
-0.012882303446531296,
-0.14817877113819122,
-0.0874864012002945,
-0.009162330999970436,
-0.0015675189206376672,
-0.027567340061068535,
0.06073493883013725,
0.15553565323352814,
0.1817249357700348,
-0.029474550858139992,
-0.04941809922456741,
-0.10922160744667053,
-0.10025189071893692,
0.06651211529970169,
0.005969779100269079,
0.00778396800160408,
0.15073320269584656,
0.054228220134973526,
0.08647717535495758,
0.027319500222802162,
-0.0460888110101223,
0.05023752525448799,
0.027706993743777275,
0.04158397763967514,
0.01584336720407009,
0.010359488427639008,
-0.028856078162789345,
-0.05823637172579765,
0.003951074089854956,
-0.02136411890387535,
0.0070645674131810665,
-0.06645791232585907,
-0.011450267396867275,
0.01869327388703823,
-0.05351874977350235,
-0.0014903557021170855,
-0.025394413620233536,
-0.05559195950627327,
0.12948450446128845,
0.07362301647663116,
-0.01872720941901207,
-0.09832732379436493,
0.05554890260100365,
-0.036511991173028946,
0.028423093259334564,
-0.014501308090984821,
-0.026826689019799232,
-0.1797237992286682,
-0.15046949684619904,
-0.05198806896805763,
-0.013961061835289001,
0.03515123203396797,
-0.10108846426010132,
-0.18520569801330566,
-0.045596636831760406,
-0.02753647416830063,
0.01808352768421173,
0.08375617116689682,
0.1950782835483551,
0.0011283234925940633,
-0.0975784957408905,
0.07458985596895218,
0.014727944508194923,
0.03557582572102547,
0.01270059123635292,
0.00048120442079380155,
0.00919194333255291,
-0.07258369773626328,
-0.1633448600769043,
0.10347236692905426,
0.053197041153907776,
0.042007725685834885,
-0.06001448258757591,
-0.09506429731845856,
0.03492974117398262,
-0.030727632343769073,
-0.00745726004242897,
0.17792442440986633,
0.1910577416419983,
0.07666613906621933,
0.0866907611489296,
0.08031131327152252,
0.026205750182271004,
0.056592002511024475,
0.11348257958889008,
-0.05834492668509483,
-0.06817610561847687,
-0.12317157536745071,
-0.08509990572929382,
-0.11179307848215103,
-0.004911716561764479,
0.0415460504591465,
0.01645858772099018,
0.053622711449861526,
0.05512605980038643,
-0.04405393823981285,
0.11175159364938736,
0.14629074931144714,
0.07086294889450073,
0.029315326362848282,
-0.038317516446113586,
-0.026938652619719505,
0.06621213257312775,
0.16318728029727936,
0.182759627699852,
0.05017690360546112,
-0.005855092313140631,
0.005485005211085081,
-0.046220555901527405,
0.0732167437672615,
0.1682569831609726,
-0.044360026717185974,
-0.06947344541549683,
-0.11017895489931107,
-0.04998243972659111,
-0.014011400751769543,
-0.03528235852718353,
-0.07117526233196259,
-0.1529654860496521,
0.03558586165308952,
0.004567607305943966,
-0.0043924530036747456,
0.0010603831615298986,
0.05471271276473999,
0.05849091708660126,
0.03832431510090828,
-0.16282404959201813,
0.07102659344673157,
0.09313292801380157,
0.037210613489151,
0.07152677327394485,
0.022967128083109856,
0.13325272500514984,
0.09089361131191254,
0.11529362946748734,
0.14740197360515594,
0.003943747840821743,
-0.06271751970052719,
-0.03856196254491806,
0.1592217981815338,
0.1149740219116211,
-0.13431520760059357,
-0.10729458183050156,
-0.14858397841453552,
-0.028503820300102234,
-0.016030171886086464,
-0.04175790399312973,
-0.17259788513183594,
-0.11612752079963684,
-0.02101031504571438,
-0.009875770658254623,
-0.10758601129055023,
-0.14492040872573853,
-0.1336917132139206,
-0.1316504329442978,
-0.08259263634681702,
0.0003933289262931794,
0.057564735412597656,
0.16699165105819702,
-0.0741230845451355,
-0.06586800515651703,
-0.05790712684392929,
0.024719400331377983,
0.18937347829341888,
-0.07865292578935623,
0.06956462562084198,
0.02473771944642067,
0.016452571377158165,
-0.0689496323466301,
-0.045920878648757935,
0.10321915149688721,
-0.07162058353424072,
-0.012932372279465199,
-0.058213770389556885,
0.0036136757116764784,
0.09581758826971054,
0.05269337072968483,
0.10025053471326828,
0.06465334445238113,
-0.05036528781056404,
0.07624462991952896,
0.0788251981139183,
0.04145416244864464,
0.059552788734436035,
0.06262139230966568,
0.09625466167926788,
-0.026651576161384583,
-0.10385827720165253,
-0.0001241263817064464,
-0.0421920120716095,
-0.07154832035303116,
-0.11679372191429138,
-0.10714372247457504,
-0.15816344320774078,
0.027750400826334953,
-0.03766101598739624,
-0.04627840965986252,
-0.00283755618147552,
-0.08610256761312485,
-0.031065406277775764,
-0.02528683841228485,
0.09590191394090652,
0.07810845971107483,
0.12209983170032501,
-0.06268877536058426,
-0.06717546284198761,
-0.056057099252939224,
0.024463651701807976,
0.12395332753658295,
0.04623691737651825,
-0.09819615632295609,
-0.04672021046280861,
-0.06624623388051987,
0.0460767038166523,
-0.014608511701226234,
0.019476309418678284,
0.0717279464006424,
0.07080114632844925,
0.131637841463089,
0.0941050574183464,
-0.053951483219861984,
-0.16676649451255798,
-0.13811618089675903,
-0.12222552299499512,
0.031642355024814606,
-0.04802338778972626,
-0.03241739422082901,
-0.093304842710495,
-0.19549560546875,
-0.10909684747457504,
-0.09452559053897858,
-0.031711917370557785,
0.0315483994781971,
0.08898038417100906,
-0.03276301547884941,
-0.017906218767166138,
-0.03744693472981453,
0.01986994594335556,
0.03821307048201561,
0.10702407360076904,
-0.11938923597335815,
0.10721614211797714,
0.017829565331339836,
0.2508244812488556,
0.14836809039115906,
0.0945269763469696,
0.047571100294589996,
-0.19176357984542847,
-0.06768272072076797,
-0.1401158720254898,
-0.1010630652308464,
0.003296894719824195,
-0.01790410839021206,
-0.10277111083269119,
-0.024526210501790047,
-0.04276735708117485,
0.09589725732803345,
-0.15599870681762695,
-0.058572959154844284,
-0.0752280056476593,
0.10202351212501526,
0.003816757583990693,
0.11621411144733429,
-0.08660665899515152,
0.10843458771705627,
0.07938850671052933,
-0.02809169329702854,
-0.0897383987903595,
0.035484910011291504,
0.02223086915910244,
0.1769641488790512,
-0.07409492880105972,
-0.10814963281154633,
-0.05587534233927727,
0.009051515720784664,
0.007833879441022873,
0.18816961348056793,
0.017229391261935234,
0.018424566835165024,
-0.048354603350162506,
-0.0451391376554966,
0.08889884501695633,
0.005591604858636856,
-0.04831796884536743,
0.0025270243640989065,
-0.02015051245689392,
-0.046003442257642746,
0.005504488945007324,
-0.012001415714621544,
-0.00543787470087409,
0.09585223346948624,
0.005743624176830053,
-0.03142620995640755,
0.07766670733690262,
0.015637652948498726,
0.0700438991189003,
0.10424249619245529,
-0.03009416162967682,
0.020798305049538612,
-0.05972922220826149,
-0.08304968476295471,
0.08788974583148956,
0.0982639342546463,
0.06434961408376694,
-0.04140909016132355,
-0.0510856993496418,
0.012892485596239567,
-0.015851760283112526,
-0.10898822546005249,
0.09213149547576904,
-0.16776326298713684,
-0.020407503470778465,
0.10120224207639694,
-0.10864520072937012,
-0.0062730517238378525,
-0.044672898948192596,
0.028857529163360596,
0.0029031354933977127,
0.030667327344417572,
0.014900564216077328,
-0.04584810510277748,
-0.14008724689483643,
-0.09424867480993271,
-0.05512344092130661,
-0.03388664126396179,
0.09445658326148987,
-0.08984744548797607,
-0.24009492993354797,
-0.05673251301050186,
-0.007396395783871412,
0.07432321459054947,
-0.13294777274131775,
-0.11495108157396317,
0.011800246313214302,
0.0027477960102260113,
0.007615008857101202,
-0.0045305537059903145,
-0.08873887360095978,
0.047343652695417404,
-0.06703967601060867,
-0.0411880686879158,
0.11848237365484238,
0.1047542542219162,
0.029140232130885124,
-0.1337277889251709,
0.03478022292256355,
0.1867889165878296,
0.20661401748657227,
0.20319004356861115,
-0.006523465272039175,
-0.057746678590774536,
-0.004056923557072878,
-0.07286114990711212,
0.09373165667057037,
-0.048470448702573776,
-0.0796227753162384,
-0.06783682107925415,
0.028259221464395523,
0.06732144951820374,
-0.012704430148005486,
0.12116041034460068,
0.04336085170507431,
-0.0071740057319402695,
0.003956977743655443,
0.03661509230732918,
0.14042145013809204,
-0.15713848173618317,
-0.18004882335662842,
-0.19319596886634827,
0.03130258992314339,
0.16000498831272125,
0.017327571287751198,
-0.001285238889977336,
-0.16644684970378876,
0.056981299072504044,
0.004856093320995569,
0.15661334991455078,
0.1328311711549759,
0.046531300991773605,
0.046153370290994644,
-0.011840036138892174,
0.012459301389753819,
-0.05333453416824341,
-0.019856678321957588,
0.15445539355278015,
-0.04877645522356033,
-0.1062210202217102,
-0.01543478760868311,
-0.0252662505954504,
0.07023882865905762,
0.09504608064889908,
0.057090066373348236,
0.02716960571706295,
0.054658856242895126,
-0.028960026800632477,
-0.017296448349952698,
0.10214658826589584,
0.0980047956109047,
0.06682813912630081,
-0.12162767350673676,
-0.059210628271102905,
-0.015874134376645088,
-0.22369611263275146,
-0.05156562477350235,
0.017488453537225723,
0.04927040636539459,
-0.009414097294211388,
-0.07616550475358963,
-0.044703178107738495,
-0.08241599053144455,
-0.03611740842461586,
0.06873620301485062,
-0.022714506834745407,
0.0245046503841877,
-0.016942350193858147,
-0.13956648111343384,
-0.072568379342556,
0.007139176595956087,
-0.12399645894765854,
-0.09090695530176163,
0.02224443480372429,
0.04289568215608597,
-0.048717938363552094,
-0.05388231202960014,
0.07009854912757874,
0.08607935905456543,
-0.019997742027044296,
-0.046481985598802567,
0.0563972182571888,
-0.01261877827346325,
0.07721937447786331,
-0.01123711746186018,
-0.09610919654369354,
0.032621096819639206,
0.004521764814853668,
0.06717506051063538,
-0.05161670595407486,
-0.14723718166351318,
-0.010552603751420975,
0.003887886879965663,
-0.062266718596220016,
0.08573482185602188,
-0.03136458620429039,
-0.0795537531375885,
-0.1909511387348175,
-0.12881821393966675,
0.03567492216825485,
0.14001475274562836,
0.14032191038131714,
-0.06688092648983002,
-0.06533894687891006,
-0.0871744155883789,
0.017149541527032852,
0.059861522167921066,
0.02647947520017624,
-0.019562577828764915,
-0.061688654124736786,
-0.03942689672112465,
-0.09404133260250092,
0.024097038432955742,
0.02691091038286686,
-0.04322393238544464,
-0.07054618000984192,
-0.0021925237961113453,
-0.051636528223752975,
-0.06971832364797592,
0.0900728702545166,
0.04665004089474678,
0.11649950593709946,
-0.03641945868730545,
-0.09682310372591019,
-0.029082437977194786,
-0.10792265832424164,
-0.1290474683046341,
0.06697978079319,
-0.05490852892398834,
-0.14952433109283447,
-0.1195477843284607,
-0.09494724124670029,
0.09762059152126312,
0.054888490587472916,
0.031942401081323624,
-0.01750294491648674,
0.018548233434557915,
-0.05073082447052002,
-0.1250152587890625,
0.0001468598929932341,
0.02764013223350048,
0.04224751889705658,
0.003881011623889208,
0.10421097278594971,
-0.15110014379024506,
-0.10875865817070007,
-0.046031758189201355,
0.03997659683227539,
0.05315414443612099,
-0.15987318754196167,
-0.20114324986934662,
-0.11287841945886612,
-0.017175402492284775,
0.15635375678539276,
-0.13970133662223816,
-0.06513150036334991,
-0.03333022817969322,
0.008488016203045845,
0.06660725176334381,
-0.07424653321504593,
0.0051274169236421585,
0.06195716932415962,
0.0924551784992218,
-0.07227295637130737,
-0.0009822859428822994,
-0.014430071227252483,
0.08784663677215576,
0.0806882381439209,
0.07006672769784927,
-0.011360528878867626,
0.06084717810153961,
0.030485929921269417,
-0.05302133038640022,
0.06465514004230499,
-0.06696624308824539,
-0.1748349666595459,
-0.1936258226633072,
-0.044066403061151505,
-0.0080217020586133,
-0.046835530549287796,
-0.21817240118980408,
-0.06776680052280426,
0.06384297460317612,
0.20614027976989746,
8.582566806580871e-05,
-0.03586994856595993,
-0.048361968249082565,
0.03272813931107521,
0.05869852006435394,
0.033944305032491684,
0.006273988634347916,
0.01884187012910843,
-0.07072830945253372,
-0.11012479662895203,
0.015799351036548615,
-0.024730978533625603,
0.11528974771499634,
-0.04340676590800285,
-0.10024544596672058,
0.04152699559926987,
0.010192392393946648,
0.07434765994548798,
0.021919263526797295,
0.0020704162307083607,
0.018822791054844856,
0.08483465760946274,
0.11809000372886658,
0.058399051427841187,
-0.09863156825304031,
-0.08742927014827728,
-0.09917542338371277,
0.09579508751630783,
0.07005965709686279,
-0.055786166340112686,
-0.010905930772423744,
-0.09908665716648102,
0.04871491342782974,
0.025659337639808655,
-0.05357901006937027,
0.017914889380335808,
-0.12871690094470978,
-0.07453630119562149,
-0.06297532469034195,
-0.15830402076244354,
0.08172851800918579,
-0.09090201556682587,
-0.14626319706439972,
0.01058040652424097,
-0.03853622078895569,
0.018220890313386917,
-0.0014579255366697907,
-0.1023913249373436,
0.10428247600793839,
-0.0027184111531823874,
0.012807666324079037,
0.02292744256556034,
-0.018555911257863045,
-0.0010986635461449623,
-0.0893918052315712,
-0.07811759412288666,
0.09357091039419174,
0.04464612901210785,
-0.06101327762007713,
0.09237551689147949,
0.08943837136030197,
0.0393446683883667,
0.10073917359113693,
0.128978431224823,
0.06378333270549774,
0.08483947813510895,
0.061954885721206665,
-0.01453437376767397,
-0.030008960515260696,
-0.08356406539678574,
-0.09795158356428146,
-0.046642448753118515,
0.016720497980713844,
-0.10786544531583786,
0.02360369823873043,
-0.0950419083237648,
0.03486856445670128,
-0.07813291996717453,
0.04381416365504265,
0.07099203020334244,
0.018523365259170532,
-0.026970600709319115,
-0.034434132277965546,
0.033706843852996826,
0.06536401063203812,
0.0016710072522982955,
-0.07268579304218292,
-0.039372820407152176,
0.05014660954475403,
-0.037561092525720596,
0.047134172171354294,
0.024254625663161278,
0.017969947308301926,
-0.029892314225435257,
-0.008102428168058395,
0.07099613547325134,
0.026795031502842903,
0.1156478151679039,
-0.05083068087697029,
-0.026128822937607765,
-0.12557247281074524,
-0.16165706515312195,
0.07372402399778366,
-0.06814980506896973,
-0.10857763886451721,
-0.03706460818648338,
0.0787220224738121,
0.08114336431026459,
-0.025979336351156235,
0.037881869822740555,
-0.054951220750808716,
-0.03720415011048317,
-0.1480334997177124,
-0.16829301416873932,
-0.12470266968011856,
-0.006911042612046003,
0.0660276710987091,
0.08577297627925873,
-0.035563986748456955,
0.1721019297838211,
0.05903539061546326,
-0.026067763566970825,
0.027272194623947144,
-0.025120187550783157,
0.0378003753721714,
-0.03593532741069794,
0.004042550455778837,
-0.013876442797482014,
0.0009406792232766747,
-0.007916978560388088,
-0.11531487852334976,
-0.06582698971033096,
0.08803708106279373,
0.026416169479489326,
-0.016656512394547462,
-0.004257905762642622,
0.0031970327254384756,
0.03226855397224426,
-0.018971478566527367,
-0.0993611067533493,
-0.09079473465681076,
0.02842559479176998,
0.06292425841093063,
0.06247512623667717,
0.017636682838201523,
-0.12447737902402878,
-0.09053465723991394,
0.011095850728452206,
0.08069705963134766,
-0.009935677982866764,
-0.09659036248922348,
-0.055806852877140045,
0.005900460761040449,
-0.004357383586466312,
-0.017911694943904877,
-0.005402833689004183,
-0.03490535169839859,
0.010166792199015617,
0.05494631081819534,
0.09457655251026154,
0.024512754753232002,
0.03246110677719116,
0.004285647999495268,
-0.0915612131357193,
-0.17708300054073334,
0.01904938742518425,
0.09518265724182129,
-0.003683352144435048,
0.025540245696902275,
-0.048629727214574814,
-0.03432883694767952,
0.04468504339456558,
-0.02412760630249977,
0.11243601143360138,
0.07338999956846237,
0.008126734755933285,
0.09276918321847916,
-0.10669587552547455,
0.02342403121292591,
0.057094112038612366,
0.02293769270181656,
-0.08644422888755798,
-0.07292857021093369,
0.055057037621736526,
-0.02549457922577858,
-0.05202542990446091,
-0.035986047238111496,
-0.08125431090593338,
0.022940203547477722,
0.019406596198678017,
0.11421367526054382,
0.17460811138153076,
0.061830777674913406,
0.019801363348960876,
0.02448979765176773,
0.05326738581061363,
0.07487829774618149,
0.04353507608175278,
-0.07898223400115967,
-0.05842888355255127,
-0.044735055416822433,
-0.009343059733510017,
0.08873838931322098,
0.021745627745985985,
0.11229400336742401,
0.05702488496899605,
0.061481084674596786,
0.026966620236635208,
0.021379416808485985,
0.061106376349925995,
-0.06328118592500687,
-0.07142385840415955,
-0.07677926868200302,
0.1376427412033081,
0.046148352324962616,
0.015573829412460327,
-0.048354621976614,
-0.12353681772947311,
-0.11936631053686142,
-0.09629689902067184,
-0.009502225555479527,
0.07196459174156189,
0.02892458811402321,
-0.04938671365380287,
-0.07632084935903549,
-0.12922273576259613,
0.015268818475306034,
0.06454609334468842,
0.010939521715044975,
-0.0033998009748756886,
-0.005967359524220228,
0.01598971150815487,
-0.016015755012631416,
0.06918493658304214,
-0.12419456243515015,
0.05978338420391083,
-0.005892876069992781,
0.1846984177827835,
-0.030947290360927582,
-0.09901775419712067,
-0.07094073295593262,
-0.003922425676137209,
0.030769992619752884,
0.008031632751226425,
-0.04552244767546654,
-0.012701909057796001,
-0.17230010032653809,
-0.007892056368291378,
0.010700942017138004,
0.0034829240757972,
0.003425418632104993,
-0.10381423681974411,
0.035955969244241714,
-0.008767697028815746,
0.0071410126984119415,
-0.10231881588697433,
-0.04771772027015686,
-0.04742935672402382,
-0.05561787262558937,
-0.08492624759674072,
-0.024363873526453972,
-0.052853818982839584,
-0.10103809833526611,
0.011341458186507225,
-0.07002482563257217,
-0.07006071507930756,
-0.00067039456916973,
-0.059434473514556885,
0.09474708884954453,
0.11905784904956818,
0.1390806883573532,
0.04512014985084534,
-0.015968969091773033,
0.12098171561956406,
0.013973266817629337,
0.06316162645816803,
0.030025817453861237,
-0.02908591367304325,
-0.03814105689525604,
0.04256437346339226,
0.047628384083509445,
0.049781523644924164,
-0.15924227237701416,
0.02434142492711544,
0.06379517167806625,
0.04104292765259743,
0.03485953062772751,
-0.05791667103767395,
0.0531262569129467,
0.03667464107275009,
0.042927086353302,
0.10064967721700668,
-0.06520241498947144,
-0.07244466990232468,
-0.10128932446241379,
0.010038232430815697,
0.07974858582019806,
0.03887980803847313,
-0.1440439075231552,
-0.11135423928499222,
0.007928636856377125,
0.08203154057264328,
0.016682611778378487,
-0.004099413752555847,
-0.014491993933916092,
0.12383048236370087,
-0.0230022631585598,
0.007695559877902269,
0.01892152428627014,
0.04689023271203041,
-0.05730539560317993,
-0.01795019395649433,
-0.05394652113318443,
0.2097669094800949,
0.10137950628995895,
-0.055433489382267,
-0.21038004755973816,
-0.12985341250896454,
0.18005897104740143,
0.04035504534840584,
-0.048569269478321075,
-0.010154752992093563,
-0.0065427846275269985,
-0.10741150379180908,
-0.0020878396462649107,
0.05482431873679161,
0.06672163307666779,
0.05569113418459892,
-0.10727867484092712,
0.045434657484292984,
0.005343366414308548,
0.04966134950518608,
0.13727159798145294,
-0.017284192144870758,
0.039157934486866,
-0.010166263207793236,
-0.14094682037830353,
-0.15802770853042603,
-0.04220185428857803,
0.04708556458353996,
0.046751122921705246,
0.1252661496400833,
-0.06924045830965042,
-0.0134747214615345,
0.04532318189740181,
0.08041076362133026,
0.04638132452964783,
0.020323527976870537,
-0.08477818220853806,
-0.022886350750923157,
-0.022167759016156197,
0.05053642764687538,
-0.05768831819295883,
-0.09024414420127869,
-0.024104872718453407,
0.012317421846091747,
0.06867769360542297,
-0.012806417420506477,
-0.08260676264762878,
-0.13430386781692505,
-0.009060543961822987,
0.031930118799209595,
0.14575041830539703,
-0.03363112732768059,
-0.1642361730337143,
0.01877860352396965,
0.13304930925369263,
0.14825722575187683,
-0.002029531868174672,
-0.03690147027373314,
0.06657779961824417,
-0.06592494994401932,
-0.05531569570302963,
0.0061775329522788525,
-0.016472935676574707,
-0.07332482933998108,
0.02520597167313099,
0.05846351385116577,
-0.04521961882710457,
-0.15004737675189972,
-0.030856478959321976,
0.0438082329928875,
-0.06528958678245544,
0.07563595473766327,
-0.04461188241839409,
-0.12361595034599304,
-0.10028041899204254,
-0.00965398084372282,
-0.03163556382060051,
-0.16424216330051422,
-0.014320377260446548,
0.055023036897182465,
0.11598214507102966,
0.012862879782915115,
0.03472582623362541,
0.16370242834091187,
0.06393612921237946,
0.09275507926940918,
-0.002360963262617588,
-0.031018348410725594,
-0.04972059652209282,
-0.11587679386138916,
0.057764746248722076,
0.016998426988720894,
-0.16163495182991028,
-0.05144433677196503,
0.06355977058410645,
-0.002144531812518835,
0.019336866214871407,
0.12646692991256714,
0.029153499752283096,
-0.015324397943913937,
-0.07937215268611908,
0.17123696208000183,
0.1334535777568817,
0.06798668950796127,
-0.020932363346219063,
-0.058698441833257675,
-0.031995318830013275,
-0.07305427640676498,
-0.013290436938405037,
-0.013242549262940884,
-0.12547945976257324,
-0.09988205134868622,
0.022679150104522705,
0.03540554642677307,
0.03860101476311684,
-0.041946109384298325,
-0.037232983857393265,
0.04479588568210602,
-0.04401521012187004,
0.07075973600149155,
0.021420853212475777,
0.010476898401975632,
-0.07531888782978058,
-0.009629781357944012,
-0.04233083501458168,
0.012336495332419872,
0.19258788228034973,
0.12216034531593323,
0.06846954673528671,
0.02114688605070114,
0.07016077637672424,
0.12111660093069077,
0.06224692612886429,
0.006655323319137096,
-0.0979236513376236,
0.08928800374269485,
-0.018551655113697052,
-0.04713550955057144,
-0.12339543551206589,
-0.011990115977823734,
0.07926824688911438,
-0.06193051487207413,
-0.05481681972742081,
-0.0015016510151326656,
0.11610142141580582,
0.08659444749355316,
0.06711684912443161,
-0.03391505032777786,
0.006205812096595764,
-0.018079670146107674,
0.015550530515611172,
-0.0680176168680191,
-0.07943351566791534,
-0.014389717020094395,
0.002995559945702553,
0.0899265706539154,
-0.06791578978300095,
-0.0659211277961731,
-0.12902222573757172,
0.012889874167740345,
-0.005092373583465815,
0.04603644087910652,
0.1025584265589714,
0.03366117179393768,
-0.010821362026035786,
-0.10134495794773102,
0.02362278662621975,
0.05823521688580513,
0.03356350213289261,
-0.05526673048734665,
-0.1176438108086586,
-0.034293580800294876,
-0.011476736515760422,
-0.058393485844135284,
0.02591501548886299,
0.08938674628734589,
0.044761668890714645,
0.07189353555440903,
-0.003506988985463977,
-0.07332471758127213,
-0.13527728617191315,
0.08260004967451096,
0.11327475309371948,
0.10049261152744293,
0.03305163234472275,
-0.02570950612425804,
-0.059920333325862885,
-0.01409238763153553,
-0.050607092678546906,
-0.06866253167390823,
-0.0160378348082304,
0.016334302723407745,
-0.033152688294649124,
-0.03507395461201668,
-0.04864313453435898,
0.09089537709951401,
-0.0023651516530662775,
-0.0223409291356802,
-0.04979890212416649,
-0.04764670133590698,
-0.09847390651702881,
-0.2782445251941681,
-0.010291515849530697,
0.07556420564651489,
0.09113940596580505,
0.05193070322275162,
0.002871505217626691,
0.1727246642112732,
0.15196582674980164,
-0.01688380166888237,
0.040353238582611084,
0.06451722979545593,
-0.0026256092824041843,
-0.08809767663478851,
0.06443295627832413,
-0.08244457840919495,
0.06515892595052719,
-0.017354490235447884,
0.008279180154204369,
-0.1223074272274971,
-0.011332270689308643,
0.04233802482485771,
0.07455060631036758,
0.04223322123289108,
0.035543814301490784,
-0.07730685919523239,
-0.05605547875165939,
-0.0434943288564682,
0.0782952606678009,
0.021108780056238174,
0.040092431008815765,
-0.003926592878997326,
-0.006613622419536114,
-0.11423826217651367,
-0.08790494501590729,
0.015362564474344254,
-0.00982674676924944,
0.01568337343633175,
-0.09394951909780502,
0.031686075031757355,
0.013183812610805035,
-0.046508193016052246,
0.07537169754505157,
-0.02821345441043377,
-0.02522583305835724,
-0.0017532052006572485,
0.13488300144672394,
0.08706557750701904,
0.01348584983497858,
-0.07270671427249908,
-0.11706223338842392,
-0.12814894318580627,
-0.10461752116680145,
-0.002498732879757881,
0.07265462726354599,
-0.05329511687159538,
0.09117121249437332,
0.026979174464941025,
-0.008171823807060719,
0.007775433361530304,
0.06676097959280014,
0.08895719051361084,
0.07601912319660187,
0.006385619752109051,
0.100313201546669,
0.03374514728784561,
0.01908801682293415,
0.13399913907051086,
0.03950212895870209,
-0.08530918508768082,
-0.11812297999858856,
-0.020657936111092567,
-0.025695770978927612,
-0.1651984304189682,
-0.18313685059547424,
-0.012634998187422752,
-0.0639118179678917,
0.011050116270780563,
0.1410708725452423,
0.007156010251492262,
0.07265738397836685,
-0.01794501207768917,
-0.0029894504696130753,
-0.05449266731739044,
-0.008501004427671432,
0.006614824756979942,
-0.01981782540678978,
-0.1967061460018158,
-0.0471833273768425,
0.052635181695222855,
0.08308549225330353,
0.08371171355247498,
0.002203528769314289,
0.02490347810089588,
0.08574332296848297,
-0.013430692255496979,
0.008964247070252895,
0.03665061667561531,
-0.16301913559436798,
-0.11994405835866928,
0.04146025702357292,
0.06875345855951309,
0.02282235026359558,
-0.03501518443226814,
-0.08140590786933899,
-0.07466701418161392,
-0.03684958070516586,
0.04159947484731674,
0.029397157952189445,
0.018570639193058014,
-0.07667889446020126,
-0.00974246859550476,
-0.01691090688109398,
-0.07898363471031189,
0.032378751784563065,
0.08603255450725555,
0.08236537128686905,
-0.022782985121011734,
0.0003568955580703914,
-0.011424004100263119,
0.03547263517975807,
-0.022517472505569458,
-0.03669188171625137,
0.23612356185913086,
0.16322889924049377,
0.1076795682311058,
-0.024958502501249313,
0.040763795375823975,
0.05577241629362106,
0.03844722360372543,
0.053425077348947525,
-0.08561297506093979,
0.00551421195268631,
-0.041085075587034225,
-0.09122665226459503,
-0.013208504766225815,
-0.09378902614116669,
0.0638793557882309,
-0.06062951683998108,
-0.026618430390954018,
-0.015362048521637917,
-0.1859661489725113,
-0.09573465585708618,
0.011365086771547794,
0.05595211312174797,
-0.08464666455984116,
-0.09915311634540558,
-0.06777909398078918,
-0.03336922451853752,
5.427768428489799e-06,
-0.07987109571695328,
-0.11332949995994568,
-0.1286248415708542,
-0.11033271998167038,
-0.02458636648952961,
-0.006325952243059874,
0.09188423305749893,
0.07704626768827438,
0.04039936140179634,
0.05811983346939087,
0.009355191141366959,
0.17736372351646423,
0.005136309657245874,
-0.08050420135259628,
0.09435198456048965,
0.08111583441495895,
0.13214950263500214,
0.1766861528158188,
0.08243408054113388,
0.10954605042934418,
0.013789689168334007,
0.048399537801742554,
-0.06686367839574814,
-0.16303689777851105,
0.001606765086762607,
0.10271875560283661,
0.08043204247951508,
0.05065712332725525,
-0.02604757808148861,
-0.09828715026378632,
-0.11761897057294846,
-0.03172435238957405,
-0.23227471113204956,
-0.07773140072822571,
0.00010252502397634089,
-0.0317067988216877,
-0.10584914684295654,
-0.15311004221439362,
-0.02422521449625492,
-0.01948843151330948,
0.05650193989276886,
-0.007507454603910446,
-0.11905793845653534,
-0.0334857814013958,
0.03221893310546875,
0.05076779052615166,
-0.14793038368225098,
-0.027271203696727753,
0.021310629323124886,
-0.019176358357071877,
-0.0802462100982666,
0.12374027818441391,
0.10232926160097122,
-0.008935066871345043,
-0.21044345200061798,
0.006076011341065168,
0.11383678019046783,
0.08248430490493774,
-0.03187964856624603,
0.05059429630637169,
-0.012374269776046276,
0.03161698952317238,
0.03334064036607742,
0.08871804177761078,
-0.01573152095079422,
-0.07850407063961029,
0.04833006486296654,
0.05622076988220215,
0.0382576622068882,
-0.021821100264787674,
0.07758857309818268,
-0.0157797671854496,
-0.07615983486175537,
-0.10894549638032913,
-0.13820849359035492,
-0.0017094473587349057,
-0.1160779595375061,
-0.023951800540089607,
0.0673716589808464,
0.16501156985759735,
0.11407747864723206,
0.058226827532052994,
0.06306751072406769,
0.010469095781445503,
0.007414680439978838,
-0.004598191939294338,
-0.10316558927297592,
-0.0749082937836647,
0.0010776612907648087,
0.05290850251913071,
-0.06511662155389786,
-0.040350090712308884,
0.1508912295103073,
0.08137192577123642,
0.028909621760249138,
-0.004240831360220909,
0.043905939906835556,
0.010791560634970665,
0.1632830947637558,
0.10398250818252563,
0.013229473493993282,
-0.010984652675688267,
0.02690032869577408,
0.12447044253349304,
0.18398788571357727,
0.11010252684354782,
-0.0006755624781362712,
-0.06987414509057999,
0.039253756403923035,
0.04643158242106438,
-0.13032770156860352,
-0.019964421167969704,
-0.06503576040267944,
0.06649136543273926,
0.026351185515522957,
-0.06292969733476639,
-0.1053205206990242,
0.021781938150525093,
0.11508362740278244,
0.019834371283650398,
-0.12631197273731232,
-0.12623313069343567,
-0.07502686977386475,
0.0011075901566073298,
0.058012496680021286,
-0.002891117474064231,
0.006764085032045841,
-0.21745258569717407,
-0.0576547272503376,
0.14516255259513855,
0.18097367882728577,
0.011056235991418362,
0.05076483637094498,
0.15878789126873016,
0.02680572308599949,
0.0007162310066632926,
0.11714641749858856,
-0.16831883788108826,
-0.057113394141197205,
0.016883485019207,
0.05743246525526047,
-0.04217587411403656,
-0.11626062542200089,
0.04388206824660301,
0.02442241460084915,
-0.04259417951107025,
-0.0241619311273098,
0.0926298201084137,
-0.04047582671046257,
0.008738582953810692,
-0.16424234211444855,
0.1553443819284439,
0.211316779255867,
0.08548878133296967,
-0.047965507954359055,
-0.04186021164059639,
-0.04443146660923958,
-0.009843192994594574,
0.007905828766524792,
0.0445157028734684,
-0.03524796664714813,
-0.012746057473123074,
0.1558874547481537,
0.1073850467801094,
0.07272995263338089,
0.004807687364518642,
-0.040813278406858444,
0.047132596373558044,
0.07227052003145218,
0.056663572788238525,
-0.04811185225844383,
-0.10416549444198608,
-0.012651579454541206,
0.11722519993782043,
0.1156630888581276,
0.07494053244590759,
-0.013288440182805061,
0.16850799322128296,
0.0879402682185173,
0.04018998518586159,
0.08442972600460052,
0.06927333027124405,
0.09850787371397018,
0.10032544285058975,
-0.051423124969005585,
-0.012757306918501854,
-0.0026066494174301624,
0.03456517681479454,
-0.009920823387801647,
0.017224298790097237,
0.028192123398184776,
-0.14356470108032227,
0.15102672576904297,
0.09296394139528275,
4.883214205619879e-05,
0.009179948829114437,
0.03418949991464615,
-0.08885625749826431,
-0.09613273292779922,
-0.1141221821308136,
-0.025593815371394157,
-0.04473597928881645,
-0.09949512034654617,
-0.021918054670095444,
0.06706058233976364,
0.0794912725687027,
0.03257136046886444,
0.0425071194767952,
0.028431786224246025,
0.042477551847696304,
0.05211954936385155,
0.10710689425468445,
0.01235682051628828,
0.019970891997218132,
-0.08421018719673157,
0.031162766739726067,
0.004498730413615704,
0.022749437019228935,
0.04949025437235832,
-0.0330171175301075,
-0.022798553109169006,
-0.054720643907785416,
-0.0725240632891655,
0.0785432830452919,
0.08495895564556122,
0.042364731431007385,
-0.011333705857396126,
0.035276103764772415,
-0.0007800189196132123,
0.07249190658330917,
0.007061336655169725,
0.09887988865375519,
0.03543905168771744,
0.2688405513763428,
0.04113084450364113,
-0.04817982017993927,
-0.0052499789744615555,
0.0648183673620224,
0.07539203763008118,
0.05979274585843086,
-0.12680843472480774,
-0.015675323083996773,
0.019580479711294174,
0.006566477473825216,
-0.015719473361968994,
-0.009306732565164566,
0.01434874814003706,
0.10906478762626648,
0.05187300220131874,
-0.03136201202869415,
-0.020555198192596436,
0.04290212690830231,
-0.01944216899573803,
-0.11622616648674011,
-0.08014893531799316,
0.06140487268567085,
-0.0038455654866993427,
0.011696253903210163,
-0.17824004590511322,
-0.023163573816418648,
-0.010412446223199368,
0.07944758236408234,
-0.020531924441456795,
0.016384191811084747,
-0.008947129361331463,
0.014200524426996708,
0.049666956067085266,
0.022590594366192818,
-0.08262220770120621,
0.09045258909463882,
0.016151748597621918,
-0.028766045346856117,
-0.13740013539791107,
1.96096116269473e-05,
0.08193552494049072,
0.03129947558045387,
0.06235864385962486,
-0.11299562454223633,
-0.07638867944478989,
0.08675234764814377,
0.003727349918335676,
0.06989528238773346,
-0.057031065225601196,
0.021693237125873566,
0.04110625013709068,
0.012265114113688469,
-0.005390767939388752,
-0.09379976987838745,
0.01028406247496605,
-0.03505498543381691,
0.035515181720256805,
0.053965974599123,
-0.06898370385169983,
-0.0906124860048294,
-0.04738888144493103,
-0.027843935415148735,
-0.12644319236278534,
-0.08476746082305908,
0.08143763244152069,
0.14577041566371918,
0.07872442901134491,
0.0995115339756012,
-0.13821575045585632,
-0.06135658174753189,
0.026017267256975174,
-0.0756901204586029,
0.18678168952465057,
0.030939681455492973,
0.03312613070011139,
-0.003817667020484805,
-0.026549018919467926,
0.059427689760923386,
0.11881005018949509,
0.07455909252166748,
0.07001805305480957,
0.03667304292321205,
-0.023190928623080254,
-0.1976763904094696,
-0.03653165325522423,
0.051496442407369614,
0.07315116375684738,
-0.05787935107946396,
0.17379827797412872,
0.2338452786207199,
0.08331333845853806,
-0.06889273971319199,
0.04874444007873535,
0.07590193301439285,
0.08244714885950089,
0.001856889808550477,
-0.01214317325502634,
-0.10049594193696976,
0.02145039290189743,
0.044686317443847656,
0.07681480795145035,
-0.04093774035573006,
-0.03284376859664917,
0.10949952900409698,
0.09531162679195404,
-0.047735970467329025,
-0.02845708094537258,
0.03777715191245079,
0.010752050206065178,
0.002510993741452694,
-0.058023933321237564,
0.01758679375052452,
-0.0870329812169075,
0.07332433760166168,
0.1414322555065155,
0.017802616581320763,
-0.15518341958522797,
0.06978049874305725,
0.17280080914497375,
0.07140227407217026,
0.039001088589429855,
-0.06237271800637245,
-0.13254299759864807,
0.0028634306509047747,
-0.007988831028342247,
-0.02893519587814808,
0.0006567297969013453,
-0.04966237396001816,
0.009679640643298626,
0.011863965541124344,
-0.03975537419319153,
0.011868626810610294,
0.04191741719841957,
0.045897018164396286,
0.06367841362953186,
0.025460967794060707,
-0.024584075435996056,
0.1318586766719818,
-0.10372874140739441,
-0.17968593537807465,
-0.09987813234329224,
0.00675048166885972,
0.0789685770869255,
-0.12129856646060944,
0.006406384985893965,
0.02498413808643818,
0.06292285025119781,
0.023975608870387077,
-0.07655100524425507,
-0.013486608862876892,
-0.05727357044816017,
-0.038847435265779495,
0.04563938453793526,
-0.108587346971035,
-0.03648959845304489,
-0.07696264982223511,
0.05461306869983673,
0.11577633023262024,
0.03252600133419037,
-0.15147720277309418,
-0.11329741775989532,
0.01191641017794609,
0.005576213356107473,
-0.013037783093750477,
-0.004336810205131769,
0.037430137395858765,
-0.03784468024969101,
0.06703977286815643,
0.09052589535713196,
0.04132157936692238,
-0.03546375781297684,
-0.13858115673065186,
0.09311261028051376,
-0.013390407897531986,
-0.029620053246617317,
-0.09100659936666489,
-0.08803406357765198,
-0.03779182955622673,
0.08626565337181091,
0.034942012280225754,
-0.12391092628240585,
-0.015653913840651512,
0.030965106561779976,
0.02179267816245556,
0.07134780287742615,
0.06990836560726166,
-0.03271669149398804,
0.03637438267469406,
0.09233342111110687,
0.22967515885829926,
-0.005846124142408371,
-0.10902626812458038,
0.006849323399364948,
-0.0018032857915386558,
0.1507716327905655,
0.18433812260627747,
0.05264131352305412,
-0.09990503638982773,
0.06466414779424667,
0.05068393424153328,
-0.0002029452589340508,
-0.05570799112319946,
-0.032820217311382294,
0.01630052737891674,
0.07241800427436829,
0.02197476476430893,
-0.04995474964380264,
-0.021249210461974144,
0.015322847291827202,
0.06150888651609421,
-0.04705573245882988,
-0.016793400049209595,
0.09708239883184433,
-0.05195939168334007,
-0.10408581048250198,
-0.08818134665489197,
0.055183541029691696,
0.07775173336267471,
0.03300350904464722,
-0.01660126820206642,
0.011995376087725163,
-0.13200433552265167,
0.08024706691503525,
-0.02405473403632641,
0.008978334255516529,
0.10259903222322464,
0.1292240470647812,
-0.10235036909580231,
0.018489593639969826,
0.030661823228001595,
0.047520119696855545,
0.005515401717275381,
-0.07408188283443451,
0.1043824851512909,
-0.042558703571558,
-0.09321820735931396,
-0.05515849590301514,
0.07379124313592911,
0.1196514293551445,
0.08058889955282211,
-0.11714383959770203,
-0.15199466049671173,
0.06063052639365196,
-0.006591297220438719,
-0.014539390802383423,
-0.10626634210348129,
-0.14961421489715576,
-0.0814068615436554,
-0.013649407774209976,
-0.011528008617460728,
-0.0049807061441242695,
0.027718374505639076,
-0.05527860298752785,
0.049409493803977966,
-0.055261868983507156,
-0.016132744029164314,
0.059191010892391205,
-0.06720783561468124,
-0.039566874504089355,
-0.04241989552974701,
0.04652176424860954,
0.0325058288872242,
-0.1356075406074524,
-0.1883322149515152,
-0.15706486999988556,
-0.05300833657383919,
0.01131253968924284,
-0.12380440533161163,
-0.17445895075798035,
-0.004146318417042494,
-0.04048561304807663,
-0.0010910512646660209,
-0.13944950699806213,
-0.07609894871711731,
-0.024394113570451736,
0.030688423663377762,
0.026881562545895576,
-0.043734967708587646,
-0.03004409186542034,
-0.01769452542066574,
0.007362282834947109,
0.025469327345490456,
-0.005831243470311165,
-0.1484546661376953,
-0.0820997878909111,
0.029143722727894783,
0.14535070955753326,
0.16841956973075867,
-0.012528703548014164,
-0.14078545570373535,
-0.17309576272964478,
-0.08719785511493683,
-0.022863727062940598,
0.014368762262165546,
-0.04476519674062729,
-0.11166606843471527,
-0.08129443973302841,
-0.026652824133634567,
-0.07835669815540314,
0.08550373464822769,
0.07792972773313522,
0.11959090828895569,
-0.06896136701107025,
-0.053089387714862823,
-0.08288688957691193,
-0.0789743959903717,
-0.010213561356067657,
0.0018864743178710341,
-0.03128698095679283,
-0.07763011753559113,
-0.03914790228009224,
0.025708867236971855,
0.022774800658226013,
0.051850803196430206,
0.11477474123239517,
-0.00576747115701437,
-0.05811581388115883,
-0.005358000285923481,
0.0003811787173617631,
0.07875803112983704,
0.055939290672540665,
-0.020098062232136726,
0.0823260173201561,
0.13663913309574127,
0.04782744124531746,
0.02573990635573864,
-0.03762112930417061,
-0.05417311564087868,
0.021641485393047333,
0.11050668358802795,
0.020767590031027794,
-0.0101754330098629,
-0.04300614446401596,
0.0004463398945517838,
0.029735727235674858,
-0.04381224140524864,
-0.07806997746229172,
0.21913336217403412,
-0.08086647093296051,
-0.19254541397094727,
-0.15875574946403503,
-0.06349139660596848,
0.21393927931785583,
-0.05305493250489235,
-0.08328687399625778,
0.024912526831030846,
0.07814209908246994,
0.0845489650964737,
-0.04652366042137146,
-0.11149299889802933,
0.06014659255743027,
0.04621167108416557,
-0.11409147083759308,
-0.026551324874162674,
-0.11516746133565903,
-0.00460712518543005,
-0.020684797316789627,
0.05013095960021019,
-0.08461267501115799,
0.0018011718057096004,
0.021107232198119164,
0.04887395724654198,
0.030192766338586807,
0.0495823472738266,
0.10545692592859268,
0.010720215737819672,
-0.025260834023356438,
-0.0975293517112732,
0.0020287034567445517,
-0.0488034188747406,
-0.10043906420469284,
-0.10476084798574448,
0.039644647389650345,
-0.07712744176387787,
-0.0931398794054985,
-0.03759966045618057,
-0.11304017156362534,
0.07135622948408127,
0.06316006928682327,
0.015290875919163227,
0.019271640107035637,
0.029370006173849106,
0.03758440166711807,
0.07518598437309265,
0.09103614836931229,
0.00035951376776210964,
-0.00976150669157505,
0.026041874662041664,
-0.06312695890665054,
-0.07052967697381973,
-0.07885812222957611,
-0.017529690638184547,
0.04241577908396721,
0.018995540216565132,
0.024306034669280052,
-0.11900894343852997,
-0.09460797160863876,
0.06724976003170013,
0.04126999154686928,
-0.1283176839351654,
-0.0010689885821193457,
0.09627816826105118,
0.03088081069290638,
0.011603068560361862,
-0.03373100981116295,
-0.033439718186855316,
0.09024807065725327,
0.03887040540575981,
0.06543023139238358,
-0.014703759923577309,
0.012865313328802586,
0.04650989919900894,
0.0741269439458847,
0.017177846282720566,
0.009267309680581093,
0.10203962028026581,
0.15714649856090546,
-0.08737961202859879,
0.04682241752743721,
0.08316092193126678,
0.0741908848285675,
0.07647153735160828,
-0.002966915722936392,
0.13090482354164124,
0.11965686082839966,
-0.0020046569406986237,
-0.15923991799354553,
-0.15856042504310608,
0.029799170792102814,
-0.15528635680675507,
-0.017282990738749504,
-0.04010499641299248,
0.033968158066272736,
-0.056552812457084656,
-0.11081957072019577,
-0.03881347179412842,
0.26147738099098206,
0.017624979838728905,
0.058045439422130585,
-0.03138180822134018,
-0.052974652498960495,
-0.06550318747758865,
-0.027649685740470886,
-0.01145267579704523,
0.06527799367904663,
-0.0033141872845590115,
-0.051090214401483536,
0.12077434360980988,
0.026503976434469223,
-0.07855593413114548,
-0.05530324950814247,
0.01059274934232235,
0.013408939354121685,
-0.04234655946493149,
-0.018503712490200996,
-0.0038071186281740665,
0.08254478871822357,
-0.06069130077958107,
-0.058922357857227325,
0.08761793375015259,
0.11917658895254135,
0.006446487735956907,
0.04598071053624153,
0.05524589121341705,
-0.003873027628287673,
-0.09006115794181824,
-0.09887672960758209,
-0.12679655849933624,
-0.1149616688489914,
0.06791696697473526,
0.16261260211467743,
0.044222500175237656,
0.13617056608200073,
-0.01764877885580063,
-0.030951855704188347,
-0.014598683454096317,
0.11113861203193665,
0.1951526701450348,
0.06910726428031921,
-0.053818229585886,
-0.0608687661588192,
-0.17123298346996307,
0.04258791729807854,
0.09852316975593567,
0.03979621082544327,
-0.1263306736946106,
-0.1992650181055069,
0.05736348778009415,
-0.05286257714033127,
-0.20210261642932892,
-0.057305000722408295,
0.1012670025229454,
-0.06088511645793915,
-0.06926891207695007,
0.10165787488222122,
0.2224142849445343,
0.09258341044187546,
-0.01800871640443802,
-0.017884355038404465,
0.09841392189264297,
0.05036785826086998,
-0.024246517568826675,
0.024799903854727745,
-0.06260718405246735,
-0.07964716106653214,
0.009465882554650307,
-0.03340031951665878,
0.035386960953474045,
-0.03188212960958481,
0.13847629725933075,
0.18619407713413239,
-0.001022789627313614,
0.049142610281705856,
0.028264202177524567,
-0.14552295207977295,
-0.10896290838718414,
0.08365656435489655,
0.04135216400027275,
-0.0870656818151474,
-0.0862942636013031,
-0.043786488473415375,
0.18105657398700714,
0.0165699552744627,
0.058500319719314575,
0.09050041437149048,
0.153311625123024,
0.07934173196554184,
0.11311453580856323,
0.009338933043181896,
-0.05346735194325447,
0.044564977288246155,
-0.11080405116081238,
-0.035792380571365356,
-0.05435336381196976,
-0.12492295354604721,
-0.05828138813376427,
-0.24589508771896362,
-0.05636279284954071,
-0.06593969464302063,
0.07633773982524872,
0.06756902486085892,
0.06273913383483887,
-0.022897200658917427,
-0.07852334529161453,
-0.10090994089841843,
-0.004624299705028534,
-0.09221255779266357,
-0.025300759822130203,
0.07567296177148819,
-0.01591547578573227,
-0.10449250787496567,
-0.08182171732187271,
-0.10808179527521133,
0.037865206599235535,
0.022427184507250786,
0.03422342613339424,
0.03266677260398865,
-0.11564598977565765,
-0.08566363155841827,
0.07179509103298187,
0.06962421536445618,
0.022068383172154427,
0.01862102746963501,
0.05137907713651657,
-0.020529137924313545,
-0.061467818915843964,
0.10024191439151764,
-0.02082280069589615,
-0.10450860857963562,
-0.0010494478046894073,
0.159367173910141,
0.17781196534633636,
-0.18335841596126556,
-0.06483268737792969,
0.14312338829040527,
0.1668003499507904,
0.10049128532409668,
-0.0400942862033844,
-0.1480327546596527,
-0.06828818470239639,
-0.05863051116466522,
-0.26705366373062134,
0.00020599982235580683,
-0.020661476999521255,
0.01618949882686138,
0.07286978513002396,
-0.17360185086727142,
0.09272673726081848,
0.04775240644812584,
-0.1787591129541397,
-0.012294362299144268,
0.09552409499883652,
0.07599533349275589,
-0.028527921065688133,
-0.12334064394235611,
-0.0522623285651207,
-0.0017208813223987818,
0.006257363595068455,
-0.13025285303592682,
-0.05350732430815697,
0.10247531533241272,
0.06857874244451523,
0.07438218593597412,
0.02681470289826393,
0.02539312280714512,
0.09671986848115921,
0.12111609429121017,
0.044425953179597855,
-0.043340444564819336,
-0.05186077579855919,
-0.06155409291386604,
-0.10847240686416626,
-0.06207727640867233,
-0.044708579778671265,
0.05670894682407379,
0.01311718299984932,
0.006751959677785635,
-0.024585122242569923,
0.03889182582497597,
-0.0939621701836586,
-0.12353228777647018,
0.11828897148370743,
-0.10670938342809677,
0.03282869607210159,
-0.04573322832584381,
0.06224629655480385,
0.09445194900035858,
0.0726836770772934,
-0.040750809013843536,
0.06503741443157196,
0.011382591910660267,
-0.09043519198894501,
-0.026887210085988045,
-0.02894892729818821,
-0.024616891518235207,
0.00782834179699421,
0.016780169680714607,
-0.0049515399150550365,
-0.07858111709356308,
-0.008975780569016933,
0.04092679172754288,
0.11671747267246246,
-0.1289844512939453,
-0.027268804609775543,
0.04232271388173103,
0.17440420389175415,
0.1625002771615982,
-0.09732510149478912,
0.0606529600918293,
0.07605714350938797,
0.026209043338894844,
-0.06328315287828445,
-0.04410557448863983,
-0.14384637773036957,
-0.09537297487258911,
-0.06321495026350021,
-0.08841635286808014,
-0.016428297385573387,
0.16617166996002197,
0.03328122943639755,
-0.009212994948029518,
-0.0404883474111557,
0.11448505520820618,
0.010171972215175629,
0.0722350999712944,
0.04609803110361099,
0.014601661823689938,
-0.010113743133842945,
0.03700123727321625,
0.009428627789020538,
0.11919023096561432,
0.028240572661161423,
0.0014037174405530095,
0.0008074678480625153,
0.01900123991072178,
-0.03086146153509617,
-0.08906066417694092,
-0.05035155639052391,
0.0226534903049469,
0.031205151230096817,
0.012392965145409107,
-0.05312289297580719,
-0.05449217930436134,
-0.07595893740653992,
0.1300116330385208,
0.10475070029497147,
0.0005067749880254269,
0.03598311170935631,
0.0204075388610363,
0.10811272263526917,
0.09036454558372498,
0.1872663050889969,
-0.004561350215226412,
-0.14458777010440826,
0.057410676032304764,
0.271378755569458,
0.15812718868255615,
0.03656347468495369,
0.0796094462275505,
0.10271639376878738,
0.03748956322669983,
-0.08465614169836044,
-0.01259213499724865,
-0.04300389811396599,
-0.004194240085780621,
-0.13919220864772797,
-0.047874096781015396,
-0.07546045631170273,
-0.13528157770633698,
-0.0022530301939696074,
0.10792545229196548,
0.09328201413154602,
-0.035569243133068085,
-0.14048407971858978,
0.015876522287726402,
0.13043373823165894,
0.11294499784708023,
0.010117588564753532,
0.07465661317110062,
-0.03612153232097626,
0.09100373834371567,
0.1121831163764,
-0.048442043364048004,
-0.06555397063493729,
0.023868422955274582,
0.07514818757772446,
-0.02417924627661705,
0.18143218755722046,
0.08897563070058823,
0.03285365551710129,
0.042471714317798615,
-0.18121153116226196,
-0.0068474081344902515,
0.036765169352293015,
-0.0002183016767958179,
-0.05667204409837723,
-0.13516578078269958,
-0.1005358099937439,
-0.028137367218732834,
0.04006059095263481,
0.04851126670837402,
0.1492389738559723,
-0.10524529218673706,
0.006213394924998283,
0.05438990145921707,
0.06007013097405434,
0.1114172488451004,
0.027453958988189697,
0.106675885617733,
-0.02674494870007038,
-0.11774472147226334,
0.01675136387348175,
-0.018764173611998558,
0.005693819839507341,
-0.12017747014760971,
0.005883499514311552,
0.07584483921527863,
-0.19346944987773895,
-0.016386937350034714,
0.04990370571613312,
0.13059236109256744,
0.04016560688614845,
0.11535508930683136,
0.004066082648932934,
-0.014072700403630733,
-0.030523482710123062,
0.07934407889842987,
-0.08029670268297195,
-0.09343549609184265,
-0.00796537846326828,
0.16952869296073914,
0.23375578224658966,
0.019606847316026688,
0.012024356052279472,
0.042910147458314896,
0.02407190576195717,
-0.06239953264594078,
-0.024609945714473724,
-0.10361071676015854,
-0.022693973034620285,
-0.16829121112823486,
-0.21412397921085358,
0.06797710061073303,
0.01949048973619938,
0.029297880828380585,
-0.06428685784339905,
-0.04378284513950348,
0.02972957119345665,
0.034377459436655045,
0.07166288048028946,
0.06120592728257179,
-0.05070541054010391,
-0.11235103011131287,
-0.06275472790002823,
-0.01575968787074089,
0.043426547199487686,
0.02027483470737934,
-0.08813603222370148,
-0.04729577526450157,
-0.008493767119944096,
-0.06746002286672592,
0.03353964164853096,
0.14526432752609253,
-0.013932626694440842,
0.09919573366641998,
0.0259670689702034,
-0.14152029156684875,
0.022000562399625778,
-0.05283454433083534,
-0.04025469347834587,
-0.03346456214785576,
-0.06746731698513031,
0.06579650938510895,
0.11956269294023514,
0.06026628613471985,
0.08174441009759903,
0.15175603330135345,
0.04125020653009415,
0.008450513705611229,
-0.13375206291675568,
-0.09682346880435944,
-0.038964446634054184,
-0.04461231082677841,
-0.12377864867448807,
-0.15136219561100006,
-0.012286137789487839,
-0.052957683801651,
-0.13180553913116455,
-0.010771582834422588,
-0.07954978942871094,
-0.06444281339645386,
-0.015828175470232964,
0.05570913106203079,
0.0017331509152427316,
-0.07021455466747284,
0.03181278333067894,
0.050264421850442886,
0.003331055399030447,
-0.09172435849905014,
-0.0596911683678627,
0.06073075532913208,
-0.03642864525318146,
-0.019467949867248535,
-0.03762926533818245,
-0.06888652592897415,
0.0355844683945179,
-0.020258791744709015,
0.07928313314914703,
-0.062020331621170044,
0.1357322484254837,
-0.0072051906026899815,
-0.06116039305925369,
-0.0059911529533565044,
-0.0879422202706337,
0.11874624341726303,
-0.023249594494700432,
0.020008672028779984,
-0.012333677150309086,
-0.020979812368750572,
0.035537268966436386,
0.08550826460123062,
0.03155103325843811,
-0.04391288012266159,
0.017603199928998947,
0.048420101404190063,
0.11478185653686523,
0.0786021426320076,
0.06973748654127121,
-0.06555840373039246,
0.004587555769830942,
0.028925696387887,
-0.09481440484523773,
0.14956358075141907,
0.008420711383223534,
0.06250875443220139,
-0.02462778426706791,
0.04116607829928398,
0.18443340063095093,
0.14386484026908875,
-0.014347626827657223,
0.04085934907197952,
-0.1265021413564682,
-0.03592024743556976,
-0.14138035476207733,
-0.03609837591648102,
0.11247580498456955,
-0.037567008286714554,
0.018877465277910233,
0.0674140527844429,
0.06374893337488174,
0.06085028871893883,
0.01047172024846077,
0.008020487613976002,
-0.0630049854516983,
0.024076523259282112,
-0.030855588614940643,
0.07315592467784882,
0.03556092828512192,
0.009722747839987278,
0.05826566740870476,
-0.04138363525271416,
-0.04278545826673508,
-0.01837163046002388,
0.04975472763180733,
-0.0636691078543663,
-0.1502876579761505,
-0.12203463912010193,
-0.0943545550107956,
-0.0749550312757492,
0.1015825942158699,
0.04794052615761757,
-0.004678407683968544,
0.04016226902604103,
0.014045541174709797,
0.06749571859836578,
0.048630647361278534,
-0.029208630323410034,
0.032605595886707306,
0.15495812892913818,
0.1389746218919754,
0.14342279732227325,
0.17843374609947205,
0.05826453119516373,
0.08207427710294724,
0.06783486902713776,
0.02168048918247223,
0.047268882393836975,
-0.032496750354766846,
0.023558026179671288,
-0.0005900404066778719,
0.016350625082850456,
-0.1845109909772873,
0.007905042730271816,
-0.043177563697099686,
-0.09388087689876556,
-0.15353137254714966,
-0.2324952483177185,
0.005481590982526541,
-0.06607858091592789,
-0.18115253746509552,
-0.14125700294971466,
-0.18950359523296356,
-0.04895799607038498,
0.05266153812408447,
-0.03207593783736229,
0.002532838610932231,
-0.08073895424604416,
0.1203877329826355,
0.06142950803041458,
0.10811953246593475,
0.06751059740781784,
-0.0842408686876297,
-0.029323870316147804,
-0.10409330576658249,
-0.006055236328393221,
0.061044611036777496,
0.1375710517168045,
0.01742386259138584,
-0.12654954195022583,
0.017674090340733528,
0.0009093598346225917,
0.056031059473752975,
-0.022525541484355927,
0.046550218015909195,
0.08846749365329742,
0.031066931784152985,
0.07262510061264038,
-0.036443620920181274,
0.03557314723730087,
0.15010395646095276,
0.09444334357976913,
0.06621361523866653,
-0.16940435767173767,
-0.07123036682605743,
0.024237090721726418,
-0.10941692441701889,
-0.09554165601730347,
-0.06099734827876091,
-0.006702306680381298,
-0.06689900159835815,
-0.087159663438797,
-0.21686041355133057,
0.013717545196413994,
0.00863058865070343,
0.11418421566486359,
-0.02099483832716942,
-0.06693603843450546,
-0.006090416107326746,
0.07082090526819229,
-0.017891788855195045,
-0.08487285673618317,
-0.04405206814408302,
0.05257660895586014,
0.05306660383939743,
0.018083974719047546,
0.05742395296692848,
0.09236457943916321,
0.0017612148076295853,
0.0581422783434391,
0.008112980984151363,
0.008189568296074867,
0.036071378737688065,
0.14497093856334686,
0.0285275187343359,
0.04278388246893883,
0.017517071217298508,
0.035754766315221786,
-0.012776730582118034,
-0.027027776464819908,
-0.06203767657279968,
-0.12993378937244415,
-0.17726385593414307,
0.08343534916639328,
-0.08221914619207382,
-0.06299559772014618,
-0.04691486805677414,
-0.024449419230222702,
-0.147683784365654,
-0.11734846979379654,
-0.03961927071213722,
0.09038779884576797,
0.04708150774240494,
0.006166286300867796,
0.050448182970285416,
-0.015194461680948734,
0.10043754428625107,
0.16071969270706177,
0.05821078270673752,
-0.04256802052259445,
-0.017078792676329613,
0.014328659512102604,
-0.03456682339310646,
-0.012403560802340508,
0.0027075607795268297,
-0.1229514330625534,
-0.10984685271978378,
-0.12559965252876282,
-0.022021416574716568,
0.0685255378484726,
0.04497869685292244,
0.0379934124648571,
0.0879531130194664,
-0.0035906836856156588,
-0.026603417471051216,
-0.05762603133916855,
-0.04438258707523346,
-0.08173992484807968,
-0.03013557195663452,
0.02495352365076542,
-0.06742744892835617,
-0.11620679497718811,
0.016345582902431488,
0.002005200134590268,
-0.024211859330534935,
-0.06784039735794067,
-0.09957007318735123,
0.006909530144184828,
-0.06582880765199661,
0.016730843111872673,
0.05830798298120499,
0.08792831003665924,
0.07729896903038025,
0.011579927057027817,
-0.14725171029567719,
-0.11551917344331741,
-0.0588812381029129,
-0.047868065536022186,
-0.1355181634426117,
-0.0536276213824749,
-0.1272146850824356,
-0.06832437962293625,
-0.011012035422027111,
-0.07853709906339645,
0.05298987030982971,
0.04276097193360329,
-0.05002056434750557,
-0.130066379904747,
-0.11635909974575043,
0.024267619475722313,
0.06683112680912018,
-0.06887049973011017,
0.004366731271147728,
-0.0001380370231345296,
-0.06726627796888351,
0.09687019139528275,
0.036819182336330414,
0.1223422959446907,
0.09315938502550125,
0.08262786269187927,
-0.007886332459747791,
-0.06800588220357895,
0.0056709954515099525,
-0.09523069113492966,
0.027889488264918327,
-0.08834896981716156,
-0.06064097583293915,
-0.024452030658721924,
-0.08883336186408997,
-0.0064622764475643635,
0.016195232048630714,
0.0055085234344005585,
0.013932903297245502,
-0.03655587136745453,
-0.02832203358411789,
-0.0768044963479042,
-0.1222115233540535,
-0.04154825955629349,
0.00014304587966762483,
-0.041405145078897476,
0.010414534248411655,
0.012472807429730892,
0.06948607414960861,
-0.07829812169075012,
-0.11761213093996048,
0.06700805574655533,
0.13934814929962158,
0.06349851936101913,
-0.0878991112112999,
0.007592152338474989,
0.033668264746665955,
0.03704262897372246,
0.033182960003614426,
0.1215987354516983,
0.08739539235830307,
0.08850295096635818,
0.10975875705480576,
0.10168055444955826,
0.007472696714103222,
0.013414169661700726,
0.014375641942024231,
-0.030078299343585968,
-0.11523386836051941,
0.02869327925145626,
0.02932547964155674,
-0.0809854045510292,
-0.1876240372657776,
-0.10251989960670471,
0.0008850769372656941,
-0.17094731330871582,
-0.19016070663928986,
-0.18039311468601227,
-0.03979559615254402,
-0.011563126929104328,
-0.09553101658821106,
-0.026563238352537155,
0.025335844606161118,
0.03350682929158211,
0.04882011190056801,
-0.06216268986463547,
0.024350926280021667,
0.018999386578798294,
-0.028554584830999374,
0.005320747382938862,
-0.03672904893755913,
-0.13302679359912872,
0.02041712962090969,
0.03381827846169472,
0.007810752373188734,
-0.09145208448171616,
-0.02850964106619358,
0.11447779834270477,
0.05582904443144798,
-0.007903875783085823,
0.06428024917840958,
0.13735103607177734,
0.11467496305704117,
0.14022310078144073,
0.026761358603835106,
-0.03229819983243942,
-0.015172393061220646,
-0.016658207401633263,
-0.0683438777923584,
-0.056057192385196686,
-0.03723103925585747,
-0.06001858040690422,
-0.15035659074783325,
-0.0720684602856636,
0.04328835755586624,
-0.05998116359114647,
0.01823551207780838,
-0.05681805685162544,
-0.103656105697155,
0.042757660150527954,
0.09960928559303284,
0.011859053745865822,
-1.0172177098866086e-05,
0.030465463176369667,
0.04015703499317169,
0.07811685651540756,
-0.05712486431002617,
-0.08657471835613251,
-0.05859960615634918,
-0.016588101163506508,
-0.030457044020295143,
-0.002687461907044053,
-0.10430026054382324,
-0.07357897609472275,
-0.013670970685780048,
0.08309774100780487,
-0.05362827703356743,
0.028654269874095917,
0.20247496664524078,
0.12310545146465302,
0.07680174708366394,
0.02222859300673008,
0.0944867804646492,
0.03503527492284775,
-0.018655091524124146,
0.0024263765662908554,
-0.031230926513671875,
0.017350895330309868,
-0.0009815831435844302,
-0.003104056464508176,
-0.09151625633239746,
0.033075664192438126,
-0.0034517080057412386,
0.07351477444171906,
0.10596571117639542,
0.10338718444108963,
0.1219111755490303,
-0.009022112935781479,
-0.016403788700699806,
0.06995441019535065,
0.1295626312494278,
-0.04770515486598015,
0.048992007970809937,
-0.004345020744949579,
-0.01313942950218916,
-0.13905103504657745,
-0.0943431481719017,
-0.053057897835969925,
0.01292398851364851,
-0.031077466905117035,
-0.008162195794284344,
0.020713873207569122,
0.08087798953056335,
0.07888902723789215,
0.001820624340325594,
0.04641522094607353,
-0.06978221982717514,
-0.02103400230407715,
-0.03150486573576927,
0.01662277802824974,
-0.014727665111422539,
-0.13813389837741852,
-0.004619550425559282,
-0.057219550013542175,
0.12122806906700134,
-0.05797300860285759,
-0.14898432791233063,
-0.06792529672384262,
-0.03859107941389084,
0.05965130031108856,
-0.02932130917906761,
-0.0440806970000267,
-0.005811343435198069,
0.04612426832318306,
-0.02261420525610447,
-0.006115597207099199,
0.026696281507611275,
0.007392050698399544,
0.05282047018408775,
-0.1958547681570053,
-0.09268460422754288,
-0.07724732160568237,
-0.08045174926519394,
-0.042083773761987686,
0.00038012044387869537,
-0.025008197873830795,
-0.03360206261277199,
-0.06711385399103165,
0.06173018738627434,
0.16979970037937164,
0.09454073756933212,
0.03344358876347542,
-0.007915201596915722,
0.023986738175153732,
0.07807104289531708,
0.04570075124502182,
0.15785065293312073,
-0.12401221692562103,
-0.13084658980369568,
0.007980329915881157,
0.060553666204214096,
0.04095209389925003,
-0.15386345982551575,
-0.015491912141442299,
0.019376693293452263,
0.03687720000743866,
0.023828867822885513,
-0.01622048392891884,
0.041997261345386505,
-0.03847857192158699,
0.02734784409403801,
-0.040918268263339996,
0.1537833958864212,
0.008239378221333027,
-0.060465242713689804,
0.019510291516780853,
0.014441465027630329,
0.1429090052843094,
0.016405202448368073,
-0.020112577825784683,
0.02038920857012272,
-0.005865870043635368,
-0.05466653034090996,
-0.04351559653878212,
0.038063280284404755,
-0.04465074837207794,
0.030629035085439682,
-0.015410839579999447,
0.04142199456691742,
-0.031568076461553574,
-0.03084661066532135,
0.05136960744857788,
-0.04438059404492378,
0.060930509120225906,
0.013727174140512943,
-0.1273019015789032,
-0.09161938726902008,
-0.07450398057699203,
0.12472850829362869,
0.012079737149178982,
0.10158900916576385,
0.1337975710630417,
0.02228209748864174,
0.03744080290198326,
0.11156797409057617,
0.13970007002353668,
0.18951594829559326,
0.1156107634305954,
-0.08875279128551483,
0.036446161568164825,
0.0017358579207211733,
-0.10571512579917908,
-0.12567397952079773,
-0.14052589237689972,
0.037137221544981,
-0.04231118783354759,
-0.1433718204498291,
-0.03252740949392319,
0.043743573129177094,
0.010004007257521152,
-0.1231614202260971,
-0.0753098726272583,
-0.049453675746917725,
-0.0341874323785305,
0.053451716899871826,
-0.04936918988823891,
-0.04763408750295639,
-0.09709879010915756,
-0.031036507338285446,
0.0173783116042614,
0.0036009408067911863,
0.04297253116965294,
0.04549865424633026,
0.0514831505715847,
0.05844038724899292,
-0.019068118184804916,
0.03620613366365433,
0.008804169483482838,
0.05406482517719269,
0.09648847579956055,
0.09456784278154373,
-0.024009736254811287,
-0.056167121976614,
0.0677478238940239,
0.0049594491720199585,
-0.010674357414245605,
0.06688924878835678,
-0.03401614725589752,
-0.025409359484910965,
-0.10740270465612411,
-0.03290596976876259,
0.0016476542223244905,
0.048226047307252884,
0.03361958637833595,
-0.08631779998540878,
-0.12390734255313873,
0.03440028056502342,
-0.08804566413164139,
-0.08282850682735443,
-0.0014838315546512604,
-0.034749846905469894,
0.10016089677810669,
0.015083781443536282,
-0.07027383893728256,
0.05291246622800827,
0.06742405146360397,
-0.0301237553358078,
0.02616623416543007,
0.05541897192597389,
-0.08318527787923813,
-0.12924116849899292,
0.019268272444605827,
-0.019027581438422203,
-0.010507209226489067,
-0.04801378771662712,
0.10685832798480988,
0.053810592740774155,
0.07822045683860779,
-0.06137058883905411,
0.09264197200536728,
0.14866039156913757,
0.1568128764629364,
0.14181140065193176,
0.025821056216955185,
-0.02135198377072811,
0.011180482804775238,
-0.012132491916418076,
-0.025008514523506165,
0.003298797644674778,
0.05676024779677391,
-0.04982472583651543,
-0.047322146594524384,
-0.0669689029455185,
0.02152879722416401,
0.09371446073055267,
-0.021766798570752144,
0.014354626648128033,
-0.004964442458003759,
0.0071883415803313255,
-0.134136363863945,
-0.06566037982702255,
0.015378100797533989,
0.07405359297990799,
0.1124490424990654,
-0.021343281492590904,
0.017689285799860954,
0.0007841485203243792,
0.0760519728064537,
-0.0604894757270813,
0.12181835621595383,
-0.0010867043165490031,
-0.01935913786292076,
-0.07137148082256317,
-0.06529450416564941,
0.057952165603637695,
0.023238128051161766,
0.05027731880545616,
0.06699086725711823,
0.09974363446235657,
-0.0014658014988526702,
0.005393857602030039,
0.021963069215416908,
-0.026433810591697693,
0.09812085330486298,
-0.04818538948893547,
0.024704761803150177,
-0.023860745131969452,
0.050432972609996796,
-0.10630164295434952,
0.060028694570064545,
-0.02835027500987053,
-0.009736297652125359,
-0.06306719779968262,
-0.04377979785203934,
-0.05475495755672455,
-0.07657014578580856,
0.06219252571463585,
0.014445451088249683,
-0.0050561088137328625,
0.05851323530077934,
-0.05968698859214783,
-0.05319971591234207,
-0.0918087512254715,
0.055519554764032364,
0.0776330903172493,
0.035891301929950714,
-0.035986222326755524,
0.07440944761037827,
-0.019656360149383545,
-0.056898634880781174,
0.0312336552888155,
-0.17201712727546692,
-0.026168273761868477,
-0.05237429961562157,
-0.09160079807043076,
-0.1093640998005867,
-0.09055127203464508,
-0.002699703210964799,
-0.055484745651483536,
-0.034901272505521774,
-0.12083374708890915,
-0.04086980223655701,
0.027965612709522247,
0.06336652487516403,
-0.0649949237704277,
0.0026715686544775963,
-0.13493026793003082,
-0.03622373938560486,
0.0841912254691124,
0.08925651758909225,
0.0308645311743021,
0.05267323926091194,
0.026737958192825317,
0.026287635788321495,
0.024168983101844788,
0.03715118020772934,
-0.024182580411434174,
-0.06883369386196136,
0.050462156534194946,
-0.061642419546842575,
-0.0951773077249527,
-0.14681972563266754,
-0.01362303365021944,
-0.10735862702131271,
0.027434777468442917,
-0.05506749823689461,
-0.07088833302259445,
0.024050788953900337,
0.04774685576558113,
-0.08509647101163864,
-0.09343918412923813,
0.03288355842232704,
0.09210029989480972,
0.06410882622003555,
-0.06370927393436432,
-0.12673428654670715,
-0.07031616568565369,
-0.00749079929664731,
-0.05096231773495674,
-0.019216319546103477,
-0.02424093522131443,
0.08761369436979294,
0.08981208503246307,
0.041915953159332275,
0.04510033130645752,
0.09472154080867767,
0.10989128053188324,
0.0179668590426445,
-0.10995056480169296,
0.15552984178066254,
0.1729050725698471,
0.06025338172912598,
0.01102391816675663,
-0.1153426319360733,
0.0566851869225502,
0.16754470765590668,
-0.12206894159317017,
0.06269574165344238,
0.045065294951200485,
0.06295415014028549,
-0.051459237933158875,
-0.03714418038725853,
0.029653199017047882,
0.09750699996948242,
-0.04904310405254364,
-0.10901500284671783,
-0.16340070962905884,
-0.032017212361097336,
-0.009371901862323284,
-0.012686415575444698,
-0.06372296065092087,
-0.12133197486400604,
-0.08144735544919968,
-0.004167661536484957,
-0.0886625349521637,
-0.0926518440246582,
0.08622031658887863,
-0.00979000423103571,
-0.07970204204320908,
-0.03148450329899788,
0.0036696374882012606,
-0.0037511521950364113,
0.04427702724933624,
0.004316683392971754,
-0.15863819420337677,
-0.004108157008886337,
-0.035367317497730255,
0.005389982834458351,
-0.0510852187871933,
0.12616319954395294,
0.024061407893896103,
-0.0131917092949152,
0.0905807763338089,
0.00978644099086523,
0.03785758838057518,
-0.037018708884716034,
-0.0032436710316687822,
0.003513408126309514,
-0.06841932237148285,
-0.01325863879173994,
-0.008616377599537373,
0.057444632053375244,
-0.08082713186740875,
0.040317364037036896,
0.0048476592637598515,
0.019982345402240753,
0.009814434684813023,
-0.07232867181301117,
-0.13286255300045013,
-0.07680121064186096,
0.021172041073441505,
-0.11261476576328278,
-0.08780479431152344,
-0.009562209248542786,
0.023556582629680634,
-0.13059760630130768,
-0.1856333464384079,
-0.110008604824543,
0.03488634154200554,
0.10102535039186478,
0.09182365983724594,
0.1128775030374527,
0.03472262993454933,
-0.026336580514907837,
0.11339890211820602,
0.03682809695601463,
0.04430931806564331,
-0.016909556463360786,
0.018625738099217415,
0.0913648009300232,
0.12995190918445587,
-0.07152161002159119,
-0.04436855390667915,
-0.10084570199251175,
-0.051413778215646744,
-0.06712597608566284,
-0.057118289172649384,
0.08812585473060608,
0.16685563325881958,
-0.15109561383724213,
-0.017729301005601883,
-0.05817488208413124,
0.0024123152252286673,
0.02402694709599018,
0.11212047934532166,
0.21623359620571136,
0.0016523421509191394,
-0.007695223670452833,
-0.06217963621020317,
0.12624256312847137,
-0.013635633513331413,
-0.21801285445690155,
-0.0675763264298439,
-0.024438703432679176,
0.06920140236616135,
0.06473413109779358,
-0.01254299283027649,
0.00884463731199503,
0.04909747838973999,
0.01073522586375475,
-0.01666189730167389,
0.03138590604066849,
0.017537487670779228,
0.09417764842510223,
-0.07377690076828003,
-0.00462071318179369,
0.09058596938848495,
0.02752729319036007,
-0.0586952343583107,
-0.04646803066134453,
-0.03796415030956268,
0.015246712602674961,
-0.09699589014053345,
0.02546299435198307,
0.04224853590130806,
-0.07723031938076019,
-0.06504950672388077,
-0.011947063729166985,
-0.0055560036562383175,
0.07909323275089264,
0.07037866860628128,
0.02106194943189621,
-0.038306523114442825,
-0.03858419507741928,
-0.023082351312041283,
0.040660832077264786,
0.040626805275678635,
0.10286453366279602,
-0.04470429942011833,
0.022135889157652855,
-0.14630351960659027,
0.15723493695259094,
0.07345905900001526,
0.10341255366802216,
0.00415534432977438,
-0.08700448274612427,
-0.18932893872261047,
0.08397021889686584,
0.11976800113916397,
0.07366476953029633,
-0.05972963199019432,
-0.09387493878602982,
-0.11670735478401184,
-0.07899714261293411,
-0.03692800551652908,
0.033432625234127045,
0.0325235091149807,
-0.050846777856349945,
-0.08427958935499191,
0.03322768211364746,
0.024315180256962776,
0.04149964079260826,
-0.03714059293270111,
0.13438215851783752,
-0.039260134100914,
0.0031512968707829714,
0.041950445622205734,
0.03249163180589676,
-0.04321156442165375,
-0.08600888401269913,
0.03598703444004059,
0.08843619376420975,
-0.13275110721588135,
0.009679922834038734,
-0.06980649381875992,
0.0656542107462883,
0.13208000361919403,
0.06659216433763504,
-0.03186296671628952,
0.004229798913002014,
0.047963183373212814,
0.06351353228092194,
0.009204369969666004,
-0.13388922810554504,
0.11073124408721924,
0.07792843133211136,
-0.00012623654038179666,
0.0015162111958488822,
-0.006447627209126949,
-0.04687263444066048,
0.046040382236242294,
-0.013631675392389297,
0.17479172348976135,
0.110493503510952,
-0.15684007108211517,
-0.1576918512582779,
-0.039224378764629364,
0.0025171958841383457,
0.1401703655719757,
-0.0518115870654583,
-0.035126470029354095,
0.06686261296272278,
0.07149548083543777,
0.11127708852291107,
-0.04389741271734238,
-0.08254524320363998,
0.04239707812666893,
0.11067008972167969,
0.12762655317783356,
-0.027023326605558395,
0.00667275907471776,
-0.02540348283946514,
-0.014118436723947525,
0.07549736648797989,
-0.03149627894163132,
0.08433608710765839,
-0.04957474768161774,
-0.07383869588375092,
-0.04004121944308281,
-0.05201385170221329,
-0.1335049867630005,
0.023903191089630127,
-0.12817883491516113,
-0.04533432424068451,
-0.003189587499946356,
0.014083330519497395,
-0.06610382348299026,
-0.02059798501431942,
0.020885681733489037,
-0.018334360793232918,
-0.0056891427375376225,
0.00769483158364892,
-0.08728060871362686,
-0.0510256253182888,
-0.05907217040657997,
0.007274560630321503,
-0.05606729909777641,
0.007046409882605076,
-0.01934238150715828,
-0.06515271961688995,
0.09490260481834412,
0.06817156076431274,
0.19485019147396088,
0.02323855645954609,
0.19754965603351593,
0.18142586946487427,
0.017551638185977936,
0.15049391984939575,
0.09935837239027023,
-0.02184750884771347,
-0.052823860198259354,
-0.012180738151073456,
0.002843695692718029,
-0.14799878001213074,
0.013153820298612118,
0.03540460020303726,
0.06493564695119858,
-0.027211995795369148,
-0.016665304079651833,
-0.0020770796108990908,
0.1007213294506073,
-0.03096119686961174,
0.12928320467472076,
0.0410459004342556,
0.07016509771347046,
0.10964283347129822,
0.025380978360772133,
0.0731743723154068,
-0.03839777410030365,
-0.18115068972110748,
-0.06695305556058884,
-0.006359307561069727,
0.06516420096158981,
0.031290970742702484,
-0.11260727792978287,
0.0279352106153965,
0.06933271884918213,
0.13959884643554688,
0.010264099575579166,
-0.031418778002262115,
-0.026054469868540764,
-0.06503498554229736,
-0.054788339883089066,
-0.04751360043883324,
0.08766448497772217,
-0.05214817821979523,
0.04827713221311569,
-0.05555927753448486,
-0.06337755918502808,
0.24973776936531067,
-0.003540450008586049,
-0.12577316164970398,
-0.04081850126385689,
0.10405847430229187,
0.024132896214723587,
-0.018936268985271454,
-0.008594951592385769,
-0.00165649747941643,
0.15110169351100922,
-0.12453507632017136,
-0.036236073821783066,
-0.08948896080255508,
0.0053110383450984955,
0.04029082506895065,
-0.01176436711102724,
0.05465128645300865,
0.003206168534234166,
-0.15823699533939362,
-0.12490367889404297,
0.00647188164293766,
-0.08976868540048599,
-0.018566006794571877,
0.12180633842945099,
0.11328818649053574,
-0.06963328272104263,
-0.003968000877648592,
0.07175446301698685,
0.08911167830228806,
0.018893172964453697,
-0.019541732966899872,
0.13924230635166168,
-0.10084068030118942,
-0.025593286380171776,
-0.016195377334952354,
-0.07824423909187317,
-0.010447902604937553,
-0.0019990799482911825,
-0.03023722767829895,
-0.04124659299850464,
-0.04347715154290199,
-0.08600331097841263,
0.07702239602804184,
0.02559726871550083,
0.011011410504579544,
-0.14907215535640717,
-0.10629570484161377,
-0.031413499265909195,
0.12453141063451767,
0.14826206862926483,
-0.17753483355045319,
-0.14035163819789886,
0.031862642616033554,
0.0801551565527916,
-0.05815548449754715,
0.05271197855472565,
-0.03119107522070408,
0.038078490644693375,
-0.05507823824882507,
-0.09384065866470337,
0.06803277879953384,
-0.08206389099359512,
-0.04635535180568695,
-0.011229531839489937,
-0.05947082117199898,
0.018649309873580933,
0.08841332793235779,
-0.021202828735113144,
-0.07816120237112045,
-0.08128390461206436,
-0.0004916682955808938,
-0.03137833625078201,
-0.04714439809322357,
0.09321475774049759,
0.1435624659061432,
-0.08470660448074341,
-0.0922759398818016,
0.12591388821601868,
0.1456630527973175,
0.05947253480553627,
-0.07177287340164185,
0.061813704669475555,
0.1212991252541542,
-0.15444186329841614,
-0.12159159779548645,
0.020705314353108406,
0.037743277847766876,
-0.05209114030003548,
0.014203577302396297,
-0.0509704053401947,
-0.023078059777617455,
0.12165410071611404,
0.025060376152396202,
-0.09853658825159073,
-0.17398135364055634,
0.1678086221218109,
0.0826457142829895,
0.017083385959267616,
0.07936770468950272,
-0.09281806647777557,
0.16087958216667175,
0.12447554618120193,
-0.0776309072971344,
-0.008274570107460022,
0.08065374195575714,
-0.08624093979597092,
-0.0559743195772171,
-0.04091929644346237,
0.035353902727365494,
0.08238349109888077,
-0.1920899897813797,
-0.10733798891305923,
-0.0057336678728461266,
0.009479422122240067,
-0.03434080258011818,
0.0412723571062088,
-0.13990598917007446,
-0.020605191588401794,
0.007209501229226589,
0.026037972420454025,
-0.030753927305340767,
-0.016704507172107697,
0.005962017457932234,
0.03212388977408409,
0.11668264865875244,
0.07060921937227249,
0.09882694482803345,
-0.03832753747701645,
-0.03594636172056198,
0.0728955864906311,
0.05783884972333908,
0.037423498928546906,
-0.09695612639188766,
-0.07122564315795898,
0.004612680524587631,
0.017610983923077583,
-0.1433916538953781,
-0.1523350328207016,
0.08101113140583038,
0.06945536285638809,
0.03135523572564125,
0.02245851792395115,
-0.050892844796180725,
-0.07429248094558716,
-0.05771397799253464,
0.034581445157527924,
-0.06718523055315018,
0.03339964523911476,
-0.02943466044962406,
0.07970236986875534,
-0.05360783264040947,
-0.018194830045104027,
0.009264124557375908,
0.10672277212142944,
0.09808101505041122,
-0.038168150931596756,
0.018126478418707848,
0.04536965489387512,
-0.043276894837617874,
0.030632521957159042,
-0.040860697627067566,
0.03965385630726814,
-0.06165488436818123,
-0.021630052477121353,
-0.1833713799715042,
0.023771341890096664,
-0.03332860767841339,
0.029008381068706512,
-0.0347307026386261,
0.08561287075281143,
0.0028654776979237795,
-0.00010375049896538258,
-0.018144750967621803,
-0.02515501156449318,
-0.011206420138478279,
0.11094478517770767,
0.16888649761676788,
0.09196982532739639,
0.0007483398076146841,
0.02934391237795353,
-0.02091912180185318,
-0.055875107645988464,
-0.06442678719758987,
-0.02810380980372429,
-0.03262350708246231,
-0.09421707689762115,
-0.06559646874666214,
-0.15445850789546967,
-0.08698456734418869,
0.013964610174298286,
-0.0794937014579773,
-0.08658937364816666,
0.04242277890443802,
0.03130101412534714,
0.13419035077095032,
0.20379580557346344,
0.04741796478629112,
0.032576750963926315,
0.013551448471844196,
-0.16607651114463806,
0.044322364032268524,
-0.036791179329156876,
-0.04199972748756409,
0.024275168776512146,
-0.10180965811014175,
-0.11957491934299469,
-0.013884150423109531,
0.009246919304132462,
0.04501616209745407,
0.0038652895018458366,
-0.03629937767982483,
0.04182346910238266,
0.06716959923505783,
0.05126570910215378,
0.03677518665790558,
-0.0013625605497509241,
-0.02349567413330078,
0.05350280925631523,
-0.012430510483682156,
-0.017199063673615456,
-0.007786395959556103,
0.051348671317100525,
0.06761305034160614,
-0.056916773319244385,
-0.034167785197496414,
0.06757646054029465,
0.08239543437957764,
0.08827712386846542,
0.016956845298409462,
-0.002494729356840253,
-0.002416969509795308,
0.10785356909036636,
0.10322356224060059,
0.05842047557234764,
0.01627594605088234,
-0.02273121289908886,
0.04598623514175415,
-0.0007526281988248229,
0.004570558667182922,
-0.009199942462146282,
-0.11892391741275787,
-0.13318045437335968,
-0.07368315756320953,
0.008808705024421215,
-0.028804857283830643,
0.08315420150756836,
0.08284798264503479,
-0.016473401337862015,
-0.09026367217302322,
0.09469470381736755,
-0.11509794741868973,
0.1341979056596756,
-0.10644957423210144,
-0.087701216340065,
-0.13154107332229614,
0.012577018700540066,
0.07240867614746094,
0.13060948252677917,
0.03231837600469589,
-0.07593359053134918,
0.022712795063853264,
0.015265069901943207,
0.060062047094106674,
0.05474352836608887,
0.02295900322496891,
-0.03460260108113289,
-0.019443415105342865,
0.027873095124959946,
0.09538810700178146,
0.05374389886856079,
-0.05185817927122116,
0.08328447490930557,
-0.010190146043896675,
0.04108379781246185,
0.009382487274706364,
0.010736227035522461,
0.019999796524643898,
0.004804055672138929,
-0.003713282523676753,
-0.00613554660230875,
0.046246521174907684,
-0.020935116335749626,
-0.01578226499259472,
-0.022380627691745758,
-0.021184131503105164,
0.018158236518502235,
0.017462382093071938,
0.018021946772933006,
0.042492110282182693,
0.06149132922291756,
-0.05438563972711563,
-0.15437406301498413,
-0.03112047165632248,
0.05635989084839821,
0.12244958430528641,
-0.21064846217632294,
-0.1476677805185318,
-0.1369001567363739,
0.06760671734809875,
0.08081153780221939,
-0.03925655409693718,
0.0046232836320996284,
0.007974322885274887,
-0.06614454090595245,
-0.008792865090072155,
0.05763138830661774,
0.1276777684688568,
0.11112149059772491,
-0.12775619328022003,
-0.3018943965435028,
-0.01067934837192297,
0.13061366975307465,
-0.015824830159544945,
-0.10013275593519211,
-0.1269298493862152,
0.019350690767169,
0.1582045704126358,
-0.031464144587516785,
-0.04735330864787102,
-0.07603589445352554,
0.028481295332312584,
0.017823169007897377,
0.04396958649158478,
-0.09831386804580688,
-0.0964878723025322,
0.0019960738718509674,
-0.03810536488890648,
0.13348433375358582,
0.021938584744930267,
0.025112612172961235,
0.010580061003565788,
0.1081780418753624,
0.027733147144317627,
0.038672223687171936,
0.0933447927236557,
0.01961432956159115,
-0.033042583614587784,
-0.042126499116420746,
-0.054347530007362366,
0.08158930391073227,
0.110750213265419,
0.06095388904213905,
-0.038221076130867004,
0.08394812047481537,
0.15655100345611572,
0.08628726005554199,
0.0917450413107872,
0.026342099532485008,
0.06705435365438461,
0.06324472278356552,
-0.07724355161190033,
-0.10197394341230392,
-0.05400191247463226,
-0.017062664031982422,
0.027450386434793472,
-0.2304152399301529,
-0.1120552197098732,
-0.05429057404398918,
-0.14339998364448547,
-0.16005420684814453,
-0.04571892321109772,
-0.008186505176126957,
-0.024725984781980515,
0.04015929996967316,
-0.016370119526982307,
-0.07007594406604767,
-0.059675104916095734,
-0.08332745730876923,
0.049979813396930695,
0.020259931683540344,
-0.14469529688358307,
-0.12272846698760986,
-0.09304157644510269,
0.00639872532337904,
0.05743413418531418,
0.010349568910896778,
0.02757938578724861,
0.057739995419979095,
-0.0009850886417552829,
0.008429057896137238,
0.10458554327487946,
0.11713900417089462,
0.04511426389217377,
-0.022457275539636612,
0.013422941789031029,
0.06992756575345993,
0.07618266344070435,
0.06556055694818497,
-0.059377118945121765,
0.032729778438806534,
0.11248978972434998,
0.04659346863627434,
0.007616577669978142,
0.02006998285651207,
0.019534526392817497,
-0.11761204898357391,
-0.08042179048061371,
-0.10107453167438507,
0.16464626789093018,
0.049277856945991516,
-0.38587096333503723,
-0.10970515757799149,
0.021085014566779137,
0.09396053850650787,
0.029949601739645004,
-0.02202022261917591,
0.02305551804602146,
-0.10455408692359924,
0.012925267219543457,
-0.16690734028816223,
0.036367498338222504,
0.055474694818258286,
0.041100937873125076,
-0.015370339155197144,
-0.05843618884682655,
-0.026157522574067116,
0.08058995753526688,
0.035092175006866455,
0.1627056896686554,
0.12182784080505371,
-0.016305208206176758,
0.012811681255698204,
0.07018465548753738,
-0.07117709517478943,
-0.08013029396533966,
0.07414572685956955,
0.002962807659059763,
-0.11526171863079071,
-0.02662271447479725,
-0.06094064190983772,
0.022423960268497467,
-0.01828714646399021,
0.05405321717262268,
0.019364668056368828,
0.11446499824523926,
-0.0063491882756352425,
0.010875553824007511,
-0.07623099535703659,
-0.005216534715145826,
0.021608944982290268,
0.1497441679239273,
0.08460700511932373,
0.01695428229868412,
0.07162255793809891,
0.048812076449394226,
0.18728449940681458,
0.11615961045026779,
-0.016086075454950333,
-0.12612517178058624,
-0.11793749034404755,
0.16622301936149597,
0.046877671033144,
-0.03352285549044609,
-0.07615488767623901,
0.03642302006483078,
-0.002147187478840351,
0.08825113624334335,
-0.0526251383125782,
-0.028132524341344833,
0.11933479458093643,
-0.05476929992437363,
-0.002474042121320963,
-0.022156059741973877,
-0.06284374743700027,
0.0852951854467392,
0.04785546287894249,
0.0737391784787178,
0.1598391830921173,
0.18925073742866516,
0.16221606731414795,
0.01682264916598797,
0.14558656513690948,
0.08046094328165054,
-0.01288444921374321,
-0.17503662407398224,
0.12604384124279022,
0.09497694671154022,
0.01064164936542511,
-0.1177518218755722,
-0.03448043391108513,
0.008660503663122654,
0.07689319550991058,
-0.03153951093554497,
-0.04477663338184357,
0.06573911011219025,
-0.012918643653392792,
0.019952936097979546,
-0.040565501898527145,
0.004140461329370737,
0.051316455006599426,
-0.01422326173633337,
-0.1479494273662567,
-0.03437303006649017,
0.011387783102691174,
0.16099584102630615,
-0.20381222665309906,
-0.260858952999115,
-0.14398044347763062,
-0.05638255551457405,
0.1317618191242218,
-0.21795164048671722,
-0.10361228138208389,
0.0015683895908296108,
0.013800173066556454,
-0.04061827063560486,
0.16635216772556305,
-0.025653300806879997,
0.004647685214877129,
-0.06967827677726746,
-0.1591964215040207,
0.11216199398040771,
0.08414190262556076,
0.039342835545539856,
0.03652292862534523,
0.0281940046697855,
0.0768224447965622,
0.15325243771076202,
0.03858073055744171,
0.006682340521365404,
0.0029674579855054617,
-0.009627996943891048,
-0.03725813329219818,
-0.038344912230968475,
0.018666286021471024,
-0.1318986415863037,
-0.11069367825984955,
-0.0873195081949234,
-0.06949172168970108,
0.013088738545775414,
-0.03206799551844597,
-0.07657776772975922,
-0.09427744895219803,
0.019998425617814064,
0.010946657508611679,
-0.041383903473615646,
-0.015732496976852417,
0.017316674813628197,
-0.0197001900523901,
-0.005471894983202219,
-0.06252767890691757,
-0.09496697038412094,
0.012356454506516457,
0.014370820485055447,
-0.028577901422977448,
0.029635699465870857,
0.007160428911447525,
0.06475012004375458,
0.062317751348018646,
0.04777650535106659,
-0.01656096987426281,
0.029415903612971306,
-0.015726441517472267,
-0.0620846189558506,
-0.08913729339838028,
-0.14497709274291992,
-0.030025390908122063,
-0.052796587347984314,
-0.008792964741587639,
-0.06100234389305115,
-0.020163994282484055,
-0.011592866852879524,
-0.06659740209579468,
0.0124472351744771,
0.04940010607242584,
0.10413006693124771,
0.024942627176642418,
-0.00016402429901063442,
0.10566665977239609,
0.06900682300329208,
-0.0810292661190033,
-0.036703720688819885,
-0.07646088302135468,
-0.05358779802918434,
-0.04044722765684128,
0.1310407966375351,
-0.2381192445755005,
-0.1905023157596588,
-0.2587411403656006,
-0.03078438900411129,
-0.014549501240253448,
-0.050483617931604385,
-0.00023620489810127765,
0.027455948293209076,
-0.09005336463451385,
-0.004964983556419611,
0.043157897889614105,
0.01687922701239586,
0.02339096926152706,
0.05804593861103058,
-0.04502784088253975,
-0.1046234518289566,
-0.02981051243841648,
0.023995772004127502,
-0.14524300396442413,
-0.12580116093158722,
-0.03334170952439308,
-0.05128989741206169,
0.02257225103676319,
-0.0007338139694184065,
-0.10363498330116272,
0.041860975325107574,
0.029274163767695427,
0.022776924073696136,
-0.07970485091209412,
0.042976126074790955,
0.13566802442073822,
0.011045646853744984,
0.16756977140903473,
0.0492975153028965,
0.08211690932512283,
0.008804884739220142,
-0.053845714777708054,
-0.031293243169784546,
-0.00631297193467617,
-0.16737303137779236,
0.002654842333868146,
0.013708485290408134,
0.03889593482017517,
0.03809356689453125,
0.09894321858882904,
0.04924175888299942,
-0.028898460790514946,
-0.019720518961548805,
-0.00428084097802639,
-0.023733796551823616,
-0.0280595850199461,
0.07338617742061615,
-0.04205169528722763,
-0.01118006743490696,
-0.020182613283395767,
-0.06465000659227371,
0.05327744781970978,
-0.024402804672718048,
-0.027036072686314583,
0.021381836384534836,
0.0212404802441597,
-0.003990132361650467,
-0.1067751795053482,
-0.15041208267211914,
-0.10007334500551224,
-0.002558220876380801,
0.008200535550713539,
-0.024115057662129402,
0.055527981370687485,
-0.05470002442598343,
-0.001401468995027244,
-0.09471862018108368,
-0.08054260909557343,
0.050276536494493484,
0.004646260291337967,
-0.21183371543884277,
-0.08600988984107971,
0.025125741958618164,
0.07298161834478378,
-0.11089938879013062,
-0.07521793991327286,
-0.040962085127830505,
0.09946601092815399,
0.06927675008773804,
0.1812742054462433,
0.0031229518353939056,
0.01163878757506609,
0.022821417078375816,
0.02182743512094021,
0.12834401428699493,
-0.08251217752695084,
-0.05141711235046387,
0.12011642754077911,
-0.005400829948484898,
-0.030452275648713112,
-0.01528753899037838,
0.030930418521165848,
0.03501264378428459,
-0.06373856961727142,
-0.11324428766965866,
-0.008699226193130016,
-0.013277468271553516,
-0.019245266914367676,
-0.04322453588247299,
-0.04987956956028938,
0.02046779915690422,
-0.004227421246469021,
-0.03497945889830589,
0.09324237704277039,
0.12066539376974106,
0.005111074540764093,
0.05262767896056175,
-0.022447874769568443,
-0.08092007040977478,
0.0028440847527235746,
-0.007756741251796484,
-0.02991359867155552,
-0.02373873069882393,
0.10795988142490387,
0.024038661271333694,
-0.09230159968137741,
0.009378820657730103,
-0.040348369628190994,
0.006961818318814039,
-0.14795824885368347,
-0.04590999707579613,
-0.14727605879306793,
-0.0960547998547554,
-0.04386849328875542,
-0.11749880015850067,
-0.0326860137283802,
-0.052775509655475616,
-0.03210735693573952,
-0.11147983372211456,
0.056756213307380676,
0.05589037761092186,
0.04021407291293144,
0.10757187008857727,
0.12332338094711304,
0.2029532939195633,
0.0692199245095253,
0.027030497789382935,
0.121148481965065,
0.05633141100406647,
0.01327231340110302,
0.015420261770486832,
0.016790272668004036,
0.06377828121185303,
-0.07819949090480804,
0.029085572808980942,
-0.03498055040836334,
-0.03992849215865135,
0.03723929077386856,
0.01990344189107418,
0.12525106966495514,
0.06958494335412979,
0.11443910747766495,
-0.04836806654930115,
-0.06800706684589386,
-0.12550297379493713,
-0.014530658721923828,
0.04097076877951622,
-0.12280060350894928,
-0.0017307027010247111,
-0.14127112925052643,
-0.07887375354766846,
-0.14198900759220123,
-0.08850237727165222,
-0.003981483168900013,
-0.0855034738779068,
0.0037557967007160187,
0.012181662954390049,
-0.05293400585651398,
-0.039356376975774765,
-0.1016542911529541,
0.13929526507854462,
0.048388075083494186,
0.004167385399341583,
-0.045467477291822433,
0.04665315896272659,
0.08390186727046967,
0.11175303906202316,
0.07292771339416504,
0.010120028629899025,
0.1837964802980423,
-0.03495750576257706,
0.054992299526929855,
0.04250725731253624,
0.05263045057654381,
0.04656999185681343,
0.0018615511944517493,
-0.020093927159905434,
0.07804010808467865,
0.01580026000738144,
-0.13553486764431,
-0.07798006385564804,
0.006703664548695087,
0.06539525836706161,
0.049180157482624054,
-0.16089418530464172,
-0.08092033863067627,
-0.03874099254608154,
-0.03469240292906761,
0.001098168664611876,
-0.029162397608160973,
-0.10806315392255783,
-0.1654980182647705,
-0.06319194287061691,
-0.04514186084270477,
-0.047730911523103714,
0.06767424196004868,
0.11586027592420578,
0.06918812543153763,
0.09739960730075836,
0.18688298761844635,
0.03466193377971649,
0.014840957708656788,
-0.004467805847525597,
0.024879585951566696,
0.07924322038888931,
0.029483886435627937,
0.14659838378429413,
0.04774865880608559,
0.0355873629450798,
-0.04984888806939125,
0.042659759521484375,
0.030378194525837898,
-0.03956020250916481,
-0.07061274349689484,
-0.17906349897384644,
-0.10507974773645401,
0.08330580592155457,
-0.08303908258676529,
-0.028335675597190857,
0.037759438157081604,
0.0286517683416605,
0.1046241745352745,
0.11226285994052887,
0.031191375106573105,
0.11009145528078079,
0.009144476614892483,
0.05443074181675911,
0.01660219207406044,
-0.023165550082921982,
-0.11557911336421967,
0.09333603084087372,
0.06693489849567413,
0.04699867591261864,
-0.0502835176885128,
-0.16137973964214325,
0.0652325376868248,
-0.008865928277373314,
-0.014784600585699081,
-0.03128504753112793,
-0.054673392325639725,
-0.08510810881853104,
-0.013264118693768978,
0.06112130358815193,
0.12939441204071045,
0.05052236467599869,
0.047094348818063736,
-0.05448807775974274,
-0.053252775222063065,
0.0046450430527329445,
0.007785011548548937,
-0.0373673215508461,
0.09851796180009842,
0.039211440831422806,
0.06141255423426628,
-0.011028648354113102,
0.03461092337965965,
-0.010941602289676666,
0.021985018625855446,
-0.07769457250833511,
0.021550999954342842,
-0.014720126055181026,
-0.05965954810380936,
0.015055648982524872,
-0.007437392603605986,
0.011810360476374626,
0.04358227178454399,
0.02295849844813347,
-0.022777313366532326,
0.03583277761936188,
0.11064375936985016,
0.0028533553704619408,
-0.04000264033675194,
-0.1941443234682083,
-0.04926109313964844,
-0.05024247616529465,
0.06318040937185287,
-0.07736137509346008,
0.032456085085868835,
-0.024179475381970406,
0.002256353385746479,
0.019205249845981598,
0.008560264483094215,
0.033289771527051926,
-0.09642239660024643,
-0.14033851027488708,
0.030359402298927307,
-0.07263680547475815,
0.027890125289559364,
-0.04471095651388168,
0.004939517937600613,
-0.010275440290570259,
-0.03793241083621979,
0.12767119705677032,
0.09713336080312729,
0.11470086872577667,
-0.010312287136912346,
0.022065283730626106,
-0.018461870029568672,
-0.05039682239294052,
-0.002912101335823536,
-0.010760223492980003,
0.1379849910736084,
-0.02198207378387451,
-0.05270396173000336,
-0.03367795795202255,
-0.04241768270730972,
0.07346078753471375,
0.03740718588232994,
-0.037428826093673706,
0.01299493107944727,
-0.12140597403049469,
-0.03249753266572952,
-0.07339534908533096,
-0.05364793911576271,
-0.07934786379337311,
-0.11971581727266312,
-0.09614291787147522,
-0.050582293421030045,
-0.07085373252630234,
0.06878691911697388,
-0.023275448009371758,
0.03580646961927414,
0.10736379772424698,
0.10051051527261734,
0.13203923404216766,
0.07157117128372192,
0.039934903383255005,
0.15728004276752472,
0.0618673674762249,
-0.0077367015182971954,
0.11011770367622375,
0.09536992758512497,
0.06997954845428467,
0.020217975601553917,
-0.10455241799354553,
0.018705757334828377,
-0.001360774622298777,
0.09144435822963715,
0.026526186615228653,
-0.027582991868257523,
-0.05255268141627312,
-0.06173001602292061,
0.07263895124197006,
0.09220520406961441,
-0.03328629955649376,
0.05051952973008156,
0.08496475964784622,
-0.017124313861131668,
-0.038591377437114716,
0.018524933606386185,
-0.01979869417846203,
-0.06135018914937973,
0.0014411318115890026,
-0.04330926388502121,
-0.05790981277823448,
0.010716824792325497,
-0.012166375294327736,
-0.014666147530078888,
0.045140936970710754,
0.042377639561891556,
-0.019527355208992958,
-0.0705522671341896,
0.011484717018902302,
0.025111433118581772,
0.0749126449227333,
0.011276423931121826,
0.10709615051746368,
0.05492950230836868,
0.07510792464017868,
0.1169903352856636,
-0.09156157076358795,
0.009290031157433987,
-0.0011080959811806679,
0.008056601509451866,
-0.016431808471679688,
-0.022381866350769997,
-0.08251269906759262,
-0.02900722250342369,
-0.027586879208683968,
0.06895240396261215,
0.08018217980861664,
-0.014388036914169788,
0.06388135254383087,
0.16594627499580383,
0.11368434876203537,
0.05290910229086876,
0.022250855341553688,
0.12207558751106262,
0.15468406677246094,
-0.05786629766225815,
-0.1411426067352295,
-0.09655226767063141,
-0.11507062613964081,
-0.08429080992937088,
-0.009837977588176727,
-0.06015806272625923,
-0.032477494329214096,
0.05399708449840546,
0.033142510801553726,
0.07214614748954773,
-0.02391117438673973,
-0.0022961164359003305,
0.05912633612751961,
0.004631932824850082,
0.09149560332298279,
0.008275602012872696,
0.0069192699156701565,
-0.0947137176990509,
-0.060390178114175797,
-0.09780387580394745,
0.06116945296525955,
-0.007927700877189636,
-0.058489058166742325,
-0.0026273818220943213,
0.053593263030052185,
-0.08571112900972366,
-0.18332502245903015,
-0.030587289482355118,
-0.008955961093306541,
0.08456143736839294,
-0.05799510329961777,
0.05917207896709442,
0.15561088919639587,
0.026441087946295738,
0.019335919991135597,
-0.03806498274207115,
-0.027686145156621933,
-0.04825615882873535,
0.0465410053730011,
-0.01756601780653,
-0.003841329598799348,
-0.013842068612575531,
-0.08526858687400818,
0.05212661996483803,
-0.07147011160850525,
0.05779023468494415,
-0.1177797019481659,
0.017556503415107727,
0.03355560079216957,
0.017973419278860092,
0.04409210383892059,
-0.08407556265592575,
-0.025883978232741356,
0.06043599173426628,
-0.02212737686932087,
0.02317453734576702,
-0.03239302709698677,
-0.008783773519098759,
0.0362238809466362,
0.003239552490413189,
-0.053288474678993225,
-0.09835485368967056,
0.075224868953228,
0.05480826646089554,
0.03923089802265167,
0.016324840486049652,
-0.04581248387694359,
-0.09453298151493073,
-0.08366801589727402,
-0.003119023749604821,
0.17809775471687317,
0.0812208503484726,
-0.009962262585759163,
-0.019249988719820976,
0.053755998611450195,
-0.008146989159286022,
0.016720108687877655,
0.07585971057415009,
-0.06997644156217575,
-0.04079698398709297,
-0.06632117927074432,
0.042841654270887375,
0.10451509058475494,
0.006168965250253677,
0.06456588208675385,
0.04529792070388794,
0.07932177931070328,
0.14198632538318634,
-0.001726645277813077,
0.06076308339834213,
0.008729536086320877,
0.03021400421857834,
-0.05494450777769089,
-0.07434909045696259,
-0.0648939311504364,
0.03485491871833801,
-0.014620901085436344,
-0.020230809226632118,
-0.07099301367998123,
-0.08770304918289185,
0.005149527452886105,
-0.02790766954421997,
0.03239355981349945,
0.042799390852451324,
-0.06906408816576004,
-0.0003699892258737236,
-0.10461517423391342,
-0.1477532982826233,
-0.10178488492965698,
0.024507049471139908,
0.06265628337860107,
0.05945830047130585,
0.10336475819349289,
-0.016831878572702408,
-0.003203371539711952,
0.06897559762001038,
0.15992191433906555,
0.09150824695825577,
0.04825054109096527,
0.07481129467487335,
0.022019119933247566,
0.10638782382011414,
0.011035870760679245,
-0.017605721950531006,
-0.08094474673271179,
0.042224813252687454,
0.12120016664266586,
0.011294675059616566,
0.03961513191461563,
-0.0012267751153558493,
-0.029012387618422508,
-0.08830153197050095,
-0.06134403496980667,
-0.12218492478132248,
-0.08400074392557144,
-0.015771109610795975,
-0.02821182832121849,
-0.1477872133255005,
-0.09583306312561035,
-0.10872838646173477,
-0.06816887855529785,
0.013966276310384274,
-0.006661283317953348,
0.06496317684650421,
-0.06523358821868896,
0.03780277073383331,
-0.07940097898244858,
-0.06170269101858139,
0.08256260305643082,
-0.014894361607730389,
0.020173022523522377,
-0.09431953728199005,
-0.020135121420025826,
0.08083362877368927,
0.0346687026321888,
-0.007632080465555191,
-0.10451706498861313,
0.06908348202705383,
-0.006727917119860649,
0.03489241749048233,
-0.050864823162555695,
-0.01781165972352028,
0.06344935297966003,
-0.040710851550102234,
-0.06648465991020203,
-0.027523653581738472,
0.03461027890443802,
0.023118063807487488,
-0.0050972094759345055,
-0.10798346251249313,
-0.07278500497341156,
-0.011895264498889446,
-0.11812315881252289,
-0.21729695796966553,
-0.03743207827210426,
-0.07756958901882172,
-0.00683892285451293,
-0.05843813717365265,
-0.11368446797132492,
-0.025775432586669922,
0.11655040085315704,
0.11757239699363708,
0.022189853712916374,
-0.029716435819864273,
0.04257437586784363,
0.01829589158296585,
0.046077027916908264,
0.08740894496440887,
-0.024501346051692963,
-0.044744864106178284,
0.006893318612128496,
-0.024327069520950317,
0.08993345499038696,
-0.03020470403134823,
-0.03451280668377876,
-0.03816348686814308,
0.05267462134361267,
0.005965452175587416,
-0.024311883375048637,
-0.0972069799900055,
0.15543735027313232,
-0.00619462039321661,
0.028193406760692596,
0.015216286294162273,
-0.04128921031951904,
-0.0703635886311531,
-0.12494207173585892,
-0.10086404532194138,
-0.11577674746513367,
-0.03321873024106026,
-0.020065883174538612,
-0.04066918045282364,
-0.09496428817510605,
-0.021653970703482628,
0.03636831417679787,
0.04660639539361,
0.044228650629520416,
0.043880850076675415,
-0.010612178593873978,
0.04619448632001877,
0.006383987609297037,
0.03291880339384079,
0.16810114681720734,
-0.01011220458894968,
0.06843359768390656,
0.04961363971233368,
0.03834940865635872,
0.0984903946518898,
-0.03316344693303108,
-0.028468726202845573,
0.12854598462581635,
0.039310991764068604,
-0.008700591512024403,
-0.04557589814066887,
-0.10788477212190628,
-0.00217401678673923,
-0.002397883916273713,
0.012412982061505318,
0.019132714718580246,
0.057310547679662704,
-0.015184144489467144,
0.018126392737030983,
-0.022048035636544228,
-0.13300172984600067,
-0.04789184778928757,
0.012888716533780098,
-0.05255031958222389,
-0.005364308133721352,
-0.06125480309128761,
-0.019208485260605812,
-0.0064034475944936275,
-0.001809866982512176,
0.05836652219295502,
0.006683084648102522,
-0.05108657106757164,
-0.007267847191542387,
0.03274466097354889,
0.015859141945838928,
-0.019102783873677254,
0.030114179477095604,
-0.06552084535360336,
-0.11403602361679077,
-0.11305218189954758,
-0.10457581281661987,
-0.05135715752840042,
-0.03571684658527374,
-0.021765630692243576,
-0.08459372073411942,
-0.00640973960980773,
-0.05010718107223511,
-0.055616412311792374,
0.040634941309690475,
-0.0849689319729805,
0.050018589943647385,
-0.08670224994421005,
-0.1120503693819046,
-0.11180996894836426,
0.04263332113623619,
0.040353573858737946,
-0.02509692870080471,
0.006053718272596598,
0.020286791026592255,
0.12482708692550659,
0.04811461642384529,
0.0049449484795331955,
0.081462062895298,
-0.056786131113767624,
-0.13099835813045502,
-0.14009401202201843,
-0.0949038565158844,
-0.012521251104772091,
-0.04539191722869873,
-0.047680169343948364,
-0.08445946872234344,
-0.1194826066493988,
-0.0006460444419644773,
0.018823720514774323,
-0.1287313848733902,
-0.012000838294625282,
0.045837484300136566,
-0.01254543848335743,
-0.1832958608865738,
-0.11162232607603073,
0.031207045540213585,
-0.08517522364854813,
0.04924195259809494,
-0.026684217154979706,
0.06506207585334778,
-0.00804269127547741,
0.008164343424141407,
-0.056864503771066666,
0.00335718784481287,
0.0674763172864914,
0.1959887444972992,
0.024905450642108917,
-0.012469785287976265,
0.029584212228655815,
0.07873988896608353,
0.0824861004948616,
0.013926775194704533,
0.11167696863412857,
0.15130962431430817,
0.16688057780265808,
0.028063014149665833,
0.03104686550796032,
0.07068771123886108,
0.10243663936853409,
0.04104241728782654,
-1.464743854739936e-05,
-0.040328290313482285,
0.07459362596273422,
0.08618588745594025,
-0.003319520503282547,
-0.06230657175183296,
-0.11228527128696442,
0.00870501808822155,
-0.0059195626527071,
-0.2437569797039032,
-0.016063490882515907,
0.033766087144613266,
-0.014859466813504696,
-0.039949532598257065,
0.006940489634871483,
0.01057370938360691,
0.027941958978772163,
-0.02454299107193947,
-0.14275406301021576,
-0.021359719336032867,
0.03429044410586357,
-0.011091670952737331,
-0.03297553211450577,
0.028842467814683914,
0.011441826820373535,
0.053788699209690094,
-0.06676782667636871,
0.09803425520658493,
0.18691034615039825,
0.12864723801612854,
-0.01946995034813881,
-0.03137350082397461,
0.0394662469625473,
0.07489140331745148,
0.09339545667171478,
0.10456252098083496,
0.042944297194480896,
0.004593987017869949,
0.05105946958065033,
-0.04496261477470398,
-0.07984989136457443,
-0.12677843868732452,
0.0020694241393357515,
0.05693918839097023,
0.0017616129480302334,
-0.055044710636138916,
-0.01994168944656849,
0.115090511739254,
-0.015183728188276291,
-0.010619165375828743,
-0.008572234772145748,
0.013840523548424244,
0.011129959486424923,
0.006147267296910286,
-0.019703084602952003,
0.002884836168959737,
0.08455358445644379,
-0.046110909432172775,
0.03774891793727875,
-0.059818390756845474,
-0.11435183137655258,
-0.051248300820589066,
0.03411674499511719,
0.07989051192998886,
0.0018581399926915765,
0.00453387014567852,
-0.00965170282870531,
0.050154417753219604,
0.03643549978733063,
0.007977714762091637,
0.018306268379092216,
0.09112246334552765,
0.06951253116130829,
0.0976472869515419,
0.07891308516263962,
0.20704826712608337,
0.05322026088833809,
0.06368772685527802,
0.06439971178770065,
0.10219345986843109,
0.024374661967158318,
-0.04561580345034599,
0.0492267869412899,
-0.09614449739456177,
-0.06459110230207443,
-0.038083795458078384,
0.060720667243003845,
-0.02077445201575756,
0.06236455217003822,
0.055623192340135574,
0.035694971680641174,
-0.021601293236017227,
-0.0843677669763565,
0.05105588957667351,
0.09952926635742188,
0.03179425001144409,
-0.008816921152174473,
0.014133979566395283,
0.10271414369344711,
-0.0004446941602509469,
0.07570067793130875,
-0.07224420458078384,
-0.007881317287683487,
-0.0381096787750721,
0.05865951254963875,
-0.08840447664260864,
-0.11535675823688507,
0.005969779100269079,
0.1062873899936676,
0.08523924648761749,
-0.07989933341741562,
-0.02676507830619812,
-0.002077060518786311,
0.1664191335439682,
0.21972402930259705,
-0.03103150986135006,
-0.023219186812639236,
-0.08464124798774719,
0.06448806822299957,
0.03795643895864487,
-0.01096686813980341,
0.04898463189601898,
-0.04151906818151474,
0.10100267827510834,
0.06441660225391388,
-0.0004235938540659845,
-0.05994346737861633,
-0.06108710914850235,
0.023750223219394684,
-0.013216884806752205,
-0.04499669373035431,
0.013659974560141563,
0.05150030925869942,
0.06203942373394966,
-0.08535397797822952,
-0.1768641322851181,
-0.07656298577785492,
-0.06704529374837875,
0.11741631478071213,
0.10571980476379395,
-0.056175727397203445,
-0.04997234791517258,
-0.10699497163295746,
0.03819117322564125,
-0.06022400036454201,
-0.02387145906686783,
0.034517884254455566,
0.0029305587522685528,
0.05777062103152275,
-0.0416053906083107,
0.05476084724068642,
0.06233898922801018,
0.01325739175081253,
0.024476462975144386,
-0.0027996229473501444,
-0.033486317843198776,
-0.03175364062190056,
0.04752029478549957,
-0.07979647070169449,
-0.22491426765918732,
-0.16840402781963348,
0.06859289854764938,
-0.07468726485967636,
-0.039924729615449905,
-0.004603744484484196,
-0.024468019604682922,
-0.00266275298781693,
-0.04715488478541374,
0.035563547164201736,
-0.03615325689315796,
-0.007838631980121136,
0.00474085146561265,
0.05698154494166374,
-0.05401496961712837,
-0.0534522607922554,
0.03641023114323616,
0.016847141087055206,
0.01356466393917799,
0.029937025159597397,
-0.053156983107328415,
0.026471108198165894,
-0.010251234285533428,
0.03726016730070114,
-0.09743849188089371,
-0.1819276660680771,
-0.0478963628411293,
0.0967731922864914,
-0.044031888246536255,
-0.20305486023426056,
-0.14448416233062744,
-0.047563549131155014,
0.09368839114904404,
0.09805773943662643,
0.02824287675321102,
0.0225374735891819,
-0.016626177355647087,
-0.02776481769979,
0.10181989520788193,
0.022767571732401848,
-0.033855777233839035,
-0.0432555265724659,
-0.026744017377495766,
0.09436609596014023,
0.04687641188502312,
0.02891683392226696,
0.06598621606826782,
0.08609605580568314,
-0.08256566524505615,
0.08194034546613693,
0.260263592004776,
0.18634089827537537,
0.016251154243946075,
-0.044078730046749115,
0.05345459282398224,
0.036146119236946106,
0.057575076818466187,
-0.004656349774450064,
-0.07452508062124252,
0.013395890593528748,
0.12347430735826492,
0.12355703860521317,
0.045829396694898605,
-0.052890412509441376,
0.14501281082630157,
0.03500499948859215,
0.005388454534113407,
-0.04939368739724159,
-0.08237646520137787,
0.06932609528303146,
0.017147967591881752,
0.04103832691907883,
0.0022446177899837494,
0.0003413029189687222,
-0.00654088007286191,
-0.03039991483092308,
-0.020577125251293182,
0.13155338168144226,
-0.09755871444940567,
-0.12153082340955734,
-0.08818566054105759,
-0.03674163669347763,
0.15549366176128387,
0.00047701020957902074,
-0.04571307823061943,
0.0335678905248642,
0.055985383689403534,
-0.020156480371952057,
0.08742479234933853,
-0.0911635085940361,
-0.03308587893843651,
0.04674230143427849,
0.02522587962448597,
-0.04398069158196449,
-0.08269616961479187,
0.003129783319309354,
0.002822946524247527,
-0.01507827639579773,
-0.047971222549676895,
-0.08600916713476181,
-0.2739536762237549,
0.04722421243786812,
0.056042738258838654,
-0.0016819279408082366,
0.022511489689350128,
-0.1888325959444046,
-0.14695382118225098,
-0.08195410668849945,
0.09243479371070862,
-0.06599747389554977,
-0.018422318622469902,
-0.011991609819233418,
0.040968094021081924,
0.014903616160154343,
-0.025431595742702484,
-0.07501494139432907,
-0.02233830653131008,
0.052385419607162476,
0.11764981597661972,
-0.02366556040942669,
-0.05186988785862923,
0.008488199673593044,
0.03823715075850487,
-0.13225162029266357,
0.013598415069282055,
0.11082090437412262,
0.0855894535779953,
-0.10308951139450073,
-0.06687140464782715,
-0.06969696283340454,
-0.005597890820354223,
0.03501895070075989,
0.12798519432544708,
-0.1554468274116516,
-0.026883451268076897,
-0.06916991621255875,
0.03317684307694435,
0.012471070513129234,
0.09120095521211624,
0.06366004049777985,
0.05582684278488159,
-0.0852934792637825,
-0.1107175424695015,
-0.0213459525257349,
0.007483098190277815,
-0.0452265590429306,
0.021791571751236916,
-0.050019461661577225,
-0.0625547543168068,
-0.153344064950943,
-0.11306358873844147,
0.03315889462828636,
0.12735506892204285,
-0.049682457000017166,
0.0066293939016759396,
0.0051298062317073345,
0.1319248080253601,
0.1523122638463974,
0.05094167962670326,
0.022223729640245438,
-0.08997998386621475,
0.05264412984251976,
-0.04521888867020607,
0.012507237493991852,
-0.028177857398986816,
-0.029391054064035416,
-0.05583871528506279,
-0.028420059010386467,
-0.034381967037916183,
0.008014204911887646,
-0.017977789044380188,
-0.06497947871685028,
-0.03248176723718643,
0.10785096138715744,
0.2743624746799469,
0.16448497772216797,
0.08242565393447876,
-0.09097859263420105,
0.11395090818405151,
0.11464251577854156,
0.14498038589954376,
0.04324331507086754,
-0.055507026612758636,
0.0324023999273777,
0.07953277230262756,
-0.003635195316746831,
-0.009404901415109634,
-0.0030982873868197203,
0.11398399621248245,
0.05928006395697594,
0.05715029686689377,
-0.05072353780269623,
0.013061447069048882,
-0.05916712433099747,
0.09611630439758301,
0.007458862382918596,
-0.027162281796336174,
0.0024161061737686396,
-0.13017524778842926,
0.03670365363359451,
0.17445258796215057,
0.17732790112495422,
0.169330433011055,
-0.05129280686378479,
0.03885437920689583,
0.04181836172938347,
0.14214569330215454,
0.17323508858680725,
0.028625300154089928,
-0.012520059011876583,
0.05952877551317215,
-0.04561808332800865,
-0.07426248490810394,
0.06757031381130219,
0.09057065844535828,
-0.002561653731390834,
0.07359623908996582,
0.032926253974437714,
-0.06282012909650803,
0.01592617854475975,
0.08085930347442627,
-0.000930642825551331,
0.0029066619463264942,
-0.014923347160220146,
-0.06663250178098679,
-0.1342017650604248,
-0.16908058524131775,
-0.040351107716560364,
0.01610417477786541,
-0.013876332901418209,
-0.0958988144993782,
-0.05968409776687622,
0.014823432080447674,
-0.08428550511598587,
-0.1402360200881958,
-0.05389498919248581,
0.08037391304969788,
0.027302231639623642,
0.0944933369755745,
0.0709146112203598,
0.03803199157118797,
0.0323977917432785,
-0.003643067553639412,
0.08047140389680862,
-0.08006168156862259,
0.027354873716831207,
0.04994598776102066,
-0.0005138309206813574,
-0.16818976402282715,
0.06821978837251663,
0.27974236011505127,
0.07366124540567398,
0.03732887655496597,
-0.16228815913200378,
0.11710918694734573,
0.03857530653476715,
0.0019778800196945667,
-0.014470785856246948,
-0.13968947529792786,
0.11346367001533508,
0.051985032856464386,
-0.022883787751197815,
0.008141664788126945,
0.07854897528886795,
-0.009946785867214203,
0.08338261395692825,
-0.009533609263598919,
-0.02932535484433174,
0.011639886535704136,
0.0492132343351841,
0.0050017922185361385,
-0.06029226630926132,
0.0028905272483825684,
-0.05345846340060234,
-0.0783628523349762,
-0.09816858172416687,
-0.06054161116480827,
-0.028133612126111984,
0.031097544357180595,
0.005849441047757864,
0.03054768405854702,
0.07322868704795837,
0.04392518103122711,
0.03416048735380173,
-0.0059286789037287235,
0.044360678642988205,
0.007228017784655094,
0.04385765641927719,
-0.010978766717016697,
-0.035163573920726776,
0.023762620985507965,
-0.03446195647120476,
0.013063396327197552,
-0.04536747187376022,
-0.008332858793437481,
-0.04311583563685417,
-0.020461220294237137,
0.038921356201171875,
0.0435759462416172,
0.00883448775857687,
0.030570998787879944,
0.07427414506673813,
0.02564701996743679,
-0.08094973117113113,
-0.13422058522701263,
-0.10300406068563461,
0.03156035393476486,
0.0711311548948288,
-0.1386772245168686,
-0.09479428827762604,
0.0478566475212574,
0.0033916886895895004,
0.01676037907600403,
0.027484124526381493,
0.005847423803061247,
0.06198043003678322,
-0.05584968253970146,
-0.060946520417928696,
0.006853939034044743,
-0.06028158590197563,
-0.00804077833890915,
-0.0036670470144599676,
-0.030557038262486458,
-0.08015274256467819,
-0.05802815034985542,
-0.0011587057961151004,
-0.024110062047839165,
-0.05867614969611168,
0.1437700092792511,
0.06121567636728287,
0.07015965133905411,
0.15015654265880585,
0.13760486245155334,
0.05270522087812424,
0.09080768376588821,
-0.002987833693623543,
0.06863357871770859,
-0.020195888355374336,
0.023177877068519592,
-0.03389860689640045,
-0.1268804371356964,
-0.03676489740610123,
0.043882954865694046,
0.0698230192065239,
0.015216917730867863,
-0.08829589933156967,
0.058761000633239746,
0.05742457136511803,
0.0001867421524366364,
0.04366004839539528,
-0.04840664193034172,
-0.042719606310129166,
0.017823871225118637,
-0.022858044132590294,
-0.0007574570481665432,
0.000306794565403834,
-0.02505090832710266,
-0.0007014423026703298,
0.04505711421370506,
-0.04119481146335602,
-0.09949886053800583,
-0.044896505773067474,
-0.04588558152318001,
-0.03343137353658676,
0.03950865566730499,
-0.06420688331127167,
0.0029418773483484983,
0.008065909147262573,
0.048419877886772156,
-0.030219528824090958,
0.030087383463978767,
-0.02234436757862568,
0.08092229068279266,
-0.11790825426578522,
-0.013781730085611343,
-0.027571463957428932,
-0.06775615364313126,
0.012341665104031563,
0.07868749648332596,
0.07978758215904236,
0.04413551092147827,
-0.08432536572217941,
0.06336897611618042,
-0.021232610568404198,
0.07437637448310852,
-0.07191818207502365,
-0.013178403489291668,
-0.04005921632051468,
0.023133818060159683,
-0.05873448774218559,
-0.07166828960180283,
-0.06605520099401474,
-0.07210659980773926,
0.07621777057647705,
0.009376028552651405,
0.06989935785531998,
-0.14121197164058685,
-0.020278295502066612,
-0.02804812416434288,
0.09055696427822113,
-0.013954991474747658,
0.030113618820905685,
0.011963109485805035,
0.05660852789878845,
0.08378048986196518,
0.005564031656831503,
0.15355437994003296,
0.1243167445063591,
-0.04377860575914383,
0.02855294570326805,
0.04331256449222565,
0.14873482286930084,
0.05478388071060181,
0.05130833014845848,
0.041046444326639175,
0.044796619564294815,
0.008787455968558788,
0.01785086654126644,
-0.041335973888635635,
-0.0921226516366005,
0.05057387426495552,
0.054511964321136475,
-0.008118882775306702,
0.03972475975751877,
-0.02865835838019848,
-0.005872598383575678,
-0.09284001588821411,
0.02176857367157936,
-0.053235966712236404,
-0.14405806362628937,
-0.256181001663208,
-0.05989455431699753,
0.008212973363697529,
-0.06468632072210312,
0.13475282490253448,
0.13089032471179962,
0.004194129258394241,
0.09033630043268204,
0.06228990852832794,
0.12166589498519897,
0.1341225951910019,
0.09697771072387695,
-0.15921729803085327,
0.019825810566544533,
-0.002579252701252699,
-0.023922592401504517,
0.004552664700895548,
-0.04678601026535034,
-0.003156187478452921,
0.002953308168798685,
-0.007435034029185772,
0.025076644495129585,
0.1477101892232895,
-0.03759383410215378,
-0.10944388806819916,
-0.06324127316474915,
-0.010359461419284344,
0.016835715621709824,
-0.007194549310952425,
-0.041548848152160645,
-0.08592437207698822,
-0.092531718313694,
-0.07050313800573349,
-0.04246443510055542,
0.07379290461540222,
0.03175174072384834,
-0.006422695238143206,
0.025926439091563225,
0.04197932779788971,
0.11571624875068665,
-0.027855150401592255,
-0.045207154005765915,
0.07400985062122345,
0.07357198745012283,
0.14886507391929626,
0.02475084736943245,
0.02830512821674347,
0.12541238963603973,
0.05171368643641472,
0.04518665745854378,
-0.05873312056064606,
0.004381559323519468,
-0.03279189392924309,
-0.0811818316578865,
-0.064187191426754,
-0.040522702038288116,
0.21792128682136536,
0.06353852152824402,
-0.13742661476135254,
-0.12068276107311249,
0.1371687948703766,
0.022939564660191536,
-0.05239842087030411,
-0.05297073721885681,
-0.13595689833164215,
-0.07698289304971695,
0.006609646137803793,
-0.06661821901798248,
0.008989749476313591,
0.0527602918446064,
-0.08367399126291275,
0.08957361429929733,
0.11697516590356827,
-0.08332362025976181,
-0.08716706186532974,
-0.08731219917535782,
0.07493381202220917,
0.10766851902008057,
0.046823177486658096,
0.17334431409835815,
0.06447414308786392,
0.031324997544288635,
-0.005452022887766361,
0.11301688849925995,
0.05208471044898033,
0.06387195736169815,
0.08818913251161575,
0.04636388272047043,
0.02140473760664463,
0.014380618929862976,
0.05027871951460838,
-0.0032891377341002226,
-0.04136734828352928,
0.05489653721451759,
0.030477989464998245,
0.005366822239011526,
-0.05251968652009964,
0.03542107716202736,
0.04233445227146149,
-0.12122192978858948,
-0.08727077394723892,
-0.049183398485183716,
-0.027052579447627068,
-0.2561838626861572,
-0.13464316725730896,
-0.0339689664542675,
-0.010767986997961998,
0.08695989102125168,
-0.018863318488001823,
0.02932531014084816,
0.025448156520724297,
0.09252607077360153,
0.061517469584941864,
-0.009872007183730602,
-0.028900811448693275,
0.05312274023890495,
-0.04462144523859024,
0.017388194799423218,
0.07905956357717514,
0.0942712277173996,
0.012808926403522491,
0.08935077488422394,
-0.049954552203416824,
0.029335441067814827,
0.005124186165630817,
0.00016814663831610233,
0.019116265699267387,
0.04294412583112717,
-0.07762043178081512,
-0.0295769851654768,
0.013836794532835484,
0.16091150045394897,
0.06131649389863014,
0.05274752154946327,
0.07750685513019562,
-0.02885102480649948,
-0.0554758757352829,
0.02573162317276001,
0.005066760815680027,
-0.0791369304060936,
0.014172700233757496,
0.0017556792590767145,
-0.0972614735364914,
0.049067672342061996,
-0.0032453485764563084,
0.03457416594028473,
0.032319325953722,
0.04014468938112259,
0.07434532791376114,
0.013724030926823616,
-0.005344771780073643,
0.0365963913500309,
0.050941549241542816,
0.017217162996530533,
-0.009933125227689743,
-0.01146083977073431,
-0.02977820299565792,
0.0036154519766569138,
0.04959578812122345,
0.036104872822761536,
0.010966162197291851,
-0.009730889461934566,
-0.08241375535726547,
-0.005844386760145426,
-0.03197098150849342,
-0.018537752330303192,
0.025278868153691292,
-0.02396591566503048,
-0.07560691982507706,
-0.003153428668156266,
-0.030779700726270676,
0.055113669484853745,
0.08202622830867767,
0.08777002990245819,
0.14403067529201508,
0.08860287815332413,
0.05328794941306114,
0.05821850150823593,
-0.005584761966019869,
0.0208650603890419,
-0.02100023627281189,
-0.028255615383386612,
0.027864741161465645,
-0.025746701285243034,
0.007203655317425728,
0.03488265722990036,
-0.08301851153373718,
-0.02041846700012684,
0.009432096965610981,
0.058054398745298386,
-0.04294419661164284,
-0.023596521466970444,
0.004599062725901604,
-0.013020200654864311,
-0.08705885708332062,
-0.07143250852823257,
-0.0864482969045639,
0.030916832387447357,
-0.09021639078855515,
-0.2620967626571655,
-0.09866867959499359,
-0.050965938717126846,
-0.036340001970529556,
-0.07840035110712051,
-0.1377558410167694,
-0.044838178902864456,
-0.01892445795238018,
-0.051763322204351425,
0.07390231639146805,
-0.02176395058631897,
0.06380491703748703,
0.1659424751996994,
-0.034673601388931274,
0.019348492845892906,
0.03741362318396568,
0.006083322688937187,
0.07392678409814835,
-0.04490923509001732,
0.04055928811430931,
0.165796160697937,
-0.050178442150354385,
0.029359420761466026,
0.044584471732378006,
0.027014441788196564,
-0.13066989183425903,
-0.08640410006046295,
0.04673823341727257,
0.11765444278717041,
-0.08276013284921646,
-0.029482996091246605,
-0.2152380794286728,
0.01245710626244545,
0.03387872874736786,
0.0002826634154189378,
-0.08188758790493011,
-0.05071064829826355,
-0.0758986622095108,
-0.009174597449600697,
0.05019542947411537,
-0.1624559611082077,
-0.03597072511911392,
0.005393212661147118,
-0.022679654881358147,
-0.05492793023586273,
0.014863724820315838,
-0.11833995580673218,
-0.09181571006774902,
-0.04104257747530937,
-0.08325816690921783,
-0.005927317310124636,
0.003807666478678584,
0.013215006329119205,
0.06043277308344841,
0.09260906279087067,
0.003510868176817894,
0.03384969010949135,
0.08735960721969604,
0.021001217886805534,
-0.05500496178865433,
-0.07511838525533676,
-0.05415453016757965,
-0.07035353779792786,
-0.05391406640410423,
0.06881241500377655,
-0.011036003939807415,
-0.025306006893515587,
-0.00014943665883038193,
-0.0034814788959920406,
0.05847599729895592,
0.02021290920674801,
-0.0018286912236362696,
0.0257318913936615,
-0.015620197169482708,
-0.03234649822115898,
-0.10456568747758865,
-0.17938575148582458,
-0.14868071675300598,
-0.023197347298264503,
-0.12324883788824081,
-0.20007750391960144,
-0.3555136024951935,
-0.1765046864748001,
-0.07562285661697388,
-0.04884505644440651,
-0.029009291902184486,
0.03053079918026924,
-0.006886716466397047,
0.009380810894072056,
0.03629543259739876,
0.03445041552186012,
-0.07991649955511093,
0.01982753351330757,
-0.07477714121341705,
0.07730551809072495,
0.13070957362651825,
-0.06321872025728226,
-0.013751406222581863,
-0.038873862475156784,
-0.2785017192363739,
-0.12266641855239868,
-0.08754684031009674,
0.034066248685121536,
0.021605519577860832,
-0.05460428446531296,
0.13782998919487,
0.03523286432027817,
-0.0751522034406662,
0.08136079460382462,
0.008428561501204967,
-0.02608812227845192,
-0.03432537242770195,
-0.05451752990484238,
-0.09564071148633957,
0.0336725153028965,
0.03353732451796532,
0.0272239800542593,
-0.1183663159608841,
0.0063436864875257015,
-0.01289138849824667,
-0.03356412053108215,
0.022984812036156654,
0.002708833897486329,
0.002276494400575757,
-0.0367160364985466,
-0.03818362578749657,
0.10809904336929321,
0.0740392729640007,
0.011728978715837002,
-0.006506849080324173,
0.038037221878767014,
0.01875190995633602,
0.010401876643300056,
-0.03198383376002312,
0.021643053740262985,
0.00037231811438687146,
0.05644731968641281,
-0.013982841745018959,
0.011343448422849178,
-0.0701824203133583,
0.06325394660234451,
0.01775181107223034,
0.06019643321633339,
-0.04227828234434128,
0.1290014386177063,
0.13778582215309143,
-0.021822670474648476,
0.002182073425501585,
0.011356118135154247,
-0.10243117809295654,
-0.06825793534517288,
0.0377323217689991,
0.043789785355329514,
-0.14118534326553345,
0.10817611962556839,
0.03762113302946091,
0.031252551823854446,
-0.052008241415023804,
0.013741601258516312,
0.053210653364658356,
0.15634828805923462,
-0.04776826128363609,
0.06472373753786087,
-0.008542303927242756,
0.0028077177703380585,
-0.04075421020388603,
0.02807503379881382,
-0.02018638700246811,
-0.08883523941040039,
0.04998171329498291,
-0.029680490493774414,
-0.08163130283355713,
-0.15923714637756348,
-0.06442008167505264,
-0.052526332437992096,
-0.04616198688745499,
0.09209202229976654,
-0.011914235539734364,
0.06155652552843094,
-0.011663585901260376,
0.05826457962393761,
-0.004928930196911097,
-0.04515070468187332,
-0.02963794767856598,
0.005031917709857225,
-0.04625503718852997,
-0.08971241116523743,
-0.027309270575642586,
-0.003050370141863823,
0.0676356703042984,
0.06133883818984032,
0.027523702010512352,
0.0584946908056736,
-0.03062056377530098,
-0.031562067568302155,
0.02524663880467415,
-0.041738271713256836,
-0.05267805978655815,
-0.12032629549503326,
0.060733720660209656,
0.09221435338258743,
0.0796351209282875,
-0.096559539437294,
0.01324388012290001,
0.08022824674844742,
-0.02114643156528473,
0.016418956220149994,
0.06535464525222778,
-0.053899310529232025,
-0.01463636476546526,
-0.08500850200653076,
-0.10773375630378723,
0.04689175263047218,
0.02265550196170807,
0.03586360067129135,
-0.09262937307357788,
-0.053670987486839294,
0.024340251460671425,
-0.02602442167699337,
-0.10013549774885178,
-0.10652749240398407,
0.16181433200836182,
0.10174784064292908,
0.11684203892946243,
-0.024890586733818054,
0.04112585633993149,
0.013277031481266022,
0.10274328291416168,
0.03210705891251564,
-0.0025333170779049397,
-0.02089373953640461,
0.057212527841329575,
-0.018008926883339882,
0.03345724195241928,
-0.11453515291213989,
-0.050511207431554794,
-0.09544970840215683,
-0.006791229359805584,
0.0292766485363245,
-0.11071804165840149,
-0.09893804043531418,
0.07190211117267609,
0.054958637803792953,
0.007781572174280882,
-0.09783580899238586,
-0.08910521864891052,
-0.03439600393176079,
-0.03495171666145325,
-0.009309322573244572,
-0.12651173770427704,
-0.1259744018316269,
-0.08807754516601562,
0.0034322384744882584,
0.05286264792084694,
0.05920272693037987,
0.03939046338200569,
-0.005381924565881491,
-0.08588122576475143,
-0.09981600940227509,
0.1590406894683838,
-0.0728742927312851,
-0.06120339781045914,
0.004701150115579367,
0.044841889292001724,
0.14793537557125092,
0.14728610217571259,
0.06348129361867905,
0.020917639136314392,
-0.005087215919047594,
0.04836662858724594,
-0.0151274548843503,
-0.047833893448114395,
-0.059523262083530426,
0.04192665219306946,
0.13755927979946136,
0.13060618937015533,
-0.03123978152871132,
-0.07788102328777313,
-0.0653395876288414,
-0.02773946151137352,
-0.17894846200942993,
-0.03776666894555092,
-0.0034439084120094776,
-0.003368890145793557,
-0.06244282424449921,
-0.0698312446475029,
0.0020580177661031485,
0.015091238543391228,
0.06613461673259735,
0.05535402521491051,
-0.11961185187101364,
-0.05283403396606445,
-0.06641829758882523,
-0.06462578475475311,
-0.03096657805144787,
-0.03773026913404465,
-0.011323622427880764,
-0.03096500039100647,
-0.10299631208181381,
0.04841436818242073,
0.008704091422259808,
0.0024131196551024914,
-0.19011536240577698,
-0.06714844703674316,
0.1501915007829666,
0.11599784344434738,
-0.06987029314041138,
0.0616554394364357,
-0.00907294824719429,
0.06884494423866272,
0.0762399435043335,
0.07406244426965714,
-0.00957924872636795,
0.037199586629867554,
0.0034405759070068598,
-0.04897678643465042,
-0.05601763725280762,
-0.0030577480792999268,
0.008468113839626312,
-0.10552991181612015,
-0.07497203350067139,
-0.1467847377061844,
-0.13130147755146027,
-0.01748383417725563,
-0.02962728962302208,
-0.028575360774993896,
-0.013110369443893433,
0.16334792971611023,
0.056627362966537476,
0.003698171116411686,
0.10631342232227325,
-0.05604497715830803,
0.036321673542261124,
0.036304011940956116,
-0.052700791507959366,
-0.10721142590045929,
-0.015037753619253635,
0.017982210963964462,
0.028328217566013336,
-0.031797345727682114,
0.06301359832286835,
0.07546458393335342,
0.0900159552693367,
-0.0252812672406435,
-0.10358309745788574,
-0.029458314180374146,
0.0424896776676178,
0.10950132459402084,
0.021608887240290642,
-0.11514005810022354,
-0.045985303819179535,
0.0873243659734726,
0.13169613480567932,
0.07611729949712753,
-0.003980360459536314,
0.02515849471092224,
0.07436949014663696,
0.0899432897567749,
-0.04539196193218231,
-0.03810999542474747,
0.0028166212141513824,
0.009697900153696537,
-0.021702148020267487,
0.049647439271211624,
-0.03025340661406517,
-0.069613017141819,
0.11483234167098999,
0.10368546098470688,
-0.0021859307307749987,
-0.07936937361955643,
-0.1205032542347908,
-0.04827173426747322,
-0.0014069026801735163,
-0.07017923891544342,
-0.10193107277154922,
-0.21528299152851105,
-0.0528864711523056,
0.12595590949058533,
0.21806977689266205,
0.022806333377957344,
0.07562587410211563,
0.1525820791721344,
0.03234271705150604,
0.006227620877325535,
0.09365960210561752,
-0.10947084426879883,
-0.033731814473867416,
0.009277948178350925,
0.0023118527606129646,
0.014428224414587021,
-0.1191682443022728,
0.07859688252210617,
0.026237836107611656,
-0.00669103441759944,
-0.01620321534574032,
0.03436954319477081,
-0.04370870813727379,
-0.05628716200590134,
-0.11455758661031723,
0.21019162237644196,
0.2168554663658142,
0.07800839096307755,
-0.05222604423761368,
-0.07433847337961197,
-0.007385054137557745,
0.020919345319271088,
-0.0015931609086692333,
0.07169993221759796,
0.0493985079228878,
-0.029145298525691032,
0.15720467269420624,
0.06579742580652237,
0.08989366143941879,
0.02705301158130169,
-0.09136397391557693,
0.043143317103385925,
-0.04014110937714577,
-0.01785985752940178,
-0.044872116297483444,
-0.06505182385444641,
-0.11588475108146667,
0.04295353591442108,
-0.06872472167015076,
0.016158748418092728,
-0.1039273589849472,
0.11051656305789948,
0.051326606422662735,
0.017190972343087196,
0.1089852899312973,
0.07759233564138412,
0.058501679450273514,
0.1317492574453354,
-0.06760793179273605,
0.008968462236225605,
0.00793505273759365,
0.026915382593870163,
-0.052031394094228745,
-0.0021893184166401625,
0.05843838304281235,
-0.03342628479003906,
0.028221389278769493,
0.022927965968847275,
0.10904320329427719,
0.07165013998746872,
0.054055728018283844,
-0.0103660449385643,
0.017521582543849945,
-0.007935291156172752,
-0.008703679777681828,
0.028589652851223946,
-0.10519672930240631,
-0.033782221376895905,
-0.023838024586439133,
-0.04157734289765358,
0.010818762704730034,
0.04756965860724449,
-0.022710008546710014,
-0.03799215331673622,
-0.06414249539375305,
0.12876394391059875,
0.010852484032511711,
0.03395846486091614,
-0.07657080143690109,
0.035860538482666016,
-0.014972163364291191,
0.06538429856300354,
0.06481955945491791,
-0.0004422182100825012,
-0.10072873532772064,
0.03606211394071579,
-0.030742298811674118,
0.012663652189075947,
0.08364603668451309,
0.09872794151306152,
0.030714096501469612,
0.05237363278865814,
0.044669441878795624,
-0.05043959617614746,
-0.16218028962612152,
0.15379248559474945,
0.16273638606071472,
0.23195219039916992,
0.027086976915597916,
0.04695925861597061,
0.039314109832048416,
0.009044899605214596,
0.019116288051009178,
0.08481762558221817,
-0.054911982268095016,
-0.020790955051779747,
-0.018239878118038177,
-0.027277905493974686,
-0.006927296984940767,
-0.0013981132069602609,
0.043405987322330475,
0.01942090317606926,
-0.026019422337412834,
0.1001611202955246,
0.1587221771478653,
-0.09649745374917984,
0.02732461504638195,
0.05472609028220177,
-0.027118079364299774,
-0.07908106595277786,
-0.02232288010418415,
0.009051543660461903,
0.14152976870536804,
-0.0512387789785862,
-0.07030036300420761,
-0.08085242658853531,
0.0164920836687088,
-0.04520083963871002,
-0.07307645678520203,
0.0003627873375080526,
-0.05245266109704971,
0.07394654303789139,
0.056495700031518936,
-0.0014741461491212249,
0.1604508012533188,
0.02284177951514721,
-0.015668608248233795,
-0.08037974685430527,
-0.09464552253484726,
0.01024573016911745,
-0.0008658140432089567,
0.07378857582807541,
-0.06989998370409012,
-0.0451376847922802,
-0.04785438999533653,
0.044341348111629486,
0.09554188698530197,
0.020541198551654816,
0.0011084105353802443,
0.026428230106830597,
0.06263657659292221,
-0.0009841755963861942,
0.09503176063299179,
-0.001640418777242303,
0.0606304332613945,
-0.0939566045999527,
0.01936660334467888,
0.06403479725122452,
0.06661061942577362,
0.0020719238091260195,
0.10552554577589035,
0.015443580225110054,
0.06977858394384384,
0.011991949751973152,
-0.016061879694461823,
-0.18226075172424316,
-0.06846093386411667,
-0.0047325314953923225,
0.0342828631401062,
0.058657482266426086,
-0.077237069606781,
0.05971412733197212,
-0.02652090974152088,
-0.06337449699640274,
0.042266055941581726,
0.10735580325126648,
0.04452015087008476,
0.07512041181325912,
-0.035086873918771744,
-0.18040013313293457,
0.005355879198759794,
0.03887341916561127,
0.0624692440032959,
0.11888325214385986,
-0.16889995336532593,
0.005549641326069832,
-0.15843477845191956,
-0.16340121626853943,
-0.08098980039358139,
0.0638217180967331,
-0.12155135720968246,
-0.1708882451057434,
0.01984517090022564,
0.026875846087932587,
-0.0002734003064688295,
0.07565809786319733,
0.049579132348299026,
-0.002751098247244954,
-0.10624086111783981,
-0.03698219358921051,
0.04156999662518501,
-0.039292916655540466,
-0.12610210478305817,
0.038685381412506104,
0.037842635065317154,
0.026430487632751465,
-0.019007766619324684,
-0.005587218329310417,
0.02051963098347187,
-0.013447646051645279,
0.03669249638915062,
0.019184226170182228,
-0.11878924071788788,
-0.0033349061850458384,
0.03401120379567146,
-0.006638775579631329,
0.05379710718989372,
0.1703334003686905,
0.040458958595991135,
0.09802407771348953,
0.06742353737354279,
-0.006601732689887285,
-0.009946199133992195,
0.04140810668468475,
0.045124221593141556,
0.08163370937108994,
-0.054493214935064316,
-0.08199246972799301,
-0.014565523713827133,
-0.046599630266427994,
-0.008966111578047276,
-0.01164990197867155,
-0.10595984011888504,
-0.11768203973770142,
-0.14105765521526337,
0.012988727539777756,
0.038651615381240845,
-0.03487337380647659,
-0.06430994719266891,
-0.12313622981309891,
-0.0012331298785284162,
0.14720036089420319,
-0.060204826295375824,
0.01538722962141037,
-0.16521812975406647,
-0.04365664720535278,
0.0481843538582325,
0.13495874404907227,
0.08818723261356354,
0.0467270202934742,
-0.05707941949367523,
-0.011834974400699139,
0.014016755856573582,
0.09651555120944977,
0.025787601247429848,
-0.06633111834526062,
-0.10748481750488281,
0.08281242847442627,
0.050001539289951324,
-0.048135463148355484,
-0.020105287432670593,
-0.013415145687758923,
-0.015082398429512978,
0.0009712555911391973,
0.09403765946626663,
-0.04961425065994263,
-0.07931358367204666,
0.08594268560409546,
0.12175992131233215,
0.23231670260429382,
-0.09817872941493988,
-0.04352620244026184,
0.05331902951002121,
-0.13069702684879303,
0.016005514189600945,
0.01664094626903534,
-0.11527863889932632,
-0.08806835114955902,
-0.06088077649474144,
-0.1222340539097786,
0.030904529616236687,
0.06355255842208862,
0.06825811415910721,
-0.048179373145103455,
-0.06747423112392426,
-0.02758297696709633,
-0.08172504603862762,
-0.17018641531467438,
0.03254539147019386,
-0.010805738158524036,
0.13355907797813416,
0.01504436694085598,
-0.037525080144405365,
-0.16914725303649902,
-0.09443151205778122,
-0.056719884276390076,
-0.21498961746692657,
-0.056669075042009354,
-0.02350047044456005,
0.08246035873889923,
0.07472425699234009,
-0.007655755151063204,
-0.021935148164629936,
-0.10302318632602692,
0.14317172765731812,
0.07395417243242264,
-0.10066115856170654,
-0.10247673094272614,
-0.09124504774808884,
-0.1032867282629013,
-0.11038591712713242,
-0.0030920656863600016,
0.07529424875974655,
0.0753541961312294,
-0.030776048079133034,
-0.026179324835538864,
0.01710481010377407,
-0.04968123510479927,
0.053148988634347916,
0.16503560543060303,
-0.05351584032177925,
0.08417566120624542,
0.026417821645736694,
0.08458957821130753,
-0.038807447999715805,
0.046343084424734116,
-0.06815453618764877,
0.07708694040775299,
-0.1130288615822792,
-0.10910313576459885,
0.046503111720085144,
-0.0569087378680706,
-0.08002116531133652,
0.05456508323550224,
0.023218903690576553,
-0.10432438552379608,
-0.057359639555215836,
-0.0718146413564682,
0.10963064432144165,
0.2141316682100296,
-0.08460158854722977,
-0.05419355630874634,
-0.008532092906534672,
0.06281322240829468,
-0.015711534768342972,
0.0718221440911293,
0.06949510425329208,
-0.0631934329867363,
-0.013861032202839851,
-0.06262090057134628,
-0.04611590504646301,
-0.17257697880268097,
-0.029738765209913254,
-0.027919918298721313,
-0.01912032440304756,
0.021946417167782784,
0.15570400655269623,
0.021815281361341476,
0.09255307167768478,
0.11104564368724823,
0.09579324722290039,
0.025590110570192337,
-0.027759671211242676,
-0.011479889042675495,
-0.03079676814377308,
0.035540372133255005,
0.0853099524974823,
-0.05013090372085571,
-0.0911894291639328,
-0.08346624672412872,
0.11322066187858582,
0.11569429934024811,
-0.038999464362859726,
-0.09244626760482788,
0.04026716575026512,
-0.10572773218154907,
0.05969461798667908,
-0.08944578468799591,
0.044707268476486206,
0.11334885656833649,
-0.06953997164964676,
0.00970868207514286,
0.17300313711166382,
0.014157472178339958,
0.07327208667993546,
0.0059504201635718346,
-0.0604865588247776,
0.12842130661010742,
0.06525653600692749,
0.11327580362558365,
-0.0774838924407959,
-0.128225639462471,
-0.0847335085272789,
0.11391556262969971,
-0.046322572976350784,
0.05487409234046936,
0.17946858704090118,
0.05369275435805321,
-0.1123872846364975,
-0.15576080977916718,
0.07732786983251572,
0.006817415822297335,
-0.07402611523866653,
0.004675015341490507,
-0.01332304161041975,
-0.02036442421376705,
-0.11206477880477905,
0.032594941556453705,
0.09883315861225128,
-0.017325384542346,
-0.08732437342405319,
-0.05194254592061043,
0.10270179808139801,
0.14596904814243317,
0.15568959712982178,
0.020059792324900627,
0.018769996240735054,
0.0324711911380291,
-0.05351170152425766,
0.15571284294128418,
-0.10659007728099823,
-0.03988542780280113,
0.09976404905319214,
0.09927666187286377,
0.03259740769863129,
0.07533638924360275,
0.05398637056350708,
0.004554199054837227,
-0.12288989126682281,
-0.1351906806230545,
0.06532076001167297,
0.07107558846473694,
-0.007109163329005241,
-0.050037071108818054,
-0.04415348544716835,
-0.16560767590999603,
-0.04258075729012489,
0.10653017461299896,
0.012373105622828007,
0.018282176926732063,
-0.10752423107624054,
0.09901664406061172,
0.16005901992321014,
0.0083441361784935,
-0.07923897355794907,
0.015054449439048767,
0.04751235246658325,
0.10536938905715942,
-0.06877557933330536,
-0.05872640013694763,
-0.003489162540063262,
0.010486293584108353,
0.015329241752624512,
0.0391286201775074,
0.018263759091496468,
-0.11553607881069183,
0.03486150875687599,
0.07069390267133713,
0.10109858214855194,
0.053178511559963226,
0.00568727869540453,
0.037574127316474915,
0.07249853760004044,
0.06149781867861748,
0.12471597641706467,
-0.013602455146610737,
-0.041464902460575104,
-0.005180952604860067,
0.08337243646383286,
0.07912002503871918,
-0.060038793832063675,
-0.02296559326350689,
-0.003614456159994006,
-0.15773482620716095,
-0.0952502116560936,
-0.02286720462143421,
-0.016764918342232704,
0.040926143527030945,
-0.038445647805929184,
-0.10929488390684128,
-0.03110388293862343,
0.061910346150398254,
0.028826145455241203,
-0.0428362675011158,
-0.06927511841058731,
0.002561085158959031,
0.06865432858467102,
0.04720054194331169,
0.06824202835559845,
-0.05939856916666031,
-0.02124730311334133,
0.03997868299484253,
0.10595797002315521,
0.06912077963352203,
0.06336148828268051,
-0.1200953871011734,
-0.0313614122569561,
0.14511285722255707,
0.07406571507453918,
0.06807532161474228,
-0.021273478865623474,
0.013219906017184258,
0.08198162168264389,
0.0495561882853508,
-0.08666101098060608,
-0.020067505538463593,
-0.0515490397810936,
0.07722150534391403,
0.06890177726745605,
-0.03536759689450264,
0.044621165841817856,
-0.05252627283334732,
-0.03337249532341957,
-0.048854708671569824,
0.12295432388782501,
0.011268865317106247,
0.12608987092971802,
0.07361305505037308,
0.01360558345913887,
0.009572254493832588,
0.03240443766117096,
0.03535139188170433,
0.059444088488817215,
0.015300528146326542,
-0.010287316516041756,
0.01948973722755909,
-0.00530963484197855,
-0.0649387463927269,
0.07252649962902069,
0.06340933591127396,
-0.025886595249176025,
-0.07340133190155029,
-0.058652084320783615,
-0.08869878202676773,
0.04734500125050545,
0.047240860760211945,
0.11041556298732758,
0.009356744587421417,
-0.04296186938881874,
-0.13264888525009155,
-0.0456642247736454,
-0.02090037614107132,
0.08488886058330536,
-0.006980684120208025,
-0.017312966287136078,
-0.046642038971185684,
-0.06928546726703644,
-0.1174791231751442,
0.03582039847970009,
-0.06837910413742065,
-0.033587414771318436,
0.018446924164891243,
-0.09039666503667831,
0.05373869091272354,
-0.05894092097878456,
-0.06206522136926651,
-0.0004355030250735581,
-0.01041251141577959,
0.03692404553294182,
0.09382966160774231,
-0.04274428263306618,
-0.06368245929479599,
-0.10941966623067856,
-0.11948203295469284,
-0.15707650780677795,
-0.053713034838438034,
0.0469675250351429,
0.06352512538433075,
0.034031450748443604,
0.0910404846072197,
0.13993406295776367,
-0.0089781004935503,
0.034140244126319885,
0.035545993596315384,
0.1807425618171692,
0.0015241429209709167,
-0.05452665686607361,
-0.05602685362100601,
-0.04227598384022713,
0.07583486288785934,
0.05208129063248634,
0.13351532816886902,
0.03743807598948479,
-0.13907821476459503,
-0.017545552924275398,
0.04394398629665375,
-0.002262717578560114,
-0.06955619156360626,
-0.05009600147604942,
0.053170155733823776,
0.016185780987143517,
0.032722532749176025,
-0.06267275661230087,
0.02162880077958107,
-0.013039687648415565,
-0.05986476317048073,
0.03840142861008644,
-0.027819238603115082,
0.05792014300823212,
-0.04018707573413849,
-0.021000444889068604,
-0.0719582810997963,
0.13938423991203308,
0.047657568007707596,
-0.031026968732476234,
-0.029050461947917938,
-0.14001908898353577,
0.040390629321336746,
0.08721980452537537,
0.002506422810256481,
0.03347044065594673,
-0.024333877488970757,
-0.030892405658960342,
-0.013929013162851334,
0.08910755068063736,
0.03067985735833645,
-0.16741515696048737,
-0.10471019893884659,
-0.08240196108818054,
0.12235934287309647,
0.07701607793569565,
0.1522473394870758,
0.0901576429605484,
0.06858795881271362,
0.023334166035056114,
0.06167178601026535,
0.12949052453041077,
0.10667029023170471,
0.07336755096912384,
0.0068538133054971695,
0.0016243660356849432,
-0.04832223430275917,
-0.0757620632648468,
0.0731990709900856,
-0.02565264329314232,
-0.06043238565325737,
0.03704899176955223,
0.13352270424365997,
0.20456290245056152,
-0.012044713832437992,
-0.10281519591808319,
-0.029805773869156837,
-0.035320963710546494,
-0.03482607752084732,
-0.009182649664580822,
-0.029275981709361076,
0.019733160734176636,
-0.1676507443189621,
-0.07668405026197433,
-0.11023782193660736,
-0.09687835723161697,
0.005005915183573961,
0.05317884311079979,
-0.018419019877910614,
-0.046988241374492645,
-0.13507194817066193,
-0.06490498036146164,
0.07205765694379807,
0.11534015834331512,
-0.02012445218861103,
0.06247249245643616,
0.07663131505250931,
0.04160970076918602,
-0.07277142256498337,
-0.040737953037023544,
-0.0861981138586998,
-0.11664150655269623,
-0.05241874232888222,
-0.028171993792057037,
-0.0556928776204586,
-0.11018040776252747,
-0.06351324915885925,
0.06596466153860092,
0.2955942153930664,
0.09239872545003891,
-0.02025654911994934,
-0.07592431455850601,
0.010816646739840508,
0.0339638814330101,
0.00674282293766737,
0.04839504882693291,
-0.08500737696886063,
-0.08417776972055435,
0.048644788563251495,
-0.06348845362663269,
0.05098902806639671,
0.023388775065541267,
-0.09171251952648163,
0.01530326809734106,
0.14137373864650726,
-0.05050678923726082,
-0.020373469218611717,
-0.1413199007511139,
-0.06608371436595917,
-0.06730452179908752,
0.04157010465860367,
0.1366361826658249,
-0.010661325417459011,
0.011854464188218117,
-0.03211619332432747,
0.004909834824502468,
-0.06937829405069351,
0.09171842783689499,
0.0805472582578659,
-0.05910121649503708,
0.0627983957529068,
-0.06650590896606445,
-0.01169495191425085,
0.19959071278572083,
-0.032010242342948914,
-0.09891199320554733,
0.021237589418888092,
0.036424729973077774,
0.015691636130213737,
0.028198182582855225,
-0.05904318019747734,
0.0289235170930624,
-0.004287639632821083,
-0.0009904105681926012,
0.12573400139808655,
-0.01629289612174034,
-0.03510751947760582,
-0.01656252332031727,
0.02661961317062378,
0.10617663711309433,
0.19558902084827423,
0.052211228758096695,
-0.003214755794033408,
0.029436485841870308,
-0.0043463800102472305,
0.09256036579608917,
-0.030683420598506927,
-0.017680857330560684,
0.014256151393055916,
-0.10842511057853699,
0.00285470113158226,
-0.01135769858956337,
-0.022283513098955154,
0.04994915798306465,
0.16917631030082703,
-0.1107003316283226,
0.0022425991483032703,
0.05317562445998192,
0.13743619620800018,
0.2312062382698059,
-0.02326653152704239,
0.0063982862047851086,
0.04305014759302139,
-0.06255277991294861,
-0.07900852710008621,
0.037050820887088776,
-0.05995214357972145,
-0.0004368303925730288,
-0.08510798215866089,
-0.11459164321422577,
-0.02252877876162529,
0.033106062561273575,
0.033621661365032196,
-0.025424078106880188,
-0.08894757926464081,
0.16388854384422302,
0.15153442323207855,
0.1649593710899353,
0.022901374846696854,
-0.08300293236970901,
0.02226029522716999,
0.05416663736104965,
0.014762677252292633,
0.16120430827140808,
0.0014760559424757957,
-0.03166263923048973,
-0.0334065817296505,
-0.08681941777467728,
0.05503590777516365,
-0.11621101200580597,
-0.017083602026104927,
-0.09086023271083832,
0.061504289507865906,
-0.01574651710689068,
-0.059325430542230606,
-0.04677896201610565,
0.12430257350206375,
0.11201653629541397,
0.024285953491926193,
-0.125937819480896,
-0.09626992046833038,
0.07209670543670654,
0.031123574823141098,
0.033194649964571,
0.06875363737344742,
0.0469796359539032,
0.08209900557994843,
0.060249436646699905,
0.09431768953800201,
0.06257887929677963,
-0.02752782590687275,
-0.07800579816102982,
-0.06634746491909027,
0.016043780371546745,
-0.0647626742720604,
-0.030741943046450615,
-0.103855662047863,
0.0742899626493454,
0.02308674342930317,
-0.09851377457380295,
-0.012884512543678284,
0.03851459547877312,
0.03566521033644676,
-0.0025901561602950096,
-0.075289785861969,
-0.09779486060142517,
-0.14870047569274902,
-0.05257333070039749,
-0.02578454278409481,
0.11030413955450058,
0.06952140480279922,
-0.10735181719064713,
-0.05852195620536804,
0.20586106181144714,
0.008178810589015484,
0.028522461652755737,
-0.012725481763482094,
0.04553614556789398,
0.11304618418216705,
0.060856446623802185,
0.09695377945899963,
0.0646306574344635,
-0.010800576768815517,
0.06927944719791412,
-0.019468676298856735,
0.06440945714712143,
0.06349571794271469,
0.049982503056526184,
-0.008520537987351418,
-0.09943483769893646,
-0.07734676450490952,
0.10321421921253204,
0.13611850142478943,
0.167487233877182,
0.11469452828168869,
-0.10959990322589874,
0.020447373390197754,
-0.06187669560313225,
0.006753929425030947,
0.12952716648578644,
-0.06286542862653732,
-0.01715613529086113,
-0.09067762643098831,
-0.023017985746264458,
0.008390545845031738,
0.12278862297534943,
0.0077520254999399185,
-0.02637149579823017,
-0.10542920976877213,
-0.061839282512664795,
-0.027872148901224136,
0.004751719534397125,
-0.031722988933324814,
-0.07830941677093506,
-0.07961584627628326,
0.010464691556990147,
-0.10801785439252853,
-0.14820455014705658,
-0.09663347899913788,
0.023108048364520073,
0.0346052423119545,
0.03843770548701286,
0.007939965464174747,
0.0644955039024353,
0.12498469650745392,
0.11720827221870422,
0.09157383441925049,
0.13806329667568207,
0.18012511730194092,
0.12493938952684402,
0.005878002382814884,
-0.0807889774441719,
-0.02253151126205921,
-0.04946865886449814,
0.059445835649967194,
-0.03301496431231499,
-0.06374344229698181,
-0.07492735236883163,
-0.024407345801591873,
0.04594596102833748,
-0.014219417236745358,
0.029491569846868515,
0.012595283798873425,
0.0031827923376113176,
-0.12648345530033112,
-0.11098334193229675,
-0.07213233411312103,
-0.07795894891023636,
0.11636289209127426,
0.16412490606307983,
0.045428771525621414,
-0.09643270820379257,
-0.0645974725484848,
-0.0021492228843271732,
0.03799112141132355,
0.16359928250312805,
0.098926842212677,
0.09267701208591461,
0.009949070401489735,
-0.11390724778175354,
0.0861448124051094,
0.05172886326909065,
0.014225970022380352,
-0.04807855933904648,
-0.018067263066768646,
0.02385743521153927,
0.10301436483860016,
0.012899287976324558,
0.06596194207668304,
-0.1523856371641159,
0.04546993970870972,
-0.05869517847895622,
-0.07260853797197342,
-0.05395308881998062,
0.05696708336472511,
-0.054237332195043564,
-0.14172394573688507,
0.014217380434274673,
-0.00936221145093441,
0.057481877505779266,
0.008267708122730255,
0.09136269986629486,
0.105132557451725,
-0.01883465237915516,
-0.060592640191316605,
0.027341069653630257,
0.006432377267628908,
-0.01652180403470993,
-0.030335383489727974,
-0.014890460297465324,
-0.03642912954092026,
-0.07321158051490784,
0.03359898924827576,
-0.03428005054593086,
0.02750624530017376,
0.017521537840366364,
-0.07039471715688705,
0.02283947728574276,
-0.04325743019580841,
-0.0031800982542335987,
-0.05488080158829689,
-0.0647454708814621,
0.017868509516119957,
0.02887415699660778,
0.029963742941617966,
0.07036849856376648,
-0.09796611964702606,
0.020594989880919456,
-0.01046811044216156,
-0.07191271334886551,
0.05291394144296646,
-0.06265396624803543,
0.00429104920476675,
0.02508835680782795,
0.034989774227142334,
0.17681187391281128,
0.08664180338382721,
0.0544297993183136,
0.06195357069373131,
0.11082641780376434,
0.015350614674389362,
0.06624904274940491,
0.034889064729213715,
0.05049937963485718,
-0.0002755086461547762,
-0.13220351934432983,
-0.19165389239788055,
0.07055865228176117,
0.01223281305283308,
-0.016347963362932205,
-0.21748198568820953,
-0.1744695007801056,
-0.1269415318965912,
-0.020818602293729782,
0.03713938221335411,
-0.0043179006315767765,
-0.07072597742080688,
-0.10134920477867126,
-0.007900972850620747,
0.06165419891476631,
0.008235927671194077,
-0.03631177917122841,
0.05082949995994568,
0.013592511415481567,
-0.042636286467313766,
0.017298996448516846,
-0.05969306826591492,
-0.08854569494724274,
-0.05842190980911255,
-0.0033338305074721575,
0.11391361057758331,
-0.030614951625466347,
0.029893746599555016,
-0.07010353356599808,
-0.01217937283217907,
-0.046818651258945465,
0.08043881505727768,
0.010776882991194725,
0.03282959386706352,
0.019850313663482666,
-0.016142074018716812,
0.01837765984237194,
-0.018150165677070618,
-0.0713343471288681,
-0.0772259384393692,
0.05652473494410515,
0.10635004192590714,
0.04860023036599159,
0.08517131954431534,
-0.05101427435874939,
0.07864480465650558,
0.17218582332134247,
0.15416105091571808,
-0.010323040187358856,
-0.065909244120121,
0.042270369827747345,
-0.1306230127811432,
-0.10851477831602097,
0.07093000411987305,
0.08960742503404617,
-0.1915435492992401,
-0.11241035908460617,
-0.13049985468387604,
0.0649443194270134,
0.20073123276233673,
-0.15975691378116608,
-0.04713506996631622,
0.04123244434595108,
0.040812842547893524,
0.09161937981843948,
-0.014360005035996437,
-0.026056183502078056,
-0.042410239577293396,
-0.04382689297199249,
-0.005653983447700739,
-0.021668650209903717,
0.012143715284764767,
-0.06276226788759232,
0.0430125817656517,
-0.003810606198385358,
0.04473442584276199,
0.07747817784547806,
-0.007458288222551346,
0.05093592405319214,
-0.06888177245855331,
0.028173889964818954,
-0.10741271823644638,
-0.0019300486892461777,
-0.007422985043376684,
-0.017792725935578346,
0.011101601645350456,
0.020696651190519333,
0.06698179244995117,
0.05038294196128845,
-0.005738771520555019,
-0.029465224593877792,
-0.013671193271875381,
-0.009498118422925472,
0.003421229310333729,
-0.06175772845745087,
0.011021493934094906,
0.03661590814590454,
0.05140908807516098,
0.0954974815249443,
0.015167168341577053,
-0.033946067094802856,
0.02719469927251339,
0.005747763440012932,
-0.010862753726541996,
0.0011672923574224114,
0.09830235689878464,
0.10975763946771622,
0.05408019199967384,
0.10274307429790497,
0.12511132657527924,
0.012330769561231136,
-0.049216579645872116,
-0.1155487522482872,
-0.10197798162698746,
0.035474009811878204,
-0.006584374234080315,
-0.0360063835978508,
0.11103486269712448,
-0.00706705404445529,
-0.02392648532986641,
0.06551152467727661,
0.12990687787532806,
0.07593820244073868,
0.07832185178995132,
0.037845660001039505,
0.03924422711133957,
0.06207716092467308,
-0.011000911705195904,
-0.036134593188762665,
0.12239681929349899,
-0.06257226318120956,
-0.07783237099647522,
-0.16324596107006073,
-0.013518666848540306,
0.05410168692469597,
-0.08296696096658707,
-0.026633523404598236,
-0.07856378704309464,
0.0005429465672932565,
-0.00041695794789120555,
-0.011509095318615437,
-0.013381279073655605,
-0.01018973346799612,
-0.02370576001703739,
-0.006046112161129713,
0.004304018337279558,
-0.028594205155968666,
0.0062911612913012505,
-0.014206900261342525,
-0.03742079809308052,
0.1891823410987854,
0.05527098849415779,
0.025181027129292488,
-0.03098679706454277,
-0.08787189424037933,
0.032035600394010544,
-0.10343348234891891,
-0.04907575622200966,
-0.01218554750084877,
0.0808117464184761,
-0.09773929417133331,
-0.05105593055486679,
-0.007595499511808157,
0.03448197618126869,
0.11036363989114761,
-0.04070410504937172,
0.034359563142061234,
0.021642083302140236,
-0.05297244340181351,
-0.11638567596673965,
-0.035977575927972794,
-0.011342952959239483,
-0.019737746566534042,
-0.06913366168737411,
-0.049811527132987976,
-0.03748055547475815,
-0.033508505672216415,
0.020193414762616158,
-0.051535021513700485,
0.08167549967765808,
0.007487869821488857,
0.042915377765893936,
-0.02167012169957161,
-0.03825958073139191,
-0.013816778548061848,
0.09483523666858673,
-0.007824381813406944,
-0.0818796157836914,
0.0013852136908099055,
-0.02760823629796505,
-0.0941571518778801,
-0.1309361606836319,
-0.04518311098217964,
-0.05978820472955704,
-0.08256837725639343,
-0.13233886659145355,
-0.09962398558855057,
-0.008525067940354347,
-0.0030627415981143713,
0.021584179252386093,
-0.016956090927124023,
-0.03571930527687073,
0.10588007420301437,
0.04155263304710388,
0.017340287566184998,
0.06161189079284668,
-0.004153129179030657,
0.035286881029605865,
0.06253111362457275,
-0.05108080804347992,
0.11504483968019485,
0.08892037719488144,
0.030563777312636375,
-0.005008286330848932,
-0.009287595748901367,
0.08099904656410217,
0.05334768071770668,
0.0014497203519567847,
-0.11100801080465317,
-0.1684819608926773,
-0.11504174023866653,
0.03734629973769188,
-0.024741824716329575,
-0.010353339836001396,
0.02688710391521454,
-0.07351391017436981,
-0.06508138030767441,
-0.04430413246154785,
0.11975403130054474,
-0.01176166906952858,
-0.048427436500787735,
0.08576613664627075,
0.11293498426675797,
0.04469412565231323,
0.019553620368242264,
0.016170211136341095,
0.05363983288407326,
-0.021632274612784386,
-0.014218287542462349,
0.01736532337963581,
0.03133014589548111,
0.13923034071922302,
0.03839992359280586,
-0.009633763693273067,
-0.006662800908088684,
0.09689231961965561,
0.07599179446697235,
0.008005903102457523,
0.03599391505122185,
0.0065771122463047504,
0.118866927921772,
0.0630967766046524,
-0.10396504402160645,
-0.11647336930036545,
-0.019318604841828346,
-0.09005232155323029,
-0.14086297154426575,
-0.16783541440963745,
-0.0602027103304863,
0.08581891655921936,
-0.19566160440444946,
-0.15788327157497406,
-0.06069188937544823,
0.0152546726167202,
0.05944947525858879,
0.03157075121998787,
-0.19365178048610687,
-0.04324161633849144,
-0.048699356615543365,
-0.0785270407795906,
-0.06074465438723564,
0.05430954694747925,
0.040405742824077606,
-0.034140706062316895,
-0.022879209369421005,
0.055252715945243835,
0.0555931031703949,
0.041614241898059845,
-0.02774733118712902,
0.018066218122839928,
0.050878431648015976,
0.04757586494088173,
0.004077021963894367,
-0.011130867525935173,
0.06933759152889252,
0.052577607333660126,
0.008283350616693497,
-0.09632354974746704,
0.08113614469766617,
0.0792485922574997,
0.03583746775984764,
0.059057753533124924,
-0.00014163876767270267,
0.06045057997107506,
0.012129564769566059,
0.1285291463136673,
-0.005094906315207481,
-0.035034600645303726,
-0.023643001914024353,
0.021649722009897232,
-0.15688163042068481,
-0.034762103110551834,
-0.017917420715093613,
0.045863181352615356,
0.052662886679172516,
-0.10407599806785583,
0.015864457935094833,
-0.00025784666649997234,
-0.009236769750714302,
0.03757831081748009,
0.043736670166254044,
0.04907810688018799,
-0.0824151560664177,
-0.014422224834561348,
-0.07045980542898178,
0.03635339066386223,
-0.033870577812194824,
-0.056026067584753036,
-0.05264078453183174,
0.09665153920650482,
0.11492619663476944,
0.0702303871512413,
0.11368072777986526,
-0.006177615839987993,
0.008204523473978043,
0.0373477078974247,
0.06670717149972916,
0.08691789209842682,
0.07286372035741806,
-0.05624090135097504,
-0.011139350943267345,
-0.054046403616666794,
-0.08788269758224487,
0.049098506569862366,
-0.00951963197439909,
-0.11616145819425583,
-0.0704156756401062,
-0.026139795780181885,
0.02346177212893963,
0.08233670145273209,
0.0038831415586173534,
-0.023173505440354347,
0.0038472425658255816,
-0.07504576444625854,
-0.0970841571688652,
0.06661337614059448,
0.03607368469238281,
0.043004244565963745,
0.0976051315665245,
0.14550098776817322,
-0.0346452072262764,
0.07798367738723755,
-0.11934682726860046,
-0.03760410100221634,
0.16441194713115692,
0.08787593990564346,
-0.03538551181554794,
-0.00936515349894762,
-0.03274783864617348,
-0.012115486897528172,
0.037109773606061935,
0.011784006841480732,
-0.02415991760790348,
0.07634080201387405,
-0.08574649691581726,
-0.022888118401169777,
-0.04290957376360893,
-0.0036646188236773014,
-0.02444632165133953,
0.06935367733240128,
-0.05017797648906708,
-0.027432497590780258,
-0.06815939396619797,
-0.005050163250416517,
0.05431938171386719,
0.061146605759859085,
-0.01447080634534359,
-0.06119425222277641,
0.014922874979674816,
-0.016227256506681442,
0.01846880465745926,
-0.032632242888212204,
-0.03481336683034897,
-0.021608341485261917,
0.03695866838097572,
0.09676966071128845,
-0.0360308475792408,
-0.05475229397416115,
-0.016266699880361557,
0.05968796834349632,
-0.06594012677669525,
-0.02886585332453251,
-0.017231829464435577,
-0.045495688915252686,
0.07504457235336304,
0.14787019789218903,
0.09383098036050797,
-0.056979671120643616,
-0.15378956496715546,
-0.056675344705581665,
0.03126514330506325,
-0.014805152080953121,
0.0522984154522419,
0.04316636547446251,
-0.034714724868535995,
-0.10079603642225266,
-0.03395218402147293,
0.007018761243671179,
-0.010329289361834526,
0.02250543236732483,
-0.03651678189635277,
-0.13920311629772186,
-0.004409587010741234,
-0.021296033635735512,
-0.02571283094584942,
0.02157973311841488,
0.1313065141439438,
0.07910463213920593,
-0.01911873370409012,
-0.04841524735093117,
0.0644061267375946,
0.13491936028003693,
-0.020271414890885353,
0.07691734284162521,
0.03349965810775757,
-0.06843458116054535,
-0.035772405564785004,
-0.04871083423495293,
0.1178809106349945,
0.02351122349500656,
-0.00630111712962389,
0.10086892545223236,
0.045863039791584015,
-0.05168173834681511,
-0.03677370399236679,
0.03578110784292221,
0.02388925664126873,
-2.27282325795386e-05,
-0.03339596837759018,
-0.029675791040062904,
-0.08924774080514908,
-0.007556589785963297,
0.07790036499500275,
-0.05722767859697342,
-0.03256404399871826,
-0.02431388571858406,
-0.0832848995923996,
-0.10956919938325882,
-0.08589254319667816,
-0.08908484876155853,
-0.04980415478348732,
0.023379068821668625,
0.06299426406621933,
-0.015448936261236668,
0.10334672778844833,
-0.002002154244109988,
0.018855731934309006,
0.11185161024332047,
0.10446704179048538,
0.05170580744743347,
0.07958660274744034,
0.049419183284044266,
0.027730626985430717,
0.00039965350879356265,
0.09314703196287155,
-0.013735383749008179,
-0.09054168313741684,
-0.17624107003211975,
-0.0900595411658287,
0.06890884786844254,
0.006020406261086464,
-0.19155551493167877,
-0.006526886019855738,
0.04789114370942116,
0.07360394299030304,
0.03934050351381302,
-0.041119273751974106,
-0.04082874953746796,
-0.11639177799224854,
-0.043403781950473785,
0.09794194996356964,
0.006763801909983158,
-0.0014633247628808022,
-0.11760468035936356,
-0.03314375504851341,
0.11906127631664276,
0.12061130255460739,
-0.11225484311580658,
-0.0766536071896553,
0.08656863123178482,
0.06077772378921509,
0.1312461495399475,
0.029288895428180695,
-0.008450634777545929,
0.054147396236658096,
0.0818832665681839,
0.10060630738735199,
-0.06082526966929436,
-0.10179594159126282,
-0.05168270319700241,
0.08010196685791016,
0.009894384071230888,
-0.06556831300258636,
-0.06417445093393326,
0.013656160794198513,
0.023666545748710632,
0.03292872756719589,
0.14325536787509918,
0.08267990499734879,
0.007934174500405788,
-0.05894660949707031,
-0.18902599811553955,
0.007616983726620674,
-0.0345919206738472,
-0.02187395840883255,
0.027030782774090767,
0.0024885244201868773,
0.12752147018909454,
0.03823123127222061,
0.03837055340409279,
-0.12023016810417175,
-0.05173042416572571,
0.11456865817308426,
0.1108732521533966,
0.14946240186691284,
0.09649306535720825,
0.22862371802330017,
0.04316200315952301,
0.028875969350337982,
0.010058660060167313,
-0.06549261510372162,
0.12313598394393921,
0.06860576570034027,
0.07985810190439224,
0.027266934514045715,
-0.06184585019946098,
0.12234705686569214,
0.029010029509663582,
-0.024481218308210373,
-0.013803782872855663,
0.1617760956287384,
-0.06521183252334595,
-0.13304568827152252,
-0.04282683506608009,
-0.0051993136294186115,
0.11213608831167221,
-0.09507447481155396,
-0.004624019376933575,
-0.11353562772274017,
-0.16916657984256744,
-0.0842449963092804,
-0.1995496153831482,
-0.04543069377541542,
-0.024338573217391968,
0.05890071392059326,
-0.11140082776546478,
-0.019266335293650627,
-0.0508221760392189,
0.11427753418684006,
0.09512793272733688,
-0.06913294643163681,
-0.016243724152445793,
0.016758201643824577,
-0.01410269271582365,
0.04294595122337341,
0.0938066691160202,
0.04926587641239166,
0.012212211266160011,
-0.11585726588964462,
-0.09465213119983673,
0.07166296988725662,
-0.004060239996761084,
-0.0328657366335392,
-0.07425030320882797,
-0.025293249636888504,
-0.005588413216173649,
-0.019004084169864655,
0.01049328874796629,
0.1800970733165741,
0.12430492788553238,
0.07516511529684067,
0.10007010400295258,
-0.07187432050704956,
-0.0003317379450891167,
0.056785114109516144,
-0.02965923398733139,
-0.17652904987335205,
-0.012768088839948177,
0.0329056940972805,
-0.10373833775520325,
-0.07686103880405426,
-0.06316623091697693,
-0.17008653283119202,
-0.03176756575703621,
0.1015130802989006,
-0.02537539042532444,
-0.044593095779418945,
0.0049950191751122475,
0.08456635475158691,
0.054449379444122314,
-0.0987716093659401,
-0.019839521497488022,
-0.12173543125391006,
-0.011712556704878807,
0.0783727765083313,
0.11905986070632935,
-0.0382692851126194,
-0.1159026101231575,
-0.025371061637997627,
-0.09646061062812805,
0.02032255381345749,
-0.04746352136135101,
-0.12504638731479645,
0.014808066189289093,
-0.009772130288183689,
0.0207123514264822,
-0.0250253863632679,
-0.2207755297422409,
-0.08284132182598114,
-0.0431944839656353,
0.047480013221502304,
0.03258473798632622,
0.03184926137328148,
-0.036339595913887024,
0.05879265069961548,
0.01573384553194046,
-0.09615439921617508,
-0.06541895866394043,
0.054241616278886795,
0.13686947524547577,
-0.04355403780937195,
0.06025797501206398,
-0.05888627469539642,
-0.06885742396116257,
-0.012555835768580437,
0.10792315006256104,
0.06919057667255402,
-0.13578131794929504,
-0.0889970138669014,
0.009780023247003555,
0.029490847140550613,
0.0032433767337352037,
-0.05860159918665886,
-0.09151416271924973,
-0.20683111250400543,
-0.008695177733898163,
-0.14939671754837036,
-0.05206720158457756,
-0.09471946954727173,
-0.18776096403598785,
0.06635020673274994,
-0.027253150939941406,
-0.02849993295967579,
-0.1107100322842598,
0.024264199659228325,
-0.06150217726826668,
-0.03842979297041893,
0.040577229112386703,
0.14921511709690094,
0.15007032454013824,
-0.09812083095312119,
-0.028800563886761665,
-0.06238116696476936,
0.01445610448718071,
0.09139452129602432,
0.13826678693294525,
0.0644029825925827,
-0.09792880713939667,
-0.06200133264064789,
-0.007632613647729158,
0.08849293738603592,
-0.10946686565876007,
-0.10541698336601257,
-0.06443712115287781,
0.09600704163312912,
-0.016317209228873253,
0.018313143402338028,
-0.21623490750789642,
-0.006119301542639732,
0.08238229155540466,
-0.08485383540391922,
0.01141984574496746,
-0.06964246183633804,
-0.11444971710443497,
0.006053238175809383,
0.10291758924722672,
-0.230228990316391,
-0.015614244155585766,
-0.04433517903089523,
0.04745892435312271,
-0.0789363756775856,
0.04113785922527313,
-0.0320131853222847,
-0.06035416200757027,
-0.0735732764005661,
-0.015788516029715538,
0.028775205835700035,
0.029575185850262642,
-0.09471238404512405,
-0.10695742815732956,
0.07993266731500626,
0.0014214039547368884,
-0.030604394152760506,
0.11661480367183685,
0.018247153609991074,
-0.018674738705158234,
0.0022047406528145075,
-0.08747591823339462,
0.02640704996883869,
0.044923052191734314,
0.005857367999851704,
0.022073812782764435,
0.005858574062585831,
-0.07374414056539536,
-0.018253784626722336,
0.05107135698199272,
0.031015411019325256,
-0.010583528317511082,
-0.0014009098522365093,
0.06351815164089203,
0.005408772267401218,
-0.03147916868329048,
-0.1622444987297058,
-0.29257017374038696,
-0.16304261982440948,
0.041211728006601334,
-0.029820485040545464,
-0.2514217793941498,
-0.2233387976884842,
-0.11139951646327972,
-0.02961508370935917,
-0.032345131039619446,
-0.04878990724682808,
-0.030691972002387047,
0.04933861643075943,
-0.05328458547592163,
-0.01700701005756855,
-0.07170305401086807,
0.05449894070625305,
0.03744816035032272,
-0.010998648591339588,
0.07614871114492416,
-0.03356844559311867,
0.11358001083135605,
0.046047911047935486,
-0.0038513338658958673,
0.018033398315310478,
-0.13098026812076569,
0.06548026204109192,
0.014695488847792149,
0.10940107703208923,
0.064427450299263,
-0.1586761474609375,
0.08700338751077652,
-0.13500984013080597,
-0.06820713728666306,
-0.06666852533817291,
-0.129452645778656,
0.03241214156150818,
0.062043920159339905,
0.030743872746825218,
-0.04769600182771683,
-0.02018393762409687,
0.05900487303733826,
0.09784475713968277,
0.002088571200147271,
-0.10098937153816223,
0.020504586398601532,
0.11389575153589249,
-0.024397743865847588,
0.06805010139942169,
-0.0661337822675705,
0.034235283732414246,
0.10995741188526154,
0.05126576870679855,
0.041608814150094986,
-0.0199661236256361,
0.04888976737856865,
0.029534198343753815,
-0.00034979896736331284,
-0.035724300891160965,
0.004862029105424881,
-0.04442848637700081,
0.06814245879650116,
0.09705100208520889,
-0.02461685612797737,
-0.044391460716724396,
0.03508451208472252,
0.0879581868648529,
0.00843406654894352,
-0.1489754319190979,
-0.2302614152431488,
0.011926607228815556,
0.04591133072972298,
-0.08450458943843842,
0.0702764168381691,
-0.17852944135665894,
-0.0360993817448616,
0.08191321045160294,
0.029422447085380554,
0.19866450130939484,
0.13425759971141815,
-0.04683387279510498,
-0.05558386445045471,
-0.10146127641201019,
0.21534299850463867,
0.19004008173942566,
-0.017433730885386467,
0.0023689151275902987,
-0.03212566673755646,
0.036662694066762924,
0.053381018340587616,
0.030147885903716087,
-0.09630677103996277,
0.01303921639919281,
-0.018391631543636322,
0.1389458179473877,
0.11052534729242325,
0.013172228820621967,
0.06626668572425842,
-0.0290375929325819,
0.10745032876729965,
0.12665455043315887,
0.1511951982975006,
0.024148670956492424,
-0.0803290531039238,
-0.013553311116993427,
0.16421277821063995,
0.15607333183288574,
-0.08411925286054611,
-0.004769570659846067,
-0.04057981073856354,
0.02964278683066368,
0.011077956296503544,
-0.08322267979383469,
0.0036247156094759703,
-0.03525254502892494,
0.09180828183889389,
0.07909094542264938,
0.011936160735785961,
-0.04373963549733162,
-0.029580477625131607,
-0.03211003914475441,
-0.03477000072598457,
0.010981210507452488,
-0.034385036677122116,
-0.04626142606139183,
-0.10927659273147583,
-0.013163122348487377,
0.12396742403507233,
-0.03075191006064415,
0.08608907461166382,
0.09679864346981049,
-0.0010115406475961208,
-0.04720534756779671,
0.11043111979961395,
0.09069674462080002,
0.04101193696260452,
-0.17858082056045532,
-0.29173195362091064,
0.08452361077070236,
0.0039433971978724,
-0.059303637593984604,
-0.06420914828777313,
-0.15585032105445862,
0.1272897720336914,
-0.08892341703176498,
0.07693133503198624,
-0.01547238975763321,
0.017966382205486298,
0.011279147118330002,
-0.06758057326078415,
0.008696988224983215,
-0.0918869748711586,
0.056440822780132294,
0.0144412936642766,
-0.06197306513786316,
-0.017527520656585693,
-0.11320097744464874,
-0.012334221974015236,
-0.03809542953968048,
0.02746611088514328,
-0.00010423288040328771,
-0.026244306936860085,
0.12506325542926788,
-0.0068801529705524445,
-0.020849741995334625,
-0.03763706982135773,
-0.03306206315755844,
0.028865313157439232,
-0.03454318642616272,
0.013352620415389538,
-0.0073207467794418335,
0.040117740631103516,
0.06231573969125748,
-0.021633215248584747,
0.0354752279818058,
0.049232639372348785,
0.04389197379350662,
-0.04239971935749054,
-0.035566408187150955,
-0.0722813606262207,
-0.0064569273963570595,
0.18329568207263947,
0.012595142237842083,
-0.1650388091802597,
-0.04313259944319725,
-0.06914221495389938,
-0.17384222149848938,
-0.18278393149375916,
0.06871328502893448,
0.09248791635036469,
0.07942339777946472,
0.12162284553050995,
-0.022977294400334358,
0.036850690841674805,
0.13396170735359192,
0.027775099501013756,
0.03727441281080246,
0.004467615857720375,
-0.011965354904532433,
-0.07223720848560333,
-0.09050039947032928,
0.09060768783092499,
0.0771917775273323,
-0.05850989371538162,
-0.0050583784468472,
0.024703385308384895,
0.03209466114640236,
-0.1309245377779007,
0.11695662140846252,
0.0076986635103821754,
0.1810537576675415,
0.04474148899316788,
-0.06584002822637558,
0.021310346201062202,
0.005121096968650818,
0.08099091798067093,
0.07214447110891342,
-0.10555914044380188,
0.03750823065638542,
0.07157735526561737,
-0.1028822734951973,
0.003344049211591482,
0.06111866608262062,
-0.0253774244338274,
0.08113524317741394,
-0.09564294666051865,
0.004631080664694309,
0.03558539226651192,
-0.12994788587093353,
0.019752467051148415,
0.011090322397649288,
0.0978560745716095,
0.20115196704864502,
-0.050118207931518555,
0.08612830936908722,
0.10726630687713623,
0.04389816150069237,
-0.16752877831459045,
-0.0016828099032863975,
0.10501085221767426,
-0.008775033056735992,
-0.09548269212245941,
-0.21165992319583893,
0.02860710211098194,
0.08055196702480316,
0.077488973736763,
0.0339103564620018,
0.0005368352285586298,
-0.0028240366373211145,
0.01885484717786312,
0.08246322721242905,
0.01805543154478073,
-0.025247028097510338,
-0.09614226967096329,
0.016071468591690063,
0.04791565239429474,
-0.04822195693850517,
-0.0423368439078331,
-0.13533182442188263,
-0.11208181083202362,
-0.06632044911384583,
-0.05283166095614433,
0.04540428891777992,
-0.06477639079093933,
0.07859892398118973,
0.06263065338134766,
0.061093252152204514,
0.03988674283027649,
-0.003744770772755146,
-0.06320732831954956,
0.08279512822628021,
0.11616204679012299,
-0.005425103008747101,
0.024710673838853836,
-0.08835507184267044,
0.09545335173606873,
-0.014421035535633564,
0.01705498807132244,
0.03459153696894646,
-0.0832839086651802,
0.10349403321743011,
-0.0512981042265892,
-0.0754278227686882,
-0.16639602184295654,
-0.08303594589233398,
0.04435838758945465,
-0.0499027781188488,
0.010152091272175312,
-0.12175271660089493,
-0.11301801353693008,
-0.033865250647068024,
0.042183127254247665,
0.03191814944148064,
0.05681009218096733,
0.03456221520900726,
0.048115216195583344,
-0.0433526337146759,
0.054655883461236954,
-0.016641857102513313,
0.005844614002853632,
0.08676353096961975,
0.12454622983932495,
-0.01542147621512413,
0.02458970621228218,
-0.004450710490345955,
0.1414349526166916,
0.10582102090120316,
0.0241420716047287,
-0.043861597776412964,
-0.21431738138198853,
-0.01843114383518696,
-0.07271116226911545,
-0.011818811297416687,
-0.04152620583772659,
-0.10981487482786179,
-0.026791546493768692,
-0.031157178804278374,
0.027089601382613182,
0.016927285119891167,
-0.005626397207379341,
0.008137869648635387,
0.013799364678561687,
-0.0002883943961933255,
-0.10197123140096664,
-0.06869378685951233,
-0.06129780411720276,
0.09515317529439926,
0.01194990985095501,
-0.03443656116724014,
-0.005746925249695778,
-0.018828706815838814,
0.0036023887805640697,
-0.021189464256167412,
0.15047957003116608,
0.0962132066488266,
0.06725448369979858,
0.05087587609887123,
-0.2748827636241913,
0.01828930526971817,
0.16226567327976227,
0.07818762212991714,
-0.0020224088802933693,
-0.19345909357070923,
0.12761422991752625,
-0.004372721537947655,
-0.11002735793590546,
0.04082835465669632,
0.023778390139341354,
0.10362277179956436,
-0.009201280772686005,
-0.08488699793815613,
0.10139631479978561,
0.1350974291563034,
-0.04387174919247627,
-0.03857466205954552,
-0.058888088911771774,
0.09017577767372131,
0.004569025710225105,
-0.11198300123214722,
-0.049281153827905655,
-0.1194753348827362,
-0.10502827912569046,
0.03871216997504234,
-0.09445196390151978,
-0.037851154804229736,
0.07372011989355087,
-0.0009532917756587267,
0.0028732200153172016,
-0.038410816341638565,
-0.005423227325081825,
0.04602669179439545,
-0.006168462336063385,
0.005660643335431814,
-0.15166999399662018,
-0.03853803873062134,
-0.007202264852821827,
-0.024683397263288498,
-0.0017470091115683317,
0.07471662759780884,
-0.04967663809657097,
-0.08975742012262344,
-0.12793031334877014,
-0.23946243524551392,
0.10079391300678253,
0.0016195547068491578,
-0.013619666919112206,
-0.07003731280565262,
-0.09636397659778595,
-0.0025052991695702076,
0.002575088059529662,
0.05193053558468819,
-0.005552942398935556,
0.07631005346775055,
0.010783012956380844,
-0.03499939292669296,
0.02305166982114315,
-0.05440279096364975,
-0.030366959050297737,
-0.056401703506708145,
-0.05989612638950348,
0.027419209480285645,
-0.045214567333459854,
0.08160190284252167,
-0.04890025779604912,
-0.0180423054844141,
-0.21938352286815643,
-0.04413764551281929,
0.15764358639717102,
0.13992509245872498,
0.08277049660682678,
0.11238957196474075,
0.03999710455536842,
-0.013365255668759346,
0.06730269640684128,
0.13701744377613068,
0.06334960460662842,
-0.04051940143108368,
-0.14119239151477814,
0.00965290516614914,
-0.03178450092673302,
-0.019298944622278214,
-0.09535446017980576,
-0.10155129432678223,
-0.06845835596323013,
0.02126530557870865,
0.12893283367156982,
0.1049715057015419,
0.03953958675265312,
-0.01970236375927925,
0.06166164204478264,
0.040259309113025665,
0.023403862491250038,
0.20362381637096405,
0.0017795553430914879,
-0.08124015480279922,
-0.06180764362215996,
0.010090157389640808,
-0.019974246621131897,
-0.010496079921722412,
0.03988960012793541,
0.09774001687765121,
-0.058231573551893234,
0.004418538883328438,
-0.08149248361587524,
0.033857278525829315,
-0.009609684348106384,
-0.05930899456143379,
-0.051994889974594116,
-0.03654110059142113,
-0.009043910540640354,
0.01954624615609646,
0.011912550777196884,
-0.0379948765039444,
-0.06260848790407181,
-0.002894785488024354,
-0.20904037356376648,
0.049329739063978195,
0.03560134768486023,
-0.02264523133635521,
0.0325496643781662,
-0.07748794555664062,
0.02585858851671219,
-0.005624400917440653,
-0.006923143286257982,
0.01240953616797924,
0.005080149509012699,
-0.0038403680082410574,
-0.041801568120718,
0.13961800932884216,
0.05008365586400032,
-0.08235914260149002,
-0.06925864517688751,
-0.05695948004722595,
-0.054723065346479416,
0.05409959331154823,
0.014020181261003017,
-0.16824550926685333,
-0.045993972569704056,
0.0245771836489439,
0.05016004294157028,
0.02947847731411457,
-0.034622177481651306,
0.051105156540870667,
-0.07857905328273773,
-0.06955642253160477,
-0.02135276235640049,
-0.07224886864423752,
0.05952593684196472,
-0.043674543499946594,
0.07321783900260925,
0.08984748274087906,
-0.2061280459165573,
0.021674983203411102,
0.030023833736777306,
-0.041482556611299515,
-0.15813878178596497,
-0.08531884104013443,
-0.07029574364423752,
0.03660009801387787,
0.05338622257113457,
0.00996478833258152,
0.08822779357433319,
0.022267339751124382,
0.012229553423821926,
0.005488583352416754,
-0.09129652380943298,
0.118239626288414,
0.026957212015986443,
0.04031093046069145,
-0.0925217941403389,
0.002741869306191802,
0.038743019104003906,
0.0168926902115345,
0.025844721123576164,
-0.09239058196544647,
-0.07169635593891144,
-0.06179813668131828,
-0.06845937669277191,
0.08170590549707413,
0.048903193324804306,
-0.08823338150978088,
-0.07107154279947281,
0.008870955556631088,
0.12099786847829819,
-0.06940633803606033,
-0.12825290858745575,
-0.22757136821746826,
-0.060609765350818634,
0.07525955885648727,
0.16159987449645996,
0.08870960026979446,
0.01944367028772831,
-0.04269416257739067,
0.13396191596984863,
0.10495197772979736,
0.14048077166080475,
0.20328764617443085,
0.08194055408239365,
-0.05309582129120827,
-0.13544508814811707,
-0.07154147326946259,
-0.0022021005861461163,
0.04075956344604492,
-0.162308931350708,
-0.0044600144028663635,
0.036760371178388596,
0.13266052305698395,
0.0806010365486145,
-0.034980785101652145,
-0.0005887701408937573,
-0.07542826235294342,
0.14530949294567108,
0.08332791179418564,
-0.005407168995589018,
-0.03047873079776764,
-0.13815775513648987,
-0.022704999893903732,
-0.04644650220870972,
-0.09094513952732086,
0.053143031895160675,
0.038941316306591034,
0.02639850415289402,
-0.04441892355680466,
-0.08184801042079926,
0.0102070402354002,
0.11323775351047516,
0.08733364939689636,
0.01174496952444315,
0.033517953008413315,
0.02251053974032402,
-0.013891112990677357,
-0.08171392232179642,
0.04703378677368164,
-0.02007569931447506,
-0.12367226928472519,
-0.09848036617040634,
-0.1484701782464981,
-0.02280755154788494,
-0.010414543561637402,
0.013280240818858147,
-0.007800348103046417,
0.0310080386698246,
0.09176713228225708,
0.0338938944041729,
-0.016916001215577126,
0.052592575550079346,
0.10922592878341675,
0.061879388988018036,
0.10342870652675629,
-0.009376739151775837,
-0.09967862069606781,
-0.0016419879393652081,
0.037176474928855896,
0.09480734914541245,
-0.02789669670164585,
-0.01817004196345806,
-0.01583736017346382,
0.1935831755399704,
-0.0019811512902379036,
0.018285978585481644,
-0.0489443801343441,
-0.14768588542938232,
0.0014813742600381374,
0.00787646509706974,
-0.008005731739103794,
-0.05419423058629036,
-0.038500163704156876,
-0.005969420541077852,
0.013985724188387394,
0.04265590384602547,
0.04686461016535759,
0.048983026295900345,
-0.025554290041327477,
-0.0033417174126952887,
-0.15743637084960938,
-0.08959618210792542,
-0.027422742918133736,
0.014386003836989403,
-0.04818257316946983,
-0.045366138219833374,
-0.014857259579002857,
0.02890458144247532,
0.015923257917165756,
0.1752804070711136,
-0.0063266330398619175,
0.0019147164421156049,
-0.17471466958522797,
-0.060272831469774246,
0.004904604982584715,
0.028309127315878868,
0.05084199085831642,
-0.011241361498832703,
-0.11553267389535904,
0.057581447064876556,
-0.03398200869560242,
0.0550256222486496,
0.05312617868185043,
0.13501198589801788,
0.05769375339150429,
-0.02090846747159958,
0.014314300380647182,
0.03881534934043884,
-0.0034608696587383747,
-0.0004200823896098882,
-0.07948312163352966,
-0.07824793457984924,
-0.06687454879283905,
-0.013546348549425602,
-0.044694799929857254,
-0.03754303231835365,
-0.016246238723397255,
0.08731681853532791,
0.22854481637477875,
-0.03667079284787178,
-0.00559984240680933,
-0.011030344292521477,
0.04580208286643028,
0.03550925478339195,
0.0527370385825634,
-0.040577225387096405,
0.027558567002415657,
0.027520859614014626,
-0.08901925384998322,
0.01584797166287899,
0.06624626368284225,
0.061811164021492004,
-0.01906164363026619,
-0.13254381716251373,
-0.017837150022387505,
0.048533692955970764,
0.02343381941318512,
-0.05764807015657425,
-0.0033614831045269966,
0.010588056407868862,
0.07643242925405502,
0.06701269000768661,
0.26067104935646057,
0.04300061613321304,
0.05253106728196144,
0.06627076864242554,
-0.06928090751171112,
0.12187763303518295,
-0.027757689356803894,
0.08711852133274078,
-0.03762657940387726,
-0.05110623687505722,
0.04866307973861694,
-0.08647294342517853,
0.005050388630479574,
0.17861303687095642,
0.1689929962158203,
0.0658634677529335,
-0.1827833205461502,
-0.18692812323570251,
-0.08260097354650497,
-0.05895034968852997,
-0.006403031758964062,
0.009321214631199837,
0.013013144955039024,
-0.07673051208257675,
-0.014315340667963028,
0.07417385280132294,
0.17829425632953644,
0.02488511987030506,
0.06966415047645569,
-0.12443070858716965,
-0.002858766121789813,
0.07456833869218826,
-0.014155515469610691,
-0.02870035357773304,
-0.0833595022559166,
0.05859408527612686,
-0.02444213442504406,
0.03604455664753914,
-0.014547092840075493,
0.032689888030290604,
-0.011976046487689018,
-0.034884415566921234,
0.016901608556509018,
-0.005827370565384626,
-0.12342137843370438,
-0.08532997220754623,
-0.07062651216983795,
0.1053389310836792,
-0.016548657789826393,
0.003077748231589794,
-0.08276328444480896,
-0.14515170454978943,
0.02616022527217865,
0.06584413349628448,
0.1127484142780304,
0.021465253084897995,
0.046267639845609665,
0.01609368994832039,
0.10634171962738037,
0.07690154761075974,
0.06727622449398041,
0.07933607697486877,
0.009483403526246548,
-0.03766240179538727,
0.008939381688833237,
0.008981564082205296,
-0.011444519273936749,
-0.14307518303394318,
0.028043027967214584,
0.05870581790804863,
0.0865551307797432,
0.07652946561574936,
-0.06426262855529785,
0.06891099363565445,
-0.07971099019050598,
0.005625584162771702,
0.038734689354896545,
0.01876702345907688,
0.04255156219005585,
-0.05970713868737221,
-0.10099146515130997,
0.084398053586483,
0.05782702565193176,
0.06529823690652847,
0.002596762264147401,
-0.049438171088695526,
-0.05370696634054184,
0.04533421993255615,
0.1165710836648941,
0.019682692363858223,
-0.03559437021613121,
-0.12625455856323242,
0.07160671800374985,
-0.03310253098607063,
-0.15019454061985016,
-0.06358648836612701,
-0.12264785915613174,
0.035806894302368164,
-0.04339473322033882,
-0.05589977651834488,
0.034426260739564896,
0.05225184187293053,
0.10687147825956345,
0.08013687282800674,
0.15616551041603088,
0.13858793675899506,
0.1824921816587448,
0.09848461300134659,
-0.027083640918135643,
-0.014830531552433968,
-0.02239387482404709,
0.0985507220029831,
0.00889954436570406,
-0.09189559519290924,
-0.06871115416288376,
-0.04965553060173988,
-0.00056104501709342,
0.03142193332314491,
0.032872606068849564,
0.04379761964082718,
0.06907585263252258,
-0.047981489449739456,
-0.054595697671175,
-0.015187173150479794,
-0.16880011558532715,
-0.04693160578608513,
-0.10738859325647354,
0.04111775755882263,
-0.03820990025997162,
-0.01805870607495308,
-0.09913211315870285,
-0.08881571888923645,
0.06115448474884033,
0.09186527878046036,
0.062236398458480835,
0.18165323138237,
0.017459291964769363,
0.08625836670398712,
0.01072045136243105,
0.007052723318338394,
-0.002737718401476741,
0.012825707904994488,
-0.03538380563259125,
-0.030400706455111504,
0.023570630699396133,
-0.002016911283135414,
0.04263969138264656,
-0.0076661244966089725,
-0.0068298703990876675,
0.021160101518034935,
-0.05954032018780708,
-0.1599055677652359,
0.16322223842144012,
-0.03908492624759674,
0.05081511288881302,
0.05511865392327309,
-0.00895600114017725,
-0.019372837617993355,
-0.13434945046901703,
-0.03067295253276825,
0.016693374142050743,
0.06863370537757874,
-0.13864512741565704,
0.0921482965350151,
0.1957530379295349,
0.010277914814651012,
-0.02499205246567726,
-0.05054895952343941,
-0.0753457173705101,
-0.04010260850191116,
0.02373368665575981,
-0.044293034821748734,
0.0036998887080699205,
-0.0647089034318924,
-0.031517863273620605,
0.06530079245567322,
-0.017559586092829704,
0.048875294625759125,
-0.05309319868683815,
-0.11230351775884628,
0.043766800314188004,
0.025406846776604652,
-0.014048186130821705,
-0.03450646251440048,
-0.06161319091916084,
0.05692633241415024,
-0.05948452278971672,
-0.04236248508095741,
0.04345029592514038,
0.009281852282583714,
0.05359598621726036,
0.0109213562682271,
-0.1046319231390953,
-0.054851945489645004,
0.03363724797964096,
0.08661346882581711,
-0.044553693383932114,
0.0033924924209713936,
-0.07654503732919693,
-0.12441858649253845,
-0.04237305000424385,
0.06394477933645248,
0.023791836574673653,
0.029825730249285698,
-0.029982632026076317,
-0.0832708403468132,
0.04179065674543381,
-0.06590593606233597,
-0.0028515139129012823,
0.08688373863697052,
-0.15448825061321259,
-0.048554614186286926,
-0.017676686868071556,
0.0871322825551033,
0.1210673376917839,
-0.021989570930600166,
0.1334259808063507,
0.009840712882578373,
-0.022431811317801476,
0.036460552364587784,
0.015420088544487953,
0.009065933525562286,
-0.031184567138552666,
-0.007002441678196192,
-0.04751216247677803,
0.0024372590705752373,
-0.12284757941961288,
0.07693491131067276,
-0.07786034047603607,
-0.07709546387195587,
-0.040536895394325256,
-0.038020409643650055,
-0.01561735663563013,
-0.04726105555891991,
-0.0080648735165596,
0.15257872641086578,
-0.009930189698934555,
0.015237901359796524,
-0.035459306091070175,
-0.10620182007551193,
-0.08467386662960052,
0.012219232507050037,
0.022005323320627213,
0.057931847870349884,
0.03756915032863617,
0.005413788836449385,
0.09785791486501694,
0.05679348483681679,
0.02974577434360981,
0.12711355090141296,
-0.0046445271000266075,
-0.011052924208343029,
0.09548965096473694,
-0.0027209874242544174,
-0.012807349674403667,
-0.09306706488132477,
-0.05765901133418083,
0.13043025135993958,
0.13332714140415192,
0.014443282969295979,
0.03402930498123169,
0.004821235314011574,
-0.09423404932022095,
-0.05486411228775978,
-0.13752759993076324,
-0.12488570809364319,
-0.07501835376024246,
0.0024152500554919243,
-0.014972908422350883,
-0.0172039195895195,
-0.04426250234246254,
-0.10874178260564804,
-0.05907512828707695,
0.05645253509283066,
0.01812959462404251,
-0.01893641985952854,
-0.04477231577038765,
-0.019328923895955086,
-0.029226846992969513,
-0.05127689987421036,
0.037803541868925095,
-0.0021584047935903072,
-0.01489007193595171,
0.015003757551312447,
-0.03381301462650299,
0.1571970283985138,
0.01634625531733036,
-0.08987386524677277,
-0.10512405633926392,
0.1394195556640625,
0.08586318045854568,
0.05775470659136772,
0.019048679620027542,
-0.06127336621284485,
0.013619591481983662,
-0.0015150669496506453,
-0.020362602546811104,
-0.008963031694293022,
-0.043850138783454895,
0.02850540541112423,
-0.022958213463425636,
-0.013617069460451603,
0.038137923926115036,
-0.03542430326342583,
-0.005516206379979849,
-0.07228535413742065,
-0.025263922289013863,
-0.12105336785316467,
-0.08565545827150345,
-0.065974660217762,
-0.08348380029201508,
0.014950498938560486,
0.07697129249572754,
0.16768983006477356,
-0.028764674440026283,
-0.05241098999977112,
0.0923546552658081,
-0.004907697904855013,
0.029235851019620895,
0.0548669807612896,
-0.04624689370393753,
0.0032163108699023724,
0.10782723873853683,
-0.0316234715282917,
0.04821259155869484,
-0.08888948708772659,
-0.028435448184609413,
-0.1338965892791748,
-0.06496874243021011,
-0.05044734477996826,
-0.055250078439712524,
-0.04119948670268059,
0.18285085260868073,
0.0020977752283215523,
-0.06761320680379868,
-0.0955347791314125,
-0.08441391587257385,
0.01361425593495369,
-0.09653978794813156,
-0.15997837483882904,
0.011674569919705391,
-0.020975198596715927,
0.008463910780847073,
0.0005962412687949836,
0.014723305590450764,
0.10520368069410324,
0.09388620406389236,
-0.013280496001243591,
0.05338958650827408,
-0.0027345078997313976,
0.04330737143754959,
0.06890714913606644,
-0.06952102482318878,
0.12249026447534561,
0.20667587220668793,
-0.052553609013557434,
-0.0035027279518544674,
0.03282006457448006,
-0.02787455916404724,
0.09908057004213333,
-0.009766495786607265,
0.004749564453959465,
0.11532656103372574,
0.006851997226476669,
0.03627118840813637,
0.06060145050287247,
-0.10023755580186844,
-0.044769249856472015,
-0.009691436775028706,
0.03059305250644684,
0.07121848315000534,
0.05967335030436516,
-0.00793256051838398,
-0.00369578436948359,
0.033248793333768845,
-0.16069296002388,
0.0011477841762825847,
-0.01227953564375639,
-0.07134518772363663,
-0.06562922894954681,
-0.10586380213499069,
-0.06705586612224579,
-0.09212254732847214,
-0.1239418089389801,
0.13317272067070007,
0.012454764917492867,
0.005464473739266396,
0.029584692791104317,
0.15422794222831726,
0.01870814710855484,
-0.03567247465252876,
0.031283408403396606,
-0.0505639873445034,
-0.0043986402451992035,
0.024202382192015648,
-0.04629368707537651,
-0.0587618425488472,
0.06071209907531738,
0.020304545760154724,
0.007295995485037565,
-0.05299903824925423,
-0.07254476845264435,
0.04727351292967796,
0.021098894998431206,
-0.01825355552136898,
0.04639163985848427,
-0.030571816489100456,
-0.07873428612947464,
-0.021357540041208267,
0.04170269891619682,
0.12677626311779022,
0.002869007643312216,
-0.06994282454252243,
0.10506298393011093,
0.19957458972930908,
0.01218356005847454,
-0.08349879086017609,
-0.0009182409266941249,
-0.04289655759930611,
0.015244045294821262,
-0.12677817046642303,
-0.10023181140422821,
-0.021163078024983406,
-0.0023145899176597595,
0.0007326154736801982,
-0.09502926468849182,
-0.20819580554962158,
0.07321972399950027,
0.12150876969099045,
-0.19311921298503876,
-0.0009118123562075198,
-0.024852216243743896,
-0.03923298045992851,
-0.20702318847179413,
-0.14571499824523926,
0.10128214210271835,
-0.01315171830356121,
-0.007767033763229847,
-0.0022189109586179256,
0.1222209483385086,
0.08833850175142288,
-0.06867452710866928,
-0.007834947668015957,
-0.04527528956532478,
0.06068962439894676,
0.15500812232494354,
0.18858981132507324,
-0.07812066376209259,
0.0028932851273566484,
0.04866042360663414,
0.08057259023189545,
0.1461671143770218,
-0.06986808031797409,
0.06513839215040207,
0.09170002490282059,
0.0303842443972826,
-0.028833961114287376,
0.11929498612880707,
0.0631721019744873,
0.037205662578344345,
-0.12879781424999237,
-0.05528158321976662,
0.13157182931900024,
0.07981625199317932,
-0.015805132687091827,
-0.034578483551740646,
-0.015118436887860298,
-0.11175508797168732,
-0.03838542848825455,
-0.07004070281982422,
-0.0014002141542732716,
0.05214565247297287,
-0.039675500243902206,
0.04408338665962219,
-0.026461243629455566,
-0.019217148423194885,
-0.05022749677300453,
0.039301201701164246,
-0.060994118452072144,
0.03834984824061394,
0.03223949670791626,
-0.03278690204024315,
0.03216316178441048,
0.017417829483747482,
0.14023467898368835,
0.0701000913977623,
-0.08331413567066193,
0.00568972947075963,
0.2923823893070221,
0.09111639857292175,
-0.14779452979564667,
-0.13569769263267517,
0.010402009822428226,
0.02778429165482521,
0.043191391974687576,
0.012843524105846882,
0.051802411675453186,
0.04940872639417648,
0.09719917923212051,
0.01593879424035549,
-0.04170401021838188,
-0.0704822912812233,
0.054747823625802994,
0.08445929735898972,
0.04475567117333412,
-0.01045154221355915,
-0.049912940710783005,
-0.009204929694533348,
0.03090883046388626,
0.08762649446725845,
-0.03036755695939064,
0.08198250085115433,
-0.03453310206532478,
-0.08033162355422974,
-0.055901579558849335,
0.0014971345663070679,
0.1657140702009201,
-0.08787193894386292,
-0.07152826339006424,
-0.024580324068665504,
-0.018199728801846504,
-0.10245335847139359,
-0.0050647445023059845,
0.09291332215070724,
0.11144550144672394,
0.09234050661325455,
0.08392293751239777,
-0.0226888470351696,
-0.023190289735794067,
0.07396005094051361,
0.022072749212384224,
0.011733484454452991,
0.021498505026102066,
0.13399843871593475,
0.11984933167695999,
0.15804007649421692,
-0.0021843798458576202,
0.16080908477306366,
0.10252433270215988,
0.20012173056602478,
0.0005442452966235578,
-0.06314916163682938,
-0.02725014090538025,
-0.0679575651884079,
0.06926360726356506,
0.0013311865041032434,
-0.020005526021122932,
0.10880284756422043,
-0.05638216808438301,
-0.055544059723615646,
-0.1526346653699875,
-0.12802888453006744,
0.08183033019304276,
-0.07394959777593613,
-0.0941435694694519,
-0.09212977439165115,
-0.14656633138656616,
0.009119968861341476,
0.008841914124786854,
0.04221411794424057,
-0.0776163637638092,
0.014511672779917717,
-0.06016499921679497,
0.013873745687305927,
0.04725217819213867,
0.04523845762014389,
0.021656380966305733,
-0.002558360109105706,
-0.10511432588100433,
-0.05917591601610184,
0.07709008455276489,
0.0688030794262886,
0.05752210691571236,
0.021473539993166924,
-0.1467151641845703,
-0.006735003553330898,
0.026349397376179695,
0.02333856374025345,
0.0323597751557827,
0.06444944441318512,
-0.07736124843358994,
0.03718338534235954,
0.018741928040981293,
0.03068193979561329,
0.06948217004537582,
-0.014039301313459873,
0.049715425819158554,
0.0014871627790853381,
-0.05074659362435341,
-0.0600024051964283,
-0.013851618394255638,
-0.07655929028987885,
-0.09765589982271194,
0.009986449964344501,
0.051530398428440094,
0.06268252432346344,
0.10748094320297241,
-0.01073445100337267,
-0.11148243397474289,
-0.08395100384950638,
0.07734426856040955,
0.037882089614868164,
-0.07629090547561646,
-0.008177562616765499,
-0.02762983925640583,
0.041131455451250076,
-0.14156581461429596,
0.08227581530809402,
0.08060261607170105,
0.08499754965305328,
0.06137537211179733,
-0.09313055872917175,
-0.019402513280510902,
-0.10867594927549362,
0.02030239813029766,
0.10840898007154465,
0.037993185222148895,
-0.054722413420677185,
0.02859143726527691,
0.10244955867528915,
0.11369090527296066,
0.021877173334360123,
0.030872853472828865,
-0.053216755390167236,
-0.03260461613535881,
-0.0110474256798625,
-0.0479138046503067,
0.02197168953716755,
0.013846585527062416,
0.056034717708826065,
-0.09122233092784882,
-0.061732690781354904,
0.04649987444281578,
0.03338681533932686,
-0.09158302843570709,
-0.06578727066516876,
0.052592262625694275,
0.05714106187224388,
0.13570208847522736,
-0.00252241431735456,
-0.05026132985949516,
0.06774143874645233,
-0.077574722468853,
-0.059122804552316666,
0.04132382571697235,
0.10481426864862442,
-0.029172977432608604,
-0.04967740178108215,
0.10892321914434433,
0.162924662232399,
0.20522159337997437,
0.028501057997345924,
-0.08337859809398651,
-0.155896857380867,
-0.06891729682683945,
-0.09204316884279251,
-0.004943563602864742,
-0.016168752685189247,
-0.09777680039405823,
-0.12472774088382721,
-0.08717400580644608,
-0.04321315139532089,
0.023824390023946762,
0.06924523413181305,
0.04224102199077606,
-0.033006876707077026,
-0.08546943962574005,
0.1697523444890976,
0.0980292558670044,
-0.18229873478412628,
-0.22785040736198425,
-0.15522535145282745,
0.048308759927749634,
0.03646392747759819,
0.07257431000471115,
-0.079262875020504,
-0.04153522476553917,
0.03308778628706932,
0.025739027187228203,
0.11107036471366882,
0.08356177061796188,
0.07224320620298386,
0.11076512187719345,
-0.017514457926154137,
-0.1046009287238121,
0.009302880614995956,
0.013637928292155266,
0.08121591806411743,
-0.009316317737102509,
-0.08225944638252258,
-0.06714856624603271,
-0.022956984117627144,
-0.05482611805200577,
-0.045195285230875015,
0.010220968164503574,
0.041911493986845016,
-0.05984751135110855,
0.029706260189414024,
0.1370861828327179,
0.17897158861160278,
0.027940664440393448,
0.051230620592832565,
0.07050442695617676,
-0.039843566715717316,
0.06644382327795029,
-0.1660361886024475,
-0.06616652011871338,
-0.04540218785405159,
-0.005216553341597319,
-0.04830967262387276,
-0.1905212253332138,
-0.12108682841062546,
-0.05856345221400261,
0.07301028072834015,
0.06632965058088303,
0.020240817219018936,
0.01482215616852045,
0.00718420185148716,
0.03781123831868172,
0.013441531918942928,
-0.004415745381265879,
-0.21104192733764648,
-0.0314677432179451,
-0.046692993491888046,
0.1391516923904419,
0.11378181725740433,
0.0026524963323026896,
-0.1173606887459755,
-0.05102553218603134,
0.04403013736009598,
0.025258276611566544,
0.0558924525976181,
0.01651260256767273,
0.007430335972458124,
0.0010559615911915898,
-0.038903988897800446,
-0.03994431346654892,
0.006768898107111454,
0.17573340237140656,
0.002228258876129985,
-0.09124212712049484,
-0.0339631661772728,
0.08772163093090057,
0.024143297225236893,
0.02257428877055645,
0.004131908528506756,
0.015022492967545986,
-0.09385310858488083,
-0.02969830110669136,
-0.014226569794118404,
0.09444276988506317,
0.07854072004556656,
-0.10466582328081131,
0.04459955915808678,
0.014524578116834164,
-0.0030418464448302984,
-0.04489239677786827,
-0.08246464282274246,
-0.051578547805547714,
-0.07900569587945938,
-0.09126944094896317,
-0.0781015008687973,
-0.0383434072136879,
0.08469860255718231,
0.019267817959189415,
0.002863178728148341,
0.06847305595874786,
0.003321507479995489,
0.12030728161334991,
0.11370348185300827,
0.06913499534130096,
-0.0011618259595707059,
0.051032450050115585,
0.07796543091535568,
-0.05147498473525047,
-0.1783522367477417,
-0.29400962591171265,
0.05731966346502304,
0.02106931060552597,
-0.05414706841111183,
-0.04874406009912491,
-0.05572854354977608,
-0.047775574028491974,
-0.026334071531891823,
0.001628703554160893,
0.08826552331447601,
0.05320022627711296,
-0.05135731026530266,
-0.10544043779373169,
-0.07395633310079575,
0.05007314682006836,
0.1615937352180481,
0.03509984910488129,
-0.07338499277830124,
-0.1349005252122879,
-0.0002181323798140511,
0.0834043100476265,
0.013759087771177292,
-0.008029043674468994,
-0.09066425263881683,
-0.19474954903125763,
-0.0908190906047821,
0.04194891080260277,
0.05324375256896019,
-0.044529758393764496,
-0.13380642235279083,
0.055821869522333145,
-0.04398760944604874,
0.018385808914899826,
-0.11982109397649765,
-0.05298576503992081,
0.1380508691072464,
0.009989472106099129,
-0.06189930811524391,
-0.09946845471858978,
-0.09206383675336838,
0.2191804051399231,
0.11164317280054092,
-0.01746956631541252,
0.03016282618045807,
0.04376247152686119,
0.023343587294220924,
-0.012800139375030994,
-0.006839974317699671,
0.010315027087926865,
-0.14614444971084595,
-0.24144485592842102,
0.01101384311914444,
0.02900342270731926,
0.08039252460002899,
-0.1511324793100357,
-0.07467386871576309,
0.03071453422307968,
0.028716882690787315,
-0.019587818533182144,
-0.08611930906772614,
0.0377955324947834,
-0.06161127984523773,
-0.026531167328357697,
-0.07693986594676971,
0.015541847795248032,
0.053876083344221115,
-0.060473524034023285,
-0.01209211628884077,
0.14088396728038788,
0.0707506388425827,
0.14498230814933777,
-0.18744075298309326,
0.005105297546833754,
-0.024641040712594986,
-0.10171398520469666,
0.09323956817388535,
-0.07894150167703629,
-0.10595490783452988,
-0.021363237872719765,
-0.010639547370374203,
-0.07808530330657959,
-0.09806885570287704,
-0.08260414749383926,
-0.023167161270976067,
-0.20819182693958282,
-0.06164583936333656,
0.11473545432090759,
0.011186975054442883,
-0.022815300151705742,
0.019194230437278748,
0.05233009159564972,
0.14846937358379364,
-0.0358729213476181,
-0.10895329713821411,
-0.11265316605567932,
-0.07314197719097137,
0.055448416620492935,
-0.068141870200634,
0.15531864762306213,
-0.021509826183319092,
-0.21140579879283905,
-0.00972449779510498,
-0.06875098496675491,
0.07726261764764786,
0.07443923503160477,
-0.019415443763136864,
-0.11002747714519501,
-0.13092999160289764,
-0.03710303083062172,
0.03210151568055153,
0.044464197009801865,
0.01082702074199915,
0.0030657618772238493,
0.05523845553398132,
0.05774454027414322,
0.09396076202392578,
-0.013301491737365723,
0.07156147807836533,
0.1851775348186493,
0.08413511514663696,
0.07220344990491867,
-0.04269559308886528,
0.08192896842956543,
-0.027344930917024612,
-0.050184860825538635,
-0.016101814806461334,
-0.06637012213468552,
-0.071592316031456,
-0.12812744081020355,
-0.17014849185943604,
-0.13461332023143768,
-0.053693175315856934,
0.09346964210271835,
0.026990659534931183,
0.07758452743291855,
-0.04995541274547577,
0.03921962156891823,
0.008368373848497868,
0.08120148628950119,
0.014133919961750507,
-0.01637892611324787,
0.014141040854156017,
-0.023708738386631012,
-0.0021154971327632666,
-0.09804892539978027,
0.023404669016599655,
0.09619645029306412,
0.03520740568637848,
0.19038978219032288,
0.018111873418092728,
0.055305466055870056,
-0.08932437747716904,
0.041254278272390366,
-0.008398964069783688,
0.09453458338975906,
0.04138312116265297,
-0.07321655005216599,
-0.09954413771629333,
-0.11492763459682465,
-0.1622006744146347,
0.03422442451119423,
-0.0579647459089756,
-0.04321594536304474,
0.012141338549554348,
0.08945604413747787,
0.0673709586262703,
-0.06713145226240158,
-0.12324806302785873,
0.051381126046180725,
-0.015463948249816895,
0.18007610738277435,
0.010019952431321144,
0.07171709835529327,
0.09536013752222061,
-0.08648478239774704,
-0.24700666964054108,
0.0031378506682813168,
-0.03652147203683853,
0.0686771348118782,
-0.020803770050406456,
-0.12446761876344681,
-0.032253578305244446,
-0.07440768927335739,
0.10447835922241211,
-0.05988997966051102,
0.014584328047931194,
-0.08913543820381165,
0.03921284154057503,
0.17798088490962982,
-0.020046772435307503,
-0.0369042344391346,
-0.02466539293527603,
0.04606315493583679,
-0.05305631086230278,
-0.029682932421565056,
-0.08114250749349594,
0.015208939090371132,
0.10860798507928848,
-0.02417200803756714,
-0.005579414311796427,
-0.09989652782678604,
-0.019437655806541443,
0.10485485941171646,
0.038190774619579315,
-0.03398192301392555,
0.003628683043643832,
-0.021809639409184456,
0.08442369848489761,
-0.03515668958425522,
0.044640641659498215,
-0.0007446742383763194,
0.0006186308455653489,
-0.0356886126101017,
-0.0243556909263134,
0.02419600635766983,
-0.057540856301784515,
-0.06007502228021622,
-0.04837771877646446,
0.01732160523533821,
-0.019533934071660042,
-0.025050124153494835,
-0.09856557101011276,
0.03780098259449005,
-0.02414690889418125,
-0.01900021731853485,
0.10240966826677322,
-0.029924781993031502,
0.024705909192562103,
0.01183338463306427,
0.05237572267651558,
0.051367197185754776,
0.04426106810569763,
0.00013029960973653942,
0.16204875707626343,
-0.0190456360578537,
-0.11945074051618576,
-0.027167970314621925,
0.05269014835357666,
0.08192026615142822,
0.081412173807621,
0.0174236036837101,
0.005882822442799807,
-0.17931252717971802,
-0.04127096012234688,
0.005089315120130777,
0.087920181453228,
-0.026095522567629814,
-0.05854460224509239,
-0.044771600514650345,
-0.1233898177742958,
-0.12245766073465347,
0.08067040145397186,
0.04877340421080589,
-0.11604321002960205,
-0.15822337567806244,
0.022850017994642258,
0.032306257635354996,
-0.020547250285744667,
-0.17437267303466797,
0.08870804309844971,
0.029382219538092613,
-0.0015394184738397598,
0.07050421833992004,
-0.08644552528858185,
-0.05870913341641426,
-0.01139810960739851,
0.0189367663115263,
-0.03507698327302933,
-0.00438298936933279,
0.05459289252758026,
0.05820145830512047,
-0.13630549609661102,
-0.14642809331417084,
0.15287314355373383,
0.03841255605220795,
0.038426656275987625,
0.056812599301338196,
-0.0007915880996733904,
-0.04924743250012398,
-0.08357387036085129,
-0.00931814219802618,
0.10286823660135269,
-0.014510870911180973,
-0.0805581659078598,
-0.06645423918962479,
-0.02785520814359188,
0.017495572566986084,
0.03911443054676056,
0.024728858843445778,
-0.009303150698542595,
0.031806059181690216,
0.028060829266905785,
0.14069196581840515,
-0.0110572325065732,
-0.03724411502480507,
-0.20933906733989716,
0.027767183259129524,
0.16167140007019043,
0.02802523970603943,
-0.017759619280695915,
-0.09578851610422134,
-0.05146763101220131,
-0.027055790647864342,
0.11316219717264175,
0.12658707797527313,
0.05474511533975601,
0.05806298926472664,
0.03981617093086243,
-0.06195807456970215,
0.1081855297088623,
0.010864341631531715,
-0.0016843699850142002,
-0.11651909351348877,
-0.0038118939846754074,
0.00916327815502882,
-0.11721637845039368,
0.04036637768149376,
-0.02157338336110115,
-0.062059540301561356,
0.025530554354190826,
0.021493922919034958,
0.00671708770096302,
-0.07307497411966324,
0.03092590905725956,
0.10105680674314499,
0.05999327823519707,
-0.03384808823466301,
-0.0672534927725792,
0.05659649148583412,
-0.213632732629776,
-0.012164786458015442,
-0.020007241517305374,
-0.08814699947834015,
-0.08231303095817566,
-0.05899679288268089,
-0.06620270013809204,
0.041406698524951935,
0.10236822813749313,
0.07174091041088104,
-0.04920955374836922,
0.12173189222812653,
0.010314449667930603,
-0.10674269497394562,
-0.056168317794799805,
-0.05280514061450958,
0.01830216497182846,
-0.04135053977370262,
0.01312214881181717,
-0.034994740039110184,
-0.13669031858444214,
-0.11483091115951538,
0.024317437782883644,
-0.09080006927251816,
-0.019769933074712753,
-0.07395025342702866,
0.08089806139469147,
0.09886866062879562,
0.009092407301068306,
-0.057801760733127594,
-0.0732927918434143,
0.05732126161456108,
0.10365618020296097,
0.05723611265420914,
-0.0385083332657814,
-0.07547953724861145,
0.015059713274240494,
-0.04564846679568291,
-0.0003331507323309779,
0.10851644724607468,
0.03210800513625145,
0.03663129359483719,
-0.13312707841396332,
0.06811103969812393,
0.048715174198150635,
0.13608762621879578,
0.19002355635166168,
-0.18212805688381195,
0.061699166893959045,
0.07751163840293884,
0.030236229300498962,
-0.026913946494460106,
-0.029729647561907768,
-0.03311244025826454,
-0.015289198607206345,
-0.0683758333325386,
-0.15974824130535126,
0.07859502732753754,
0.024338681250810623,
0.0830807313323021,
0.016976410523056984,
-0.02157493680715561,
-0.108082115650177,
-0.10158446431159973,
0.015208612196147442,
0.17010599374771118,
0.18649066984653473,
0.0011361890938133001,
-0.008286760188639164,
0.03376214578747749,
-0.021610036492347717,
-0.06049548089504242,
0.03431066870689392,
0.02645157463848591,
-0.19325077533721924,
-0.05438803508877754,
-0.15253601968288422,
0.017327653244137764,
-0.1380934715270996,
0.05280451476573944,
0.04247689247131348,
0.03660060465335846,
0.04166330024600029,
0.013741493225097656,
0.04296756163239479,
0.0592641681432724,
0.10210971534252167,
0.0465790331363678,
0.14846156537532806,
-0.017779896035790443,
-0.07672931253910065,
0.00977951381355524,
0.09385485202074051,
0.16398075222969055,
-0.039411760866642,
-0.1790495663881302,
-0.13603515923023224,
0.11236606538295746,
0.13506874442100525,
-0.1112804263830185,
-0.07189389318227768,
-0.014138350263237953,
0.00013487684191204607,
0.08800651878118515,
-0.09087549149990082,
0.03454624116420746,
0.1024271622300148,
-0.0456731803715229,
0.021631434559822083,
0.07783002406358719,
-0.034765057265758514,
0.11225961148738861,
-0.002528035081923008,
-0.034189771860837936,
0.11265813559293747,
0.1044081449508667,
0.08870348334312439,
-0.02513967826962471,
-0.02519405074417591,
-0.05249610170722008,
-0.09654839336872101,
-0.1676160991191864,
0.06468193233013153,
0.1348770409822464,
-0.06780398637056351,
-0.29583975672721863,
-0.10352783650159836,
0.04307718947529793,
0.04820067808032036,
-0.06232907250523567,
0.08458229154348373,
-0.0191179271787405,
-0.09965254366397858,
-0.04801230505108833,
0.05870367959141731,
0.05108420178294182,
-0.04547283798456192,
-0.136845663189888,
-0.08293548226356506,
0.06809218972921371,
0.08002123236656189,
0.14822131395339966,
-0.06571697443723679,
-0.0297695305198431,
0.007934542372822762,
0.013833347707986832,
0.08948321640491486,
-0.08856303989887238,
-0.11365143954753876,
0.10125616192817688,
0.032425861805677414,
0.004919323604553938,
0.034675151109695435,
0.007223797496408224,
-0.0051597352139651775,
-0.13139773905277252,
-0.08204237371683121,
0.17680150270462036,
0.06939730048179626,
0.02585519477725029,
-0.011432873085141182,
0.004725952632725239,
-0.061540860682725906,
0.0979618951678276,
0.11956673115491867,
-0.0137878293171525,
-0.003457477316260338,
-0.04419998452067375,
0.06616921722888947,
0.1375337541103363,
-0.017620468512177467,
-0.15831436216831207,
-0.07903312146663666,
-0.0167367123067379,
0.09017272293567657,
-0.06317585706710815,
-0.03692973405122757,
0.015478226356208324,
0.018766697496175766,
0.05979209393262863,
0.12534436583518982,
-0.07785308361053467,
-0.08163965493440628,
0.19733281433582306,
0.103385329246521,
-0.01679171994328499,
-0.014521299861371517,
-0.0021561940666288137,
0.0019380230223760009,
0.002812695922330022,
0.06274356693029404,
0.06751244515180588,
0.012336688116192818,
0.08412595838308334,
0.05294645205140114,
0.09143055975437164,
0.015637248754501343,
-0.012984625063836575,
0.02351849153637886,
0.0022226227447390556,
-0.07957825809717178,
-0.0427180677652359,
-0.023973340168595314,
0.01667124032974243,
0.008931775577366352,
0.05026473477482796,
-0.01890597678720951,
-0.08810294419527054,
-0.005517454817891121,
-0.0076652406714856625,
0.028663935139775276,
0.06227513402700424,
-0.052040353417396545,
0.054086536169052124,
0.007673585321754217,
-0.012009428814053535,
-0.07575267553329468,
-0.014711646363139153,
0.05482446774840355,
0.07960572838783264,
0.16102181375026703,
0.08469482511281967,
-0.08808191120624542,
-0.06080720201134682,
0.09643949568271637,
0.1268138885498047,
0.005881001241505146,
-0.009451639838516712,
0.06996462494134903,
-0.03665199503302574,
-0.012356461957097054,
-0.06733103096485138,
-0.0070254011079669,
0.047120071947574615,
0.140564426779747,
0.07708939164876938,
-0.03515303507447243,
-0.02125672437250614,
0.07571930438280106,
0.04793968051671982,
0.012345615774393082,
0.09578206390142441,
-0.06453905254602432,
-0.020902855321764946,
-0.0699484646320343,
0.021403487771749496,
0.03419294208288193,
0.12256714701652527,
0.06350670754909515,
0.011452279053628445,
0.02726440690457821,
0.03225596994161606,
-0.07653339207172394,
-0.19956627488136292,
-0.18299777805805206,
-0.0908375009894371,
0.0008087109890766442,
-0.014042424969375134,
0.09145157039165497,
0.10146287083625793,
0.0382484495639801,
0.12158782035112381,
-0.08313251286745071,
-0.021032586693763733,
-0.06184934079647064,
0.032205164432525635,
-0.014192214235663414,
0.02378891035914421,
-0.030437592417001724,
-0.09850329160690308,
0.014414060860872269,
-0.01787189207971096,
0.09686309099197388,
-0.003912299871444702,
-0.04103385657072067,
-0.026957431808114052,
0.032101988792419434,
0.10299466550350189,
-0.05781695619225502,
-0.025282016023993492,
0.01139696966856718,
0.03686947748064995,
-0.04907548055052757,
0.018344789743423462,
0.12517014145851135,
0.059856243431568146,
0.04397350549697876,
0.020767221227288246,
-0.0413205511868,
0.07851403206586838,
0.020022934302687645,
0.00630319956690073,
-0.09018874913454056,
-0.15624509751796722,
-0.05386274680495262,
-0.05750219523906708,
-0.06517785787582397,
0.18964774906635284,
0.09550629556179047,
0.008970439434051514,
-0.06281206756830215,
-0.0038864954840391874,
0.08997426927089691,
0.16081082820892334,
0.03346554934978485,
-0.10893848538398743,
-0.19612397253513336,
-0.08991628885269165,
0.04956509917974472,
0.08185785263776779,
-0.026746604591608047,
-0.03242278844118118,
0.040095169097185135,
0.07872478663921356,
0.027655964717268944,
-0.0213092640042305,
0.0019162571988999844,
0.0036212760023772717,
-0.015175017528235912,
0.06568414717912674,
0.07256581634283066,
-0.05153778940439224,
0.051943738013505936,
-0.02037135697901249,
-0.00445454940199852,
0.0187236238270998,
-0.0636165514588356,
0.04506178945302963,
-0.010195762850344181,
-0.06890728324651718,
0.015159478411078453,
-0.014135819859802723,
-0.06121808663010597,
-0.031016163527965546,
-0.08509805798530579,
-0.02677888423204422,
-0.026836108416318893,
0.08319632709026337,
0.08836815506219864,
-0.0053435564041137695,
-0.0465216189622879,
0.004059361293911934,
0.11871381849050522,
0.070277638733387,
0.06582369655370712,
-0.017964571714401245,
0.09893789887428284,
0.08058679848909378,
0.1344211846590042,
0.08363373577594757,
0.0022347040940076113,
-0.006891182623803616,
0.11530773341655731,
0.1072966605424881,
0.03285055607557297,
-0.017752772197127342,
-0.15430323779582977,
-0.0725817009806633,
-0.0903727114200592,
-0.14718137681484222,
-0.16181133687496185,
-0.2759234607219696,
-0.017948104068636894,
-0.11655370891094208,
-0.08450551331043243,
-0.09420384466648102,
-0.09479624778032303,
-0.0615377202630043,
-0.049765557050704956,
-0.06672187894582748,
0.015697790309786797,
-0.03655436635017395,
0.034793101251125336,
-0.0035596375819295645,
0.013748771511018276,
-0.01126633770763874,
-0.02948055975139141,
0.014892290346324444,
-0.11092020571231842,
-0.07190868258476257,
0.15666678547859192,
0.12188065052032471,
-0.08084695786237717,
-0.1355256885290146,
0.08917059004306793,
0.07160969823598862,
0.06340809911489487,
0.04756023362278938,
0.034766100347042084,
-0.003192158415913582,
0.06981494277715683,
0.027710342779755592,
-0.015194617211818695,
-0.041802071034908295,
0.057020511478185654,
-0.02038862369954586,
0.10140901058912277,
-0.04635446146130562,
-0.04878690466284752,
0.027317028492689133,
-0.15949073433876038,
-0.07850015163421631,
-0.11426212638616562,
-0.14097194373607635,
-0.0686274841427803,
-0.1342947781085968,
-0.10087673366069794,
0.13494303822517395,
0.1132085919380188,
0.03230030834674835,
-0.04285792261362076,
0.050698988139629364,
0.10291726142168045,
0.05914044380187988,
-0.07144131511449814,
-0.06801240891218185,
0.04899268597364426,
0.059515926986932755,
-0.0006932938704267144,
-0.009174127131700516,
-0.06689869612455368,
0.0584271140396595,
-0.07436779886484146,
-0.08715580403804779,
0.008648390881717205,
-0.02639799565076828,
-0.051416631788015366,
0.1433645784854889,
0.1227014809846878,
0.08289606124162674,
0.02852565422654152,
-0.024971866980195045,
-0.02741410955786705,
-0.11799982935190201,
-0.15767978131771088,
-0.11411429196596146,
-0.15524570643901825,
0.04174722358584404,
-0.058125924319028854,
-0.06137740984559059,
0.03537195920944214,
0.014242172241210938,
-0.015418357215821743,
0.004108277149498463,
-0.032519277185201645,
-0.055197082459926605,
0.04893585667014122,
-0.012681218795478344,
0.07344605028629303,
0.10182692855596542,
0.09233775734901428,
0.07821384072303772,
0.06394505500793457,
0.014844001270830631,
0.11470199376344681,
0.03304852172732353,
-0.004395958036184311,
0.03385217487812042,
0.0016153089236468077,
-2.3449017589882715e-06,
-0.03812934085726738,
-0.12731659412384033,
-0.041698966175317764,
-0.0602966770529747,
0.009707467630505562,
0.00687877181917429,
0.0501835010945797,
-0.08864431828260422,
-0.01188945583999157,
0.020738936960697174,
-0.013177732937037945,
0.013391752727329731,
-0.019646935164928436,
0.08954489231109619,
-0.07734766602516174,
-0.015306704677641392,
0.01748565211892128,
-0.06543872505426407,
-0.09535738825798035,
0.019872594624757767,
-0.021278314292430878,
0.008779728785157204,
0.010067743249237537,
0.09098280966281891,
0.0744570717215538,
0.06411140412092209,
0.023291822522878647,
-0.08018400520086288,
-0.13191929459571838,
-0.0796508863568306,
-0.007318048272281885,
-0.0030051555950194597,
-0.058329641819000244,
-0.012139727361500263,
-0.039657965302467346,
0.06498106569051743,
-0.028113823384046555,
0.0031074369326233864,
0.08917591720819473,
0.010926671326160431,
0.06717152148485184,
-0.07608326524496078,
-0.09588068723678589,
-0.03367643058300018,
-0.024168653413653374,
0.08599057793617249,
-0.015275332145392895,
-0.05824393779039383,
0.030618740245699883,
0.2190047949552536,
0.13760004937648773,
0.05924505740404129,
0.03929901495575905,
-0.07081179320812225,
-0.090802863240242,
-0.0714619904756546,
0.028232410550117493,
-0.0799005776643753,
-0.03402024134993553,
-0.06198439002037048,
0.004125936888158321,
0.0571918860077858,
0.08348560333251953,
0.0651068240404129,
0.0023130865301936865,
0.04261667653918266,
-0.022474171593785286,
-0.01089035626500845,
-0.14431975781917572,
-0.18671570718288422,
0.03556061536073685,
-0.015942653641104698,
0.018507210537791252,
-0.1323554962873459,
0.05272572860121727,
0.08661401271820068,
0.019325124099850655,
-0.04041758552193642,
-0.11337679624557495,
0.1104479730129242,
0.14064210653305054,
0.02299944870173931,
0.014120533131062984,
0.06336928904056549,
0.0422021821141243,
-0.012442980892956257,
0.033493150025606155,
-0.03749927505850792,
0.04966878890991211,
0.07753323763608932,
0.011835018172860146,
-0.010700800456106663,
0.13470734655857086,
0.15227341651916504,
0.09326642751693726,
0.028157295659184456,
-0.16211175918579102,
0.07429380714893341,
0.12210100144147873,
-0.06391202658414841,
-0.11086294800043106,
-0.11430223286151886,
-0.08433187752962112,
0.005965427495539188,
-0.19486118853092194,
-0.09352642297744751,
0.06856521964073181,
0.0027859669644385576,
-0.04281299561262131,
-0.042469173669815063,
-0.004114585928618908,
0.074197918176651,
-0.016962531954050064,
-0.0826040729880333,
0.04627404361963272,
-0.06583233922719955,
0.062497977167367935,
-0.03857109695672989,
0.013137180358171463,
-0.05327027291059494,
-0.012543998658657074,
0.018532278016209602,
-0.09470716863870621,
0.10729977488517761,
0.12581275403499603,
0.013674041256308556,
-0.055102039128541946,
0.10570372641086578,
0.06317798048257828,
0.04548247903585434,
0.02669895999133587,
0.07347401976585388,
-0.022328505292534828,
-0.014998892322182655,
0.014983482658863068,
0.02916972152888775,
-0.012807071208953857,
0.013892089016735554,
0.040046803653240204,
-0.07276686280965805,
-0.0393575094640255,
-0.12012948840856552,
0.05796608701348305,
-0.03688284754753113,
-0.03194408118724823,
-0.05532803758978844,
-0.08512753248214722,
0.03776773065328598,
0.03142679110169411,
-0.011975347064435482,
-0.006574350409209728,
0.03984597697854042,
-0.011506432667374611,
0.025169171392917633,
0.03294892981648445,
-0.033645085990428925,
-0.07586321234703064,
-0.08271069079637527,
0.05916494503617287,
-0.061493001878261566,
-0.06387007981538773,
-0.07038646936416626,
0.011053189635276794,
-0.05233803763985634,
0.01833960972726345,
-0.05452482029795647,
0.12131542712450027,
0.15147621929645538,
0.17403258383274078,
0.11555517464876175,
0.15434673428535461,
0.041722241789102554,
0.08127862960100174,
0.07698699831962585,
0.07794239372015,
0.037016674876213074,
0.0057306475937366486,
-0.03448743000626564,
-0.0014726183144375682,
-0.036584045737981796,
-0.13146065175533295,
-0.27752962708473206,
-0.16265368461608887,
-0.08125890791416168,
-0.10384954512119293,
0.029820650815963745,
-0.0345100462436676,
0.01345772109925747,
0.042058542370796204,
-0.010958991013467312,
0.006238526199012995,
0.17524489760398865,
0.12484277039766312,
0.020506685599684715,
0.13442227244377136,
0.1291682869195938,
0.031738054007291794,
-0.03455708175897598,
-0.004130806308239698,
0.03516334295272827,
-0.016164716333150864,
-0.11707044392824173,
0.0005889752064831555,
-0.050147734582424164,
0.08240598440170288,
0.13434571027755737,
0.06828271597623825,
-0.020968228578567505,
-0.09997355192899704,
0.06109344959259033,
0.047016385942697525,
0.05521082505583763,
-0.0616743229329586,
-0.043915681540966034,
0.015711959451436996,
0.044239602982997894,
0.012352501042187214,
-0.006401545833796263,
0.04342058673501015,
-0.08564119040966034,
-0.04538246989250183,
-0.07263337075710297,
0.05940711498260498,
0.12714460492134094,
-0.038889527320861816,
-0.13872750103473663,
-0.06373193860054016,
0.07672600448131561,
0.039590343832969666,
0.06835154443979263,
0.04946763813495636,
0.04870766028761864,
0.008676769211888313,
-0.04662882909178734,
-0.055817969143390656,
-0.06106121093034744,
-0.08617106825113297,
-0.11711303144693375,
0.04172934964299202,
0.02476356364786625,
-0.02220671810209751,
-0.1253839135169983,
-0.12801869213581085,
-0.007113088853657246,
-0.022032687440514565,
0.012607608921825886,
0.12145701050758362,
-0.08534719794988632,
-0.0574105829000473,
0.034456901252269745,
0.030633239075541496,
0.0704464241862297,
0.0008782705408520997,
-0.02749662846326828,
0.10166409611701965,
0.0005861416575498879,
-0.1288454234600067,
0.01565256528556347,
-0.011376525275409222,
0.05863044783473015,
-0.07750333100557327,
-0.07098596543073654,
0.0556679330766201,
-0.08938295394182205,
-0.09484371542930603,
-0.03329216688871384,
-0.019901840016245842,
-0.029023507609963417,
0.04097091779112816,
0.03226354345679283,
0.06761300563812256,
0.03766287490725517,
0.07654696702957153,
0.06464672088623047,
-0.06143442168831825,
-0.038125697523355484,
0.03218337148427963,
-0.030584212392568588,
0.017067622393369675,
-0.024066569283604622,
0.005955090746283531,
-0.08168972283601761,
0.043475549668073654,
0.10242205113172531,
-0.006966849789023399,
-0.05876355990767479,
-0.22453604638576508,
-0.030321864411234856,
-0.13506163656711578,
-0.11473371088504791,
-0.13762551546096802,
-0.12222453951835632,
-0.11654919385910034,
-0.0865265354514122,
-0.03805062547326088,
-0.018761543557047844,
0.21131537854671478,
0.04259072244167328,
-0.0047914874739944935,
0.07108692824840546,
0.0801147073507309,
0.14852090179920197,
0.007344051729887724,
-0.023397715762257576,
0.10432184487581253,
0.06192271411418915,
0.14499244093894958,
-0.003936355002224445,
0.042094990611076355,
0.10509506613016129,
0.07345685362815857,
0.12333612143993378,
-0.03638860955834389,
-0.07154078781604767,
0.0010102837113663554,
0.1219794824719429,
0.12721867859363556,
0.050887394696474075,
-0.004839984700083733,
-0.03157401829957962,
0.00075558852404356,
-0.06804681569337845,
-0.000740319665055722,
0.09235846251249313,
0.014065755531191826,
0.0486442856490612,
-0.057401131838560104,
-0.1345679610967636,
-0.07914260029792786,
-0.040652092546224594,
-0.018461773172020912,
-0.11930011957883835,
0.022651847451925278,
0.021243836730718613,
-0.11587069183588028,
-0.06928082555532455,
-0.1389157474040985,
0.22194434702396393,
0.11016176640987396,
-0.1097957119345665,
-0.20018279552459717,
-0.079282745718956,
0.1575886607170105,
0.084029920399189,
-0.02876860648393631,
0.08942168951034546,
0.23413361608982086,
0.04409787058830261,
0.05521569773554802,
-0.10165662318468094,
-0.04920559376478195,
0.129214346408844,
0.023801393806934357,
-0.03210870176553726,
0.17139635980129242,
-0.05322172865271568,
-0.04329344630241394,
0.07924456894397736,
-0.0014984303852543235,
0.09327548742294312,
-0.007865052670240402,
-0.08886508643627167,
0.0020556326489895582,
-0.04776827618479729,
-0.08509326726198196,
-0.10049689561128616,
0.008647450245916843,
-0.14190778136253357,
-0.14110210537910461,
-0.14388523995876312,
-0.11947976797819138,
-0.0004131333262193948,
0.012884209863841534,
-0.021325241774320602,
0.004854871425777674,
0.04544110596179962,
0.15133310854434967,
-0.005667803809046745,
-0.012110725976526737,
-0.005016520619392395,
-0.02955971099436283,
0.0077667925506830215,
0.1369430422782898,
0.05418263003230095,
0.04931776598095894,
-0.12425566464662552,
-0.0950106754899025,
0.14284968376159668,
0.14245879650115967,
0.06303936243057251,
-0.07690969854593277,
-0.19955240190029144,
-0.047473784536123276,
-0.034725796431303024,
0.001478175399824977,
-0.011751298792660236,
0.10973756015300751,
-0.0005965331802144647,
0.056957706809043884,
0.07071041315793991,
0.06043413281440735,
0.07511682063341141,
0.00896345917135477,
-0.03583984076976776,
-0.03716911002993584,
-0.18864452838897705,
-0.24939888715744019,
0.08384622633457184,
0.08653964847326279,
0.03430686891078949,
-0.052673179656267166,
-0.1300947070121765,
0.025171803310513496,
-0.02651037648320198,
-0.029087044298648834,
0.04169844463467598,
0.1329682171344757,
-0.026893652975559235,
0.026332685723900795,
0.019138582050800323,
0.054314833134412766,
0.06475551426410675,
0.05943199247121811,
-0.025239961221814156,
-0.06893528997898102,
-0.05405452102422714,
0.0056386468932032585,
-0.1155887320637703,
-0.02549031935632229,
0.0007614950300194323,
0.06416811048984528,
0.0075747789815068245,
-0.048065390437841415,
-0.04183514788746834,
0.07132815569639206,
0.07231508195400238,
0.10595456510782242,
0.019411861896514893,
-0.12450634688138962,
0.06655308604240417,
0.08937927335500717,
0.055744871497154236,
0.07976215332746506,
-0.03495483100414276,
0.01934812404215336,
0.04035928100347519,
0.03183753788471222,
0.03533923253417015,
0.07316123694181442,
-0.054040588438510895,
0.020554954186081886,
-0.030903158709406853,
-0.06251224130392075,
-0.07587213069200516,
-0.0692441463470459,
-0.10772325098514557,
-0.19518236815929413,
-0.021589789539575577,
-0.08251767605543137,
0.004673565737903118,
-0.03492814302444458,
0.06804335862398148,
0.08230774849653244,
-0.008931802585721016,
0.011183960363268852,
0.1177060455083847,
0.1318403035402298,
0.04835299775004387,
-0.0373661071062088,
0.06221397966146469,
0.16947516798973083,
0.054392702877521515,
0.055941224098205566,
0.06362556666135788,
0.0038572135381400585,
-0.055543601512908936,
-0.01578618213534355,
0.12030401080846786,
0.13729095458984375,
-0.08295888453722,
-0.12210220098495483,
-0.1378726363182068,
0.05343478173017502,
0.1731509417295456,
0.011390873230993748,
-0.14910009503364563,
-0.18577289581298828,
-0.03848382830619812,
0.07477260380983353,
-0.10710752010345459,
-0.1026759222149849,
-0.14547337591648102,
-0.12453200668096542,
-0.05179367959499359,
0.028004538267850876,
-0.05184214562177658,
0.10896655172109604,
-0.14363980293273926,
-0.02321983128786087,
0.019623056054115295,
-0.006113801151514053,
0.07223927229642868,
0.03283441439270973,
-0.010051332414150238,
0.030953358858823776,
-0.041880954056978226,
-0.048019085079431534,
0.053808584809303284,
0.08668901026248932,
0.025594668462872505,
-0.02019098959863186,
-0.08303333818912506,
0.00811692513525486,
0.026977071538567543,
0.187836155295372,
0.009790707379579544,
0.014169067144393921,
0.008981859311461449,
0.06812267750501633,
0.12553639709949493,
0.0532967783510685,
-0.04009513929486275,
0.08456730842590332,
0.15081198513507843,
0.057759903371334076,
-0.10856687277555466,
-0.055734846740961075,
-0.01625809632241726,
0.009859793819487095,
-0.011689599603414536,
-0.10846215486526489,
-0.10052856802940369,
0.02026042900979519,
-0.036392293870449066,
0.015094651840627193,
-0.10257530212402344,
-0.045702382922172546,
0.010951695963740349,
0.0030936195980757475,
0.004724766127765179,
0.006569914054125547,
0.013074633665382862,
0.0758255273103714,
0.0940423384308815,
-0.005432067438960075,
0.14193220436573029,
0.1646822839975357,
-0.040369048714637756,
-0.006311691831797361,
-0.03682472184300423,
0.01886455900967121,
0.010467098094522953,
0.008673065342009068,
-0.023441698402166367,
0.025903895497322083,
-0.008327603340148926,
0.08957989513874054,
0.05180955305695534,
0.09794431924819946,
-0.00737627362832427,
0.04953785613179207,
-0.09305647015571594,
0.11168716102838516,
0.07599767297506332,
0.18817509710788727,
0.044866230338811874,
-0.10218440741300583,
-0.09488373249769211,
0.00395922502502799,
-0.02487368881702423,
0.052404556423425674,
0.010622437112033367,
-0.1125544086098671,
0.02657357230782509,
0.0327320322394371,
0.02035796083509922,
0.08144904673099518,
-0.12888312339782715,
-0.04768320918083191,
-0.026873504742980003,
-0.06372561305761337,
-0.10547208040952682,
0.15973402559757233,
0.12195225059986115,
0.027048585936427116,
0.0755329355597496,
-0.06759481877088547,
0.18828344345092773,
0.06488798558712006,
-0.058134499937295914,
-0.00545923039317131,
0.015594213269650936,
0.10200102627277374,
-0.1088920384645462,
0.04869168624281883,
0.04340998828411102,
0.082134909927845,
-0.026048626750707626,
-0.08636756241321564,
-0.018780821934342384,
0.10286450386047363,
-0.0034543585497885942,
-0.04968000203371048,
-0.07934243232011795,
-0.011842588894069195,
0.07945289462804794,
0.006083344109356403,
-0.027184123173356056,
-0.06998013705015182,
0.009577854536473751,
0.028728695586323738,
0.015854820609092712,
-0.0034937760792672634,
-0.04153986647725105,
-0.08089303225278854,
-0.026949603110551834,
-0.0011331442510709167,
-0.030187955126166344,
-0.009714358486235142,
-0.08242745697498322,
0.004592541139572859,
0.013187109492719173,
0.0275370292365551,
0.03415048122406006,
-0.00843903236091137,
-0.04781251400709152,
-0.00814133696258068,
-0.22825366258621216,
-0.11692460626363754,
-0.034012775868177414,
-0.05262810364365578,
-0.017194362357258797,
0.14110445976257324,
0.01419204380363226,
-0.05172001197934151,
-0.1235295981168747,
0.05058565363287926,
0.013167754746973515,
0.11372505873441696,
-0.08659745752811432,
-0.04620319977402687,
-0.09755895286798477,
0.02488609589636326,
-0.04357645660638809,
0.08324826508760452,
0.0305170975625515,
0.13331586122512817,
-0.011396195739507675,
0.008363699540495872,
0.07150987535715103,
-0.0897790789604187,
0.15341369807720184,
-0.06405710428953171,
0.15043550729751587,
0.1686621457338333,
0.09201501309871674,
0.01980690099298954,
-0.000896395358722657,
0.17803974449634552,
0.015430045314133167,
-0.0032420975621789694,
-0.05890529230237007,
-0.04764457046985626,
-0.09467265009880066,
0.000654353410936892,
0.09125081449747086,
0.0360616073012352,
-0.028278807178139687,
0.008575876243412495,
0.1010209321975708,
0.1040816679596901,
0.02767707221210003,
0.029057499021291733,
-0.013646287843585014,
-0.08389641344547272,
-0.013591713272035122,
-0.00590556301176548,
0.005459578242152929,
-0.015775086358189583,
0.0878434032201767,
0.004115504212677479,
0.027448222041130066,
-0.06032547727227211,
-0.15223920345306396,
-0.1323126256465912,
-0.04236462712287903,
-0.11703929305076599,
-0.055205971002578735,
-0.017557421699166298,
0.06377405673265457,
-0.06724579632282257,
-0.03508301079273224,
0.05521691218018532,
0.11842469871044159,
0.21111132204532623,
-0.06808359175920486,
-0.0591621994972229,
0.042210351675748825,
0.06273596733808517,
0.10554260015487671,
0.0485595278441906,
0.06819680333137512,
0.05514416843652725,
0.023699825629591942,
-0.023444833233952522,
-0.029982561245560646,
0.05836498364806175,
-0.04223005846142769,
-0.13988235592842102,
-0.013021343387663364,
-0.08149652928113937,
0.07529595494270325,
0.012940161861479282,
-0.10457868129014969,
-0.15994864702224731,
-0.10883505642414093,
-0.034114331007003784,
0.07364532351493835,
0.048749130219221115,
0.04344842582941055,
-0.07145001739263535,
0.015477885492146015,
0.108709417283535,
0.0933273658156395,
-0.05233636870980263,
-0.1139882504940033,
0.0082467095926404,
0.021397273987531662,
0.02516539953649044,
0.021782267838716507,
-0.02460714615881443,
-0.03529384359717369,
0.12810304760932922,
0.15007448196411133,
0.050244949758052826,
-0.12068153917789459,
-0.1856113076210022,
0.08227765560150146,
-0.009071074426174164,
-0.04517907649278641,
0.12057266384363174,
0.10126399248838425,
-0.11600751429796219,
-0.014892608858644962,
0.08161159604787827,
-0.07645290344953537,
0.05973716825246811,
-0.0470934621989727,
-0.09203137457370758,
-0.021453695371747017,
0.040074724704027176,
0.09359478205442429,
-0.026948079466819763,
0.11435984820127487,
0.08424343913793564,
0.036241285502910614,
0.0026766923256218433,
-0.1430894136428833,
-0.18041940033435822,
0.024561164900660515,
0.12228778004646301,
0.032390836626291275,
-0.03545607998967171,
0.11500156670808792,
0.03198781982064247,
0.030146723613142967,
-0.10171407461166382,
0.04499061033129692,
0.05873580276966095,
0.14848865568637848,
0.030032556504011154,
-0.1127307340502739,
0.03965551406145096,
0.18979738652706146,
0.16364720463752747,
0.06742573529481888,
0.038627658039331436,
0.09999963641166687,
0.09206628799438477,
-0.05207260325551033,
-0.06681133806705475,
0.11129765212535858,
0.07416762411594391,
0.0075163147412240505,
-0.04195744916796684,
0.02908005192875862,
-0.02357359603047371,
-0.20655594766139984,
-0.15217846632003784,
0.006699929945170879,
-0.04583194851875305,
0.02289913408458233,
-0.1271883249282837,
0.06008210405707359,
-0.006264062598347664,
0.055982157588005066,
0.03659822791814804,
0.11991588771343231,
0.08813100308179855,
0.08958710730075836,
0.02578730694949627,
-0.05975336208939552,
0.16581951081752777,
0.13502532243728638,
0.08889998495578766,
0.07009389996528625,
-0.08983959257602692,
0.16993410885334015,
0.03781040385365486,
0.011764805763959885,
-0.13787387311458588,
-0.1206187978386879,
-0.0007718270644545555,
-0.022992942482233047,
0.05806642770767212,
-0.004786726087331772,
-0.02260660007596016,
-0.002935205353423953,
0.01719684526324272,
0.024053778499364853,
0.007825009524822235,
0.033622901886701584,
0.015693258494138718,
-0.09552086144685745,
-0.048087041825056076,
-0.010236755944788456,
-0.0130757512524724,
-0.017772236838936806,
0.03655379265546799,
-0.07596315443515778,
-0.03554629161953926,
0.056104667484760284,
0.04383821412920952,
-0.05742400139570236,
0.019949229434132576,
-0.03422916308045387,
-0.059862252324819565,
-0.003001068253070116,
-0.06684403866529465,
-0.0726122334599495,
-0.034309469163417816,
0.09104671329259872,
0.030371740460395813,
-0.0895523652434349,
-0.022305691614747047,
0.019359391182661057,
-0.022683514282107353,
-0.06475843489170074,
-0.05831672623753548,
-0.14210818707942963,
-0.07905920594930649,
0.020096944645047188,
0.06449136137962341,
0.030616143718361855,
-0.12604446709156036,
0.004282817244529724,
0.03425884619355202,
0.1465548872947693,
0.12416291981935501,
0.06635578721761703,
-0.06682382524013519,
-0.13330909609794617,
0.058718401938676834,
-0.03964764252305031,
-0.08514493703842163,
0.003955570049583912,
0.08160371333360672,
-0.09902051836252213,
-0.08148613572120667,
0.04825461283326149,
-0.006068218033760786,
0.05576399341225624,
0.02924731932580471,
0.06478574126958847,
-0.08464769273996353,
-0.01929888315498829,
0.018086109310388565,
0.08638068288564682,
0.02682465873658657,
-0.023809541016817093,
0.007005323190242052,
-0.049351081252098083,
-0.12129464000463486,
-0.15878374874591827,
-0.11927254498004913,
-0.05216936767101288,
-0.026308920234441757,
-0.11030904203653336,
-0.04062100872397423,
-0.03404675051569939,
-0.0505814403295517,
-0.07651117444038391,
0.04847197234630585,
-0.03166089206933975,
0.06157875433564186,
0.020863208919763565,
-0.07171747833490372,
0.05761784687638283,
0.02236657589673996,
0.11993071436882019,
0.09637583047151566,
0.06240706145763397,
0.20877835154533386,
0.12097469717264175,
-0.14485526084899902,
0.021403739228844643,
-0.001580474665388465,
0.18401286005973816,
-0.12585313618183136,
-0.11868353933095932,
-0.0041858116164803505,
0.04757387563586235,
-0.04274684935808182,
-0.07462863624095917,
-0.17942063510417938,
0.03956649824976921,
0.022997722029685974,
-0.0720820352435112,
-0.11788791418075562,
-0.05364686995744705,
-0.07312113791704178,
0.008472536690533161,
0.09950151294469833,
-0.031001295894384384,
0.02043376863002777,
-0.14696812629699707,
-0.10189924389123917,
-0.053476061671972275,
0.01639510877430439,
-0.016269002109766006,
-0.0616527795791626,
-0.12735432386398315,
-0.04188895598053932,
0.022411586716771126,
-0.04675814136862755,
-0.06776807457208633,
-0.056145064532756805,
0.11560200899839401,
0.030310943722724915,
0.005537595134228468,
0.03569571301341057,
-0.040278125554323196,
-0.04411100223660469,
0.07319774478673935,
-0.040084000676870346,
0.014557699672877789,
0.09314741939306259,
0.029028836637735367,
-0.07983600348234177,
0.00994627270847559,
-0.01424842607229948,
0.07720179855823517,
-0.061514511704444885,
-0.04794914275407791,
-0.052465200424194336,
-0.06328422576189041,
-0.0037558223120868206,
0.032026760280132294,
0.0048584057949483395,
-0.09621334075927734,
0.0010612664045765996,
-0.0036051697097718716,
0.0032966886647045612,
-0.14304980635643005,
-0.2679246962070465,
-0.14291372895240784,
-0.07684678584337234,
-0.09476704895496368,
-0.04273903742432594,
0.024163033813238144,
-0.05461281165480614,
0.03452768176794052,
0.1074349656701088,
0.09569352120161057,
-0.024525320157408714,
0.029348133131861687,
0.03217511251568794,
0.002336811274290085,
-0.033533480018377304,
-0.01186901330947876,
-0.08269286900758743,
0.14671075344085693,
0.1283426582813263,
0.10967875272035599,
-0.016193347051739693,
0.020165743306279182,
0.010360164567828178,
0.05802608281373978,
0.06429728120565414,
-0.05959964171051979,
0.03182414919137955,
-0.019078586250543594,
-0.032800108194351196,
-0.0684456005692482,
-0.11961785703897476,
0.028549563139677048,
0.045450836420059204,
-0.012753663584589958,
-0.06533317267894745,
0.044056348502635956,
0.06984232366085052,
-0.0079193701967597,
-0.0072847711853682995,
0.05008986219763756,
0.012718918733298779,
-0.021806810051202774,
-0.09317322820425034,
-0.04399888962507248,
-0.023628680035471916,
0.12692567706108093,
0.022971291095018387,
-0.07883822917938232,
0.012858953326940536,
-0.0910489410161972,
-0.041886501014232635,
0.06370344012975693,
-0.049282293766736984,
-0.07843200117349625,
-0.005504317115992308,
-0.14666156470775604,
0.0800643190741539,
-0.06621961295604706,
-0.02864096686244011,
0.03576996549963951,
-0.043328914791345596,
-0.028738785535097122,
0.01851111836731434,
-0.11426057666540146,
-0.14906536042690277,
-0.054194483906030655,
-0.12079977989196777,
-0.1398496776819229,
0.03087933361530304,
0.06653086096048355,
-0.03618732839822769,
-0.05928844213485718,
0.10089842230081558,
0.09354300796985626,
0.06176667660474777,
-0.05540648475289345,
-0.048025328665971756,
-0.025884179398417473,
0.10206438601016998,
0.06408710032701492,
-0.014132099226117134,
-0.05549289286136627,
0.1337171047925949,
0.045143529772758484,
0.12026584893465042,
0.03313383460044861,
-0.09692057222127914,
0.10617543011903763,
0.023098468780517578,
0.029057186096906662,
-0.040804021060466766,
0.015215459279716015,
0.10964513570070267,
0.0002002834517043084,
0.0537540465593338,
-0.07001052796840668,
-0.0008514391374774277,
-0.020571796223521233,
-0.003699690103530884,
0.018078522756695747,
-0.011372605338692665,
0.08392500132322311,
-0.0006149795954115689,
0.051474690437316895,
-0.0694935992360115,
0.13564538955688477,
0.08621871471405029,
-0.066234290599823,
-0.006472503300756216,
-0.12278717756271362,
-0.09224650263786316,
0.06385061889886856,
0.0651058629155159,
0.032395776361227036,
-0.005143978167325258,
-0.05305098369717598,
0.015785589814186096,
0.11144585907459259,
-0.04956429451704025,
-0.19242633879184723,
-0.14474810659885406,
-0.1333046406507492,
0.060587819665670395,
0.018447207286953926,
0.12763968110084534,
0.10072872787714005,
0.0025543426163494587,
-0.13028854131698608,
0.18906426429748535,
0.1898949146270752,
0.18002194166183472,
0.01848849281668663,
-0.14472128450870514,
0.06562621891498566,
0.010742571204900742,
-0.04487454891204834,
-0.005566493142396212,
0.0038373868446797132,
0.021159043535590172,
0.008807618170976639,
0.11055092513561249,
0.10498098284006119,
-0.03249785676598549,
-0.0869707316160202,
-0.015285734087228775,
0.005071727558970451,
0.030082399025559425,
-0.0007753570098429918,
0.01781632751226425,
-0.06760026514530182,
-0.058111388236284256,
-0.006027493160218,
-0.006783758755773306,
-0.07469813525676727,
0.01922963187098503,
-0.012863299809396267,
0.10194738954305649,
-0.01725870743393898,
-0.10756810009479523,
0.030419910326600075,
0.07393242418766022,
0.08424270898103714,
0.09585461765527725,
0.08621779084205627,
-0.0077307200990617275,
0.05327949672937393,
-0.001162484404630959,
0.007057518232613802,
0.041345614939928055,
0.049667131155729294,
-0.02918093092739582,
-0.07949211448431015,
-0.07509341090917587,
0.049278926104307175,
-0.08122696727514267,
-0.05295207351446152,
0.1397344321012497,
0.06408114731311798,
-0.13442540168762207,
-0.06722267717123032,
-0.06350456923246384,
-0.04128092899918556,
-0.016521872952580452,
0.020914481952786446,
-0.014153956435620785,
-0.05190719664096832,
0.021835749968886375,
0.0861123651266098,
0.0006127670640125871,
0.07765332609415054,
-0.04588239639997482,
0.04567308351397514,
0.13318097591400146,
-0.1388450562953949,
-0.051103200763463974,
-0.052292197942733765,
-0.060144420713186264,
-0.009510548785328865,
0.021148161962628365,
0.1034376248717308,
0.01928403414785862,
-0.061628032475709915,
-0.19718168675899506,
0.15945084393024445,
0.012896799482405186,
0.07962892949581146,
-0.0017911684699356556,
-0.09481459856033325,
0.03187158703804016,
-0.062340252101421356,
0.03023672290146351,
0.15543566644191742,
0.04954567924141884,
-0.031226251274347305,
0.06665758788585663,
0.03936922177672386,
-0.008082149550318718,
0.09875991195440292,
0.026636485010385513,
-0.05250886082649231,
-0.05346757546067238,
0.08758237957954407,
0.11461427062749863,
-0.2584109604358673,
-0.11139164119958878,
0.043461836874485016,
-0.004851864650845528,
0.11165269464254379,
0.07827247679233551,
0.029801206663250923,
0.09718649089336395,
0.007919407449662685,
-0.09306181222200394,
0.16814009845256805,
0.0877566859126091,
0.0395757295191288,
-0.08385813236236572,
-0.15960517525672913,
0.08524943888187408,
0.007560159079730511,
-0.018027810379862785,
0.11644265800714493,
0.05852042883634567,
0.0071783713065087795,
-0.014394648373126984,
0.007187585812062025,
0.020875534042716026,
0.11247478425502777,
-0.0063336193561553955,
-0.022804293781518936,
0.04012264311313629,
-0.05477115139365196,
-0.03155860677361488,
-0.00029800806078128517,
-0.08570986986160278,
0.02831318974494934,
-0.05749702453613281,
-0.011577301658689976,
-0.016025878489017487,
0.037036266177892685,
-0.009790729731321335,
-0.03141472116112709,
0.00019058458565268666,
0.10484302788972855,
0.047018107026815414,
0.12768672406673431,
-0.02828310802578926,
-0.0672253966331482,
0.09058509021997452,
0.09651163965463638,
0.1087379977107048,
0.028593653813004494,
-0.07040946930646896,
0.06079968810081482,
-0.0318627655506134,
-0.037883780896663666,
0.05706341564655304,
-0.013949465937912464,
-0.035654619336128235,
-0.03215036913752556,
0.09144372493028641,
0.017307408154010773,
-0.03362218663096428,
-0.07780253142118454,
0.0854131430387497,
0.07825441658496857,
-0.0078743202611804,
-0.08935908228158951,
-0.15714381635189056,
-0.01722589135169983,
-0.013052379712462425,
-0.0054754349403083324,
0.058704178780317307,
0.08425800502300262,
0.14611726999282837,
0.06360525637865067,
0.013220942579209805,
-0.004807733930647373,
0.0043556164018809795,
0.02980201132595539,
-0.04954620078206062,
-0.04843343794345856,
-0.04937024042010307,
-0.11065005511045456,
-0.1880268156528473,
0.003154348349198699,
0.08736471086740494,
0.012863142415881157,
0.0032032064627856016,
0.06451911479234695,
-0.0018380063120275736,
0.0010870700934901834,
-0.07169876992702484,
0.014905311167240143,
-0.1493421047925949,
-0.07938416302204132,
-0.005275961011648178,
0.05126197636127472,
-0.10262566059827805,
-0.1629057228565216,
-0.06961867213249207,
0.026568647474050522,
0.04267657920718193,
0.011385935358703136,
-0.019952917471528053,
0.019736550748348236,
0.019829101860523224,
0.006992518436163664,
0.20077656209468842,
0.15432608127593994,
0.14011360704898834,
0.09978603571653366,
-0.1169271320104599,
0.06545457988977432,
0.1141616627573967,
0.09996052086353302,
0.0397108718752861,
-0.0788036584854126,
0.023681161925196648,
0.0792679414153099,
-0.00981350801885128,
0.11776181310415268,
0.05492405965924263,
-0.004234521649777889,
-0.07979148626327515,
-0.13130250573158264,
0.07989834994077682,
0.113393634557724,
-0.06978975981473923,
-0.11419246345758438,
-0.1375409960746765,
0.06237558647990227,
-0.019566833972930908,
-0.024266168475151062,
-0.05108380690217018,
0.056517280638217926,
-0.0803476870059967,
-0.0642462819814682,
0.09003940969705582,
0.15100723505020142,
0.07213331013917923,
-0.15953710675239563,
-0.07682133466005325,
-0.09048614650964737,
-0.11821909993886948,
-0.10272980481386185,
-0.04789990931749344,
-0.019046751782298088,
-0.08705310523509979,
0.023563319817185402,
-0.03001350536942482,
0.04179854691028595,
0.0006115883006714284,
0.17330005764961243,
0.10704341530799866,
0.11101465672254562,
0.07431161403656006,
0.004265857860445976,
0.03457373008131981,
-0.05749519541859627,
0.042150385677814484,
-0.05574468895792961,
0.07292868196964264,
0.0022929124534130096,
-0.11697017401456833,
-0.021040406078100204,
0.05577385053038597,
0.1683715283870697,
0.012047866359353065,
0.00707921851426363,
-0.035661883652210236,
0.013977635651826859,
-0.06403547525405884,
-0.09348110854625702,
-0.06217179074883461,
-0.13845054805278778,
0.03560676798224449,
0.07528804242610931,
-0.04176096245646477,
-0.1274900883436203,
-0.11339368671178818,
-0.05599381402134895,
0.04573812335729599,
0.04072806239128113,
0.15019875764846802,
0.15555405616760254,
0.06911532580852509,
-0.017449473962187767,
0.11180403083562851,
0.15293192863464355,
0.028093382716178894,
-0.014244171790778637,
-0.04555763304233551,
-0.06742817163467407,
-0.018175609409809113,
0.0009383453871123493,
-0.11619187146425247,
-0.05976580083370209,
0.04430842399597168,
0.013568484224379063,
-0.10935663431882858,
-0.010872408747673035,
0.025237876921892166,
0.05278206989169121,
-0.031710121780633926,
-0.11190423369407654,
-0.04589703306555748,
0.005174698308110237,
0.13564623892307281,
0.00487652188166976,
0.1025455966591835,
0.08059374988079071,
0.06679870933294296,
0.05584503710269928,
-0.11563841253519058,
-0.014309392310678959,
0.08008968830108643,
-0.10275020450353622,
-0.004199895542114973,
-0.008727500215172768,
0.09567641466856003,
0.1482710987329483,
0.007951193489134312,
-7.389811798930168e-05,
-0.08330939710140228,
0.07123854011297226,
0.033489640802145004,
0.021079638972878456,
-0.0010136549826711416,
-0.08983220905065536,
0.020700747147202492,
-0.02372695505619049,
-0.02713148295879364,
-0.06572501361370087,
-0.023054085671901703,
-0.02101787179708481,
0.01573057286441326,
0.025836793705821037,
0.00054542365251109,
-0.06226877123117447,
-0.10951414704322815,
-0.1516534388065338,
-0.014403513632714748,
-0.1582724153995514,
-0.048613280057907104,
-0.049020107835531235,
0.03318459540605545,
-0.01584780588746071,
0.09286561608314514,
-0.03913521766662598,
-0.059108834713697433,
0.04450736567378044,
-0.05521790683269501,
0.08732042461633682,
-0.014906595461070538,
0.026995960623025894,
0.07216747105121613,
-0.05230976641178131,
-0.021598614752292633,
0.05091463029384613,
-0.030267519876360893,
0.12855781614780426,
0.18865685164928436,
0.02552659809589386,
-0.1323080211877823,
-0.04613799974322319,
0.044662535190582275,
0.12915512919425964,
-0.09613361209630966,
0.12014100700616837,
0.13595715165138245,
0.07737023383378983,
-0.10279431194067001,
0.07998786121606827,
0.07226632535457611,
-0.019794905558228493,
-0.12151084095239639,
-0.009152248501777649,
-0.108896404504776,
-0.0034737871028482914,
0.061801765114068985,
-0.0005861106910742819,
-0.07680311053991318,
-0.08735617250204086,
-0.015557600185275078,
0.08019907027482986,
-0.047393549233675,
0.037998586893081665,
0.03708834946155548,
0.005357295274734497,
0.015739504247903824,
-0.04114636778831482,
0.030581526458263397,
-0.08368449658155441,
0.030212759971618652,
0.052129436284303665,
0.051270660012960434,
-0.05791010707616806,
-0.07933314144611359,
0.05451877787709236,
-0.0217867624014616,
-0.02126518078148365,
-0.10340329259634018,
-0.08980238437652588,
0.029603920876979828,
-0.028483552858233452,
-0.09732358157634735,
-0.05227178335189819,
-0.03473108634352684,
-0.08428674191236496,
0.0018301635282114148,
-0.10481034964323044,
0.014708315022289753,
0.09038139879703522,
0.07032822072505951,
0.10543935745954514,
0.12887559831142426,
0.16287308931350708,
0.08433747291564941,
-0.057013094425201416,
-0.0012787618907168508,
-0.005470226053148508,
0.0033971010707318783,
0.03685440868139267,
0.01548097375780344,
0.12326439470052719,
-0.0372738353908062,
0.11864292621612549,
-0.018605483695864677,
-0.0807289406657219,
0.000614990247413516,
0.001787045388482511,
0.10269877314567566,
0.09736092388629913,
-0.04704424366354942,
-0.07351407408714294,
-0.15879586338996887,
-0.12214329093694687,
0.05146380513906479,
0.10603231936693192,
-0.10429403930902481,
-0.12406755238771439,
-0.002501504495739937,
-0.11201727390289307,
-0.04562309384346008,
-0.00486263632774353,
0.03027503564953804,
-0.11491703242063522,
0.02605671063065529,
0.11839824914932251,
-0.05730980262160301,
-0.11311250180006027,
-0.26279217004776,
0.14537547528743744,
0.01814652420580387,
-0.03115091659128666,
0.0058080838061869144,
-0.00029391597490757704,
0.09250718355178833,
0.13944366574287415,
0.04571346193552017,
0.038947694003582,
0.13126419484615326,
-0.04142623767256737,
0.06360068172216415,
-0.0034637264907360077,
0.02978958934545517,
0.10625503957271576,
-0.039526671171188354,
0.09118756651878357,
0.16647914052009583,
0.012876486405730247,
-0.16065643727779388,
-0.11837819963693619,
0.012773933820426464,
0.1138252541422844,
0.11298872530460358,
0.015929171815514565,
0.03344505652785301,
0.04623117297887802,
0.08381876349449158,
-0.07026277482509613,
-0.18573075532913208,
-0.06594160199165344,
-0.02725842222571373,
0.01667836867272854,
0.041180651634931564,
-0.08895229548215866,
0.05624738335609436,
0.09059552103281021,
0.12545344233512878,
0.17439572513103485,
0.08634462207555771,
0.030784253031015396,
0.0791369304060936,
-0.034232743084430695,
0.005132240243256092,
-0.02081787772476673,
0.11358123272657394,
0.011721722781658173,
0.10584143549203873,
0.046567827463150024,
-0.07939667999744415,
0.11826004087924957,
0.009201006032526493,
-0.04092663899064064,
0.010400556959211826,
0.09040128439664841,
-0.0016625289572402835,
0.04917394369840622,
-0.02283431403338909,
-0.04429292678833008,
0.015053849667310715,
0.03406984731554985,
0.1380290687084198,
0.07419653981924057,
-0.06671501696109772,
-0.03152109310030937,
0.08562853932380676,
0.14202256500720978,
0.06992996484041214,
-0.07220374047756195,
-0.20163598656654358,
0.14326006174087524,
0.026243366301059723,
0.024927588179707527,
-0.1576380878686905,
-0.09102648496627808,
-0.05518089234828949,
-0.04353222995996475,
0.034195706248283386,
-0.03873993456363678,
0.03580889478325844,
0.00819501094520092,
0.02145385928452015,
0.021757623180747032,
0.04966183006763458,
0.05250585079193115,
0.014293674379587173,
-0.150026336312294,
-0.04144899174571037,
0.04584946483373642,
-0.019642334431409836,
0.007954980246722698,
0.00633486220613122,
0.0047265877947211266,
0.01121828518807888,
-0.0028104945085942745,
-0.017986154183745384,
-0.09648536890745163,
0.03594578057527542,
-0.010491234250366688,
-0.0025430088862776756,
-0.08262768387794495,
-0.19383522868156433,
0.029986510053277016,
-0.031284723430871964,
0.0060691554099321365,
-0.030654512345790863,
-0.04926575720310211,
0.026662176474928856,
0.01626783050596714,
0.030368052423000336,
0.05311566963791847,
-0.0962146744132042,
-0.18465974926948547,
-0.04970158636569977,
0.06232508271932602,
0.07665938138961792,
-0.02298649400472641,
-0.07882339507341385,
-0.06627151370048523,
-0.1268443614244461,
0.03737036883831024,
0.04117962345480919,
0.08078637719154358,
-0.16012446582317352,
-0.07888166606426239,
-0.0536947026848793,
-0.16807645559310913,
0.038131892681121826,
0.045460376888513565,
0.0694354772567749,
-0.015356016345322132,
-0.09008460491895676,
0.11965997517108917,
0.04441895708441734,
0.033405572175979614,
-0.01943189464509487,
0.016842585057020187,
-0.06566035002470016,
-0.09142915904521942,
0.0015960073797032237,
0.03981852903962135,
0.11684303730726242,
0.046452805399894714,
-0.11267347633838654,
-0.11699189245700836,
-0.06731631606817245,
0.04149025306105614,
0.02424558252096176,
0.01201891154050827,
-0.11549796909093857,
0.05084266886115074,
0.10463833808898926,
-0.06494103372097015,
-0.06457845121622086,
-0.046439867466688156,
-0.14428463578224182,
-0.013747038319706917,
-0.01376341562718153,
-0.03411311283707619,
0.07685960084199905,
0.017985844984650612,
-0.05188349261879921,
0.028419258072972298,
0.05910557135939598,
0.02167111076414585,
0.21800808608531952,
0.032305117696523666,
-0.051125142723321915,
0.02332272008061409,
-0.05933738872408867,
0.17430247366428375,
-0.001989126903936267,
-0.006296699866652489,
0.03309745341539383,
0.045855481177568436,
0.03660380467772484,
-0.09986093640327454,
-0.017111584544181824,
0.1002669408917427,
0.04512865096330643,
-0.09332489222288132,
-0.03916052728891373,
-0.011932826600968838,
-0.0038700157310813665,
-0.0024923523887991905,
0.09689763188362122,
-0.0448797345161438,
0.010002274066209793,
-0.04459195211529732,
-0.04837656021118164,
-0.05832522734999657,
-0.033789392560720444,
-0.0022182909306138754,
-0.03328954428434372,
-0.05834238603711128,
-0.003393169492483139,
0.031209483742713928,
-0.006577594205737114,
-0.10231910645961761,
-0.06858541816473007,
0.0601298063993454,
0.025835346430540085,
-0.012491718865931034,
-0.0191904678940773,
0.04834846034646034,
0.02375558763742447,
0.11007925868034363,
0.043042488396167755,
0.13908261060714722,
0.17881038784980774,
-0.013810532167553902,
0.016932794824242592,
0.013877391815185547,
0.07599955052137375,
-0.015112056396901608,
0.02861434780061245,
-0.08758657425642014,
-0.08383262157440186,
-0.011742792092263699,
0.06271734833717346,
0.10386231541633606,
0.039906978607177734,
0.01106416154652834,
0.15446868538856506,
0.02020266093313694,
0.07141144573688507,
0.0657196193933487,
0.006636008154600859,
0.048781659454107285,
0.1258925497531891,
-0.050873201340436935,
-0.060561928898096085,
-0.07822676002979279,
-0.10885506123304367,
-0.013515475206077099,
-0.026219798251986504,
0.08257810771465302,
0.021528910845518112,
0.04761989414691925,
0.006400842685252428,
0.06667084246873856,
-0.005738663952797651,
-0.030858516693115234,
0.035065241158008575,
0.16102224588394165,
-0.060139209032058716,
0.1298266351222992,
0.027962682768702507,
0.1377246379852295,
0.12529297173023224,
-0.020951438695192337,
0.07589126378297806,
0.0666988417506218,
0.08380481600761414,
-0.07942034304141998,
-0.09688998758792877,
-0.011519845575094223,
-0.08987441658973694,
0.03546106070280075,
0.04700271785259247,
0.037974074482917786,
-0.06586743891239166,
0.005662558134645224,
-0.024343909695744514,
0.10353143513202667,
-0.02818187326192856,
0.11001609265804291,
0.031924959272146225,
-0.024133501574397087,
-0.0976162999868393,
0.01887153647840023,
0.0090924222022295,
0.16224665939807892,
-0.019915061071515083,
-0.07095571607351303,
-0.059316445142030716,
-0.059710126370191574,
-0.010532612912356853,
0.014945286326110363,
-0.03915434703230858,
-0.05181003734469414,
-0.07117682695388794,
-0.056354016065597534,
-0.024583302438259125,
-0.026242991909384727,
-0.0855148658156395,
-0.013834912329912186,
0.04803316295146942,
0.07548996061086655,
0.08402186632156372,
-0.0663161426782608,
-0.040200114250183105,
-0.1060410737991333,
-0.07791423797607422,
-0.1732468158006668,
-0.041174788028001785,
0.013710908591747284,
0.06235472485423088,
0.06372842937707901,
0.02923085168004036,
0.20841245353221893,
-0.007438327185809612,
0.04260404035449028,
-0.037211719900369644,
0.10850019752979279,
0.07823242247104645,
0.050141170620918274,
-0.03541064262390137,
-0.07463867962360382,
0.036696016788482666,
0.06943323463201523,
0.05805724486708641,
0.0441141352057457,
-0.15223972499370575,
-0.017405111342668533,
-0.007633448112756014,
-0.01503542810678482,
-0.11154496669769287,
-0.05765805393457413,
0.02544093318283558,
-0.0433182492852211,
0.03940662741661072,
-0.017022885382175446,
0.09658542275428772,
0.05228924751281738,
-0.013742567040026188,
0.02547481469810009,
0.06490606814622879,
0.06105336919426918,
-0.02715526521205902,
-0.0007288524648174644,
-0.08446124196052551,
0.022327309474349022,
0.026740528643131256,
-0.014110900461673737,
0.015407739207148552,
-0.07358132302761078,
0.09712942689657211,
0.11002694815397263,
-0.03763807937502861,
0.051543500274419785,
0.013322832062840462,
-0.10325469076633453,
-0.01936504803597927,
0.11395406723022461,
-0.03889851272106171,
-0.12024939805269241,
-0.16701188683509827,
-0.10121718794107437,
0.11568410694599152,
0.06685788184404373,
0.1978723257780075,
0.10864796489477158,
0.11632804572582245,
-0.03716905787587166,
0.1455617994070053,
0.14205008745193481,
0.11556518822908401,
0.06418181955814362,
-0.1473398059606552,
0.009447080083191395,
-0.023005245253443718,
-0.1116490513086319,
-0.026507079601287842,
-0.03302236273884773,
-0.038642629981040955,
0.044143225997686386,
0.11985167115926743,
0.1326564997434616,
-0.0008895634091459215,
-0.04256663843989372,
0.022560013458132744,
-0.03498139977455139,
0.025268541648983955,
-0.05047953501343727,
-0.03293502330780029,
0.04519691690802574,
-0.09973733127117157,
-0.034318581223487854,
-0.01064737793058157,
-0.11110934615135193,
0.04033417999744415,
0.08733681589365005,
0.07084767520427704,
0.06466539949178696,
-0.08785638213157654,
-0.0755404382944107,
0.0776221826672554,
0.12120155245065689,
0.02729201689362526,
0.09567109495401382,
0.08293431252241135,
-2.0658566427300684e-05,
-0.04842261224985123,
0.09915274381637573,
-0.02037101238965988,
-0.10416713356971741,
-0.11584123224020004,
0.037111781537532806,
0.04582849144935608,
-0.09144384413957596,
-0.05772359296679497,
0.01806664653122425,
0.22253689169883728,
0.06383839249610901,
-0.011363962665200233,
-0.11240635812282562,
0.028844546526670456,
0.017163312062621117,
-0.06838758289813995,
0.11111801862716675,
-0.06432965397834778,
-0.011990495957434177,
0.021140631288290024,
-0.0029092312324792147,
0.09181356430053711,
0.04977686330676079,
-0.17114369571208954,
-0.02079789899289608,
0.17748099565505981,
0.013597098179161549,
-0.028030695393681526,
-0.09140635281801224,
-0.09191165119409561,
-0.02610510215163231,
0.09827667474746704,
0.0002636743593029678,
-0.04758238419890404,
-0.01298771146684885,
-0.024633251130580902,
0.08792893588542938,
0.015530988574028015,
0.05813019350171089,
0.06198577582836151,
-0.03420460969209671,
0.01461562979966402,
-0.12079958617687225,
-0.04728194326162338,
0.10465449094772339,
-0.040952637791633606,
-0.0523284487426281,
-0.054486654698848724,
0.030679602175951004,
0.014628417789936066,
-0.006450817920267582,
-0.01539650373160839,
-0.0017229528166353703,
-0.04356543719768524,
-0.07103979587554932,
0.05046047642827034,
-0.039535485208034515,
-0.0803416520357132,
-0.031369805335998535,
0.03197796642780304,
0.13720248639583588,
0.06746982783079147,
0.01799427531659603,
0.039463482797145844,
0.016164667904376984,
-0.00988735631108284,
0.07457869499921799,
-0.01736021228134632,
0.0318075530230999,
-0.06777272373437881,
-0.05528591573238373,
0.004169641062617302,
-0.05815545842051506,
0.007852447219192982,
0.08977057784795761,
0.17421503365039825,
-0.12065794318914413,
-0.054184477776288986,
0.03200279548764229,
0.13369542360305786,
0.24202267825603485,
-0.04108871519565582,
0.009601484052836895,
0.019431494176387787,
-0.03458898141980171,
-0.08563089370727539,
-0.01290784403681755,
-0.057140134274959564,
-0.040784623473882675,
-0.0887196958065033,
-0.1457342654466629,
-0.06152395159006119,
0.079107865691185,
0.03912181779742241,
0.006799974013119936,
-0.02644422836601734,
0.09014910459518433,
0.06229740381240845,
0.10569204390048981,
-0.003693531034514308,
-0.09190710633993149,
0.05403506010770798,
0.06198679283261299,
0.033658213913440704,
0.13586221635341644,
-0.019433163106441498,
-0.040093448013067245,
-0.07767843455076218,
0.020342865958809853,
-0.000813627673778683,
-0.06312622874975204,
-0.03774920105934143,
-0.010304496623575687,
0.04552699625492096,
-0.01349636446684599,
-0.04357007518410683,
-0.05996047705411911,
0.0805431678891182,
0.1267295479774475,
0.12711037695407867,
-0.14886270463466644,
-0.09002765268087387,
-0.0021870573982596397,
0.08797471225261688,
0.10212069004774094,
0.14793017506599426,
0.02826089784502983,
0.04724368080496788,
0.01870385743677616,
0.12144426256418228,
0.16245047748088837,
-0.03840620815753937,
0.04326847195625305,
-0.02309883013367653,
0.06356732547283173,
-0.06240455433726311,
-0.024629104882478714,
-0.0728316456079483,
0.016272811219096184,
0.0473882332444191,
-0.10023297369480133,
0.004580067470669746,
0.005880679469555616,
0.06392987072467804,
-0.00428028916940093,
-0.04562059044837952,
-0.029548995196819305,
-0.10875528305768967,
-0.007323090918362141,
-0.04694794490933418,
0.042881593108177185,
0.1094525009393692,
-0.06820603460073471,
-0.04329659789800644,
0.13737398386001587,
-0.0153385354205966,
0.010257371701300144,
0.009878933429718018,
0.08492141216993332,
0.1391274780035019,
0.11085329949855804,
0.17092593014240265,
0.15269117057323456,
0.10197348147630692,
0.10975433140993118,
-0.04055740684270859,
0.01673552580177784,
0.07071677595376968,
0.04833904653787613,
0.02563898079097271,
-0.1516188681125641,
-0.07801451534032822,
0.041049446910619736,
0.06677167862653732,
0.15586726367473602,
0.13916730880737305,
-0.09075622260570526,
0.01798694208264351,
-0.0619332455098629,
0.0325881727039814,
0.19884997606277466,
-0.024819349870085716,
0.05443964898586273,
-0.06339845806360245,
-0.05282978340983391,
0.04844725877046585,
0.08842989802360535,
0.016383038833737373,
-0.09238170087337494,
-0.10511714220046997,
-0.05262448638677597,
-0.021336901932954788,
-0.012959782965481281,
-0.024869296699762344,
-0.05314643308520317,
-0.05818694084882736,
0.07553054392337799,
-0.12008563429117203,
-0.08469583094120026,
-0.001622027368284762,
0.041149016469717026,
-0.06608488410711288,
-0.08167381584644318,
-0.001333520165644586,
0.012025787495076656,
0.12761031091213226,
0.11446262151002884,
0.04916203394532204,
0.12577952444553375,
0.07355024665594101,
0.02937433123588562,
0.03406068682670593,
-0.061618056148290634,
0.03542892634868622,
-0.08237230032682419,
-0.0660964772105217,
0.06372761726379395,
-0.034089501947164536,
-0.053993985056877136,
0.025740060955286026,
-0.0065426453948020935,
0.05776084586977959,
0.034393228590488434,
0.05836968868970871,
0.018119513988494873,
-0.10561105608940125,
-0.14697633683681488,
-0.08932249993085861,
-0.04831485450267792,
-0.0076948534697294235,
0.07026737183332443,
-0.03176039084792137,
-0.06883729994297028,
-0.04325484111905098,
-0.03579042851924896,
0.07357388734817505,
0.19409289956092834,
0.05879924073815346,
0.13427424430847168,
0.1232961118221283,
-0.12853212654590607,
0.06885667890310287,
0.05464906617999077,
-0.0660761371254921,
-0.020908623933792114,
-0.10922160744667053,
-0.007479423191398382,
-0.10700996965169907,
-0.0015809452161192894,
-0.03258737921714783,
-0.06810221821069717,
0.21268431842327118,
0.03204479441046715,
0.07239335030317307,
-0.022761249914765358,
-0.012864737771451473,
-0.021618345752358437,
-0.11437470465898514,
-0.02981756441295147,
0.036901116371154785,
-0.011846695095300674,
0.03850045055150986,
0.06774140149354935,
0.08771473169326782,
0.045512016862630844,
0.05031474679708481,
0.03751276060938835,
0.019889453426003456,
-0.03730195388197899,
0.02379828505218029,
-0.06909116357564926,
0.00516857672482729,
0.07695753872394562,
0.040383387356996536,
-0.000926630396861583,
0.04020038619637489,
0.011662967503070831,
0.07571911811828613,
-0.051629990339279175,
-0.08471029996871948,
0.0392899364233017,
-0.04564940556883812,
-0.030713897198438644,
0.1032034382224083,
0.03187619522213936,
-0.04221298173069954,
-0.0344395637512207,
-0.02313491515815258,
0.024238500744104385,
0.031345266848802567,
-0.0012018453562632203,
0.003550929017364979,
-0.06130841001868248,
0.014761088415980339,
-0.07539445161819458,
0.04927334561944008,
-0.08973629027605057,
0.029276765882968903,
-0.03215106576681137,
-0.052030254155397415,
0.03162159025669098,
0.16121767461299896,
0.16148439049720764,
0.058209262788295746,
-0.052230846136808395,
0.011093155480921268,
-0.16144701838493347,
-0.07401596009731293,
-0.003956486936658621,
0.04353999346494675,
-0.003553205169737339,
-0.14268110692501068,
-0.16870978474617004,
-0.044791098684072495,
-0.0746726244688034,
0.08335190266370773,
0.06174047291278839,
-0.07578564435243607,
-0.07971691340208054,
0.007132105063647032,
0.1271292269229889,
0.0024621321354061365,
0.05178374797105789,
0.11604234576225281,
0.1298637092113495,
-0.0008111478528007865,
0.06943202018737793,
0.09522000700235367,
-0.18638356029987335,
-0.07346679270267487,
0.02675401046872139,
-0.014467794448137283,
0.03864622488617897,
-0.01803453080356121,
-0.03156418353319168,
0.017902541905641556,
-0.0443463958799839,
0.16304929554462433,
0.11536845564842224,
0.010686068795621395,
-0.020767059177160263,
-0.0277218297123909,
-0.02674572728574276,
-0.033988770097494125,
-0.07760936766862869,
-0.030591385439038277,
-0.03988546133041382,
-0.06793463230133057,
0.05369093641638756,
0.02203156054019928,
0.009893708862364292,
-0.062470316886901855,
-0.09094519168138504,
-0.08259567618370056,
0.07793764770030975,
0.019367622211575508,
0.03415704518556595,
-0.05889783427119255,
-0.023573432117700577,
0.009498817846179008,
0.04470691457390785,
-0.07022491842508316,
-0.05076034367084503,
0.10908186435699463,
0.046111397445201874,
0.0804005041718483,
-0.04128352552652359,
0.06364870071411133,
0.07567282766103745,
0.06880418956279755,
0.14415109157562256,
-0.01098252646625042,
0.06054960936307907,
-0.05068124830722809,
-0.06515280157327652,
-0.051800988614559174,
0.015385767444968224,
-0.010155483148992062,
-0.034589577466249466,
0.025484755635261536,
0.03537433594465256,
0.010897442698478699,
0.06714611500501633,
-0.0031749054323881865,
0.054819684475660324,
-0.04207577556371689,
0.07920605689287186,
0.04092097282409668,
0.05425180494785309,
-0.036672428250312805,
-0.03695408254861832,
0.10511647909879684,
0.11781315505504608,
-0.0921381264925003,
-0.09383709728717804,
-0.0003814730152953416,
0.11476945132017136,
0.0733765959739685,
0.07725533843040466,
0.0007573840557597578,
0.0079656932502985,
0.07237283140420914,
0.08425601571798325,
0.049979064613580704,
-0.06775724142789841,
-0.026626024395227432,
0.0013711057836189866,
-0.0301585104316473,
-0.04660409316420555,
0.06987277418375015,
0.04490509256720543,
-0.05924040079116821,
0.04522986337542534,
0.08724599331617355,
0.10814221948385239,
0.03787779062986374,
-0.13147978484630585,
-0.1512536108493805,
-0.08378144353628159,
0.010787793435156345,
-0.0209350623190403,
-0.02325323410332203,
-0.020226415246725082,
0.0850268304347992,
0.010681269690394402,
0.028263619169592857,
-0.14208589494228363,
-0.050199903547763824,
0.04903190955519676,
0.0727401152253151,
0.0863027423620224,
0.15203198790550232,
0.20697028934955597,
0.03866954892873764,
0.009423116222023964,
0.01972789503633976,
-0.022670913487672806,
0.0723118707537651,
0.0055200024507939816,
-0.020873839035630226,
-0.0850011557340622,
-0.019388889893889427,
0.08908320963382721,
0.03993817791342735,
0.08045311272144318,
0.12094014883041382,
0.11361538618803024,
0.033842578530311584,
0.03323986008763313,
0.02098141796886921,
0.02162843942642212,
-0.04045497998595238,
-0.08145882189273834,
-0.02603503316640854,
0.14009737968444824,
-0.007059834897518158,
-0.03568026423454285,
-0.14772216975688934,
0.012626299634575844,
-0.08403698354959488,
-0.05122115835547447,
-0.0035003358498215675,
-0.06795810163021088,
-0.14359688758850098,
0.06061690300703049,
0.044725947082042694,
-0.027430642396211624,
-0.01896781474351883,
-0.02966228500008583,
-0.005407589487731457,
-0.0021341263782233,
0.03697996214032173,
0.07737159729003906,
0.0972529798746109,
0.037429943680763245,
-0.028157075867056847,
0.09333691000938416,
-0.05194475129246712,
0.030056266114115715,
-0.0746103972196579,
-0.022343814373016357,
-0.03112412430346012,
-0.05836351215839386,
0.029303912073373795,
0.038791362196207047,
0.006708879955112934,
0.13913807272911072,
0.10223621129989624,
-0.01569252833724022,
-0.08313225954771042,
0.05054324120283127,
0.06018361449241638,
-0.12458429485559464,
-0.06382980197668076,
-0.09552901238203049,
-0.09452781826257706,
0.025483768433332443,
0.1196410208940506,
-0.07802039384841919,
-0.02103222906589508,
-0.07664699107408524,
0.09569532424211502,
0.10553163290023804,
-0.04744208976626396,
-0.10118896514177322,
-0.06214636564254761,
-0.056909967213869095,
-0.007284282706677914,
-0.03736623376607895,
-0.05459842085838318,
0.09914986044168472,
0.07848330587148666,
0.0021305251866579056,
-0.041069358587265015,
-0.0493311882019043,
-0.07005033642053604,
0.08797956258058548,
0.049818284809589386,
-0.14688146114349365,
-0.11050256341695786,
-0.029005447402596474,
-0.03846726939082146,
0.11160199344158173,
0.012216512113809586,
-0.0073492517694830894,
-0.03787042945623398,
0.061623118817806244,
0.18676483631134033,
0.02424156479537487,
-0.13099807500839233,
-0.04768291115760803,
-0.09344659000635147,
-0.06934121996164322,
-0.14876623451709747,
-0.023265419527888298,
0.0015023172600194812,
-0.08207479864358902,
0.14369523525238037,
0.11509919166564941,
0.05883876979351044,
-0.026590559631586075,
-0.0035960713867098093,
0.1873982846736908,
-0.05946014076471329,
-0.05761178955435753,
-0.055621035397052765,
-0.024533847346901894,
-0.05287378653883934,
-0.0861862376332283,
-0.07262968271970749,
0.04373655095696449,
-0.07770222425460815,
-0.1590537130832672,
-0.05073339492082596,
-0.014798899181187153,
0.04827811196446419,
0.06722857058048248,
-0.06682779639959335,
-0.07594820857048035,
-0.11876749992370605,
0.008147417567670345,
-0.01632680557668209,
-0.17431925237178802,
-0.0990372821688652,
-0.01607203297317028,
0.10569694638252258,
-0.02243996225297451,
-0.10581611841917038,
-0.04647527635097504,
0.08499830216169357,
0.16530191898345947,
0.12705659866333008,
0.038653042167425156,
-0.0022996091283857822,
0.04763379693031311,
-0.10847826302051544,
-0.0606209933757782,
-0.09085888415575027,
-0.00907251425087452,
-0.09099898487329483,
-0.016878867521882057,
-0.10270252823829651,
-0.026680855080485344,
-0.13392838835716248,
0.06562913209199905,
-0.03324313089251518,
-0.007420364301651716,
0.023609953001141548,
0.0011149232741445303,
-0.0510127991437912,
-0.0650857463479042,
0.1470690667629242,
-0.12421934306621552,
-0.1554567515850067,
-0.10451138764619827,
-0.04986491799354553,
-0.11068069189786911,
0.01415498461574316,
-0.09222820401191711,
-0.032273318618535995,
-0.026861028745770454,
0.12000242620706558,
0.10053257644176483,
0.03398371487855911,
-0.012669908814132214,
-0.06327386200428009,
0.0688384622335434,
-0.02772170677781105,
0.057930633425712585,
0.07694469392299652,
0.0913466066122055,
-0.14753210544586182,
-0.04547715559601784,
-0.0538254976272583,
0.05858444795012474,
0.11188238114118576,
-0.013276984915137291,
-0.07430709898471832,
-0.04643275588750839,
0.02505485899746418,
0.04472878575325012,
0.03646596893668175,
0.04683138057589531,
0.03643682599067688,
-0.028073636814951897,
0.022877663373947144,
0.03410722315311432,
-0.02984289824962616,
-0.04792621731758118,
0.00853031687438488,
0.05163053050637245,
-0.010208887979388237,
-0.08264490216970444,
-0.20531761646270752,
-0.0281137153506279,
-0.11272608488798141,
-0.0555681474506855,
-0.07642337679862976,
-0.12422091513872147,
-0.1320611536502838,
0.0017704161582514644,
-0.056906808167696,
-0.0218888558447361,
-0.049479514360427856,
-0.02346653863787651,
0.009254125878214836,
0.006946112960577011,
-0.051469579339027405,
-0.005507666151970625,
-0.05147712677717209,
-0.014960167929530144,
-0.03481512516736984,
0.05843855440616608,
0.04496366158127785,
-0.01037884596735239,
-0.03223384544253349,
-0.1186400055885315,
-0.09627102315425873,
0.04093759134411812,
0.05892328917980194,
0.16360534727573395,
0.04743252694606781,
0.053690895438194275,
0.10834835469722748,
0.11696024239063263,
-0.026348618790507317,
-0.05472923070192337,
-0.006565276067703962,
0.11159107089042664,
-0.050723474472761154,
-0.21725234389305115,
-0.030408235266804695,
0.06041563302278519,
0.06170172989368439,
-0.04919575899839401,
-0.06307386606931686,
-0.06657791882753372,
0.08811310678720474,
0.2049373835325241,
0.06408178061246872,
-0.017782991752028465,
-0.12469720095396042,
-0.03642681613564491,
0.08610127121210098,
0.053448352962732315,
-0.02763288840651512,
-0.09980287402868271,
0.0035081340465694666,
-0.0005545364110730588,
0.05829022079706192,
-0.07691856473684311,
0.004013870842754841,
0.11097654700279236,
0.028622770681977272,
-0.10605531930923462,
0.036257512867450714,
0.041543737053871155,
-0.0013400194002315402,
-0.050669170916080475,
-0.037203870713710785,
-0.029863988980650902,
0.11366764456033707,
0.16450102627277374,
-0.033970147371292114,
-0.15710176527500153,
-0.055611174553632736,
-0.09334111958742142,
-0.028935106471180916,
-0.05799365043640137,
0.024591639637947083,
0.03047926165163517,
-0.2550071179866791,
-0.07172106206417084,
-0.07355640083551407,
0.034573547542095184,
0.1775515228509903,
-0.033791445195674896,
-0.012174100615084171,
0.04153792932629585,
0.002791099948808551,
0.11117829382419586,
-0.02713354490697384,
-0.006245655473321676,
-0.04226967692375183,
-0.09508060663938522,
-0.016209427267313004,
-0.049068085849285126,
0.046602487564086914,
-0.016339583322405815,
-0.10285431891679764,
-0.06629005074501038,
0.011463511735200882,
-0.07251135259866714,
-0.11790287494659424,
-0.020796973258256912,
-0.028922386467456818,
0.07405000925064087,
-0.04163503274321556,
0.01997310481965542,
0.13966479897499084,
-0.01465411577373743,
-0.01399267464876175,
-0.06187386438250542,
-0.14837108552455902,
0.01810072734951973,
-0.04955045133829117,
0.0032361475750803947,
0.003401766764000058,
-0.02320733480155468,
0.05715642869472504,
0.04041757062077522,
-0.012519084848463535,
-0.10743477195501328,
-0.06015212833881378,
-0.07862698286771774,
-0.16627366840839386,
0.02113638073205948,
0.04762350395321846,
-0.07590822875499725,
-0.09546402096748352,
-0.06446026265621185,
0.018676938489079475,
-0.032990772277116776,
-0.0015574749559164047,
0.036057014018297195,
0.15033632516860962,
-0.007590265478938818,
-0.036365244537591934,
0.0003082709154114127,
0.14161168038845062,
0.22249600291252136,
-0.11752156168222427,
0.0425175279378891,
0.19760771095752716,
0.154134601354599,
0.011583001352846622,
-0.035776253789663315,
0.08669712394475937,
0.0458700992166996,
0.017442725598812103,
0.13485807180404663,
-0.0726780891418457,
0.01868421770632267,
-0.05980396643280983,
0.12369593232870102,
0.04697970673441887,
-0.030301004648208618,
0.031928859651088715,
-0.025727810338139534,
0.09855067729949951,
-0.07804688066244125,
-0.06929397583007812,
0.07691600918769836,
0.1131555363535881,
0.08419237285852432,
-0.001302047399803996,
-0.0487377792596817,
-0.10061999410390854,
0.042628780007362366,
0.010894306935369968,
0.0248901154845953,
0.007076271343976259,
-0.08502034097909927,
-0.12526270747184753,
-0.07721932977437973,
-0.08558598905801773,
0.03660966828465462,
-0.007528313901275396,
-0.14518454670906067,
0.03093213401734829,
0.036035578697919846,
0.05151698365807533,
0.053298890590667725,
-0.0036228683311492205,
0.07427452504634857,
0.26405033469200134,
0.019938567653298378,
-0.054713647812604904,
-0.13377763330936432,
-0.057393185794353485,
0.1852724850177765,
0.004101604223251343,
-0.08016768097877502,
-0.0036243353970348835,
-0.015826428309082985,
0.03224584460258484,
0.007432791870087385,
0.04513155296444893,
-0.05461164936423302,
-0.061642616987228394,
-0.05504653975367546,
0.04649778828024864,
-0.006386930122971535,
-0.08589102327823639,
-0.129365935921669,
-0.07027179002761841,
-0.00604593101888895,
-0.04706254228949547,
-0.15302184224128723,
-0.1455785185098648,
-0.11192528158426285,
0.03979624807834625,
-0.087366484105587,
-0.05525413155555725,
0.03618578612804413,
0.027492403984069824,
-0.06877215951681137,
0.051208093762397766,
-0.03073117509484291,
-0.008646668866276741,
0.02394051104784012,
-0.08577574789524078,
-0.033099107444286346,
0.01845761202275753,
0.08267869055271149,
0.05404239147901535,
-0.021198226138949394,
-0.005511438939720392,
0.027943413704633713,
-0.07755481451749802,
-0.10767106711864471,
0.13961665332317352,
-0.00650771614164114,
0.09020362049341202,
0.023994363844394684,
-0.002207064302638173,
0.05681287497282028,
-0.05314787104725838,
0.052704811096191406,
0.004596410784870386,
-0.028403818607330322,
-0.024500137194991112,
-0.0465560182929039,
-0.10329312086105347,
-0.04299888759851456,
-0.03376869857311249,
-0.0313657782971859,
-0.018163975328207016,
-0.006315077189356089,
0.015302683226764202,
0.10351011902093887,
0.06677521020174026,
-0.06728969514369965,
0.013141194358468056,
0.0030953134410083294,
0.04784534126520157,
0.03609694913029671,
0.0021108908113092184,
0.0767432227730751,
-0.047557272017002106,
0.030652524903416634,
0.0743090882897377,
0.015856098383665085,
-0.030333351343870163,
-0.08367200195789337,
-0.05116566643118858,
-0.01171076763421297,
0.09676998108625412,
0.17913417518138885,
-0.02716596983373165,
-0.08812162280082703,
0.0709909200668335,
0.12392965704202652,
0.1067446619272232,
0.06444377452135086,
-0.06302818655967712,
0.04223284125328064,
-0.0355256125330925,
0.04500119760632515,
0.14771048724651337,
0.060931067913770676,
0.15077289938926697,
0.06232058256864548,
0.06981448829174042,
0.008194979280233383,
0.015058954246342182,
0.08722492307424545,
0.19518132507801056,
0.00731881707906723,
0.008891712874174118,
-0.11251012235879898,
-0.1596824675798416,
0.029375405982136726,
0.09408871829509735,
0.10637076199054718,
-0.032790642231702805,
0.01373522449284792,
0.03888922929763794,
0.001796836033463478,
0.01136152632534504,
0.09678713977336884,
0.009136051870882511,
-0.03061554580926895,
-0.09050334990024567,
0.04344625025987625,
-0.007043776568025351,
0.042268432676792145,
0.0034940612968057394,
0.08591858297586441,
0.20206844806671143,
0.011975771747529507,
0.056638091802597046,
0.1395004540681839,
0.12525518238544464,
-0.09682314097881317,
-0.11027318984270096,
0.05810074508190155,
0.054165665060281754,
-0.1222725436091423,
-0.12072376906871796,
-0.0275832861661911,
0.06823833286762238,
-0.014163565821945667,
-0.04821039363741875,
-0.047071222215890884,
0.007184078451246023,
0.029592901468276978,
0.04646573215723038,
-0.05210518091917038,
-0.08465982973575592,
-0.02181047946214676,
0.010827014222741127,
0.059692587703466415,
-0.04821993038058281,
-0.028271563351154327,
0.1973344087600708,
0.01856319047510624,
-0.08176027983427048,
-0.00809368398040533,
0.03991846367716789,
0.0584740974009037,
-0.09807007759809494,
0.03899957984685898,
0.18094883859157562,
0.04657550901174545,
-0.00016474798030685633,
-0.17829519510269165,
0.13370271027088165,
-0.03810129314661026,
-0.051835544407367706,
0.033421412110328674,
-0.0318363755941391,
0.04273786395788193,
0.12909092009067535,
0.020794659852981567,
0.02398321032524109,
0.07961061596870422,
0.10096810013055801,
0.21130843460559845,
0.021060196682810783,
-0.09182194620370865,
0.12312273681163788,
0.18873921036720276,
-0.01731744036078453,
-0.17155346274375916,
-0.11287056654691696,
-0.026729553937911987,
-0.11634635925292969,
-0.1280793398618698,
-0.09202767163515091,
-0.06667400896549225,
0.1118248701095581,
-0.014269293285906315,
0.021675406023859978,
0.004940015263855457,
-0.0313490554690361,
0.019330503419041634,
0.035329852253198624,
0.13940511643886566,
0.03387702628970146,
0.13653118908405304,
-0.006893197540193796,
0.028261668980121613,
0.013615496456623077,
-0.009023304097354412,
0.23417840898036957,
0.01982157863676548,
-0.06237105280160904,
-0.029212748631834984,
0.029373157769441605,
0.10882042348384857,
0.016932031139731407,
0.054675761610269547,
0.07299067080020905,
0.0862538293004036,
0.07698626816272736,
0.0035477899946272373,
-0.08228281885385513,
-0.09301937371492386,
0.10443855822086334,
0.08726556599140167,
-0.03813190013170242,
0.012664757668972015,
0.10415969789028168,
0.08163508772850037,
-0.0697312131524086,
0.021843813359737396,
-0.022655805572867393,
-0.015562945045530796,
0.09065789729356766,
0.028397658839821815,
-0.04525727406144142,
0.05522937700152397,
-0.009636948816478252,
-0.002989852800965309,
-0.0034474364947527647,
-0.08806560188531876,
-0.1254224330186844,
-0.05960497260093689,
-0.0524413101375103,
0.038301631808280945,
0.13774147629737854,
0.11408785730600357,
0.0356544554233551,
-0.052474211901426315,
-0.12771813571453094,
0.11683312058448792,
0.0016738282283768058,
0.051054053008556366,
0.047875698655843735,
-0.06854654103517532,
0.007350559812039137,
0.03509530797600746,
0.08843418210744858,
0.04078908637166023,
0.06072809919714928,
-0.09010438621044159,
-0.06538701802492142,
0.015523755922913551,
0.07614456117153168,
-0.09175525605678558,
0.009145434014499187,
0.062070488929748535,
0.08318520337343216,
0.026763545349240303,
-0.07092808187007904,
0.04663592949509621,
0.07888267189264297,
0.04850258678197861,
-0.029507463797926903,
-0.08819935470819473,
-0.05216221883893013,
0.041792385280132294,
0.07210113108158112,
-0.01283307746052742,
-0.05312628298997879,
-0.03188711404800415,
0.05657953768968582,
-0.0546601265668869,
0.06984734535217285,
0.029768183827400208,
-0.010217544622719288,
-0.027810880914330482,
-0.07093808799982071,
-0.05352858453989029,
0.023585587739944458,
-0.19583004713058472,
-0.09810929000377655,
-0.07255149632692337,
-0.04817032068967819,
-0.13119880855083466,
0.08881019800901413,
0.12252815812826157,
-0.03839487582445145,
-0.03572927787899971,
0.13537411391735077,
-0.11240047961473465,
0.04849211871623993,
-0.08677797019481659,
0.0054543945007026196,
-0.047975726425647736,
0.006031064782291651,
-0.02557951770722866,
0.08015508949756622,
0.028827253729104996,
0.0869196280837059,
0.0035083673428744078,
0.021045822650194168,
0.012882438488304615,
-0.0060246107168495655,
0.11432835459709167,
0.004273797385394573,
-0.03155647590756416,
-0.00017470739840064198,
0.07708904147148132,
0.04241465777158737,
-0.05470313876867294,
0.061521533876657486,
-0.05067400261759758,
-0.08242937922477722,
-0.041892748326063156,
-0.05236152932047844,
-0.008166209794580936,
0.025495590642094612,
-0.08696942776441574,
0.006962701678276062,
0.029463941231369972,
-0.0343361422419548,
0.0494912751019001,
0.12812303006649017,
0.02055404894053936,
0.05709231644868851,
0.01765044964849949,
-0.11838582903146744,
0.04916556924581528,
-0.00026467072893865407,
0.040132779628038406,
-0.09849405288696289,
-0.07328226417303085,
0.048168204724788666,
0.09109004586935043,
-0.11880718171596527,
-0.24515902996063232,
-0.2066773921251297,
0.02073453553020954,
-0.01586912013590336,
0.009862192906439304,
0.05224240571260452,
-0.021796496585011482,
-0.1437969207763672,
-0.12015603482723236,
0.10215301811695099,
0.1207234114408493,
0.06524568796157837,
-0.1255834698677063,
-0.13290195167064667,
0.03718307986855507,
0.08583083748817444,
0.062430061399936676,
0.11107247322797775,
0.15520022809505463,
0.08628816902637482,
0.11447792500257492,
0.13518425822257996,
0.07542271912097931,
-0.04045793041586876,
-0.010122636333107948,
0.04674641415476799,
0.06671516597270966,
-0.025468116626143456,
0.008435269817709923,
-0.040711645036935806,
-0.007147385738790035,
-0.014955153688788414,
0.051363930106163025,
0.09694302082061768,
-0.044860903173685074,
0.17745104432106018,
0.051043957471847534,
0.07104659825563431,
-0.015735957771539688,
0.027516014873981476,
0.030274517834186554,
0.004028465133160353,
0.01761808805167675,
-0.010436499491333961,
0.034316692501306534,
-0.04639666900038719,
0.03730671480298042,
0.0027773939073085785,
0.05002638325095177,
0.013016698881983757,
-0.021007556468248367,
-0.05832678824663162,
-0.030196206644177437,
-0.05383022502064705,
0.0443255677819252,
-0.05810093134641647,
-0.027922077104449272,
0.09648812562227249,
0.06967347115278244,
-0.05903114378452301,
-0.06058235839009285,
-0.020519021898508072,
-0.061871353536844254,
0.06480666995048523,
-0.05479046702384949,
-0.01980242319405079,
-0.04915059730410576,
-0.0070441230200231075,
0.12882132828235626,
-0.04088164493441582,
0.025247082114219666,
-0.027202507480978966,
0.006623291876167059,
-0.01693030074238777,
-0.18761396408081055,
-0.0732417181134224,
-0.0472344346344471,
-0.06903883814811707,
-0.12136673182249069,
0.05689683556556702,
0.027053838595747948,
-0.04192405939102173,
-0.020268702879548073,
-0.13022686541080475,
0.11183761060237885,
-0.01251885574311018,
0.0022425632923841476,
-0.060736026614904404,
-0.10003506392240524,
0.10962668061256409,
0.10294391959905624,
0.026081616058945656,
0.16932635009288788,
0.07757031917572021,
0.031066231429576874,
0.0672987774014473,
0.11128128319978714,
0.0571337528526783,
0.05837470293045044,
-0.024139678105711937,
-0.01729896105825901,
-0.0026161205023527145,
0.1572844535112381,
0.09446311742067337,
-0.23386044800281525,
-0.050078507512807846,
0.020371777936816216,
-0.06545696407556534,
-0.032110847532749176,
-0.010227562859654427,
0.05775108560919762,
-0.011332991532981396,
-0.10896262526512146,
-0.09079601615667343,
0.07067231833934784,
0.06284616887569427,
0.1527763307094574,
-0.0056179664097726345,
-0.029976820573210716,
0.0704256221652031,
0.01724318228662014,
0.0025206643622368574,
0.1553025096654892,
0.07621567696332932,
-0.019830433651804924,
0.06557241827249527,
0.06888336688280106,
-0.05993765965104103,
0.01593061164021492,
0.027275674045085907,
-0.07772151380777359,
-0.047933753579854965,
-0.09633076190948486,
-0.1003192663192749,
0.027644135057926178,
0.026251371949911118,
0.08553632348775864,
-0.01788485422730446,
0.05680214613676071,
0.026517091318964958,
-0.09557501971721649,
0.024830391630530357,
-0.05731955170631409,
0.07075012475252151,
0.16051512956619263,
0.24309462308883667,
0.11424286663532257,
-0.017788507044315338,
-0.04669012501835823,
0.11786174029111862,
0.10202959179878235,
0.033729489892721176,
-0.06809321790933609,
-0.13513638079166412,
0.06442475318908691,
0.007107999641448259,
-0.03792929649353027,
-0.02752011828124523,
0.006818355992436409,
0.032709695398807526,
-0.023259613662958145,
-0.009282475337386131,
-0.010715746320784092,
0.04514455422759056,
-0.05305111035704613,
0.03986839950084686,
-0.12525010108947754,
-0.09955146163702011,
-0.05230969190597534,
-0.08885377645492554,
0.010900327004492283,
0.13685187697410583,
0.09114298224449158,
0.0817340612411499,
0.07063321024179459,
0.14301468431949615,
0.11916139721870422,
-0.039756301790475845,
-0.09466565400362015,
0.004477621987462044,
-0.04636206477880478,
-0.0493236668407917,
-0.1102965697646141,
-0.041665270924568176,
-0.05464089289307594,
-0.01594560220837593,
0.05312468856573105,
0.08004951477050781,
0.06848956644535065,
-0.0757509171962738,
0.08781341463327408,
0.021416904404759407,
-0.09847386926412582,
-0.03072771430015564,
-0.021199854090809822,
-0.06960676610469818,
-0.06012289971113205,
-0.03675905987620354,
0.08373363316059113,
-0.15573088824748993,
-0.1401709020137787,
-0.0838470309972763,
0.014474071562290192,
0.08503035455942154,
-0.15415707230567932,
-0.0878673791885376,
-0.03592348471283913,
0.02815937250852585,
-0.008613594807684422,
0.09588024020195007,
-0.01975436694920063,
0.058247607201337814,
-0.004477095324546099,
-0.02817760966718197,
0.17647191882133484,
0.07690341025590897,
0.10765194892883301,
0.13651198148727417,
0.06531587243080139,
0.08267009258270264,
0.13830262422561646,
0.10460628569126129,
0.18125954270362854,
-0.02300681546330452,
-0.022014034911990166,
-0.015535358339548111,
0.02004690282046795,
0.0004098168865311891,
-0.09082833677530289,
-0.16872362792491913,
-0.038385722786188126,
0.0034110189881175756,
0.02403736114501953,
-0.04382207244634628,
-0.0675581619143486,
-0.05731886625289917,
0.059376269578933716,
0.02169950306415558,
-0.12497468292713165,
0.002133419271558523,
0.04364680498838425,
0.032677892595529556,
-0.12731115520000458,
-0.05112076550722122,
-0.07547320425510406,
-0.07491844892501831,
-0.0654817447066307,
-0.01277224626392126,
0.023441176861524582,
0.008056591264903545,
0.04982566088438034,
0.03926101699471474,
0.05666160210967064,
0.02267700433731079,
0.105479396879673,
-0.023704838007688522,
0.09272479265928268,
0.05107465386390686,
-0.0045125894248485565,
0.02512371353805065,
-0.007577594835311174,
-0.014278589747846127,
0.06032760813832283,
0.06945890933275223,
-0.02981586381793022,
-0.08607294410467148,
-0.0316394604742527,
0.06845176964998245,
0.09880436211824417,
-0.04412010684609413,
0.030704637989401817,
0.004908283706754446,
0.015393869020044804,
-0.024150654673576355,
-0.028514081612229347,
-0.06229617819190025,
-0.029719755053520203,
0.15585872530937195,
0.14068634808063507,
-0.17131879925727844,
-0.11505412310361862,
-0.0726650059223175,
0.05656904727220535,
0.02786346897482872,
-0.09038005769252777,
-0.008695950731635094,
-0.027188371866941452,
-0.030271826311945915,
-0.06675077229738235,
-0.012061490677297115,
0.111257404088974,
0.037165701389312744,
0.01568092778325081,
-0.10566306114196777,
-0.020982526242733,
-0.006893802434206009,
0.029881753027439117,
-0.018165189772844315,
0.036019615828990936,
-0.034726422280073166,
-0.012496903538703918,
-0.04780973866581917,
-0.1279657483100891,
-0.07494629174470901,
0.08068850636482239,
0.04256071522831917,
-0.07171069830656052,
-0.03341599181294441,
-0.14848178625106812,
-0.0358382984995842,
-0.0032717501744627953,
0.07046470046043396,
0.05430067703127861,
0.07297356426715851,
-0.04010261222720146,
-0.0672326534986496,
-0.08019734174013138,
0.013914624229073524,
0.016557002440094948,
0.10245444625616074,
-0.10583754628896713,
-0.06380938738584518,
0.09052006155252457,
-0.036133430898189545,
0.0642680749297142,
-0.10995219647884369,
-0.08677490800619125,
0.09228548407554626,
0.0050385454669594765,
0.02371397241950035,
-0.02062838524580002,
0.02489292621612549,
-0.039350442588329315,
0.022194812074303627,
-0.050350166857242584,
-0.02290160581469536,
-0.1254078447818756,
-0.016412904486060143,
0.01992700807750225,
0.017037678509950638,
-0.05521532893180847,
-0.07802100479602814,
0.021135982125997543,
-0.027561740949749947,
-0.1327962577342987,
-0.08816257864236832,
-0.03301465883851051,
0.08132435381412506,
-0.03360198810696602,
-0.06012304127216339,
-0.23409618437290192,
-0.11761118471622467,
0.1845030039548874,
0.047739993780851364,
0.12331657111644745,
-0.0373535193502903,
0.03528542444109917,
0.09642605483531952,
-0.0047932215966284275,
0.041671521961688995,
0.05997242406010628,
0.01612282171845436,
0.05121375992894173,
0.06474446505308151,
0.06807500123977661,
-0.024298131465911865,
-0.022827744483947754,
0.024732405319809914,
0.10737880319356918,
-0.0014343000948429108,
0.03685218095779419,
0.19483807682991028,
0.07197901606559753,
-0.013679283671081066,
0.017020506784319878,
-0.0026977122761309147,
0.024866584688425064,
0.0011660095769912004,
-0.044384125620126724,
-0.046812333166599274,
-0.028393622487783432,
0.14782588183879852,
-0.00564909353852272,
-0.15055857598781586,
-0.12700976431369781,
-0.032303132116794586,
0.08320072293281555,
0.02781824953854084,
0.04582398012280464,
-0.022941427305340767,
0.05570158734917641,
0.0968245193362236,
-0.009910776279866695,
0.011797690764069557,
-0.01562516763806343,
0.07412069290876389,
0.14086295664310455,
0.07192247360944748,
-0.048524025827646255,
-0.006025827955454588,
0.07042835652828217,
0.17416401207447052,
0.09235117584466934,
-0.021064475178718567,
-0.07117722183465958,
-0.07223399728536606,
-0.028468312695622444,
0.059583425521850586,
0.001598914503119886,
-0.024443279951810837,
-0.029614916071295738,
-0.01152732502669096,
-0.13192050158977509,
-0.024517271667718887,
0.024984905496239662,
-0.016921943053603172,
-0.014669535681605339,
0.010951526463031769,
-0.05778767541050911,
0.10865612328052521,
-0.05684134364128113,
0.01826537773013115,
-0.07999420166015625,
-0.11915195733308792,
0.002978384494781494,
0.013213194906711578,
0.03831743076443672,
-0.1161496564745903,
0.00013094043242745101,
0.023403320461511612,
0.006449050735682249,
-0.04100397229194641,
-0.12119919806718826,
0.022536925971508026,
0.07339168339967728,
-0.04183889552950859,
-0.011066329665482044,
-0.06341173499822617,
-0.042655184864997864,
0.061465680599212646,
-0.05879645794630051,
-0.055596768856048584,
-0.08355984091758728,
-0.10158981382846832,
-0.09867308288812637,
-0.09469222277402878,
0.02824341505765915,
-0.03310973197221756,
-0.2163359671831131,
-0.028649013489484787,
0.036210063844919205,
0.09422051906585693,
0.04695615917444229,
-0.1684698909521103,
0.011247821152210236,
0.06557605415582657,
0.07774645835161209,
0.04223504289984703,
-0.0037313371431082487,
0.07166115194559097,
0.11008564382791519,
-0.009997513145208359,
-0.10112365335226059,
0.01665102317929268,
0.0627308189868927,
0.11155256628990173,
0.10491815209388733,
0.036601703613996506,
0.023424888029694557,
0.03377089276909828,
0.1588202714920044,
0.12103289365768433,
0.010522373020648956,
-0.1544865518808365,
0.040346819907426834,
0.03290100023150444,
0.09762926399707794,
0.14895756542682648,
-0.10740151256322861,
-0.08295509219169617,
-0.03468434885144234,
0.06055598706007004,
0.007068167440593243,
-0.10164572298526764,
-0.0055989413522183895,
-0.04104408249258995,
0.05029516667127609,
-0.012567829340696335,
-0.039463434368371964,
-0.02152690477669239,
0.10258443653583527,
0.07276631146669388,
0.1256473958492279,
0.03563370928168297,
-0.056669048964977264,
0.02100321464240551,
0.026081189513206482,
-0.02375907637178898,
0.11601351201534271,
0.11194877326488495,
0.12737657129764557,
0.0787615180015564,
0.10647493600845337,
0.0052201044745743275,
0.09096793085336685,
0.028612269088625908,
0.07007893174886703,
-0.011662007309496403,
0.06285762786865234,
-0.02406975068151951,
0.0396006740629673,
-0.01638229563832283,
-0.07002612203359604,
-0.11549340933561325,
0.05654114484786987,
0.09501098841428757,
0.020732514560222626,
-0.014962544664740562,
-0.03750663995742798,
-0.0008338465704582632,
0.11502537131309509,
0.08820739388465881,
0.07625676691532135,
-0.07708168029785156,
0.08149278163909912,
0.013799634762108326,
0.0045776162296533585,
-0.06770201772451401,
-0.16554559767246246,
-0.042238228023052216,
-0.03151595965027809,
0.060060370713472366,
-0.13248781859874725,
-0.11187691241502762,
-0.11428647488355637,
-0.07396096736192703,
-0.014464536681771278,
0.0976947471499443,
0.0067354366183280945,
-0.028252292424440384,
0.012527222745120525,
0.056465305387973785,
0.03071042336523533,
0.06513824313879013,
0.04586957395076752,
-0.14081043004989624,
-0.09626525640487671,
0.0021561114117503166,
0.02338274009525776,
-0.05945412442088127,
-0.18969333171844482,
-0.03595060110092163,
-0.07238077372312546,
-0.032461680471897125,
-0.04680681601166725,
-0.05646021291613579,
0.04984861984848976,
-0.018856285139918327,
-0.08834157884120941,
-0.16907396912574768,
-0.13907010853290558,
0.004840719513595104,
-0.05384724959731102,
0.014726187102496624,
-0.08820822089910507,
-0.1504669040441513,
-0.10092206299304962,
-0.021831903606653214,
-0.018082423135638237,
0.18435883522033691,
0.035490330308675766,
-0.03152679279446602,
-0.07620212435722351,
-0.027401486411690712,
0.005983533337712288,
-0.010458964854478836,
0.056780800223350525,
-0.04871107637882233,
-0.14719700813293457,
0.022840062156319618,
-0.007326633669435978,
0.09316619485616684,
-0.030920904129743576,
0.008465914987027645,
-0.12018703669309616,
-0.13114644587039948,
0.05588029325008392,
-0.0142116229981184,
0.023130228742957115,
-0.07540798932313919,
-0.13342547416687012,
-0.024000467732548714,
0.0033309070859104395,
-0.051849666982889175,
-0.0807550698518753,
0.035698067396879196,
0.18828512728214264,
0.1522597074508667,
0.10286352783441544,
-0.06959034502506256,
0.10930032283067703,
0.12156017124652863,
0.146443709731102,
0.09525037556886673,
0.06473039090633392,
0.09424277395009995,
0.0874558687210083,
0.020943518728017807,
-0.05145527794957161,
-0.030554242432117462,
-0.017469175159931183,
-0.03448156267404556,
-0.061739422380924225,
-0.16476184129714966,
-0.006946173962205648,
0.10862178355455399,
0.1110086590051651,
0.0425238199532032,
-0.010768089443445206,
0.1560964584350586,
-0.04636043682694435,
-0.11737664043903351,
0.0381477065384388,
0.038443148136138916,
0.18727952241897583,
0.012032482773065567,
0.02870623953640461,
-0.005947588477283716,
-0.02635285258293152,
-0.0006655548932030797,
-0.12427565455436707,
-0.03033316321671009,
0.058899860829114914,
0.028361845761537552,
-0.030376562848687172,
-0.029357774183154106,
0.0037950482219457626,
0.03321606293320656,
-0.04370756819844246,
-0.04348764196038246,
0.03165570646524429,
0.018383217975497246,
0.017808232456445694,
-0.013869027607142925,
-0.017413189634680748,
0.0025507027748972178,
0.059773482382297516,
0.07225652784109116,
0.009858534671366215,
-0.047343891113996506,
0.019297579303383827,
0.008200278505682945,
0.003375551663339138,
0.01616860367357731,
-0.015571210533380508,
-0.040030915290117264,
0.009920412674546242,
-0.08083454519510269,
-0.040304284542798996,
0.04780270531773567,
0.08174236863851547,
0.06956762820482254,
0.06031987443566322,
0.008452470414340496,
-0.039322152733802795,
-0.012900152243673801,
0.04390650987625122,
0.022352267056703568,
0.02501939982175827,
-0.03886588290333748,
-0.055813323706388474,
-0.13012704253196716,
-0.08539342135190964,
-0.028691375628113747,
0.07733716815710068,
0.0815756544470787,
0.2510509788990021,
0.19972702860832214,
0.19509294629096985,
0.037087228149175644,
0.07041595876216888,
0.08428172767162323,
0.12241390347480774,
0.1625172644853592,
0.037113942205905914,
0.011301976628601551,
0.012090583331882954,
-0.025072291493415833,
-0.0074992794543504715,
0.010088986717164516,
0.082731232047081,
0.043059106916189194,
0.0534522719681263,
0.011978674679994583,
0.061181820929050446,
0.11118216067552567,
0.035829924046993256,
0.20011040568351746,
0.06319612264633179,
-0.008177712559700012,
-0.023806648328900337,
-0.03293658420443535,
-0.06537546962499619,
-0.03449655696749687,
-0.16447784006595612,
-0.05979391932487488,
0.05910048261284828,
-0.05034807696938515,
-0.030350079759955406,
-0.11540034413337708,
0.13884414732456207,
0.01564641110599041,
-0.05813605710864067,
-0.10602729022502899,
0.04437004402279854,
0.05092760547995567,
-0.026897355914115906,
-0.02153545618057251,
0.13036775588989258,
-0.020174765959382057,
-0.0208565816283226,
0.049365896731615067,
-0.06510082632303238,
0.014340811409056187,
-0.016966618597507477,
0.027618367224931717,
-0.0014319336041808128,
-0.047042716294527054,
0.012243079952895641,
0.05176794156432152,
0.06246811896562576,
0.1584187150001526,
-0.032422665506601334,
-0.029551630839705467,
-0.006484162528067827,
-0.008933120407164097,
0.19525545835494995,
0.02683708630502224,
-0.001242001773789525,
-0.04692889377474785,
0.032447632402181625,
0.11368203163146973,
0.10616757720708847,
0.0019465137738734484,
0.17144134640693665,
0.1439574956893921,
0.0814138799905777,
0.08567732572555542,
0.10875207185745239,
-0.06667844951152802,
0.01251192670315504,
0.05909235402941704,
0.041804634034633636,
0.009034503251314163,
-0.1586415022611618,
-0.07608629763126373,
-0.004660749342292547,
-0.04500800371170044,
-0.0694657415151596,
-0.021920621395111084,
-0.005130524281412363,
-0.11465983837842941,
-0.01773145981132984,
-0.17897258698940277,
-0.014750421978533268,
-0.06554817408323288,
-0.07953018695116043,
0.11777001619338989,
-0.15437282621860504,
-0.013789758086204529,
-0.0959264263510704,
-0.044308457523584366,
0.04069042578339577,
-0.016478044912219048,
-0.08879949897527695,
-0.1558227688074112,
-0.0028662998229265213,
0.013071797788143158,
-0.0002064260479528457,
0.11355582624673843,
0.05002404749393463,
0.008497129194438457,
-0.11842552572488785,
0.048666682094335556,
-0.011498821899294853,
0.057833120226860046,
-0.1426110863685608,
-0.0011134641245007515,
-0.05026385933160782,
-0.045008353888988495,
0.009199587628245354,
0.08520407974720001,
0.001151026226580143,
-0.06614220142364502,
-0.0010943663073703647,
0.036139726638793945,
-0.0837237685918808,
-0.029740270227193832,
-0.03882487863302231,
-0.003403670387342572,
0.1588122844696045,
0.10489276051521301,
0.14721530675888062,
0.09723618626594543,
0.049239132553339005,
-0.11454185098409653,
-0.10433012247085571,
0.014538206160068512,
0.10583547502756119,
-0.05455563962459564,
-0.04475138336420059,
-0.10512644052505493,
-0.00878896377980709,
-0.08594395965337753,
-0.12876605987548828,
-0.024620942771434784,
-0.10967420041561127,
-0.10871952772140503,
-0.1276075392961502,
-0.04938835650682449,
-0.04596167430281639,
-0.01922399364411831,
-0.10449827462434769,
-0.10386698693037033,
0.05207690969109535,
0.09956441819667816,
-0.09246624261140823,
0.027438590303063393,
-0.059598639607429504,
0.02370511367917061,
0.04996887594461441,
0.19902759790420532,
0.059114422649145126,
-0.0498347133398056,
-0.04226144403219223,
-0.055873721837997437,
0.014982921071350574,
0.1125921979546547,
0.11186859011650085,
-0.026856277137994766,
-0.07397696375846863,
0.04397463798522949,
0.021588167175650597,
0.05600782856345177,
0.02705290913581848,
-0.008000627160072327,
0.034869588911533356,
-0.011046214960515499,
0.09144521504640579,
0.014486601576209068,
0.006390559021383524,
0.04059869423508644,
0.21121321618556976,
0.1622457355260849,
-0.14826640486717224,
-0.026719918474555016,
-0.0006153954891487956,
-0.1647605150938034,
-0.028282901272177696,
-0.0688294991850853,
-0.05212828516960144,
-0.059276752173900604,
0.0017345473170280457,
-0.16693274676799774,
-0.004864866845309734,
-0.025912771001458168,
-0.027754321694374084,
-0.030148129910230637,
-0.030720636248588562,
-0.038526952266693115,
-0.0771288201212883,
-0.0641336739063263,
0.02521226555109024,
0.06341998279094696,
0.09955419600009918,
0.10209010541439056,
-0.036524929106235504,
-0.0356578528881073,
0.018719155341386795,
-0.026187989860773087,
-0.07186773419380188,
-0.0515456460416317,
0.026816418394446373,
0.201652392745018,
-0.012894848361611366,
0.0037120310589671135,
-0.19722209870815277,
-0.047325171530246735,
0.15573635697364807,
-0.08691520243883133,
-0.08662312477827072,
-0.1464693397283554,
-0.1905117779970169,
-0.08251429349184036,
-0.012430659495294094,
0.0005975629901513457,
0.044366300106048584,
0.026441283524036407,
-0.08802096545696259,
-0.12904566526412964,
-0.013808914460241795,
-0.04997612535953522,
-0.016736125573515892,
0.0650184154510498,
0.05093303695321083,
0.034304335713386536,
0.04927285388112068,
0.09072541445493698,
-0.07366930693387985,
0.09194634109735489,
-0.09194115549325943,
-0.04029170051217079,
0.013206460513174534,
-0.019050665199756622,
-0.07872320711612701,
-0.11236639320850372,
-0.15042328834533691,
-0.0182229932397604,
0.04451628401875496,
-0.11521026492118835,
-0.06407985836267471,
0.008415896445512772,
0.06926634162664413,
0.07775340229272842,
-0.08603088557720184,
-0.05896269530057907,
-0.0066543822176754475,
0.06540444493293762,
-0.08034107089042664,
-0.002345375018194318,
0.00027740569203160703,
-0.07840140908956528,
-0.046435385942459106,
0.023462720215320587,
0.013559060171246529,
0.007113890256732702,
-0.01128957699984312,
-0.015494445338845253,
-0.004959525540471077,
0.028658781200647354,
0.13049645721912384,
-0.08025721460580826,
-0.0005948040052317083,
-0.01721789874136448,
0.024975059553980827,
-0.06999905407428741,
-0.02340809628367424,
-0.031771592795848846,
-0.06161664053797722,
-0.0657116249203682,
-0.031614065170288086,
-0.049997422844171524,
-0.0531618669629097,
-0.07299535721540451,
0.026575438678264618,
0.14208337664604187,
0.08112440258264542,
0.011165212839841843,
0.010219170711934566,
0.01350934524089098,
0.08235948532819748,
0.03922461345791817,
-0.04317723587155342,
0.07538788765668869,
0.10295778512954712,
0.025056617334485054,
0.10435382276773453,
0.01755700074136257,
0.09985941648483276,
0.0003524016647133976,
0.021486081182956696,
0.09579238295555115,
0.07109475135803223,
0.053639356046915054,
-0.11357294768095016,
-0.09894964843988419,
-0.11062397807836533,
0.0706968829035759,
0.05151338875293732,
0.02970612607896328,
0.11301985383033752,
-0.0337381474673748,
-0.011830189265310764,
-0.04119446501135826,
0.07151350378990173,
0.16398856043815613,
-0.04036941006779671,
0.022815914824604988,
0.052399106323719025,
0.02454841509461403,
-0.022969504818320274,
0.06045464053750038,
0.03221789747476578,
0.05510970205068588,
-0.013281186111271381,
-0.038982316851615906,
0.009880980476737022,
0.060731660574674606,
0.1314987689256668,
0.05614946037530899,
0.004829689860343933,
-0.021900061517953873,
0.010875549167394638,
0.05112069472670555,
0.05017025023698807,
-0.01277204416692257,
-0.01983978971838951,
0.023254552856087685,
0.015145597979426384,
-0.058645524084568024,
-0.10169822722673416,
-0.12336210906505585,
-0.01740751415491104,
0.04358254373073578,
-0.10114968568086624,
-0.09216807037591934,
-0.11428648233413696,
-0.13792350888252258,
-0.003726182971149683,
-0.08854402601718903,
-0.10740987211465836,
0.004835312720388174,
-0.12925782799720764,
-0.06361767649650574,
-0.1832699477672577,
-0.03200456127524376,
0.10317528992891312,
0.034556515514850616,
-0.1069689616560936,
0.08533970266580582,
0.08646953105926514,
0.1098233237862587,
-0.008495942689478397,
0.004040321800857782,
0.036108482629060745,
0.07121963053941727,
-0.022508831694722176,
0.058846887201070786,
0.11771401762962341,
-0.06080915406346321,
0.0022177991922944784,
-0.031908757984638214,
0.16566486656665802,
0.10940423607826233,
0.0539739690721035,
0.09509673714637756,
0.07606677711009979,
0.08740447461605072,
0.15543532371520996,
0.08556141704320908,
0.020664187148213387,
-0.022867009043693542,
0.048957016319036484,
0.09957259893417358,
-0.1349572241306305,
-0.08990928530693054,
0.0029426272958517075,
-0.13556069135665894,
-0.0562342032790184,
-0.12348281592130661,
-0.13662049174308777,
0.0069651068188250065,
-0.047090671956539154,
-0.19796428084373474,
0.05203362926840782,
0.08693154901266098,
-0.03449656069278717,
-0.001723298104479909,
-0.1250375211238861,
0.03457803279161453,
0.03800177946686745,
0.023065203800797462,
0.047119222581386566,
-0.0037290602922439575,
-0.026309913024306297,
-0.01840989850461483,
0.03032124601304531,
-0.11320096254348755,
-0.10668934136629105,
-0.0975966826081276,
0.06286615133285522,
0.09042893350124359,
-0.026902124285697937,
-0.027104269713163376,
0.00048400106607005,
-0.052401166409254074,
0.0032632718794047832,
0.06660733371973038,
0.04925841838121414,
-0.09065591543912888,
-0.15094126760959625,
0.023926855996251106,
-0.0172402486205101,
-0.008861816488206387,
-0.04345279186964035,
0.11780734360218048,
-0.012664400041103363,
0.2167583554983139,
-0.04969532787799835,
-0.014511880464851856,
-0.14354366064071655,
-0.05548577383160591,
0.0314350351691246,
0.026668641716241837,
0.0033320097718387842,
-0.10954990237951279,
0.007585268933326006,
0.011508941650390625,
0.014951486140489578,
-0.11003690958023071,
0.1112033799290657,
-0.02153700590133667,
-0.025598719716072083,
-0.047060612589120865,
0.05354946851730347,
0.0036248057149350643,
-0.053019799292087555,
-0.0187727902084589,
0.14363686740398407,
-0.011228803545236588,
-0.05941632390022278,
0.0364476777613163,
-0.018593410030007362,
0.07146047800779343,
-0.014168188907206059,
-0.009924403391778469,
0.01813289150595665,
0.061407145112752914,
0.023575222119688988,
0.045072559267282486,
0.013764561153948307,
0.13778752088546753,
-0.02581564523279667,
-0.017540745437145233,
0.050094813108444214,
-0.05464393272995949,
0.08604010194540024,
0.022983549162745476,
0.05668920651078224,
0.01809893548488617,
0.020926931872963905,
0.054413143545389175,
0.08091539144515991,
0.01674327813088894,
0.1724741905927658,
-0.0005959868431091309,
0.02192489057779312,
0.1250457763671875,
0.10895806550979614,
0.016842041164636612,
0.02485940419137478,
0.021357983350753784,
0.07585711777210236,
0.008568375371396542,
-0.19041700661182404,
-0.06280522048473358,
-0.05058719962835312,
-0.1438370645046234,
-0.0905671939253807,
0.028497977182269096,
0.03816249966621399,
-0.08667000383138657,
-0.0052749644964933395,
-0.13041280210018158,
0.014746707864105701,
0.07548816502094269,
-0.02777828834950924,
0.0006961594917811453,
-0.009266766719520092,
0.06464002281427383,
0.038147568702697754,
0.013126387260854244,
0.034598592668771744,
0.05174841731786728,
0.01368980947881937,
-0.07002639770507812,
0.048989422619342804,
0.05440027266740799,
0.060059092938899994,
0.08546587079763412,
-0.08361375331878662,
0.09167078882455826,
0.017891593277454376,
0.011394119821488857,
0.005346422083675861,
0.11389009654521942,
-0.09878521412611008,
-0.019963111728429794,
-0.08303576707839966,
-0.07511008530855179,
-0.02865918166935444,
0.03932097181677818,
0.02739274874329567,
-0.059494856745004654,
0.011999688111245632,
-0.009659205563366413,
-0.07840561121702194,
0.03504451736807823,
0.017355067655444145,
-0.002999399323016405,
0.1730315089225769,
0.05628061294555664,
0.11877227574586868,
0.05549927055835724,
-0.018642812967300415,
-0.09557418525218964,
-0.14523233473300934,
0.026714352890849113,
0.07259611785411835,
-0.07427263259887695,
-0.061326734721660614,
-0.07764962315559387,
-0.08086500316858292,
-0.13526767492294312,
-0.13219471275806427,
-0.07887379825115204,
-0.040984105318784714,
-0.08340388536453247,
-0.1091066300868988,
-0.02120797149837017,
-0.08190097659826279,
-0.030242836102843285,
-0.057109229266643524,
0.02133857272565365,
-0.04064269736409187,
0.033674903213977814,
0.00804107915610075,
0.04992120712995529,
-0.0009392003994435072,
0.05411912128329277,
0.09843476861715317,
0.11437129229307175,
0.1111644059419632,
-0.0030837201047688723,
-0.053824879229068756,
-0.08200717717409134,
0.03395303338766098,
0.01545428205281496,
0.08925149589776993,
0.016129599884152412,
-0.02194875106215477,
0.025144683197140694,
-0.01963937282562256,
0.02449668012559414,
0.009339194744825363,
-0.011924058198928833,
-0.004170699510723352,
0.109498031437397,
0.14039650559425354,
0.03664281219244003,
0.06615950912237167,
0.013485661707818508,
0.11749503016471863,
0.0676235631108284,
-0.09056048840284348,
-0.07225843518972397,
-0.01676681824028492,
0.026513224467635155,
-0.05942026153206825,
-0.09574759006500244,
-0.06426042318344116,
-0.045454587787389755,
-0.05666181072592735,
-0.12781082093715668,
-0.08533714711666107,
-0.05291811749339104,
-0.07065132260322571,
-0.06782401353120804,
-0.03187619522213936,
-0.020595669746398926,
-0.020193662494421005,
-0.021887527778744698,
-0.009367619641125202,
-0.05121970921754837,
0.08496280014514923,
0.12361391633749008,
-0.04456639662384987,
0.07318852841854095,
0.13527491688728333,
-0.06752058863639832,
-0.0648472011089325,
0.039411306381225586,
0.04809362813830376,
0.14898931980133057,
0.07240206003189087,
0.013514474034309387,
-0.13620689511299133,
-0.026765761896967888,
0.10706567764282227,
0.02505285106599331,
-0.0829334631562233,
-0.07432366162538528,
-0.10099512338638306,
-0.11274682730436325,
0.03632042557001114,
0.01346374861896038,
-0.04909327253699303,
-0.02927991934120655,
0.03595472499728203,
-0.059893250465393066,
-0.03852112591266632,
-0.10097449272871017,
-0.0010276129469275475,
0.021243169903755188,
0.0196702741086483,
0.0942198634147644,
0.05111408606171608,
-0.0166800394654274,
-0.014543360099196434,
0.03440259397029877,
-0.10147447884082794,
-0.04289281740784645,
0.06345245987176895,
0.05127532780170441,
-0.1554657220840454,
-0.09215303510427475,
-0.08466555923223495,
-0.028975630179047585,
0.020601848140358925,
-0.09950022399425507,
0.10063520818948746,
0.057677749544382095,
0.06553295999765396,
-0.07872574031352997,
-0.0445559062063694,
-0.006809277925640345,
0.021121453493833542,
-0.0060616955161094666,
-0.09141230583190918,
-0.015485514886677265,
-0.012304369360208511,
0.0015869161579757929,
0.007853283546864986,
0.04032209888100624,
-0.05577525123953819,
0.0572025366127491,
-0.015327194705605507,
-0.0490727499127388,
0.10094431042671204,
0.09178076684474945,
0.11747006326913834,
-0.10327041149139404,
-0.007279262412339449,
0.05067197605967522,
0.017727922648191452,
-0.14744418859481812,
0.03253886103630066,
0.08191446959972382,
-0.009575537405908108,
-0.11026519536972046,
-0.06608220934867859,
0.02689407393336296,
-0.11682986468076706,
-0.014390184544026852,
0.1307346075773239,
-0.016979018226265907,
0.2264338582754135,
-0.032289791852235794,
0.11837369203567505,
-0.011945966631174088,
0.03904738649725914,
0.004003506153821945,
-0.05069456622004509,
0.05472585931420326,
0.04745585471391678,
0.056526925414800644,
0.05875372141599655,
-0.006493972614407539,
0.04147055745124817,
0.03940143063664436,
0.06378073990345001,
0.1045982837677002,
0.06432116031646729,
0.005588360596448183,
-0.11324822902679443,
0.0004100864171050489,
-0.011594130657613277,
0.050647884607315063,
-0.04199302941560745,
0.03938496485352516,
0.09235309809446335,
0.06827075779438019,
0.11960594356060028,
-0.04102305322885513,
0.04957371950149536,
0.09882168471813202,
0.04302186518907547,
-0.011210926808416843,
0.10559646040201187,
-0.016624704003334045,
0.05886512249708176,
0.037395983934402466,
-0.037219054996967316,
0.06185965985059738,
0.06858795881271362,
-0.05550924316048622,
0.04668512940406799,
0.0598013810813427,
0.1263258010149002,
-0.020018549636006355,
0.06018995866179466,
-0.04900728911161423,
-0.02959306724369526,
0.07796632498502731,
-0.0397273488342762,
-0.006232863757759333,
-0.11380506306886673,
-0.08743283897638321,
-0.061334218829870224,
-0.009434650652110577,
-0.10255128890275955,
-0.08650016784667969,
-0.0632709190249443,
-0.043722037225961685,
-0.09138547629117966,
-0.08838830143213272,
-0.1218118667602539,
-0.007196276914328337,
-0.003446671413257718,
-0.006939703598618507,
-0.13860122859477997,
-0.03343801572918892,
-0.03975619003176689,
-0.03965730592608452,
-0.07005596905946732,
0.015631621703505516,
-0.030200360342860222,
0.020379221066832542,
-0.07204414904117584,
0.0003964465868193656,
0.05028148368000984,
0.06796512007713318,
0.021178580820560455,
0.0022654568310827017,
0.02852938510477543,
0.06706739962100983,
0.041944194585084915,
0.04724975302815437,
0.060721255838871,
-0.043917689472436905,
-0.047415591776371,
-0.07533302158117294,
0.0532723069190979,
0.06995168328285217,
0.034582458436489105,
-0.0017381919315084815,
0.09681832790374756,
0.09475436806678772,
0.10337356477975845,
0.07314317673444748,
-0.04344740882515907,
-0.002271565841510892,
0.015985067933797836,
0.03964148461818695,
-0.12849441170692444,
-0.05554477497935295,
-0.020595751702785492,
-0.15017367899417877,
-0.10973350703716278,
-0.12302536517381668,
-0.07922748476266861,
0.021449385210871696,
-0.036488793790340424,
-0.08859629184007645,
0.08264943957328796,
0.0259171724319458,
-0.018087688833475113,
0.01763390377163887,
-0.10386448353528976,
0.05852849408984184,
0.04897231236100197,
0.008581999689340591,
0.033052656799554825,
0.005469242576509714,
0.06887632608413696,
-0.09173534065485,
0.04558264836668968,
-0.13813772797584534,
-0.04716115444898605,
-0.042347442358732224,
-0.031802259385585785,
-0.04395569860935211,
-0.01335576269775629,
-0.032346487045288086,
-0.06227431073784828,
-0.06712094694375992,
-0.048703137785196304,
0.0613110177218914,
0.0019474414875730872,
-0.09840252995491028,
-0.11575333774089813,
0.042898211628198624,
-0.04271174222230911,
-0.0386405773460865
# 39 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c3_weight);
# 37 "c_cnn/top.cpp"

 const data_t c4_weight[120*84]={

# 1 "c_cnn/param/fc1.weight.h" 1
-0.023928094655275345,
-0.06224731355905533,
0.05150015279650688,
-0.05313510447740555,
-0.0033462378196418285,
0.06454459577798843,
-0.03892185166478157,
-0.11204291135072708,
-0.08087339997291565,
-0.024916144087910652,
-0.050822556018829346,
0.1502775102853775,
0.08060678839683533,
-0.04564372077584267,
-0.15390364825725555,
-0.25520265102386475,
-0.03410336747765541,
-0.04695857688784599,
-0.2287120223045349,
0.021224571391940117,
-0.1260509490966797,
-0.19893145561218262,
-0.04367586225271225,
-0.17958661913871765,
-0.00764080323278904,
0.21237294375896454,
0.1897902935743332,
0.1351240575313568,
-0.007378562353551388,
0.10975337028503418,
0.1970711499452591,
0.06343821436166763,
0.010893313214182854,
-0.015074169263243675,
0.09753207862377167,
0.21063216030597687,
-0.12724295258522034,
0.10767132043838501,
-0.04451623931527138,
0.11944255977869034,
0.030931340530514717,
-0.04918000474572182,
0.07714298367500305,
-0.20856696367263794,
-0.12512770295143127,
-0.12959709763526917,
-0.008852907456457615,
0.06779114156961441,
-0.1763974130153656,
0.14742796123027802,
-0.07370860129594803,
-0.09642836451530457,
0.024071577936410904,
0.1912788301706314,
0.07278882712125778,
0.05920925736427307,
0.10605181753635406,
-0.051711879670619965,
0.04543912038207054,
0.03530750051140785,
-0.14551658928394318,
0.0706261694431305,
-0.2195371687412262,
-0.023639963939785957,
-0.03922184556722641,
0.00683087483048439,
0.09716133773326874,
-0.05202825367450714,
-0.11898539960384369,
-0.1280582994222641,
-0.08307438343763351,
-0.0013481862843036652,
-0.004603957757353783,
0.023174909874796867,
-0.09243526309728622,
-0.18321847915649414,
0.11059240251779556,
0.00989917665719986,
-0.09070006757974625,
0.08170443773269653,
0.18752673268318176,
0.09049542993307114,
-0.09414985030889511,
-0.08280904591083527,
0.17066924273967743,
-0.15438519418239594,
-0.16613997519016266,
-0.0015026831533759832,
-0.17397725582122803,
0.008837954141199589,
-0.0622812956571579,
-0.10207557678222656,
0.017934542149305344,
-0.05387583747506142,
0.042196232825517654,
0.12267933785915375,
0.06869622319936752,
0.031449176371097565,
0.05454656481742859,
-0.09430982172489166,
0.04728655517101288,
0.1025712713599205,
-0.12095310539007187,
-0.11265577375888824,
0.1631704419851303,
0.18772786855697632,
-0.2181810587644577,
0.028239045292139053,
0.02748686820268631,
0.12199050933122635,
0.01049872487783432,
0.1064470112323761,
-0.012907901778817177,
0.058125149458646774,
0.01322555635124445,
0.26898354291915894,
0.0156615749001503,
-0.08743870258331299,
-0.0150061696767807,
-0.03701037913560867,
0.015625106170773506,
0.04941312223672867,
0.023900747299194336,
0.11958987265825272,
0.1304905265569687,
-0.08776212483644485,
-0.052765969187021255,
0.0415690541267395,
0.12997762858867645,
0.018214697018265724,
0.08716714382171631,
0.12414524704217911,
-0.012529266998171806,
0.18836787343025208,
0.12204699963331223,
0.2312275916337967,
-0.010657223872840405,
0.11457210034132004,
0.1409052014350891,
0.08563607186079025,
-0.11327368021011353,
0.0486174002289772,
-0.026867369189858437,
0.06164685636758804,
-0.07331851869821548,
-0.12096676975488663,
0.016023434698581696,
-0.03492725268006325,
0.0467669740319252,
-0.032063309103250504,
-0.18114060163497925,
0.00681868102401495,
-0.15892575681209564,
-0.14585818350315094,
-0.0015465912874788046,
-0.17109151184558868,
0.07473555952310562,
-0.050969481468200684,
0.09503349661827087,
-0.031950999051332474,
-0.04862863942980766,
-0.1398356556892395,
-0.030300967395305634,
-0.06195941939949989,
0.08340602368116379,
0.18686579167842865,
0.11319144070148468,
0.13078270852565765,
0.09857989847660065,
-0.15539325773715973,
-0.055148106068372726,
0.07323627918958664,
-0.0668313279747963,
-0.18211887776851654,
0.08066155761480331,
-0.03524114564061165,
-0.08799996972084045,
-0.03859931230545044,
-0.04412788152694702,
0.03551790490746498,
0.04733937606215477,
0.07428644597530365,
0.04068084433674812,
0.1582513302564621,
0.04481605440378189,
0.03689998388290405,
-0.006362541578710079,
0.12493980675935745,
0.18066613376140594,
-0.04126707836985588,
0.0606386698782444,
0.07424575090408325,
0.1599576324224472,
-0.053579576313495636,
0.032129108905792236,
0.07284568250179291,
-0.1037382036447525,
0.11402706801891327,
0.051869623363018036,
0.11757375299930573,
-0.13331764936447144,
0.1180492639541626,
-0.034926675260066986,
-0.057509854435920715,
-0.09119029343128204,
-0.035368047654628754,
0.01745777018368244,
-0.11340564489364624,
0.1513216346502304,
-0.028518885374069214,
0.02460288815200329,
0.12558495998382568,
-0.056815046817064285,
-0.01231315080076456,
-0.0688273087143898,
-0.05380682647228241,
-0.03578125312924385,
0.11864437162876129,
-0.17061293125152588,
-0.13856562972068787,
0.08072885870933533,
-0.03707566857337952,
0.17193281650543213,
0.1694488376379013,
0.0030049956403672695,
-0.07111285626888275,
-0.04558275640010834,
0.009354107081890106,
0.030805112794041634,
-0.005217628553509712,
0.13404422998428345,
0.1306346356868744,
0.0403001606464386,
-0.050189461559057236,
0.035150617361068726,
0.03240614011883736,
0.09996956586837769,
0.12334160506725311,
-0.1906811147928238,
-0.13637776672840118,
-0.016765320673584938,
-0.016191864386200905,
0.03454187512397766,
-0.04800613969564438,
0.0241507887840271,
0.08060985803604126,
-0.05066486448049545,
-0.1486244648694992,
0.18362294137477875,
-0.0371808297932148,
0.02906186506152153,
-0.16584265232086182,
0.00950682070106268,
-0.014081100933253765,
0.1448160707950592,
0.038697388023138046,
-0.0023278486914932728,
0.018214769661426544,
0.02381127141416073,
-0.20417828857898712,
0.02634502202272415,
-0.09144614636898041,
-0.042821433395147324,
-0.09376535564661026,
-0.09283223003149033,
-0.02556590735912323,
-0.061645325273275375,
-0.016636883839964867,
-0.10167912393808365,
-0.017540713772177696,
-0.03003745526075363,
-0.08167219161987305,
-0.13479314744472504,
-0.06034763529896736,
-0.014304403215646744,
0.1323222517967224,
0.038199152797460556,
-0.12899312376976013,
-0.1858314573764801,
-0.007112416438758373,
0.196163147687912,
-0.06394246965646744,
0.11964500695466995,
-0.06872385740280151,
-0.09581904858350754,
0.006968337576836348,
0.12844102084636688,
-0.08597726374864578,
-0.10823329538106918,
0.06941158324480057,
-0.06497689336538315,
0.02353592962026596,
-0.1260625720024109,
0.1624072790145874,
-0.021250609308481216,
0.09544417262077332,
0.14273762702941895,
-0.08715119957923889,
0.01633400283753872,
0.10326043516397476,
-0.03610556945204735,
0.04506596922874451,
0.015001542866230011,
0.004828079603612423,
-0.04116598889231682,
-0.07171287387609482,
0.08384684473276138,
-0.0038272044621407986,
0.030803726986050606,
0.10738177597522736,
0.014733717776834965,
0.05814221128821373,
0.13116534054279327,
-0.02950659580528736,
0.014839736744761467,
-0.008822973817586899,
0.0640638917684555,
-0.054891739040613174,
0.03718047961592674,
0.19118531048297882,
-0.024461880326271057,
0.038450662046670914,
-0.10194798558950424,
-0.03125879541039467,
0.1816895753145218,
-0.07890807092189789,
-0.09724544733762741,
-0.05059807747602463,
0.013958285562694073,
-0.1880590319633484,
-0.10133583843708038,
0.050471749156713486,
-0.09921931475400925,
-0.024200115352869034,
-0.00417017238214612,
-0.0008313794969581068,
-0.11720839887857437,
0.0027712916489690542,
-0.056443389505147934,
-0.09267758578062057,
-0.02299128659069538,
0.05314081162214279,
0.15998509526252747,
-0.08511820435523987,
-0.034657254815101624,
-0.011377851478755474,
0.08364803344011307,
-0.027084974572062492,
-0.0906805545091629,
0.14759761095046997,
0.14170241355895996,
0.04206441342830658,
0.06318195909261703,
-0.03771372511982918,
0.19325947761535645,
0.03528997302055359,
0.12684112787246704,
-0.018397457897663116,
-0.11119670420885086,
-0.09951546788215637,
0.07087276130914688,
0.0237105879932642,
-0.15525348484516144,
0.05917394906282425,
0.01617967151105404,
0.0483943447470665,
-0.003759849350899458,
-0.01692868396639824,
0.042554959654808044,
0.08425845950841904,
-0.07409155368804932,
-0.06219704449176788,
-0.08715580403804779,
-0.1188516914844513,
0.08857379108667374,
0.0311246570199728,
-0.02331463433802128,
0.08627814054489136,
-0.08198380470275879,
-0.04305236414074898,
-0.020776184275746346,
-0.07991006970405579,
0.0464450865983963,
0.01948680728673935,
0.022961949929594994,
-0.05110352858901024,
0.15648695826530457,
-0.11714189499616623,
0.0011513357749208808,
-0.033949390053749084,
0.030053965747356415,
-0.15567053854465485,
0.006417223252356052,
-0.19692417979240417,
0.06927578151226044,
-0.04638882353901863,
-0.03681149333715439,
-0.03946218639612198,
-0.16261163353919983,
-0.07605224847793579,
0.07940391451120377,
0.0453939363360405,
0.1412997543811798,
0.03673991933465004,
-0.08206586539745331,
0.1839943677186966,
-0.12058061361312866,
-0.03720440715551376,
0.08888725191354752,
0.06295772641897202,
0.009726578369736671,
-0.03282228484749794,
0.00639643520116806,
-0.01632382906973362,
-0.0635981634259224,
-0.036013755947351456,
-0.0191958025097847,
-0.010523376055061817,
-0.018789084628224373,
0.029513517394661903,
-0.11555115133523941,
0.16704915463924408,
0.08948549628257751,
0.055918388068675995,
-0.008116589859127998,
0.12886448204517365,
0.06050944700837135,
0.07572144269943237,
0.027712009847164154,
0.058487676084041595,
-0.006612748373299837,
-0.09503589570522308,
0.018089059740304947,
0.11436592042446136,
-0.06304652243852615,
0.11466673761606216,
0.023236948996782303,
0.08945740014314651,
-0.06859898567199707,
0.14514276385307312,
0.08827599138021469,
0.03788081556558609,
-0.0688813254237175,
0.0843888446688652,
0.03874776139855385,
0.06566798686981201,
0.023232361301779747,
-0.054499562829732895,
-0.06482984125614166,
-0.043075982481241226,
-0.06937570124864578,
0.013585647568106651,
0.06869786232709885,
-0.1580049842596054,
0.030533209443092346,
-0.10392240434885025,
0.014909918420016766,
0.062187906354665756,
-0.05539693310856819,
-0.1319216787815094,
0.03243311122059822,
0.013542406260967255,
0.0532044880092144,
-0.08256411552429199,
0.10476060956716537,
-0.02556871995329857,
0.029292456805706024,
-0.08356298506259918,
-0.06596041470766068,
0.10693440586328506,
0.14329415559768677,
-0.007067766506224871,
0.025771215558052063,
-0.08438926190137863,
0.03717024624347687,
0.06953082233667374,
0.0017689069500193,
-0.09396478533744812,
-0.126143679022789,
-0.09032128751277924,
-0.04958802089095116,
-0.017009185627102852,
-0.09151315689086914,
0.026141971349716187,
-0.1786244660615921,
0.08231662958860397,
-0.012181277386844158,
0.10120277106761932,
-0.21329164505004883,
0.06851790845394135,
0.0038352429401129484,
-0.00037367691402323544,
-0.036073848605155945,
0.17641200125217438,
0.025949491187930107,
0.186674565076828,
0.07106870412826538,
0.157634437084198,
0.0286357793956995,
0.014190459623932838,
-0.0310010127723217,
-0.0012599332258105278,
-0.14738933742046356,
-0.06256512552499771,
0.05640021711587906,
-0.08655457943677902,
-0.18331852555274963,
0.1415523886680603,
0.02134096994996071,
-0.0773785412311554,
-0.00345565821044147,
0.04412110522389412,
-0.07049094140529633,
0.10058540105819702,
-0.11489702016115189,
0.0018151327967643738,
-0.01404061820358038,
0.12548962235450745,
0.06820579618215561,
0.05960988998413086,
-0.012329556047916412,
-0.012790228240191936,
0.09045985341072083,
0.13601206243038177,
0.00444189365953207,
-0.0595482736825943,
0.04554247483611107,
0.023572681471705437,
-0.15262073278427124,
-0.004607245791703463,
0.10668345540761948,
-0.013665948063135147,
0.12099398672580719,
-0.16555163264274597,
-0.10631893575191498,
0.0573064424097538,
0.01336788758635521,
0.09973733127117157,
0.02985047549009323,
0.04452352598309517,
0.19574297964572906,
-0.11969780921936035,
-0.1092410683631897,
-0.16138871014118195,
-0.08723466098308563,
0.10252828896045685,
-0.217766672372818,
-0.06614979356527328,
-0.1704399287700653,
-0.030656808987259865,
-0.20287463068962097,
0.023581955581903458,
-0.07575849443674088,
0.07163163274526596,
0.029419083148241043,
0.09017343074083328,
-0.032375186681747437,
-0.04324101656675339,
0.056218113750219345,
-0.19238153100013733,
-0.036098018288612366,
-0.009354174137115479,
-0.05414706468582153,
-0.00876370258629322,
-0.05384046956896782,
-0.06858499348163605,
0.0950782299041748,
-0.006583063397556543,
-0.14154011011123657,
0.09812026470899582,
0.008846702985465527,
-0.16722367703914642,
-0.12734055519104004,
0.12248898297548294,
0.12644483149051666,
-0.1494513899087906,
0.03486127033829689,
0.03767802566289902,
-0.033883847296237946,
0.13119734823703766,
-0.0313955657184124,
-0.03358350694179535,
-0.15028710663318634,
0.067200668156147,
-0.06346921622753143,
-0.024918511509895325,
0.191266730427742,
0.05963755026459694,
-0.08332216739654541,
-0.0816161185503006,
-0.05751977115869522,
-0.10012395679950714,
-0.07171645760536194,
0.0502387173473835,
-0.09809799492359161,
0.047338005155324936,
0.1492026150226593,
0.04565392807126045,
0.11713670939207077,
0.15235480666160583,
0.03603164851665497,
-0.04582492262125015,
0.0261397622525692,
-0.049334313720464706,
-0.04628235474228859,
0.026972733438014984,
-0.04525560513138771,
-0.047704704105854034,
-0.06990758329629898,
-0.11324198544025421,
0.07681473344564438,
0.2130148708820343,
0.04299880564212799,
-0.03448690101504326,
0.10544285178184509,
0.12420759350061417,
0.12778519093990326,
0.06551074981689453,
0.07479073107242584,
0.09272713959217072,
0.10150725394487381,
0.003111707977950573,
-0.003777881385758519,
0.06324607133865356,
0.10453645139932632,
-0.0033545135520398617,
0.061327628791332245,
0.016879312694072723,
-0.24652673304080963,
0.09240822494029999,
-0.20243953168392181,
0.14620231091976166,
0.03373848646879196,
0.16099809110164642,
0.1656639724969864,
-0.20812784135341644,
-0.06813845783472061,
-0.18383732438087463,
0.11226796358823776,
0.03967147320508957,
0.04747697710990906,
-0.006512708030641079,
0.09248552471399307,
-0.14862710237503052,
0.009153814055025578,
-0.09244810789823532,
-0.1112903580069542,
-0.06470529735088348,
-0.06115913763642311,
0.11752401292324066,
-0.12508179247379303,
0.04792734980583191,
-0.06364583969116211,
-0.020541038364171982,
0.017511647194623947,
0.08298805356025696,
0.07800807803869247,
-0.062403470277786255,
0.04933531582355499,
0.20782747864723206,
0.13232898712158203,
0.04157581180334091,
-0.11886028945446014,
-0.0786735862493515,
-0.03662215918302536,
0.06532591581344604,
0.04876960813999176,
-0.05047208070755005,
0.0461944118142128,
-0.07098651677370071,
-0.14046786725521088,
0.1284877359867096,
0.04203474894165993,
-0.07083948701620102,
0.029751110821962357,
0.06652983278036118,
0.07758460193872452,
0.11696937680244446,
-0.017239371314644814,
-0.049505505710840225,
-0.01995243690907955,
-0.04148198664188385,
0.15960939228534698,
-0.013220127671957016,
0.0720406100153923,
0.061717353761196136,
-0.12242019176483154,
-0.1190132424235344,
-0.11354639381170273,
0.01929761841893196,
0.014126976020634174,
0.10963176935911179,
-0.05263625830411911,
0.14232301712036133,
-0.09882587939500809,
0.015394366346299648,
-0.07217209041118622,
0.10149375349283218,
-0.17743022739887238,
0.03407140076160431,
0.14492931962013245,
0.06477084010839462,
0.011640538461506367,
-0.013191954232752323,
0.0852004811167717,
0.0422632172703743,
0.011061609722673893,
-0.029627950862050056,
0.0008448425796814263,
-0.15216630697250366,
0.05951165407896042,
0.14557644724845886,
-0.10851983726024628,
-0.03368189185857773,
0.08584948629140854,
0.001317097106948495,
0.0019019752508029342,
-0.09726808965206146,
0.012361972592771053,
0.11839654296636581,
0.0764043927192688,
0.11741399765014648,
-0.19069017469882965,
-0.0835672914981842,
0.1999543011188507,
-0.0020674217958003283,
-0.18437543511390686,
0.08087567239999771,
-0.08698491752147675,
0.037414371967315674,
-0.00518960552290082,
0.14736950397491455,
-0.1997729241847992,
-0.05113629996776581,
-0.021623168140649796,
0.028798984363675117,
-0.2339838445186615,
0.09730831533670425,
0.04680858179926872,
0.11763300746679306,
-0.04494810476899147,
0.14248593151569366,
-0.1764860898256302,
0.051463138312101364,
0.030568981543183327,
0.06918429583311081,
0.011955800466239452,
-0.05088581144809723,
-0.1115826815366745,
-0.10486134141683578,
0.02595355734229088,
-0.0999976247549057,
0.21425144374370575,
0.06328947097063065,
-0.07595383375883102,
-0.03605154901742935,
0.027994787320494652,
0.11493391543626785,
0.13005667924880981,
0.0821799635887146,
0.0364980548620224,
0.0481010265648365,
-0.15849411487579346,
0.19648218154907227,
0.0003773927455767989,
-0.0907033309340477,
-0.008670038543641567,
0.07661920040845871,
0.06356719136238098,
-0.14299581944942474,
0.1374206244945526,
0.1001625508069992,
0.13496367633342743,
-0.044353142380714417,
0.017420578747987747,
-0.12398449331521988,
-0.10934031009674072,
0.1231435015797615,
-0.12505237758159637,
-0.041269734501838684,
0.03182573243975639,
0.11673267930746078,
0.11696675419807434,
-0.166989266872406,
0.05748850107192993,
0.06560929119586945,
0.03672000765800476,
0.059637632220983505,
-0.06941191107034683,
-0.043164901435375214,
0.019369985908269882,
-0.12826158106327057,
-0.11895596981048584,
0.06361713260412216,
-0.12609440088272095,
0.031050346791744232,
-0.01081057358533144,
0.0810137614607811,
-0.08984028548002243,
-0.03925800323486328,
0.01947929337620735,
0.05137181654572487,
0.0566842183470726,
0.08212976157665253,
-0.04318280518054962,
0.010630396194756031,
0.1345500648021698,
0.15965920686721802,
-0.08626898378133774,
0.1391543298959732,
-0.0790269747376442,
-0.0639796108007431,
0.13836519420146942,
-0.07577317208051682,
0.06554680317640305,
0.0698690265417099,
-0.09965358674526215,
-0.10674113780260086,
0.1339108645915985,
0.12230983376502991,
0.054734908044338226,
0.1007997989654541,
-0.16712471842765808,
-0.03503679484128952,
-0.06869172304868698,
-0.006766364444047213,
-0.07017900794744492,
-0.0643184632062912,
0.0006171281565912068,
0.06192298233509064,
-0.13533034920692444,
-0.047797150909900665,
0.01714283786714077,
-0.04013444855809212,
-0.10695057362318039,
-0.040453799068927765,
-0.08635377138853073,
0.18916960060596466,
-0.008565109223127365,
0.012553701177239418,
-0.13244594633579254,
0.032689809799194336,
0.08824915438890457,
0.0715106874704361,
0.0002475237415637821,
-0.05453306436538696,
0.060312848538160324,
0.04605294391512871,
0.03182777762413025,
-0.06184915453195572,
0.15571078658103943,
-0.22020868957042694,
0.023307060822844505,
-0.028915414586663246,
-0.11018094420433044,
-0.03351515531539917,
-0.06595557183027267,
-0.050644274801015854,
0.022839417681097984,
-0.11576497554779053,
-0.032388877123594284,
-0.03617066890001297,
0.03369339928030968,
-0.16143938899040222,
-0.034849971532821655,
0.037744078785181046,
-0.19265633821487427,
0.0652175024151802,
0.2683981955051422,
-0.0825948640704155,
0.20381784439086914,
-0.1399986445903778,
-0.03508995845913887,
0.018079346045851707,
-0.034204378724098206,
0.2809436619281769,
-0.083890900015831,
0.11026542633771896,
-0.10132985562086105,
0.03530846908688545,
-0.034362416714429855,
0.0801943689584732,
0.04837736859917641,
0.061117496341466904,
0.028665583580732346,
-0.08589720726013184,
0.19020015001296997,
-0.07257780432701111,
-0.07791397720575333,
-0.07835842669010162,
-0.0027550586964935064,
-0.1441565752029419,
-0.04511633515357971,
0.10322485864162445,
-0.1110319271683693,
0.02094954065978527,
0.017351927235722542,
-0.09428412467241287,
-0.17160223424434662,
0.012373079545795918,
-0.14494547247886658,
-0.17001603543758392,
-0.07848921418190002,
-0.02952175959944725,
0.16684013605117798,
-0.09349146485328674,
-0.07230772823095322,
0.025213871151208878,
0.055667243897914886,
0.005986445117741823,
0.053793925791978836,
0.03139011561870575,
-0.1198720932006836,
-0.03689323738217354,
-0.005194013938307762,
-0.11979388445615768,
-0.14175714552402496,
0.014257000759243965,
0.04767356067895889,
0.06300351768732071,
0.08095788955688477,
0.08259095251560211,
-0.18694008886814117,
-0.084927998483181,
0.04303895682096481,
0.03376523032784462,
0.0354781411588192,
0.11831051856279373,
0.1075470820069313,
-0.17230740189552307,
-0.004124562721699476,
-0.035393234342336655,
-0.015799136832356453,
-0.02451457269489765,
0.14751951396465302,
-0.051004063338041306,
0.060269374400377274,
-0.007541727274656296,
-0.016846345737576485,
-0.05999957397580147,
-0.06875921785831451,
-0.013870170339941978,
0.1029413565993309,
-0.09632489085197449,
-0.03708547353744507,
0.03557148203253746,
0.01797829195857048,
0.04319044575095177,
0.03985526040196419,
0.23512963950634003,
0.02487918920814991,
-0.022753672674298286,
0.15292364358901978,
-0.02606254257261753,
-0.13156403601169586,
0.06029900908470154,
-0.07918433099985123,
-0.03672655671834946,
0.04171083867549896,
-0.04578308016061783,
-0.032288629561662674,
-0.01831425167620182,
0.019171684980392456,
-0.014749163761734962,
-0.05288608744740486,
0.08865631371736526,
-0.09592431783676147,
0.016936419531702995,
-0.1632394641637802,
-0.0599886029958725,
0.010448593646287918,
0.1119110956788063,
-0.07658353447914124,
0.13413381576538086,
0.10938272625207901,
0.14305715262889862,
0.11963486671447754,
0.1077679842710495,
0.13106238842010498,
-0.07080700993537903,
0.006742436904460192,
-0.051786914467811584,
-0.03315388411283493,
-0.03533528372645378,
0.20603559911251068,
-0.17256022989749908,
-0.1829800009727478,
0.037916332483291626,
0.06849696487188339,
0.011001521721482277,
-0.05980871245265007,
-0.06081736832857132,
-0.04024752974510193,
0.053921185433864594,
0.11054278910160065,
0.010563881136476994,
-0.044100675731897354,
-0.047216013073921204,
-0.06739460676908493,
0.1182866320014,
-0.10452666878700256,
-0.07763789594173431,
0.020321115851402283,
0.028369124978780746,
-0.0037799845449626446,
-0.066677026450634,
0.21416454017162323,
0.08525644987821579,
-0.08979801088571548,
-0.0634283646941185,
0.01830347068607807,
0.09595494717359543,
-0.09882868826389313,
-0.0023688331712037325,
0.0374402217566967,
0.09648728370666504,
0.15505461394786835,
0.038360755890607834,
0.08973759412765503,
0.04869456961750984,
0.12980543076992035,
-0.15833188593387604,
-0.029083549976348877,
-0.04589458927512169,
-0.0793745145201683,
0.035258613526821136,
-0.017747912555933,
0.0687759593129158,
0.0466928631067276,
-0.046691522002220154,
-0.09727177023887634,
0.08635939657688141,
0.004188830032944679,
0.06866985559463501,
-0.019771413877606392,
0.0189543254673481,
0.01880240999162197,
-0.06930584460496902,
-0.07290229946374893,
0.10495323687791824,
-0.02057196944952011,
0.036129631102085114,
-0.09916064143180847,
-0.1980755478143692,
-0.08034210652112961,
0.048045407980680466,
-0.1143837422132492,
-0.07203137874603271,
0.001782832434400916,
-0.12736539542675018,
-0.012553212232887745,
0.0585193894803524,
-0.14366260170936584,
0.04093046486377716,
0.11085204780101776,
-0.042855873703956604,
0.06055838242173195,
-0.042040739208459854,
-0.047197457402944565,
-0.005958824418485165,
-0.08337743580341339,
-0.027243006974458694,
-0.11690454930067062,
0.0023245683405548334,
-0.15588368475437164,
0.09397090971469879,
0.09806232154369354,
0.08053930848836899,
0.011359662748873234,
0.06996173411607742,
0.09569444507360458,
-0.005413580220192671,
0.11888836324214935,
-0.08187324553728104,
0.044337086379528046,
-0.05609576776623726,
0.15549863874912262,
0.15771569311618805,
-0.11202102154493332,
-0.02216297760605812,
0.010957986116409302,
0.11532449722290039,
-0.12429377436637878,
0.11244524270296097,
-0.01632627658545971,
0.04854704812169075,
0.04621034488081932,
0.08445761352777481,
0.07596354186534882,
0.11281872540712357,
0.02365873195230961,
0.08793250471353531,
-0.0179311353713274,
-0.02635328099131584,
0.13372570276260376,
0.16786180436611176,
-0.15251246094703674,
0.14410829544067383,
0.14419133961200714,
-0.09740420430898666,
-0.05835384130477905,
0.04466124251484871,
-0.03801104426383972,
0.033807914704084396,
-0.06786026805639267,
-0.19279533624649048,
-0.05615123733878136,
-0.12243971973657608,
-0.09837552160024643,
-0.09703221917152405,
-0.18588902056217194,
-0.06769290566444397,
-0.09978345036506653,
-0.03424900025129318,
-0.08712269365787506,
-0.13087493181228638,
-0.05436096712946892,
-0.13569575548171997,
-0.04204680025577545,
0.01132295560091734,
0.08093590289354324,
0.012091858312487602,
-0.010920081287622452,
0.02727586217224598,
0.0922161191701889,
0.1369827836751938,
-0.1185636892914772,
-0.0756816491484642,
0.1428758203983307,
0.03060947172343731,
-0.06389623880386353,
0.0821361392736435,
-0.01631888374686241,
-0.2504042088985443,
0.022984838113188744,
-0.003752343822270632,
-0.023986956104636192,
0.019138136878609657,
0.06672556698322296,
0.016139503568410873,
0.05235334858298302,
0.10027407109737396,
0.14338287711143494,
0.02783828414976597,
0.023440781980752945,
0.08949160575866699,
-0.010646780952811241,
0.1313842386007309,
0.07963193207979202,
0.014121564105153084,
0.04575755074620247,
-0.007359086070209742,
0.14237314462661743,
-0.04404563084244728,
-0.09069646894931793,
0.08304432034492493,
-0.12619906663894653,
0.09716536104679108,
-0.052126649767160416,
0.10233692824840546,
-0.045557327568531036,
0.10025899857282639,
0.018106194213032722,
-0.11449810862541199,
-0.07704547792673111,
0.036551009863615036,
0.09536051005125046,
0.004655645228922367,
0.05824330821633339,
0.11913157254457474,
-0.05069294199347496,
0.1643565148115158,
0.027802523225545883,
0.05888349190354347,
0.08985719084739685,
-0.0033247771207243204,
0.01749574765563011,
0.18315482139587402,
-0.04664391279220581,
-0.15152691304683685,
0.1121409684419632,
-0.046610571444034576,
0.15949279069900513,
0.10291501134634018,
-0.018513889983296394,
-0.0290084145963192,
0.02097005397081375,
-0.08485107123851776,
-0.028401769697666168,
-0.14947795867919922,
0.09418453276157379,
-0.008608018048107624,
-0.042796436697244644,
0.04456247016787529,
0.11341486871242523,
-0.19659209251403809,
0.08660652488470078,
0.01081285160034895,
-0.08005469292402267,
-0.03220461308956146,
0.09590189158916473,
-0.08727211505174637,
0.053217075765132904,
0.04051588848233223,
0.03417762368917465,
0.022363966330885887,
0.037604957818984985,
-0.02429214119911194,
0.06068737432360649,
0.126097172498703,
0.08751718699932098,
0.1633273959159851,
-0.028914520516991615,
0.16883336007595062,
0.1305767297744751,
0.09684178978204727,
-0.07212430983781815,
-0.015023775398731232,
-0.07279761880636215,
0.03649693727493286,
0.05617714673280716,
0.009356547147035599,
0.12482577562332153,
0.05856413394212723,
-0.09875956922769547,
-0.0027392860502004623,
0.10946229845285416,
-0.16703146696090698,
-0.09868133068084717,
0.07258479297161102,
-0.1364787518978119,
0.019417589530348778,
-0.03230346739292145,
-0.08450843393802643,
0.022945351898670197,
-0.2834382951259613,
0.007273725233972073,
-0.1987493336200714,
0.11124198138713837,
-0.052181877195835114,
-0.08143997192382812,
-0.016753796488046646,
-0.07834108918905258,
-0.12245828658342361,
0.11027361452579498,
0.16760388016700745,
-0.10205809026956558,
0.10361310839653015,
0.03305165097117424,
-0.06557640433311462,
0.02759007178246975,
-0.04935877025127411,
0.05263715609908104,
-0.07385960966348648,
0.10277014970779419,
0.08706977963447571,
-0.10821574181318283,
0.015194232575595379,
0.16709476709365845,
0.15210692584514618,
0.18079142272472382,
-0.003445451846346259,
-0.0015490687219426036,
0.11810097098350525,
0.03363676369190216,
-0.03731974586844444,
-0.1111697405576706,
0.14931648969650269,
0.08671323955059052,
0.08096826821565628,
-0.06730018556118011,
0.06253683567047119,
0.07996833324432373,
-0.1238800510764122,
-0.03239329531788826,
0.1616392284631729,
-0.05679959058761597,
-0.035714682191610336,
-0.012463335879147053,
-0.014963689260184765,
-0.08951693773269653,
-0.0345369353890419,
0.15523874759674072,
0.04000531882047653,
0.02491554245352745,
-0.11845280230045319,
0.005653212312608957,
0.049521684646606445,
0.013018202967941761,
0.009328575804829597,
-0.05207259953022003,
0.19728930294513702,
-0.01618886925280094,
0.029378270730376244,
-0.08330830186605453,
-0.030682366341352463,
0.04063575714826584,
0.23411813378334045,
-0.15749308466911316,
-0.16584108769893646,
0.094533771276474,
-0.1113683208823204,
0.04754699021577835,
0.12348221987485886,
0.14969001710414886,
0.03203466162085533,
-0.07496105134487152,
-0.012118754908442497,
0.02990681491792202,
-0.1236707791686058,
0.1657322347164154,
0.17695580422878265,
0.026358680799603462,
0.09214331209659576,
0.10459858179092407,
0.041407302021980286,
0.04639195650815964,
0.010846827179193497,
-0.152864471077919,
-0.06236864998936653,
-0.01194270420819521,
-0.009608014486730099,
0.013483338057994843,
-0.004293330013751984,
0.17433121800422668,
-0.05596727132797241,
-0.018262673169374466,
0.045481614768505096,
0.038841404020786285,
-0.062354423105716705,
0.09212067723274231,
0.008224759250879288,
0.040479954332113266,
-0.015443401411175728,
0.12280632555484772,
0.047281138598918915,
-0.05050861835479736,
0.03899304196238518,
-0.03763415291905403,
0.04069919139146805,
-0.05357424169778824,
0.031603407114744186,
-0.011672749184072018,
0.012617798522114754,
-0.017927629873156548,
-0.027743490412831306,
-0.029596248641610146,
-0.054372478276491165,
-0.029934579506516457,
-0.061601344496011734,
-0.13737447559833527,
-0.035784799605607986,
-0.030612733215093613,
-0.05131680518388748,
0.13638819754123688,
-0.004081500228494406,
-0.08871747553348541,
-0.1913636177778244,
0.09611717611551285,
0.15428027510643005,
0.12539911270141602,
-0.03546484187245369,
0.0006444246391765773,
-0.08584937453269958,
-0.08814257383346558,
0.08163267374038696,
-0.04306888207793236,
-0.02771519497036934,
-0.08749422430992126,
0.10274029523134232,
-0.013534228317439556,
-0.00032673950772732496,
-0.0056339409202337265,
-0.14357277750968933,
0.13297292590141296,
0.06674863398075104,
0.09268461912870407,
-0.14044493436813354,
-0.10872694104909897,
0.11708873510360718,
0.03778143227100372,
-0.004672462586313486,
-0.061729319393634796,
-0.07437867671251297,
-0.030384821817278862,
-0.07888367772102356,
-0.08470004796981812,
0.07446442544460297,
0.010071968659758568,
0.056419894099235535,
-0.052555058151483536,
0.13247205317020416,
0.060695286840200424,
0.09857358038425446,
-0.06536313146352768,
-0.09386111795902252,
0.03450317680835724,
0.06834301352500916,
-0.04589371010661125,
0.02076670341193676,
0.04059883952140808,
0.1727689504623413,
-0.06292078644037247,
-0.09439318627119064,
0.1094600111246109,
-0.08113658428192139,
-0.02454916387796402,
0.05977173149585724,
-0.017675599083304405,
0.0392301082611084,
-0.05924936383962631,
0.010459153912961483,
-0.1028045266866684,
-0.07067858427762985,
0.024506771937012672,
0.05658469721674919,
-0.13718564808368683,
-0.0012057158164680004,
-0.1223168596625328,
-0.15004809200763702,
0.05065779760479927,
-0.05624635890126228,
0.09511933475732803,
-0.014837940223515034,
0.023923536762595177,
0.07315625250339508,
-0.05384628474712372,
-0.050832945853471756,
-0.0058120302855968475,
0.037980299443006516,
0.1983090043067932,
0.15249410271644592,
0.10546242445707321,
0.06938347220420837,
0.04605354368686676,
0.009179506450891495,
0.04971475154161453,
0.0195273719727993,
-0.1016506627202034,
-0.10195120424032211,
-0.021118680015206337,
-0.12733444571495056,
0.1421201080083847,
-0.059553928673267365,
-0.19275285303592682,
-0.09062584489583969,
0.10883224755525589,
-0.17649133503437042,
0.08628369122743607,
0.040573641657829285,
0.11805102974176407,
-0.039759714156389236,
0.10936831682920456,
0.11973190307617188,
0.1435886174440384,
0.02925850637257099,
0.23746120929718018,
-0.0886450707912445,
-0.017341112717986107,
-0.0005846207495778799,
-0.04468066617846489,
0.09365516155958176,
0.10274284332990646,
0.09473835676908493,
0.012249700725078583,
0.03982573747634888,
-0.10218833386898041,
0.11898010224103928,
0.02821992337703705,
0.15564297139644623,
-0.00170626409817487,
0.12796065211296082,
-0.05115965008735657,
0.1764124631881714,
0.05160503461956978,
-0.1471530646085739,
-0.03175390884280205,
-0.11926653236150742,
0.037921879440546036,
0.054839909076690674,
0.08773540705442429,
-0.01657737046480179,
0.06959476321935654,
-0.1111285462975502,
-0.026176277548074722,
-0.0024705231189727783,
0.17066368460655212,
-0.06227447837591171,
-0.094340980052948,
0.10219129920005798,
-0.12703314423561096,
-0.15136784315109253,
-0.160600945353508,
0.09070264548063278,
-0.032777346670627594,
0.11335873603820801,
0.046376701444387436,
-0.02483578585088253,
0.07913817465305328,
0.11620526760816574,
0.07557173818349838,
-0.056947801262140274,
-0.12543590366840363,
0.07763296365737915,
0.038059432059526443,
-0.0573490746319294,
-0.13923774659633636,
0.06488249450922012,
-0.01793781667947769,
-0.1521308571100235,
-0.07507943361997604,
0.2064208835363388,
0.051107440143823624,
-0.0862506777048111,
0.09191185981035233,
0.01641577109694481,
0.0009334331844002008,
-0.04585209861397743,
0.04897882044315338,
-0.12904633581638336,
-0.08139123767614365,
-0.1255742609500885,
-0.07098963111639023,
-0.004104859661310911,
0.10082738101482391,
-0.13035720586776733,
-0.054206281900405884,
-0.08472459018230438,
0.08897106349468231,
-0.004138523247092962,
-0.02359578013420105,
-0.08576773852109909,
-0.0019234155770391226,
0.13094162940979004,
-0.12036480009555817,
-0.039003968238830566,
0.10763153433799744,
0.06976506114006042,
0.007797257974743843,
0.05042523890733719,
0.12608540058135986,
-0.023849252611398697,
-0.10644804686307907,
0.1848849207162857,
0.04279996082186699,
0.09068090468645096,
-0.039518967270851135,
-0.13653706014156342,
-0.050781987607479095,
-0.06603879481554031,
0.09715515375137329,
0.10852093994617462,
0.02947923354804516,
0.07226037979125977,
0.10020901262760162,
0.007198107894510031,
0.07243308424949646,
0.032388560473918915,
0.07964309304952621,
0.16560997068881989,
-0.03154878318309784,
-0.060033347457647324,
0.011831234209239483,
0.10340240597724915,
-0.08957695215940475,
0.10937736183404922,
-0.0047073098830878735,
-0.08172489702701569,
-0.028093548491597176,
0.1121467873454094,
-0.08279775083065033,
-0.041073113679885864,
0.11516910791397095,
0.032446958124637604,
0.0018005953170359135,
-0.14818011224269867,
0.14032042026519775,
-0.13958218693733215,
0.0009867057669907808,
-0.037291932851076126,
0.055947571992874146,
-0.10150831192731857,
-0.0017295702127739787,
0.12704794108867645,
-0.1290808469057083,
-0.01507822796702385,
0.07125763595104218,
0.004466953221708536,
-0.023217080160975456,
0.006933005526661873,
-0.03754531219601631,
-0.0017114309594035149,
-0.09681615233421326,
0.02568872645497322,
0.028281811624765396,
-0.05355712026357651,
0.11862752586603165,
0.08117219805717468,
0.022799497470259666,
-0.27506470680236816,
-0.11216272413730621,
-0.10715653002262115,
0.1072976142168045,
0.004336357582360506,
0.07566054165363312,
-0.017343072220683098,
0.0018225994426757097,
0.04316285625100136,
0.1568407416343689,
-0.008447150699794292,
-0.024933146312832832,
-0.04385940730571747,
-0.13095907866954803,
0.09517046064138412,
-0.0991247370839119,
0.11585723608732224,
-0.08363336324691772,
0.06763404607772827,
0.0872187465429306,
0.06005682423710823,
0.021076777949929237,
0.05305105447769165,
-0.026008732616901398,
0.19512194395065308,
-0.08927878737449646,
-0.07316956669092178,
0.0647646114230156,
-0.03722034767270088,
0.11129459738731384,
0.1197843849658966,
0.005676859058439732,
-0.035527344793081284,
0.1315799504518509,
-0.11910552531480789,
-0.026094650849699974,
0.12169348448514938,
-0.13549458980560303,
-0.06641530990600586,
0.09043465554714203,
-0.009659125469624996,
-0.0724911168217659,
-0.14131450653076172,
-0.01546221598982811,
0.12354318052530289,
-0.01984679326415062,
0.08328194171190262,
-0.11885477602481842,
-0.037907205522060394,
-0.039323147386312485,
0.022699521854519844,
0.12233731895685196,
0.11683695018291473,
0.06118173897266388,
0.07499600946903229,
-0.05996602401137352,
-0.009311474859714508,
0.14648231863975525,
0.05926886945962906,
-0.04546080902218819,
0.030388886108994484,
-0.07387400418519974,
0.026343686506152153,
0.10009751468896866,
-0.040790390223264694,
0.0367233008146286,
-0.17167803645133972,
0.07674774527549744,
0.03560635820031166,
0.050177376717329025,
-0.05547251179814339,
0.06370686739683151,
0.04136959835886955,
-0.03471934050321579,
0.006096928846091032,
0.09150907397270203,
-0.06229393556714058,
0.043513815850019455,
-0.10049821436405182,
0.08303499221801758,
0.08407706767320633,
-0.05484304949641228,
0.07831010222434998,
0.05783805623650551,
-0.008093937300145626,
-0.001459285500459373,
-0.034085869789123535,
-0.08230013400316238,
0.024603625759482384,
0.10587083548307419,
0.01501690037548542,
0.056864913552999496,
-0.035173751413822174,
-0.06255972385406494,
-0.12326230108737946,
0.14676368236541748,
0.21253833174705505,
0.06887537986040115,
0.09246344864368439,
0.009675316512584686,
-0.08767381310462952,
-0.03096962720155716,
-0.10029801726341248,
-0.03237316384911537,
0.019707780331373215,
0.0488351546227932,
-0.16167806088924408,
-0.07505268603563309,
0.032538510859012604,
-0.10325922071933746,
-0.06289049983024597,
-0.084531269967556,
0.031494397670030594,
0.02383154071867466,
-0.06391888111829758,
-0.05128203332424164,
-0.019849997013807297,
-0.09667891263961792,
-0.1279786229133606,
-0.15892530977725983,
0.027420060709118843,
0.1559600532054901,
-0.02601936273276806,
0.060876425355672836,
-0.12187149375677109,
-0.13097207248210907,
-0.03681130334734917,
0.08777301013469696,
0.05048409476876259,
-0.024170661345124245,
0.07737118005752563,
-0.13862255215644836,
0.07894136756658554,
-0.1356828510761261,
0.030257709324359894,
-0.02333212085068226,
-0.017873283475637436,
0.07447825372219086,
0.003298628143966198,
-0.020331477746367455,
0.06434016674757004,
-0.12702122330665588,
0.003995521459728479,
-0.12136606872081757,
-0.05909070372581482,
-0.09538062661886215,
-0.060111381113529205,
-0.04853647202253342,
0.09234354645013809,
0.012570700608193874,
0.07006344199180603,
-0.11337583512067795,
-0.017361478880047798,
0.1794622838497162,
-0.008925233036279678,
0.03090597875416279,
-0.03413984924554825,
0.043524183332920074,
0.10034365952014923,
0.004082226660102606,
0.14274591207504272,
-0.02560603991150856,
-0.028415823355317116,
0.06191733852028847,
0.03495080769062042,
0.059743139892816544,
0.03126778453588486,
0.07716790586709976,
-0.019889159128069878,
-0.02153605781495571,
-0.16117261350154877,
-0.09059078246355057,
0.03486867994070053,
0.058807339519262314,
0.06273184716701508,
0.005269200541079044,
-0.07139723747968674,
0.02510606124997139,
0.04615085572004318,
-0.12273117899894714,
-0.18285606801509857,
0.04271848872303963,
0.08928672969341278,
0.10964255779981613,
-0.1254427433013916,
-0.034837499260902405,
-0.044567715376615524,
-0.03696713224053383,
-0.10769922286272049,
-0.1092773973941803,
-0.033486295491456985,
0.14708995819091797,
-0.027574999257922173,
0.14337851107120514,
-0.021550700068473816,
0.15340037643909454,
0.011181589215993881,
0.027319198474287987,
-0.02516965940594673,
-0.06071453168988228,
-0.03847023844718933,
0.07768746465444565,
0.07795557379722595,
0.09905736893415451,
-0.0016828266670927405,
-0.08736301958560944,
-0.05864303186535835,
0.03327026963233948,
-0.12776099145412445,
0.03517259284853935,
-0.20008902251720428,
0.03675607591867447,
-0.03709743544459343,
-0.12195346504449844,
-0.10562462359666824,
0.030839888378977776,
0.1736673265695572,
0.16071617603302002,
0.1196405366063118,
-0.00013305156608112156,
-0.14020444452762604,
0.13297007977962494,
-0.1088053360581398,
0.06678539514541626,
-0.12655995786190033,
-0.0834018737077713,
-0.09619111567735672,
0.017018631100654602,
0.11324536055326462,
-0.11733061075210571,
-0.00400319742038846,
-0.06016186997294426,
0.08781321346759796,
0.043802011758089066,
0.0397036038339138,
0.061141252517700195,
-0.02895638905465603,
-0.15440857410430908,
-0.062409836798906326,
-0.09521298110485077,
-0.03364245221018791,
0.07147201150655746,
-0.03335891291499138,
0.009674676693975925,
-0.09576749056577682,
-0.07219640165567398,
0.047751471400260925,
-0.10202696174383163,
-0.1817224621772766,
0.015317555516958237,
0.14591163396835327,
-0.047985974699258804,
0.011657833121716976,
-0.10407285392284393,
-0.07817643135786057,
-0.059446658939123154,
0.07590176165103912,
0.20581045746803284,
-0.08383423089981079,
0.024693623185157776,
0.07693783938884735,
-0.06476680934429169,
-0.005790363531559706,
-0.06444356590509415,
-0.020227037370204926,
-0.052505552768707275,
0.04697401076555252,
0.014846445992588997,
-0.05657801777124405,
0.0628410130739212,
0.07321739196777344,
0.07548460364341736,
-0.021008441224694252,
0.044334813952445984,
-0.09248075634241104,
-0.10238981246948242,
0.18909041583538055,
-0.009349385276436806,
-0.06520689278841019,
-0.09356138855218887,
-0.07189027965068817,
0.12487785518169403,
0.09933380782604218,
-0.06528358906507492,
-0.17803506553173065,
0.11646201461553574,
0.018450049683451653,
0.1178116723895073,
-0.034166138619184494,
-0.08221244812011719,
-0.034647777676582336,
-0.06369965523481369,
-0.01312138233333826,
-0.029256198555231094,
0.05328386649489403,
0.015770887956023216,
-0.079881452023983,
0.01162857934832573,
0.08159118890762329,
-0.03583870455622673,
-0.03467578813433647,
0.010138282552361488,
0.03371445834636688,
0.0984581783413887,
-0.07750916481018066,
-0.011220550164580345,
0.031889740377664566,
-0.006165590602904558,
0.0008350898278877139,
0.017862942069768906,
-0.06778997927904129,
0.10238619148731232,
-0.10270188003778458,
-0.11940519511699677,
-0.11460690200328827,
0.07557850331068039,
-0.0967128798365593,
-0.029250290244817734,
-0.03356488421559334,
0.14588521420955658,
0.024548545479774475,
0.07064137607812881,
0.02451086975634098,
0.05838894844055176,
-0.11261755973100662,
-0.06068902835249901,
-0.07748039066791534,
0.05267661064863205,
-0.16460534930229187,
0.09376315772533417,
0.07094448059797287,
-0.12020228803157806,
0.08988809585571289,
0.1322491616010666,
0.0020799057092517614,
0.13152925670146942,
-0.12028207629919052,
0.04824545234441757,
0.03320988267660141,
-0.040403831750154495,
0.03926233947277069,
0.02814467065036297,
-0.059982527047395706,
-0.1159423366189003,
0.08514003455638885,
0.04411928355693817,
0.04747273027896881,
0.07168083637952805,
0.12839408218860626,
0.050977207720279694,
0.08995461463928223,
0.09843529760837555,
0.035960230976343155,
-0.0758487656712532,
-0.00928210187703371,
-0.019896656274795532,
-0.03730672970414162,
-0.028738055378198624,
-0.08339729905128479,
-0.1705860197544098,
-0.049588900059461594,
-0.029984882101416588,
-0.013886394910514355,
-0.10313305258750916,
-0.10350918024778366,
-0.028421299532055855,
0.10284940898418427,
-0.030813399702310562,
0.002249374520033598,
-0.07385443896055222,
-0.01369431335479021,
-0.0735025480389595,
0.009838053025305271,
-0.07419543713331223,
0.18751800060272217,
-0.027985401451587677,
-0.07250738143920898,
0.0073328339494764805,
0.12055743485689163,
0.07193934917449951,
-0.0012728143483400345,
-0.008504402823746204,
0.0969356968998909,
-0.17679086327552795,
0.16979998350143433,
0.043225597590208054,
-0.0153591837733984,
0.023413360118865967,
-0.023642627522349358,
-0.013816555961966515,
-0.08926860243082047,
-0.11197545379400253,
0.042003244161605835,
0.09337740391492844,
-0.0013945812825113535,
0.04263315349817276,
-0.03910141810774803,
0.08404529094696045,
0.017215874046087265,
0.09135670214891434,
-0.06132809817790985,
0.01021484937518835,
-0.1360108107328415,
-0.013479284942150116,
0.1634027063846588,
0.005374755244702101,
-0.025627074763178825,
-0.007844144478440285,
-0.11914626508951187,
0.06425460427999496,
-0.09816674143075943,
-0.006494036875665188,
-0.17743892967700958,
0.061213117092847824,
0.051779113709926605,
0.09061595797538757,
0.011783148162066936,
0.04872563108801842,
0.01315358467400074,
-0.031183293089270592,
-0.08285984396934509,
0.058647096157073975,
0.022946633398532867,
-0.09177299588918686,
0.03517713397741318,
-0.02782525308430195,
-0.05853624269366264,
-0.09192574769258499,
-0.05777734890580177,
-0.1181420385837555,
0.040600284934043884,
0.005087988451123238,
0.05221183970570564,
0.15823209285736084,
-0.01729356124997139,
0.16008137166500092,
0.10641652345657349,
0.03910722956061363,
0.017309747636318207,
-0.04805710166692734,
0.021588092669844627,
0.018322281539440155,
0.05018008127808571,
-0.012776886112987995,
0.08667672425508499,
-0.17649519443511963,
0.002193994587287307,
0.11730153858661652,
-0.08585674315690994,
-0.07238569855690002,
0.08639691025018692,
-0.13232406973838806,
0.06039324775338173,
0.03242990002036095,
0.06848165392875671,
-0.016417982056736946,
0.01343525666743517,
0.12675368785858154,
0.0869603306055069,
-0.06171081215143204,
-0.01237764023244381,
-0.034173768013715744,
-0.021975450217723846,
-0.08862365037202835,
0.14552147686481476,
-0.16741430759429932,
-0.0077337161637842655,
0.0996813029050827,
-0.1283877044916153,
-0.013053873553872108,
0.11654053628444672,
0.0032866341061890125,
-0.004091690294444561,
-0.12299294769763947,
-0.013692280277609825,
-0.14215384423732758,
-0.1440126597881317,
0.12273698300123215,
-0.0008955260273069143,
0.09086038917303085,
-0.1478661298751831,
-0.054524026811122894,
0.05169159546494484,
0.06912042200565338,
0.03367378190159798,
0.13195274770259857,
0.08167201280593872,
-0.07943534106016159,
-0.12336467206478119,
0.1319364607334137,
0.10976694524288177,
0.08032412081956863,
-0.055382050573825836,
-0.08913359045982361,
-0.09495963901281357,
-0.02288423851132393,
0.11350108683109283,
-0.11304571479558945,
0.12018560618162155,
0.2060064822435379,
-0.0797000303864479,
0.16698068380355835,
0.11213356256484985,
0.054054245352745056,
0.15607702732086182,
-0.11489183455705643,
0.023089930415153503,
0.03326071426272392,
-0.11775224655866623,
-0.06066448614001274,
-0.021315809339284897,
-0.08502349257469177,
-0.07480758428573608,
0.13951127231121063,
0.0015808166936039925,
-0.005725184455513954,
0.171434685587883,
-0.13409845530986786,
-0.028052937239408493,
-0.0552375391125679,
-0.16581930220127106,
0.0061188433319330215,
-0.13558997213840485,
-0.028250304982066154,
0.12781505286693573,
-0.15314006805419922,
0.07800531387329102,
0.03293810412287712,
0.10292260348796844,
-0.08656606078147888,
0.0339115709066391,
0.11542479693889618,
0.01621350459754467,
0.046876680105924606,
0.04521458223462105,
-0.11092803627252579,
-0.14610759913921356,
0.07514988631010056,
-0.007901337929069996,
-0.0033026309683918953,
0.01555316336452961,
-0.031685393303632736,
-0.048153940588235855,
0.05358560383319855,
-0.029324911534786224,
-0.08888577669858932,
-0.14250294864177704,
-0.05842716991901398,
0.03898935765028,
-0.10343481600284576,
-0.15083353221416473,
0.036837633699178696,
0.03398584574460983,
-0.01043268945068121,
0.08428692072629929,
-0.062422215938568115,
-0.03049854189157486,
-0.004818841349333525,
-0.002775652101263404,
0.03212882950901985,
0.13598720729351044,
-0.13929100334644318,
-0.034368231892585754,
0.13452446460723877,
0.02954120747745037,
0.10626661032438278,
0.028411876410245895,
-0.11112648248672485,
0.08279232680797577,
-0.21556994318962097,
-0.05361765995621681,
0.0033498117700219154,
0.06592249870300293,
0.06446094810962677,
0.19951388239860535,
-0.1087539941072464,
-0.02946031466126442,
-0.09106935560703278,
-0.17050454020500183,
0.06779389083385468,
0.16323406994342804,
0.011220449581742287,
0.030030082911252975,
0.04561766982078552,
-0.0032095531933009624,
-0.0642566904425621,
0.15464691817760468,
0.05443623661994934,
-0.007905482314527035,
0.08079111576080322,
-0.08322219550609589,
-0.03285964950919151,
0.13069790601730347,
0.08133041858673096,
-0.10993834584951401,
0.06422614306211472,
0.072804294526577,
-0.03404635563492775,
0.07095342874526978,
0.164654940366745,
0.004711218178272247,
-0.09919252246618271,
-0.049593228846788406,
-0.11421781033277512,
-0.055344462394714355,
0.07800415903329849,
-0.08235066384077072,
0.04646299406886101,
0.16551485657691956,
-0.0733858272433281,
-0.1372271478176117,
0.08254289627075195,
-0.06157563999295235,
0.20685754716396332,
-0.06368324160575867,
0.2185177505016327,
0.037338923662900925,
-0.025144357234239578,
-0.1514298915863037,
-0.052970316261053085,
0.13741028308868408,
0.08221292495727539,
-0.1339086890220642,
0.16333742439746857,
0.0012819011462852359,
-0.039932142943143845,
-0.053747426718473434,
0.012502798810601234,
0.07503198087215424,
-0.037368930876255035,
-0.026273604482412338,
0.08527523279190063,
0.18740390241146088,
-0.07456449419260025,
-0.07433655112981796,
0.017406808212399483,
-0.09271617233753204,
0.1212533637881279,
-0.0052710180170834064,
0.029518865048885345,
-0.021401280537247658,
0.009459306485950947,
0.17754267156124115,
0.12216819077730179,
-0.0774703249335289,
-0.03216550871729851,
0.026927631348371506,
-0.012749951332807541,
0.0357578806579113,
-0.005100926849991083,
0.08828006684780121,
0.010525848716497421,
0.053931064903736115,
-0.08981745690107346,
-0.0004468777042347938,
-0.09535875171422958,
0.09419896453619003,
-0.010756286792457104,
-0.05823993310332298,
-0.005212950520217419,
0.03594987839460373,
0.08032171428203583,
-0.09060882776975632,
0.04778531938791275,
-0.028088504448533058,
0.005946318618953228,
0.2061798870563507,
0.040435273200273514,
0.12126202136278152,
0.1531801074743271,
-0.045595183968544006,
-0.07441947609186172,
0.1069406121969223,
-0.08356276899576187,
0.08561833947896957,
-0.14926910400390625,
-0.017776403576135635,
9.096378562389873e-06,
0.039526116102933884,
-0.02894308976829052,
-0.08921124041080475,
0.00012635262100957334,
0.031633611768484116,
-0.03271089121699333,
0.02539147064089775,
0.07319185882806778,
0.09297632426023483,
-0.10167621821165085,
-0.002995571354404092,
-0.16592852771282196,
0.03525761887431145,
-0.04313014820218086,
0.05750710144639015,
-0.003740647342056036,
0.09497057646512985,
-0.13165369629859924,
0.0014585311291739345,
0.030598443001508713,
0.03308755159378052,
-0.009458201006054878,
0.11388266086578369,
0.09769388288259506,
-0.023102430626749992,
-0.04195742681622505,
0.014910396188497543,
0.12068303674459457,
0.04952305927872658,
0.01983221247792244,
0.0789661630988121,
-0.030495787039399147,
0.022388171404600143,
-0.14271408319473267,
0.017994606867432594,
0.012418518774211407,
-0.051159899681806564,
0.11385564506053925,
-0.058465827256441116,
-0.014061832800507545,
-0.017587659880518913,
0.07391119748353958,
0.019520794972777367,
-0.09679964929819107,
0.07515762746334076,
-0.06721916049718857,
0.0019735482055693865,
0.046300895512104034,
-0.12155796587467194,
-0.10371483862400055,
0.11226490139961243,
0.026061540469527245,
-0.01339938584715128,
0.06166171655058861,
0.052842941135168076,
0.08761171251535416,
-0.07245016098022461,
-0.05197363346815109,
-0.010430396534502506,
0.059050552546978,
-0.026029564440250397,
0.09217012673616409,
-0.08117065578699112,
-0.025977442041039467,
-0.06840537488460541,
0.0716257095336914,
-0.07844223827123642,
-0.10879454761743546,
0.14774294197559357,
-0.0037491749972105026,
-0.0014965201262384653,
-0.037394747138023376,
0.03542006015777588,
0.05847714841365814,
0.0755096971988678,
0.002527426229789853,
-0.010190261527895927,
-0.020023882389068604,
0.10240720212459564,
0.14631511270999908,
0.02213217131793499,
-0.01881924644112587,
-0.03648319095373154,
0.07495860755443573,
-0.01618090085685253,
0.04830871522426605,
-0.033276841044425964,
-0.11164072901010513,
0.008752087131142616,
0.08246586471796036,
0.08238283544778824,
-0.002249558223411441,
0.08667343854904175,
0.03054872713983059,
-0.005110214464366436,
-0.04922465607523918,
-0.05278843268752098,
-0.103457510471344,
-0.030065249651670456,
-0.08244064450263977,
-0.02698228694498539,
-0.07918327301740646,
0.12491104751825333,
-0.06040973961353302,
-0.008946642279624939,
-0.14803768694400787,
-0.1189325824379921,
0.0987672209739685,
-0.05290589481592178,
0.07228299975395203,
0.0530693382024765,
0.07711382210254669,
-0.11951226741075516,
-0.09837167710065842,
-0.04226084426045418,
-0.10704677551984787,
0.09063557535409927,
-0.11254622042179108,
0.010897474363446236,
-0.12292929738759995,
-0.0186285600066185,
0.0599476583302021,
-0.020844288170337677,
0.11551712453365326,
0.035575021058321,
0.08006861060857773,
-0.050177354365587234,
-0.15847639739513397,
0.09351010620594025,
-0.014020495116710663,
-0.2358885407447815,
-0.03477707877755165,
-0.050763096660375595,
0.00867976900190115,
0.13056327402591705,
0.15351131558418274,
-0.032247330993413925,
0.11361540108919144,
0.01736472360789776,
0.26314353942871094,
-0.07626787573099136,
-0.15714289247989655,
-0.03551004081964493,
0.1343456357717514,
-0.049071695655584335,
0.11809215694665909,
-0.05544377490878105,
-0.09513212740421295,
0.03458176925778389,
0.12652987241744995,
0.11720810830593109,
-0.17195379734039307,
0.16399870812892914,
-0.04919717460870743,
0.09546633064746857,
-0.04554378613829613,
0.1768840104341507,
0.06260257959365845,
0.013498215936124325,
-0.1346200853586197,
-0.1364593207836151,
0.021873783320188522,
0.1482594907283783,
0.1321975737810135,
-0.003602388547733426,
0.08806675672531128,
-0.1981724202632904,
-0.0721176490187645,
-0.028584690764546394,
-0.1307530701160431,
-0.05547226592898369,
-0.0860881581902504,
0.09387390315532684,
-0.008130067959427834,
0.030871473252773285,
-0.023486780002713203,
0.05819501727819443,
0.0542609877884388,
0.16405625641345978,
0.0847870334982872,
-0.0010618272935971618,
0.1368751972913742,
0.09876373410224915,
-0.09006521850824356,
0.12135602533817291,
-0.08648046851158142,
0.02345152571797371,
-0.12487883120775223,
-0.028695665299892426,
-0.05287028104066849,
-0.05133730545639992,
-0.09592708945274353,
-0.007093548774719238,
0.044252362102270126,
0.13376234471797943,
0.13270045816898346,
0.030815917998552322,
-0.0620901882648468,
0.10113416612148285,
0.13517290353775024,
0.054634939879179,
-0.13656355440616608,
-0.005466078873723745,
0.056095246225595474,
0.04814106971025467,
0.003956926055252552,
-0.12388671934604645,
-0.027566920965909958,
0.007464071735739708,
-0.09230127185583115,
-0.02149507962167263,
-0.08222787827253342,
0.1950722336769104,
-0.06414207816123962,
-0.026569269597530365,
-0.00818562787026167,
0.020028622820973396,
-0.08802861720323563,
-0.08097614347934723,
-0.033184293657541275,
0.09963005781173706,
-0.12696599960327148,
-0.026911234483122826,
0.0748893991112709,
0.07049749791622162,
0.027697084471583366,
0.050651174038648605,
0.07166584581136703,
0.07340868562459946,
-0.11726798117160797,
0.011750689707696438,
0.031983956694602966,
-0.1081632748246193,
-0.016009226441383362,
0.04806751385331154,
-0.11343643069267273,
0.14891068637371063,
0.013922560960054398,
0.07539059221744537,
-0.011232915334403515,
-0.010748034343123436,
0.13074934482574463,
0.05845211073756218,
0.06567580997943878,
0.06880713999271393,
-0.04151679575443268,
-0.028802286833524704,
-0.05428408458828926,
-0.09601999074220657,
-0.09581451117992401,
-0.09565078467130661,
0.19085758924484253,
-0.08938468992710114,
-0.10652132332324982,
-0.14725258946418762,
0.01371295191347599,
-0.17464804649353027,
-0.07202868163585663,
-0.18361614644527435,
0.007030217442661524,
0.06386549025774002,
-0.05644035339355469,
-0.0686199888586998,
0.011368004605174065,
-0.11083711683750153,
-0.06492060422897339,
0.05830325558781624,
0.1377219408750534,
0.11597364395856857,
0.1006987988948822,
-0.06028728932142258,
-0.045670777559280396,
0.0266814436763525,
0.18625684082508087,
0.0038567441515624523,
-0.04209701344370842,
-0.07713676989078522,
0.02017909474670887,
0.15417927503585815,
0.053248897194862366,
0.033813223242759705,
-0.18979555368423462,
0.037279654294252396,
0.006038454826921225,
0.13091976940631866,
0.028777075931429863,
0.1055411696434021,
-0.12172763794660568,
0.054064102470874786,
-0.032980259507894516,
0.08425655215978622,
0.11750980466604233,
-0.07256633788347244,
-0.1087283343076706,
0.07846082001924515,
-0.027811473235487938,
0.23991355299949646,
-0.15262719988822937,
-0.01425944920629263,
-0.11349334567785263,
0.16630563139915466,
0.0009164840448647738,
-0.19160448014736176,
-0.18560227751731873,
0.11201821267604828,
-0.008263291791081429,
-0.043010927736759186,
0.033102598041296005,
0.04232126846909523,
0.15613830089569092,
0.004502655938267708,
0.016481684520840645,
0.025141896679997444,
0.06362452358007431,
-0.1405058056116104,
0.033953070640563965,
0.10355375707149506,
0.02571011334657669,
-0.05759124457836151,
-0.02758566476404667,
-0.0328805111348629,
0.08675157278776169,
0.08645080029964447,
0.01413040142506361,
-0.010910090990364552,
0.06697073578834534,
0.10399096459150314,
0.055630311369895935,
0.02858205884695053,
0.0010099710198119283,
0.05560531094670296,
0.022840920835733414,
-0.1345445215702057,
0.017559239640831947,
-0.05226454138755798,
0.13075025379657745,
-0.21924163401126862,
0.0024290895089507103,
-0.029036710038781166,
-0.06332908570766449,
-0.09934630990028381,
0.09690211713314056,
-0.047419775277376175,
-0.08088929951190948,
4.936449840897694e-05,
0.11303611099720001,
-0.1875026375055313,
-0.12356843054294586,
-0.01353478617966175,
-0.04205067455768585,
-0.05064917355775833,
-0.07060179114341736,
0.1522713154554367,
-0.1219782903790474,
-0.10851766169071198,
0.031153656542301178,
-0.1430003046989441,
0.07867513597011566,
0.09390608221292496,
-0.026117296889424324,
0.021402308717370033,
0.03703541308641434,
0.003259370569139719,
0.18513239920139313,
0.02042878046631813,
-0.062362611293792725,
-0.04507152736186981,
0.10362948477268219,
-0.005116807762533426,
-0.02334822528064251,
-0.008945790119469166,
0.16671739518642426,
-0.016612928360700607,
0.07725047320127487,
0.1318618804216385,
-0.02013002336025238,
-0.1710379421710968,
0.06701036542654037,
-0.005542750470340252,
-0.15180081129074097,
0.012134967371821404,
0.02044154703617096,
0.05961958318948746,
0.043319594115018845,
-0.003069525584578514,
-0.049916043877601624,
-0.10080517828464508,
0.05554623529314995,
0.07416845113039017,
0.058293893933296204,
-0.049951449036598206,
-0.11043325066566467,
0.019428987056016922,
0.07200316339731216,
-0.12032962590456009,
0.0769311711192131,
-0.05371425673365593,
-0.11437053978443146,
0.0001036248286254704,
-0.06824856996536255,
-0.016717374324798584,
-0.13920199871063232,
0.09355639666318893,
0.07574886083602905,
0.037019722163677216,
0.019106177613139153,
-0.010847709141671658,
-0.08286524564027786,
0.13853256404399872,
-0.16744212806224823,
-0.08025044947862625,
-0.03502538800239563,
0.07548607140779495,
-0.14684952795505524,
0.10214021801948547,
-0.020729782059788704,
0.030523056164383888,
0.014551548287272453,
-0.016595633700489998,
-0.05697998031973839,
0.016054095700383186,
-0.10353274643421173,
-0.062290798872709274,
-0.13336803019046783,
0.05198315531015396,
-0.07271770387887955,
0.11182095110416412,
0.06428872793912888,
-0.0020566158927977085,
0.043899159878492355,
0.015066738240420818,
-0.03318388760089874,
0.10835260897874832,
-0.009102201089262962,
-0.06638384610414505,
0.02868417277932167,
0.07664928585290909,
-0.008639765903353691,
-0.05542680621147156,
0.04610677435994148,
0.08139429986476898,
-0.12177878618240356,
0.022711584344506264,
0.07362636178731918,
-0.05766694247722626,
0.08027247339487076,
0.12833641469478607,
0.04820121452212334,
-0.04748613387346268,
0.0914396420121193,
0.09117978066205978,
0.032443974167108536,
0.008668944239616394,
-0.04798712208867073,
-0.025276027619838715,
0.14328274130821228,
-0.1079443097114563,
0.04568973183631897,
-0.033406998962163925,
-0.11687798798084259,
0.09118868410587311,
-0.0034772446379065514,
-0.1864081174135208,
0.11402427405118942,
-0.030364172533154488,
0.06839276105165482,
0.012980335392057896,
0.1340692639350891,
-0.027292940765619278,
-0.05972154438495636,
-0.18096734583377838,
-0.03743315488100052,
-0.0027951064985245466,
0.04333317652344704,
0.08182121813297272,
-0.019103918224573135,
0.0059804185293614864,
-0.017998695373535156,
0.012875910848379135,
-0.15701818466186523,
-0.07213589549064636,
-0.14595331251621246,
-0.033416327089071274,
0.10113406926393509,
0.062426742166280746,
-0.005335830617696047,
0.01584581658244133,
0.19148428738117218,
0.029539592564105988,
-0.16870886087417603,
0.18013252317905426,
-0.14848074316978455,
-0.0883621796965599,
0.017529815435409546,
0.06799153238534927,
-0.0908387079834938,
0.05680963769555092,
0.0036139327567070723,
0.1210029274225235,
-0.21132752299308777,
0.1060628741979599,
0.12768852710723877,
-0.1054716557264328,
0.015458768233656883,
0.07501436024904251,
-0.1590680480003357,
-0.08656509220600128,
0.1085253655910492,
-0.08500783145427704,
0.044933512806892395,
0.05073920264840126,
-0.10314135253429413,
-0.08045786619186401,
-0.034769054502248764,
-0.014727716334164143,
0.07514820247888565,
-0.027582161128520966,
0.065670907497406,
0.02672015316784382,
-0.10916685312986374,
0.06743207573890686,
0.001802524202503264,
0.16086897253990173,
-0.06424499303102493,
0.02406459115445614,
0.08211605250835419,
0.11929400265216827,
0.01739867404103279,
-0.00472273351624608,
-0.06092013418674469,
0.11161971837282181,
0.061815157532691956,
-0.06450912356376648,
0.026003405451774597,
0.1690230369567871,
0.03900124505162239,
-0.1747065633535385,
0.10849162936210632,
0.007210307754576206,
0.06129986420273781,
-0.05986635014414787,
-0.07407701760530472,
-0.004333032760769129,
0.04649750888347626,
-0.08511140942573547,
0.05625993758440018,
-0.1996108591556549,
0.0771913230419159,
0.004095348529517651,
-0.05143056437373161,
-0.0525222010910511,
-0.10065403580665588,
-0.015529222786426544,
-0.006112534552812576,
-0.13813108205795288,
0.030293622985482216,
0.04125368967652321,
-0.11786849051713943,
-0.002828106051310897,
0.16326594352722168,
0.1190442368388176,
0.013445177115499973,
0.13455964624881744,
0.06939388066530228,
0.19636602699756622,
0.01595991849899292,
-0.17378981411457062,
-0.03239871561527252,
-0.07240568101406097,
0.11697416752576828,
0.12319286912679672,
-0.027615897357463837,
0.09152799844741821,
-0.06645964831113815,
-0.002560332650318742,
-0.06875058263540268,
-0.006986933760344982,
0.04856915771961212,
0.06157183274626732,
0.004326848313212395,
-0.10111362487077713,
-0.02340298518538475,
0.11858946830034256,
-0.08464977890253067,
0.007812276482582092,
-0.043785251677036285,
0.032079994678497314,
-0.0036910881754010916,
0.0949629470705986,
0.11120966076850891,
0.10718300193548203,
0.0060732862912118435,
0.09697473794221878,
0.007985640317201614,
-0.11587966233491898,
0.07113771885633469,
-0.020046649500727654,
0.008701403625309467,
-0.00381483300589025,
-0.04964256286621094,
0.138257697224617,
-0.09113233536481857,
-0.057892728596925735,
-0.025131186470389366,
-0.01335788145661354,
0.03729810565710068,
0.09258037805557251,
0.15249694883823395,
-0.06998920440673828,
0.06683440506458282,
0.08579222112894058,
0.15711037814617157,
-0.12851150333881378,
0.01188407838344574,
-0.1843412071466446,
-0.012157431803643703,
-0.10504162311553955,
-0.02469748817384243,
-0.05103975161910057,
-0.07104391604661942,
-0.01304529793560505,
-0.13147222995758057,
-0.08090373873710632,
0.031831368803977966,
-0.07791514694690704,
0.0941077247262001,
-0.03552543371915817,
-0.10870662331581116,
0.019826659932732582,
-0.11659692972898483,
-0.12753036618232727,
-0.01325937919318676,
-0.06509295105934143,
0.05000493675470352,
0.04570517688989639,
-0.031464703381061554,
-0.15011462569236755,
0.09978809952735901,
0.16547173261642456,
-0.11936023831367493,
-0.04964577034115791,
0.02951134368777275,
0.10789531469345093,
0.08205436170101166,
-0.07094121724367142,
0.1262672245502472,
-0.09340402483940125,
-0.10641296952962875,
0.04186009243130684,
0.09281163662672043,
-0.06557171791791916,
-0.09488223493099213,
-0.036629267036914825,
-0.17063814401626587,
-0.09931452572345734,
-0.08887694031000137,
-0.02758285403251648,
0.1180371567606926,
0.06683733314275742,
0.13339881598949432,
-0.10790987312793732,
-0.1463066190481186,
0.014436374418437481,
-0.07833950966596603,
-0.11066834628582001,
-0.016697922721505165,
0.08910255879163742,
0.010753453709185123,
-0.03027549386024475,
0.10110297799110413,
0.020552722737193108,
-0.02672603912651539,
0.06532285362482071,
0.08965305984020233,
0.012436860240995884,
-0.028058547526597977,
-0.03423682227730751,
-0.0647657960653305,
0.00765584222972393,
-0.04980714991688728,
0.07116996496915817,
0.03330118581652641,
0.11287748068571091,
0.11232807487249374,
0.016183406114578247,
0.013005975633859634,
-0.10253851115703583,
0.08892902731895447,
-0.09858699142932892,
0.04821210727095604,
0.0035943519324064255,
0.08448018878698349,
-0.19049572944641113,
-0.006252818275243044,
0.06361106038093567,
-0.030860036611557007,
-0.09934666752815247,
-0.032042741775512695,
0.04279742389917374,
-0.12825676798820496,
0.15598152577877045,
-0.020953863859176636,
-0.07406869530677795,
0.04834172874689102,
-0.05207351595163345,
0.19469402730464935,
0.0015928781358525157,
0.1794542819261551,
0.07352862507104874,
-0.08115586638450623,
-0.051365386694669724,
0.011692892760038376,
-0.014197179116308689,
0.11135078966617584,
0.010935677215456963,
0.006877670995891094,
-0.01398507971316576,
-0.04157189279794693,
-0.03492528945207596,
-0.01672404445707798,
-0.07621370255947113,
-0.1829090267419815,
-0.009667836129665375,
0.04365851730108261,
-0.10856911540031433,
-0.03154081478714943,
0.04181775823235512,
-0.08239805698394775,
-0.05374690145254135,
0.1063869446516037,
0.07140199840068817,
-0.0963459387421608,
0.0293759573251009,
0.1771252453327179,
-0.12591369450092316,
-0.15176425874233246,
-0.05586559325456619,
-0.10235196352005005,
0.13176199793815613,
0.006259848363697529,
0.0651029646396637,
0.006035368889570236,
-0.0019111635629087687,
0.03192514181137085,
0.08654575049877167,
0.054504211992025375,
-0.030072089284658432,
-0.17695952951908112,
-0.045745693147182465,
-0.1813429445028305,
-0.03004809282720089,
0.161435067653656,
0.0008199111325666308,
-0.004325503949075937,
0.03241953253746033,
0.010743338614702225,
-0.043415237218141556,
-0.09467729926109314,
0.03846248984336853,
-0.047259435057640076,
0.10658866912126541,
0.065681092441082,
0.047611020505428314,
-0.001034760964103043,
0.012313107028603554,
0.07305485010147095,
0.034372661262750626,
-0.03546325862407684,
-0.004475913010537624,
0.1482083797454834,
-0.17871521413326263,
-0.11648650467395782,
0.045244548469781876,
0.0844438448548317,
0.016200505197048187,
0.011597743257880211,
-0.13714981079101562,
-0.008435772731900215,
0.0788080096244812,
0.07099567353725433,
-0.14001211524009705,
0.04113398492336273,
0.049782343208789825,
0.0051719676703214645,
-0.14611437916755676,
-0.000957008742261678,
0.00402527442201972,
0.07929759472608566,
-0.1311996728181839,
-0.14933133125305176,
-0.024740368127822876,
-0.07619410753250122,
-0.06681784987449646,
0.04354828596115112,
-0.07198172807693481,
-0.09760671854019165,
-0.05012373998761177,
-0.10795281827449799,
0.1909887045621872,
-0.2042168378829956,
0.028481071814894676,
-0.03658890724182129,
-0.1528519093990326,
0.06230513006448746,
0.08032552897930145,
-0.12294544279575348,
0.002363053848966956,
0.05972586199641228,
-0.00463911285623908,
0.12223303318023682,
0.06116938963532448,
-0.05463354289531708,
0.11605517566204071,
-0.024072926491498947,
0.02402406930923462,
-0.06523346155881882,
0.08896281570196152,
-0.015661902725696564,
-0.13683968782424927,
-0.0035432532895356417,
-0.03707191348075867,
0.05257900059223175,
-0.042254481464624405,
-0.06818309426307678,
-0.07588662952184677,
-0.05241343751549721,
0.13070091605186462,
-0.029519809409976006,
-0.1225198358297348,
0.08446908742189407,
-0.008987190201878548,
0.02037276141345501,
0.08737287670373917,
0.019426174461841583,
-0.0732913389801979,
-0.056850191205739975,
-0.10116226226091385,
-0.010699241422116756,
-0.0795757919549942,
0.0545409731566906,
-0.02147333323955536,
-0.016591021791100502,
-0.007936443202197552,
0.06352729350328445,
-0.03960518166422844,
-0.040143825113773346,
0.10118121653795242,
-0.006808592937886715,
0.05919598788022995,
-0.05300066992640495,
0.07502265274524689,
0.08764711767435074,
-0.04521968960762024,
0.09960457682609558,
-0.09263002872467041,
-0.05973154678940773,
0.06350398063659668,
-0.11997555941343307,
-0.05597233772277832,
-0.11775029450654984,
0.018142005428671837,
0.03958575800061226,
-0.04310004413127899,
-0.025751881301403046,
0.04068242013454437,
0.18101482093334198,
-0.08412937074899673,
-0.1704406589269638,
-0.067019984126091,
-0.1406136006116867,
-0.16029570996761322,
0.1362057477235794,
-0.08880230039358139,
-0.021841304376721382,
-0.0698045864701271,
-0.09809573739767075,
-0.15397579967975616,
-0.01977207325398922,
0.06971275061368942,
-0.10877185314893723,
-0.003529544686898589,
0.09017165005207062,
-0.07882437855005264,
0.017390500754117966,
0.09440552443265915,
0.09697600454092026,
-0.010930384509265423,
0.14811815321445465,
0.02783285453915596,
-0.10743211954832077,
-0.10649998486042023,
0.08846812695264816,
0.04575960338115692,
0.017578406259417534,
-0.16869613528251648,
-0.02254941314458847,
-0.06790719926357269,
0.11803124099969864,
-0.036441292613744736,
0.10570426285266876,
-0.21651750802993774,
-0.07215025275945663,
0.02485625632107258,
0.03861629217863083,
-0.1461273729801178,
0.1290263682603836,
-0.04737090319395065,
0.06378274410963058,
-0.11113251745700836,
0.06841015070676804,
0.027453742921352386,
0.054527491331100464,
0.13376261293888092,
0.1538056582212448,
0.014193679206073284,
-0.1905185431241989,
-0.10721427202224731,
-0.1610671430826187,
0.017453467473387718,
-0.08261904865503311,
-0.08605997264385223,
0.03530682250857353,
-0.005059811286628246,
0.0335613377392292,
0.20350880920886993,
-0.0539315827190876,
-0.1379528045654297,
0.05565929785370827,
-0.11914927512407303,
0.12341300398111343,
0.020870564505457878,
0.006084098946303129,
0.004880155436694622,
-0.1031113788485527,
0.12612034380435944,
-0.06803888827562332,
-0.015467286109924316,
0.04293220862746239,
-0.05867369845509529,
0.008036145009100437,
0.16694028675556183,
0.062448009848594666,
-0.0019052603747695684,
-0.015482880175113678,
-0.14165733754634857,
0.14559055864810944,
-0.06329666078090668,
0.13703031837940216,
-0.017156394198536873,
-0.05123145505785942,
-0.05527334287762642,
0.11260770261287689,
-0.07599011808633804,
0.016451239585876465,
0.01378918532282114,
-0.013756715692579746,
0.05012093111872673,
0.005446089897304773,
-0.11411121487617493,
-0.03477422893047333,
-0.10222895443439484,
-0.0061154901050031185,
-0.14178913831710815,
-0.11281991004943848,
0.20176030695438385,
0.020228523761034012,
0.01325693167746067,
0.22154924273490906,
-0.03921933472156525,
-0.08789745718240738,
0.10289977490901947,
0.14479541778564453,
-0.03469493240118027,
0.05462619662284851,
-0.15361589193344116,
-0.07041095197200775,
-0.04786800965666771,
0.04908183217048645,
-0.18306675553321838,
-0.08695577085018158,
0.07831888645887375,
0.05152645334601402,
0.0270670298486948,
0.07022906839847565,
0.04929810017347336,
-0.08040204644203186,
-0.06862815469503403,
0.0057220980525016785,
-0.008296339772641659,
0.10731273889541626,
-0.0965980812907219,
-0.07967659085988998,
0.027792643755674362,
-0.049441415816545486,
-0.04530491679906845,
0.09921826422214508,
-0.04215181618928909,
-0.058941345661878586,
0.041403211653232574,
0.11700277775526047,
0.10648901015520096,
0.07445812225341797,
-0.014917534776031971,
-0.07901488989591599,
0.06231772154569626,
-0.18795308470726013,
0.01518528163433075,
-0.03680042922496796,
-0.05444939061999321,
-0.015278498642146587,
0.11314737796783447,
0.19220773875713348,
-0.12962085008621216,
-0.08784007281064987,
0.0832284465432167,
-0.029995594173669815,
-0.0024426134768873453,
-0.1041698157787323,
-0.13279010355472565,
0.022863587364554405,
0.11346624791622162,
-0.1395576149225235,
-0.1047663763165474,
-0.12217279523611069,
0.06364767998456955,
0.12790249288082123,
0.04147283732891083,
0.043194640427827835,
0.013745104894042015,
0.17546512186527252,
0.007309565320611,
0.13865530490875244,
0.13183337450027466,
0.18164317309856415,
-0.009569008834660053,
0.02154553309082985,
0.030858740210533142,
0.04654751345515251,
-0.09506142139434814,
-0.0103996517136693,
-0.07961609214544296,
0.10808578878641129,
0.09873224794864655,
-0.1044190376996994,
-0.04560752958059311,
0.08018317818641663,
0.170271635055542,
0.03343847393989563,
0.12437117844820023,
-0.010443301871418953,
-0.0026508071459829807,
0.16946826875209808,
-0.03279580548405647,
0.12577182054519653,
0.1469370722770691,
-0.023764384910464287,
-0.1856098622083664,
0.004159236792474985,
0.07961859554052353,
-0.12246263772249222,
-0.0076734693720936775,
0.038918789476156235,
0.03750985860824585,
-0.09910644590854645,
-0.05260492488741875,
0.039937663823366165,
-0.03586505353450775,
0.05135069414973259,
-0.06260740756988525,
0.0519222617149353,
-0.07269918918609619,
0.14871935546398163,
-0.0640992671251297,
-0.04054882749915123,
-0.06389887630939484,
0.009748569689691067,
-0.04339029639959335,
0.0009709909209050238,
-0.02669028379023075,
-0.1696118414402008,
0.021948477253317833,
-0.04984232783317566,
-0.16393664479255676,
-0.0903635025024414,
-0.06161217391490936,
-0.046247947961091995,
-0.05873782932758331,
0.032621968537569046,
0.010396139696240425,
-0.04745251685380936,
-0.04874555766582489,
0.0411205068230629,
-0.03374654799699783,
0.021512471139431,
0.14173081517219543,
0.04530759155750275,
0.15352927148342133,
0.0780152976512909,
-0.026692843064665794,
-0.1133129820227623,
-0.05547557771205902,
-0.018729830160737038,
0.10707274079322815,
-0.13029442727565765,
-0.005558422766625881,
-0.04301033541560173,
-0.09093953669071198,
0.16885024309158325,
0.1270005702972412,
-0.06919386237859726,
0.04609684646129608,
-0.027462556958198547,
-0.011978291906416416,
0.08160954713821411,
-0.07091343402862549,
0.02813488431274891,
-0.04681728407740593,
0.13966743648052216,
-0.0531415119767189,
-0.08139451593160629,
-0.09848698228597641,
-0.07699204236268997,
0.16226717829704285,
-0.11012725532054901,
-0.09791022539138794,
0.07587539404630661,
-0.020824041217565536,
-0.12373359501361847,
0.034586597234010696,
0.18902377784252167,
0.036570675671100616,
-0.0216883085668087,
-0.034032076597213745,
-0.10589219629764557,
-0.0032046493142843246,
-0.022808240726590157,
0.03279991075396538,
0.06317974627017975,
-0.11678154766559601,
0.08318110555410385,
-0.011060675606131554,
0.021093284711241722,
0.01767534390091896,
0.020992090925574303,
0.12546181678771973,
-0.059810563921928406,
0.029825806617736816,
-0.05148463323712349,
0.07141096144914627,
0.02166297473013401,
0.014311986975371838,
-0.023859543725848198,
-0.1605212241411209,
-0.08345016092061996,
0.02088974043726921,
-0.09113695472478867,
0.16780759394168854,
0.07315799593925476,
-0.08686108142137527,
0.1657140851020813,
-0.031424589455127716,
0.0010930800344794989,
0.11943844705820084,
0.06191692128777504,
0.07473818957805634,
-0.051751453429460526,
-0.11374623328447342,
-0.007325250655412674,
-0.05966980755329132,
-0.07170434296131134,
0.025283077731728554,
-0.07440857589244843,
-0.06278827786445618,
-0.09145411103963852,
0.07117363065481186,
0.005303442478179932,
-0.05291084945201874,
-0.04871485382318497,
-0.0027152278926223516,
0.052626438438892365,
0.09412893652915955,
-0.02516467310488224,
-0.06318841874599457,
0.08761020749807358,
0.06965111196041107,
-0.14574281871318817,
0.020319540053606033,
0.09909414499998093,
0.04898452013731003,
-0.02013012208044529,
0.029498420655727386,
0.01909654587507248,
0.046625252813100815,
0.01857312023639679,
0.241030752658844,
0.10086022317409515,
0.1479479968547821,
0.09097996354103088,
0.13019855320453644,
0.052118927240371704,
0.11297240853309631,
-0.16734488308429718,
0.02890753746032715,
0.1453513205051422,
-0.0794772282242775,
-0.13108181953430176,
-0.05778113007545471,
-0.1707734763622284,
-0.08266479521989822,
0.03719843924045563,
-0.1281316876411438,
-0.10036686807870865,
0.09755939245223999,
-0.04324524849653244,
0.13914455473423004,
0.11882193386554718,
0.058971911668777466,
0.07454413175582886,
-0.12873733043670654,
0.10374517738819122,
-0.09167315065860748,
-0.02679203264415264,
-0.019949743524193764,
-0.1148005798459053,
-0.10548490285873413,
-0.053447119891643524,
0.04835914447903633,
0.06619305163621902,
-0.02552870847284794,
0.18715593218803406,
-0.1098669171333313,
-0.10772716999053955,
-0.008150147274136543,
0.04188408702611923,
-0.03426435962319374,
0.014426939189434052,
0.048636943101882935,
0.05817815661430359,
-0.057252444326877594,
0.06466173380613327,
-0.09545350074768066,
-0.15833930671215057,
-0.05506354197859764,
-0.1259787231683731,
-0.06450573354959488,
0.014330064877867699,
-0.11240862309932709,
0.06165722757577896,
0.06766170263290405,
-0.1537579745054245,
0.04591759294271469,
0.06481631100177765,
0.09187329560518265,
-0.10782995074987411,
0.06248294189572334,
0.029369890689849854,
0.05218815803527832,
-0.1419997215270996,
0.0827435627579689,
-0.12014589458703995,
0.05872148275375366,
0.08739910274744034,
0.022481020539999008,
0.05800750479102135,
0.2656920850276947,
-0.12345513701438904,
0.1336759775876999,
-0.11081913858652115,
0.0037551322020590305,
-0.040516506880521774,
0.04311070963740349,
-0.029105205088853836,
-0.02838733047246933,
-0.16498340666294098,
-0.12234387546777725,
0.19580495357513428,
0.051250629127025604,
0.017821166664361954,
0.06420700997114182,
-0.022776156663894653,
0.07643091678619385,
-0.16843514144420624,
0.04173325002193451,
0.04843417555093765,
-0.025633234530687332,
0.0965225100517273,
0.016034191474318504,
-0.05682264268398285,
-0.06405273079872131,
-0.0194934643805027,
0.032507866621017456,
-0.14729173481464386,
-0.03970252349972725,
-0.16277967393398285,
0.060974422842264175,
0.12453755736351013,
0.08580659329891205,
0.02652931772172451,
-0.15591822564601898,
0.16710248589515686,
0.1237105131149292,
-0.02375072054564953,
-0.11563887447118759,
0.09231390804052353,
-0.03671114146709442,
0.0025007096119225025,
-0.0445273220539093,
-0.056372884660959244,
-0.08047366887331009,
-0.053243521600961685,
-0.08192528784275055,
-0.17861557006835938,
-0.0582723394036293,
-0.06472928076982498,
0.00550839165225625,
0.08310767263174057,
0.07721592485904694,
0.15785737335681915,
0.08992636948823929,
0.1610744595527649,
0.03540755435824394,
-0.09559035301208496,
-0.05590448155999184,
0.0672110915184021,
-0.10380080342292786,
0.1304413080215454,
0.004015773069113493,
-0.03995626047253609,
0.07244560122489929,
0.15876564383506775,
-0.13145418465137482,
-0.033898282796144485,
-0.0809057205915451,
0.08986286073923111,
-0.1463421732187271,
0.1121608316898346,
-0.024147890508174896,
0.0823313444852829,
0.22878216207027435,
0.2411651611328125,
-0.044125258922576904,
0.0785830020904541,
-0.06742510944604874,
0.02912423014640808,
-0.05510928854346275,
0.141513392329216,
0.06059158593416214,
-0.11082901805639267,
-0.11702745407819748,
-0.08975047618150711,
0.010202541947364807,
0.06633313745260239,
-0.009788613766431808,
-0.05588265135884285,
0.14445500075817108,
-0.1925794929265976,
0.006158425472676754,
0.03483309596776962,
-0.06841820478439331,
0.024790389463305473,
-0.12526583671569824,
0.05209770053625107,
-0.07395445555448532,
0.0990884080529213,
-0.15558810532093048,
0.1312934309244156,
-0.17535734176635742,
0.033701930195093155,
-0.023857060819864273,
0.09964565187692642,
-0.0749596655368805,
-0.01434552576392889,
0.04351070895791054,
0.013670966029167175,
-0.11687912791967392,
-0.19968298077583313,
-0.08352253586053848,
-0.12760452926158905,
0.18730543553829193,
0.18785901367664337,
-0.11500128358602524,
0.020501136779785156,
0.11398174613714218,
-0.010341731831431389,
-0.1617838442325592,
-0.11133667081594467,
-0.003181206528097391,
-0.15010225772857666,
-0.047506384551525116,
-0.050496991723775864,
-0.010016470216214657,
0.0840325728058815,
0.049878425896167755,
-0.06571394205093384,
0.044648539274930954,
0.10452240705490112,
-0.125152587890625,
-0.0072045279666781425,
0.10025238245725632,
-0.1372171938419342,
-0.05490203574299812,
0.0008341835928149521,
-0.013616470620036125,
0.05266902595758438,
-0.019706804305315018,
-0.16109156608581543,
-0.010659236460924149,
0.10386163741350174,
0.035835444927215576,
-0.02098114788532257,
-0.05391886457800865,
-0.09197487682104111,
-0.06421057134866714,
-0.0754145160317421,
0.013224486261606216,
-0.030986787751317024,
0.21528378129005432,
0.015060467645525932,
-0.06399818509817123,
0.02713906764984131,
0.17567354440689087,
-0.14125478267669678,
0.062499795109033585,
-0.09492774307727814,
0.06770643591880798,
0.1259423941373825,
0.03605733439326286,
-0.006353835575282574,
-0.014795050024986267,
0.09609829634428024,
0.05262646824121475,
-0.008174682967364788,
-0.03451935574412346,
0.07997336983680725,
0.06264439970254898,
0.008753471076488495,
-0.08192238211631775,
0.14173370599746704,
0.06258396804332733,
0.0954158678650856,
-0.12626418471336365,
-0.0007971204468049109,
0.03676219657063484,
0.04500632733106613,
0.0019919327460229397,
-0.032880187034606934,
-0.08399718254804611,
-0.1370326280593872,
0.10134807229042053,
0.11920619755983353,
-0.12487443536520004,
0.028972778469324112,
-0.10936568677425385,
-0.04174094647169113,
0.03658105805516243,
0.007023341488093138,
-0.2233409732580185,
-0.017444029450416565,
0.024657929316163063,
0.14863382279872894,
0.04794081300497055,
-0.03134550526738167,
-0.2023899406194687,
0.07584857940673828,
-0.11307475715875626,
-0.07672598212957382,
-0.12189103662967682,
0.03967653959989548,
0.07142987102270126,
0.1660393625497818,
-0.007839888334274292,
-0.15520541369915009,
0.0823741927742958,
0.0014642458409070969,
-0.026520976796746254,
-0.0820329412817955,
0.057613521814346313,
0.08585187792778015,
-0.0679335966706276,
-0.04063376039266586,
-0.03790116310119629,
-0.18858493864536285,
-0.11688296496868134,
0.18383491039276123,
-0.03344206511974335,
0.061271678656339645,
-0.17215782403945923,
0.008865038864314556,
-0.025441758334636688,
-0.17912407219409943,
-0.04777197912335396,
-0.002772880019620061,
0.10656184703111649,
0.008782953023910522,
0.1390223354101181,
-0.016479304060339928,
0.1069026067852974,
-0.05459662899374962,
0.20001545548439026,
0.035950325429439545,
0.09704536199569702,
0.13400821387767792,
0.04111367464065552,
0.044795069843530655,
0.08790412545204163,
-0.1125546395778656,
0.02470703236758709,
-0.13105683028697968,
0.047029782086610794,
0.07575999200344086,
-0.10552196949720383,
-0.10030118376016617,
0.1548032909631729,
0.00029625813476741314,
-0.14199231564998627,
0.10203123092651367,
-0.02024669386446476,
0.02744513377547264,
0.10627102851867676,
-0.009096991270780563,
0.10524983704090118,
-0.030294127762317657,
-0.013864531181752682,
0.08291687071323395,
-0.0909361019730568,
-0.09865934401750565,
0.027185406535863876,
0.0824442133307457,
0.06816528737545013,
0.009239991195499897,
-0.0785985067486763,
-0.03320906683802605,
0.05426356941461563,
0.010543865151703358,
-0.06538192182779312,
-0.003981206566095352,
0.019991984590888023,
-0.017124587669968605,
-0.039224110543727875,
0.011389222927391529,
0.0929071381688118,
-0.08040845394134521,
0.10027109086513519,
-0.029768211767077446,
0.020912395790219307,
0.033018968999385834,
-0.1622450202703476,
0.010228047147393227,
-0.06960229575634003,
-0.07982133328914642,
-0.035603802651166916,
-0.14406843483448029,
-0.012985416688024998,
-0.10328754782676697,
-0.15443933010101318,
-0.06692758947610855,
-0.10131984204053879,
0.16051159799098969,
0.10164831578731537,
-0.07763688266277313,
-0.10852212458848953,
-0.015918603166937828,
0.05380608141422272,
-0.09144808351993561,
0.139012411236763,
0.04062476381659508,
-0.002639913931488991,
0.06445397436618805,
-0.08218096941709518,
-0.07376682758331299,
-0.08046617358922958,
0.0496177077293396,
-0.22006183862686157,
0.08308494091033936,
-0.01788865029811859,
0.01750027760863304,
-0.0933716744184494,
-0.041705865412950516,
0.28968408703804016,
-0.004160046577453613,
0.11006033420562744,
0.1470857411623001,
-0.07364054024219513,
0.1824466586112976,
0.04950264096260071,
0.0020693105179816484,
-0.008689974434673786,
0.07668033242225647,
-0.13042691349983215,
-0.13045477867126465,
0.0599205307662487,
-0.06270585209131241,
0.03331899270415306,
-0.09645500034093857,
0.13727505505084991,
-0.04522624611854553,
0.07829061895608902,
0.09454832971096039,
0.12819825112819672,
0.03931615501642227,
-0.07510791718959808,
0.11818983405828476,
0.09653790295124054,
0.04266561195254326,
0.015490403398871422,
0.013853940181434155,
-0.009678392671048641,
-0.09296464920043945,
-0.04879608377814293,
-0.03599875420331955,
-0.05675901845097542,
-0.022672835737466812,
-0.06463653594255447,
0.014239244163036346,
0.014578407630324364,
-0.062439970672130585,
0.010482659563422203,
-0.060566358268260956,
0.13663314282894135,
0.07616086304187775,
-0.0869862511754036,
-0.05705849826335907,
0.1289874166250229,
-0.019398119300603867,
-0.07833686470985413,
-0.05063877999782562,
-0.24831050634384155,
-0.06039592623710632,
-0.01139790564775467,
0.03672131523489952,
-0.08550991117954254,
-0.030985577031970024,
0.14749927818775177,
-0.030903758481144905,
-0.06355135142803192,
-0.060924891382455826,
-0.04496418684720993,
-0.022650891914963722,
0.10848428308963776,
-0.007039538584649563,
-0.020395083352923393,
0.008078969083726406,
-0.02425225079059601,
-0.07531987130641937,
-1.7641097656451166e-05,
0.025011559948325157,
-0.10315907001495361,
-0.03660118579864502,
-0.01919560879468918,
0.048609696328639984,
-0.1098204106092453,
-0.032905884087085724,
-0.015130999498069286,
0.02416413649916649,
-0.0046325973235070705,
-0.1676710993051529,
0.13034968078136444,
-0.03339829295873642,
0.07266785204410553,
-0.14624039828777313,
-0.051965996623039246,
0.026474377140402794,
0.1344355046749115,
-0.0476565808057785,
0.005278131924569607,
-0.05390610545873642,
-0.026257900521159172,
-0.07574602961540222,
0.08046435564756393,
0.18906770646572113,
0.09695649892091751,
0.0005958041874691844,
-0.057587746530771255,
0.10209931433200836,
-0.04069628193974495,
-0.026083169505000114,
-0.01554036047309637,
-0.06621084362268448,
-0.05282582715153694,
0.045465122908353806,
0.09384376555681229,
0.0706348866224289,
0.13985799252986908,
0.0504225417971611,
-0.04588405042886734,
0.05062934383749962,
0.05483438819646835,
-0.1661093533039093,
0.16273294389247894,
0.07247501611709595,
0.003021708456799388,
-0.16235068440437317,
-0.01842939294874668,
-0.20373676717281342,
0.02592211775481701,
0.001585354097187519,
-0.0020573707297444344,
-0.036425814032554626,
-0.05530554801225662,
0.04566754400730133,
-0.08360658586025238,
-0.02663750760257244,
-0.11051569133996964,
-0.03400964289903641,
-0.17509101331233978,
-0.14716416597366333,
-0.020055735483765602,
0.06101539358496666,
-0.001245667110197246,
0.03636467829346657,
-0.046232424676418304,
-0.009510288946330547,
-0.04277542605996132,
-0.037245627492666245,
-0.05995400622487068,
-0.020695704966783524,
-0.08463771641254425,
0.008841472677886486,
0.014854419976472855,
0.13665741682052612,
0.14878974854946136,
-0.11658921092748642,
-0.15690389275550842,
-0.09826547652482986,
-0.12182004004716873,
0.20694203674793243,
-0.01729097031056881,
0.01257314532995224,
-0.015357732772827148,
-0.0150544922798872,
0.1427706629037857,
0.07159660756587982,
0.12565907835960388,
0.13378757238388062,
0.03833257406949997,
0.14866851270198822,
-0.05394464358687401,
-0.16483886539936066,
0.14968004822731018,
0.08922324329614639,
-0.018044795840978622,
0.14517484605312347,
-0.03647071495652199,
0.19109991192817688,
-0.007347611710429192,
-0.022046398371458054,
0.024250676855444908,
-0.02284998819231987,
0.19588500261306763,
0.028181154280900955,
-0.08767428994178772,
-0.18806122243404388,
0.08258290588855743,
0.005964509677141905,
-0.08227043598890305,
0.05816292762756348,
0.02296726033091545,
-0.07339782267808914,
0.05763104185461998,
0.08717086911201477,
0.009790593758225441,
-0.045300811529159546,
-0.0649518221616745,
0.10555890947580338,
0.02151423506438732,
-0.06610909849405289,
-0.13645443320274353,
0.07516907155513763,
0.07575627416372299,
-0.036868732422590256,
-0.05045988783240318,
-0.1836095005273819,
0.015180975198745728,
-0.10663565993309021,
0.01857728883624077,
-0.1355506032705307,
0.1417207270860672,
-0.03421106934547424,
-0.04335556924343109,
0.18101944029331207,
0.005077095236629248,
-0.011281677521765232,
0.13437795639038086,
0.06087716668844223,
-0.1197228729724884,
-0.09757459163665771,
-0.06125101447105408,
-0.022238267585635185,
-0.061658456921577454,
-0.0017038424266502261,
0.17578917741775513,
-0.09309324622154236,
-0.0891115814447403,
-0.060153160244226456,
0.062225498259067535,
-0.09215038269758224,
-0.04295594245195389,
0.09954920411109924,
0.04809233173727989,
0.12475258111953735,
-0.06608052551746368,
-0.09617879241704941,
-0.12697188556194305,
-0.14065085351467133,
0.1911274939775467,
0.023894939571619034,
-0.04618161544203758,
0.11179175227880478,
0.019326666370034218,
-0.03650718182325363,
-0.05876612290740013,
-0.02317078225314617,
-0.11983799934387207,
-0.0389883816242218,
0.03947591781616211,
0.04080502688884735,
-0.08732292056083679,
0.11010120809078217,
-0.13493353128433228,
-0.043709274381399155,
-0.027402300387620926,
0.0315418504178524,
0.08597561717033386,
0.11650015413761139,
0.12330731749534607,
-0.01726287230849266,
0.01762738823890686,
0.054335255175828934,
0.07430979609489441,
0.06158318743109703,
-0.0286235548555851,
-0.12720255553722382,
0.04373962804675102,
-0.029092757031321526,
0.06755274534225464,
0.08569011837244034,
0.09694444388151169,
-0.04745322838425636,
-0.10402891784906387,
0.01577380672097206,
-0.039860550314188004,
0.11488423496484756,
-0.040472183376550674,
0.10944864153862,
0.16923846304416656,
-0.22275914251804352,
0.11738455295562744,
-0.06699653714895248,
-0.16779322922229767,
-0.026519794017076492,
-0.058453019708395004,
0.030287792906165123,
-0.06324552744626999,
-0.05850047245621681,
-0.04006655141711235,
-0.04567741975188255,
-0.007497528567910194,
0.03023686632514,
-0.0368785597383976,
0.05424192547798157,
0.08954357355833054,
-0.09030861407518387,
0.02072429098188877,
-0.08186136931180954,
-0.10271316766738892,
0.12671777606010437,
0.03875808045268059,
-0.042596038430929184,
-0.09957695752382278,
0.1742638200521469,
-0.11221221834421158,
0.16923414170742035,
-0.04223386570811272,
0.06192237138748169,
0.048127733170986176,
-0.06399773806333542,
-0.1413378268480301,
0.12547318637371063,
-0.08999992161989212,
0.10736626386642456,
-0.02664278820157051,
0.05802270770072937,
0.07635321468114853,
-0.007435317151248455,
-0.1210571676492691,
0.03483264893293381,
0.028303226456046104,
-0.07525287568569183,
0.03519187867641449,
0.07763566821813583,
-0.14352574944496155,
0.12087348848581314,
0.14076842367649078,
0.19212865829467773,
0.03641427308320999,
0.07638685405254364,
-0.13028773665428162,
-0.12880092859268188,
0.12684229016304016,
-0.11166973412036896,
-0.08032907545566559,
-0.006906720343977213,
0.10857298970222473,
-0.06868082284927368,
0.045017801225185394,
0.09606388211250305,
0.04477905482053757,
-0.016746439039707184,
-0.005873304791748524,
-0.03121108002960682,
-0.013922115787863731,
0.06586308777332306,
-0.12252912670373917,
-0.0033285627141594887,
-0.1335023194551468,
-0.049518488347530365,
-0.0999031662940979,
0.025495929643511772,
-0.14645971357822418,
-0.2235897332429886,
-0.03540550544857979,
0.09079821407794952,
0.0997031182050705,
-0.06358876079320908,
-0.042268481105566025,
0.09132777899503708,
0.05607578158378601,
-0.18928132951259613,
-0.026321526616811752,
-0.01563463732600212,
-0.06871023774147034,
-0.09811082482337952,
-0.17692281305789948,
-0.021870175376534462,
-0.08774508535861969,
0.054368652403354645,
-0.056079644709825516,
-0.12936583161354065,
0.14238154888153076,
0.2533716857433319,
0.10108436644077301,
-0.027153093367815018,
-0.09933136403560638,
0.04455197975039482,
0.03502753749489784,
0.07847361266613007,
-0.003607744351029396,
-0.06250916421413422,
0.06778039783239365,
-0.01249921415001154,
0.1195252388715744,
0.09278927743434906,
0.06266562640666962,
0.01982760988175869,
0.015791015699505806,
0.009291150607168674,
0.1934305727481842,
0.09582634270191193,
0.028441645205020905,
-0.03683337941765785,
0.09082212299108505,
0.05561784654855728,
0.09702035039663315,
0.09406758844852448,
-0.08974635601043701,
0.04582105576992035,
0.06396840512752533,
-0.016561830416321754,
-0.15277743339538574,
0.06491141766309738,
-0.15439537167549133,
-0.09204495698213577,
0.036973729729652405,
0.028385967016220093,
-0.05352221429347992,
-0.06674666702747345,
0.15682998299598694,
-0.01843831315636635,
0.0999937579035759,
0.11510132253170013,
0.04423929378390312,
0.06570092588663101,
0.08323153108358383,
-0.03044372983276844,
-0.09439786523580551,
-0.0802794024348259,
-0.13861818611621857,
-0.11930609494447708,
-0.029361385852098465,
-0.12232358753681183,
-0.2093646377325058,
-0.049045830965042114,
0.07637656480073929,
-0.07710066437721252,
-0.08444546908140182,
0.019562842324376106,
-0.003554054070264101,
-0.05177336558699608,
0.0500846728682518,
0.047626230865716934,
-0.08616004139184952,
0.06996370851993561,
-0.08964890986680984,
-0.0078824982047081,
-0.08622919768095016,
-0.12660503387451172,
-0.15447260439395905,
0.02117934823036194,
-0.08338513225317001,
-0.06854762881994247,
-0.05147949606180191,
-0.03161212429404259,
0.02573171630501747,
-0.04301149398088455,
-0.015860620886087418,
-0.1589500457048416,
0.016615265980362892,
-0.009577120654284954,
0.006549738347530365,
0.09227991104125977,
-0.09938745945692062,
-0.039466582238674164,
0.0358208492398262,
-0.13590072095394135,
-0.016405688598752022,
-0.16463430225849152,
0.07170522212982178,
-0.1381663680076599,
0.04715021327137947,
0.024135621264576912,
0.08033151924610138,
0.11908998340368271,
-0.05488888919353485,
-0.1366230845451355,
0.00543542206287384,
-0.048307742923498154,
-0.10688453912734985,
-0.10176441073417664,
0.0403161458671093,
0.03250595182180405,
-0.0078392019495368,
0.13774418830871582,
0.10398312658071518,
0.03685976564884186,
0.02969098836183548,
-0.11939527839422226,
0.07188917696475983,
-0.15804354846477509,
-0.06306451559066772,
0.10817941278219223,
-0.12116548418998718,
0.0025316267274320126,
0.03325658291578293,
-0.0809069275856018,
-0.09211388230323792,
0.1825583279132843,
0.026504434645175934,
0.10365713387727737,
-0.1377570778131485,
-0.0285252183675766,
-0.021100632846355438,
-0.008145214058458805,
-0.019381076097488403,
-0.14173264801502228,
0.024591689929366112,
0.048517223447561264,
0.12354472279548645,
0.0020382117945700884,
0.08663204312324524,
0.14793546497821808,
-0.11588481068611145,
0.07984781265258789,
0.11911861598491669,
0.13853636384010315,
-0.02435217797756195,
-0.07728599011898041,
-0.023266904056072235,
-0.040893081575632095,
0.013100736774504185,
0.14117661118507385,
0.030676430091261864,
-0.08209210634231567,
-0.2041952908039093,
0.04105398431420326,
0.042516324669122696,
0.04577596113085747,
-0.10874861478805542,
0.0047334046103060246,
0.17587260901927948,
-0.07443917542695999,
0.06512943655252457,
0.09383077174425125,
-0.05875053256750107,
-0.1504581719636917,
-0.10778694599866867,
-0.12042687833309174,
0.18275031447410583,
-0.17826524376869202,
-0.03619338944554329,
-0.11664799600839615,
0.15598876774311066,
0.16899003088474274,
-0.0670572966337204,
-0.024401677772402763,
0.06883802264928818,
-0.08967068791389465,
0.20536547899246216,
0.08191341161727905,
-0.0019260672852396965,
0.03920162096619606,
0.07647782564163208,
-0.04034007340669632,
-0.0934944674372673,
-0.10810915380716324,
-0.012957988306879997,
0.15498630702495575,
0.04525269195437431,
0.1199001744389534,
-0.007816593162715435,
0.027111757546663284,
-0.060037679970264435,
0.0650736540555954,
0.030713440850377083,
-0.011363202705979347,
-0.18259882926940918,
-0.09085862338542938,
0.11924820393323898,
0.10745567828416824,
0.06839507073163986,
-0.0758684054017067,
-0.006060526706278324,
0.01145108975470066,
-0.14601466059684753,
0.033114559948444366,
-0.09938216954469681,
0.04560186713933945,
0.05526749789714813,
0.07576796412467957,
-0.07805024087429047,
-0.03945308178663254,
-0.08614762127399445,
-0.026900863274931908,
-0.07832806557416916,
0.014415442012250423,
0.043129175901412964,
0.10880549997091293,
-0.0518321767449379,
0.05736072361469269,
-0.12978731095790863,
0.04526791721582413,
-0.05831116810441017,
-0.11614147573709488,
-0.03909534215927124,
-0.035078782588243484,
-0.007875197567045689,
0.07689427584409714,
0.0679088830947876,
0.030162086710333824,
0.1259283870458603,
-0.017249908298254013,
-0.11108841001987457,
-0.001143075991421938,
0.00043888602522201836,
0.058043062686920166,
0.022614577785134315,
0.10654336214065552,
-0.023339830338954926,
-0.04955197870731354,
0.034565143287181854,
0.15552452206611633,
-0.09379252046346664,
-0.04296931251883507,
0.09048353135585785,
0.06184375286102295,
-0.09185878187417984,
0.11546674370765686,
0.02100890502333641,
-0.08040564507246017,
-0.2160881906747818,
0.05422476679086685,
-0.16068576276302338,
-0.10852671414613724,
0.16938824951648712,
0.09491880238056183,
0.04684532806277275,
0.007763601839542389,
0.10009079426527023,
-0.11631502211093903,
0.17368385195732117,
0.10676855593919754,
-0.037724513560533524,
0.11160612851381302,
0.08395685255527496,
0.11333529651165009,
-0.03394687548279762,
0.0010442602215334773,
0.11281569302082062,
0.0016512467991560698,
-0.04746308922767639,
-0.08769358694553375,
0.1306440234184265,
0.10576486587524414,
-0.009272588416934013,
-0.05797518044710159,
0.13403138518333435,
-0.06227843090891838,
-0.03749378025531769,
0.08783800154924393,
-0.03204747289419174,
-0.026115769520401955,
-0.11981090903282166,
0.06413193792104721,
0.1485157310962677,
-0.035748641937971115,
-0.07937556505203247,
0.053350724279880524,
0.004521173425018787,
0.12034142017364502,
0.015707483515143394,
-0.013107459992170334,
-0.09624221920967102,
0.08622825890779495,
-0.06009341776371002,
-0.0672362893819809,
0.07785330712795258,
0.05831049755215645,
0.08357390016317368,
0.005981411784887314,
-0.13713298738002777,
-0.030886182561516762,
-0.149751216173172,
-0.014090996235609055,
-0.004336760379374027,
0.05757811665534973,
0.032752081751823425,
-0.08024372160434723,
-0.059415947645902634,
-0.0668966993689537,
0.10694613307714462,
-0.09937349706888199,
0.07054842263460159,
0.05459006503224373,
-0.09529445320367813,
0.001442709588445723,
-0.16386540234088898,
0.02924245223402977,
0.08194026350975037,
0.08720995485782623,
0.02680937573313713,
0.017791815102100372,
0.13999497890472412,
0.00016195685020647943,
0.18821324408054352,
0.035386260598897934,
-0.004430686589330435,
0.011511892080307007,
0.010722816921770573,
-0.12499792873859406,
-0.012896488420665264,
0.1773584485054016,
0.02739907242357731,
0.08753707259893417,
0.10775429010391235,
0.02821025252342224,
0.011978219263255596,
-0.05322282016277313,
0.1087835505604744,
0.004916926380246878,
-0.023677105084061623,
-0.0426640659570694,
0.011075358837842941,
0.07561250030994415,
0.06350594013929367,
-0.15364062786102295,
-0.04677660018205643,
-0.14319980144500732,
0.1416078805923462,
-0.026957809925079346,
0.04708409681916237,
-0.08956670016050339,
-0.17827355861663818,
0.0248720645904541,
0.08207716792821884,
0.008570054545998573,
-0.09836441278457642,
0.10866136103868484,
0.011383343487977982,
0.1322660744190216,
0.02022664248943329,
-0.10028841346502304,
0.02531225048005581,
-0.009128362871706486,
0.03633324056863785,
0.11701841652393341,
0.02717527560889721,
-0.012233592569828033,
0.07936903089284897,
-0.18674519658088684,
-0.1297636330127716,
-0.17068500816822052,
-0.168649360537529,
-0.1027558296918869,
0.2340477854013443,
-0.0318438783288002,
0.03701275587081909,
0.15112239122390747,
-0.05830155685544014,
-0.0488579235970974,
0.24886512756347656,
0.09632280468940735,
0.10316556692123413,
-0.021322540938854218,
-0.027598107233643532,
-0.008166318759322166,
0.07149234414100647,
0.19785039126873016,
0.058054111897945404,
0.05908077955245972,
0.028426440432667732,
-0.06917319446802139,
0.004584424663335085,
0.22313207387924194,
0.18407855927944183,
0.01394509244710207,
0.015802618116140366,
-0.137234166264534,
0.018152059987187386,
0.021139023825526237,
-0.12555894255638123,
-0.07104634493589401,
0.09582800418138504,
-0.04532024636864662,
0.08403433859348297,
0.04890444129705429,
-0.08705566823482513,
0.1936335563659668,
0.008718105033040047,
0.2076418101787567,
-0.005605755373835564,
-0.09878746420145035,
-0.17889006435871124,
-0.1892474889755249,
-0.06327050924301147,
-0.032245513051748276,
0.027664201334118843,
0.027398059144616127,
-0.10542916506528854,
0.02124554105103016,
-0.04261413961648941,
-0.06693112105131149,
0.06991223990917206,
-0.11639618873596191,
-0.19844911992549896,
0.1037389412522316,
0.13918885588645935,
-0.15020878612995148,
0.0657651498913765,
-0.0749097689986229,
-0.1539602279663086,
0.1522996574640274,
0.07111905515193939,
0.028822140768170357,
-0.11974260210990906,
0.040439069271087646,
0.02690531499683857,
0.0936114564538002,
-0.12432318180799484,
0.019209494814276695,
-0.16065803170204163,
0.04926839470863342,
0.2059396356344223,
-0.025774138048291206,
0.18453741073608398,
0.06501016765832901,
0.017580488696694374,
-0.06801608949899673,
-0.12044443190097809,
-0.02269824780523777,
0.02546677738428116,
0.07594534009695053,
-0.09215665608644485,
0.11016517877578735,
0.13921236991882324,
0.17302440106868744,
-0.048668861389160156,
-0.1329161524772644,
0.08137023448944092,
0.16468071937561035,
0.027382750064134598,
-0.12784741818904877,
-0.034294869750738144,
0.14283134043216705,
-0.008813895285129547,
-0.04519776999950409,
0.17204587161540985,
-0.167410209774971,
0.1393652856349945,
-0.2172795832157135,
0.06136656180024147,
-0.040045611560344696,
-0.03501686081290245,
-0.022142330184578896,
0.03576354682445526,
0.01264339592307806,
0.029431426897644997,
-0.13442647457122803,
-0.15841062366962433,
-0.10599293559789658,
-0.0848698616027832,
-0.01968114636838436,
-0.14804330468177795,
0.17935757339000702,
0.03923508897423744,
-0.11237377673387527,
0.150547057390213,
0.10809671133756638,
-0.19369104504585266,
0.03368616849184036,
-0.09504903107881546,
0.10494992136955261,
0.0506863109767437,
-0.06953369826078415,
-0.09948152303695679,
-0.054062746465206146,
0.011021705344319344,
-0.0947796106338501,
-0.02578110247850418,
0.18345633149147034,
0.04342260956764221,
0.1822349727153778,
-0.007612834218889475,
-0.17410118877887726,
0.020859699696302414,
0.006723850034177303,
-0.06662016361951828,
0.07668870687484741,
0.07373086363077164,
0.01644805446267128,
0.08561113476753235,
-0.12182020395994186,
0.012237966991961002,
-0.1887560486793518,
0.11880438029766083,
0.16795958578586578,
-0.01711110584437847,
0.017165817320346832,
-0.1654159128665924,
-0.18872803449630737,
-0.016158558428287506,
-0.0942087471485138,
-0.023974662646651268,
-0.12136944383382797,
0.015277671627700329,
-0.19247235357761383,
0.08987276256084442,
-0.12196915596723557,
0.1386827975511551,
-0.09625182300806046,
0.04219598323106766,
0.07268041372299194,
0.1182200014591217,
0.04376257583498955,
-0.12978075444698334,
-0.186722531914711,
0.1865345686674118,
-0.20943233370780945,
0.08649387210607529,
-0.09671835601329803,
0.006041346117854118,
0.008574381470680237,
-0.1631135493516922,
-0.06556522101163864,
0.012832178734242916,
-0.024215703830122948,
-0.03824235126376152,
0.03163083270192146,
0.1455806940793991,
0.14522084593772888,
-0.02525929920375347,
0.051980532705783844,
0.13175144791603088,
-0.05039818212389946,
0.0011984878219664097,
0.10754029452800751,
-0.14556866884231567,
0.06829225271940231,
0.06392581760883331,
0.09219790250062943,
-0.05711030587553978,
-0.06469900906085968,
-0.15116192400455475,
-0.04595983400940895,
-0.14426375925540924,
-0.04759465157985687,
-0.10792631655931473,
0.10716865956783295,
-0.06489576399326324,
0.014235387556254864,
0.05123982951045036,
-0.06258726865053177,
-0.10095574706792831,
-0.08397196978330612,
-0.12503333389759064,
-0.005842909216880798,
0.18776798248291016,
-0.056980449706315994,
-0.01603863574564457,
-0.06625515967607498,
0.0074783978052437305,
-0.03114243596792221,
-0.15540993213653564,
-0.16042104363441467,
0.08954021334648132,
-0.06798525154590607,
0.0011480941902846098,
-0.02357623726129532,
-0.07715031504631042,
0.11461010575294495,
0.038920167833566666,
0.07828100770711899,
-0.07316125929355621,
-0.019312912598252296,
0.11870008707046509,
0.014599124900996685,
-0.1170935183763504,
0.07945434004068375,
-0.15638138353824615,
0.14704926311969757,
-0.00168112781830132,
0.05368093401193619,
-0.013376756571233273,
0.14254729449748993,
-0.14916448295116425,
0.18260447680950165,
0.025823034346103668,
0.04721922427415848,
-0.08324617147445679,
0.04039132595062256,
-0.07312029600143433,
-0.046938929706811905,
-0.19089633226394653,
-0.1899024397134781,
0.008166138082742691,
-0.011749587021768093,
0.007726926356554031,
0.26322585344314575,
-0.14656877517700195,
-0.12318812310695648,
0.17424312233924866,
-0.06335712224245071,
0.0038622866850346327,
0.1470291167497635,
0.03424496576189995,
0.030735664069652557,
-0.09570333361625671,
0.09107271581888199,
0.06652773171663284,
0.1942591816186905,
0.10459909588098526,
-0.18096481263637543,
-0.0478023998439312,
0.04739875718951225,
0.27403518557548523,
0.17625826597213745,
0.11601962149143219,
0.06062885373830795,
-0.1377822309732437,
-0.17432764172554016,
-0.07412014156579971,
-0.01880834996700287,
-0.03782914578914642,
-0.05039093270897865,
0.07880593836307526,
-0.21195128560066223,
-0.1551084965467453,
-0.10840486735105515,
0.15728288888931274,
0.16859647631645203,
0.06069809943437576,
0.0832362249493599,
-0.08023793250322342,
-0.1232042908668518,
-0.02928946167230606,
-0.11468205600976944,
-0.0048852721229195595,
-0.12921296060085297,
-0.03271625563502312,
0.0569177009165287,
-0.14655332267284393,
-0.10291893035173416,
-0.030841562896966934,
-0.06742054224014282,
-0.11583901941776276,
0.1400100737810135,
0.20561525225639343,
-0.13824240863323212,
0.07497355341911316,
0.010701964609324932,
-0.05603579431772232,
0.07395511120557785,
0.11007129400968552,
0.0679926723241806,
0.014966234564781189,
0.10054680705070496,
-0.008086343295872211,
0.01671762391924858,
-0.10055601596832275,
0.14698056876659393,
-0.261535108089447,
0.015071876347064972,
0.16012710332870483,
0.013841468840837479,
0.032252825796604156,
-0.14310139417648315,
0.033303968608379364,
0.012801162898540497,
-0.15167184174060822,
-0.07628241181373596,
0.09619733691215515,
-0.04469799995422363,
0.040164560079574585,
0.05357689782977104,
-0.1034109815955162,
0.05553106591105461,
-0.050599705427885056,
0.1042165532708168,
-0.02676115185022354,
0.2334284484386444,
0.04466928541660309,
-0.25262564420700073,
-0.12501801550388336,
-0.017616694793105125,
0.04161154478788376,
-0.04138272628188133,
0.09443697333335876,
0.04009244963526726,
0.1188858300447464,
0.03468693047761917,
0.16713647544384003,
-0.02539682947099209,
-0.06472640484571457,
-0.015322073362767696,
0.01334840152412653,
0.017153240740299225,
-0.15253183245658875,
0.028302352875471115,
0.05204973742365837,
0.03166450560092926,
0.11370369046926498,
0.09776893258094788,
0.007420731242746115,
-0.019520211964845657,
-0.04361274838447571,
-0.058612387627363205,
-0.07751479744911194,
0.09072288870811462,
0.0387454554438591,
-0.02102944627404213,
0.1663285791873932,
-0.06319628655910492,
0.034949854016304016,
0.05259707570075989,
-0.006616981700062752,
0.06244783475995064,
0.008805456571280956,
0.16774576902389526,
-0.0010425647487863898,
-0.13732317090034485,
-0.05047951638698578,
-0.02209331840276718,
-0.14751864969730377,
-0.05799234285950661,
0.037731658667325974,
0.03984390199184418,
-0.035960983484983444,
-0.11517027765512466,
-0.08612518012523651,
-0.056431304663419724,
-0.028342893347144127,
0.011924396269023418,
-0.06408356130123138,
0.00588279077783227,
-0.116409070789814,
-0.041266899555921555,
0.004667594563215971,
0.11877239495515823,
-0.030772216618061066,
-0.05135522782802582,
0.1311545968055725,
-0.011384120211005211,
-0.07409220188856125,
-0.05532345548272133,
0.048678960651159286,
-0.010585589334368706,
-0.1289079487323761,
-0.05448609218001366,
-0.06219921261072159,
-0.08411215990781784,
0.06047137454152107,
0.11693686991930008,
-0.08086744695901871,
0.0653604194521904,
0.03966081514954567,
0.031476326286792755,
-0.024311449378728867,
0.08784040063619614,
0.16253769397735596,
-0.07245288789272308,
-0.03553662821650505,
-0.052709728479385376,
0.12449190765619278,
0.0036182631738483906,
0.1042768582701683,
0.0435282364487648,
0.058136261999607086,
-0.03321927785873413,
-0.07880519330501556,
-0.09092167764902115,
0.05727861821651459,
-0.14609341323375702,
0.02365843392908573,
0.01719135232269764,
-0.004227889236062765,
0.0899197906255722,
-0.008931070566177368,
-0.030237413942813873,
-0.005929366685450077,
0.022717826068401337,
-0.05761193111538887,
0.004480283707380295,
-0.02607136033475399,
-0.021587569266557693,
0.037871330976486206,
-0.15036641061306,
0.09138116985559464,
-0.1249239519238472,
0.14770866930484772,
0.0640806183218956,
0.058309055864810944,
0.08662690222263336,
0.18855249881744385,
-0.1006469652056694,
0.026469167321920395,
0.05663926154375076,
-0.11579618602991104,
0.2155350148677826,
0.016582783311605453,
0.08714847266674042,
-0.01294088363647461,
-0.09553388506174088,
-0.06811092048883438,
-0.054556552320718765,
0.03847071900963783,
0.05362661927938461,
0.02838260307908058,
0.023216979578137398,
-0.027360862120985985,
0.10604427009820938,
0.03342714160680771,
0.028326882049441338,
-0.10040407627820969,
-0.0632743313908577,
-0.041402243077754974,
-0.04179827496409416,
0.004950674716383219,
0.0824359804391861,
0.02414705976843834,
-0.02707783691585064,
-0.10824856907129288,
0.012362697161734104,
-0.09821296483278275,
0.016354981809854507,
-0.04174266383051872,
0.20583386719226837,
0.01434536837041378,
0.0019382911268621683,
0.0023803834337741137,
0.039139654487371445,
-0.059108830988407135,
0.05470095947384834,
-0.13392949104309082,
-0.1465943157672882,
0.04852558299899101,
0.011535124853253365,
0.0347752571105957,
0.3086167275905609,
-0.06075459346175194,
-0.2769530415534973,
0.12341857701539993,
-0.012767929583787918,
0.04488321766257286,
0.028210502117872238,
0.040562067180871964,
-0.0009107141522690654,
0.11489260941743851,
0.01331358216702938,
0.035471510142087936,
0.05734910070896149,
-0.10144852846860886,
-0.05916846916079521,
-0.02202378213405609,
0.11134058237075806,
-0.002832509111613035,
0.15660637617111206,
0.08853872865438461,
-0.09331627935171127,
-0.047480735927820206,
-0.0735945999622345,
-0.07125715911388397,
-0.024099068716168404,
-0.1703880876302719,
-0.02535933628678322,
0.16601145267486572,
-0.0884358361363411,
-0.19372768700122833,
-0.16629384458065033,
-0.029266659170389175,
0.09365642815828323,
-0.0385410338640213,
0.1030217707157135,
-0.0757022500038147,
-0.05313057452440262,
0.10390640795230865,
-0.1332325041294098,
-0.03531808406114578,
-0.055519673973321915,
0.06554920226335526,
-0.11542033404111862,
-0.22949126362800598,
0.010694063268601894,
-0.047902971506118774,
0.13366398215293884,
-0.09503693878650665,
0.10882237553596497,
0.17383438348770142,
-0.11046312004327774,
-0.14571166038513184,
0.05055743455886841,
0.07825829833745956,
-0.13588166236877441,
-0.02422678843140602,
0.0377081073820591,
-0.1107611134648323,
-0.05464668571949005,
-0.017543697729706764,
-0.0709834173321724,
0.07465305924415588,
-0.036558978259563446,
-0.1101282611489296,
0.01898428052663803,
-0.00836246833205223,
0.023882796987891197,
0.10120350122451782,
0.10414714366197586,
0.08825215697288513,
0.052851852029561996,
-0.009670141153037548,
-0.11551529169082642,
-0.05028393492102623,
0.002487089019268751,
0.05261964350938797,
0.11739703267812729,
-0.014158695936203003,
-0.08371848613023758,
0.08205800503492355,
0.05093333497643471,
0.09591212123632431,
-0.017770862206816673,
-0.03250740468502045,
-0.06871878355741501,
-0.19686837494373322,
0.008732467889785767,
0.0918661579489708,
-0.09573326259851456,
0.02576231211423874,
-0.10400111228227615,
0.018209971487522125,
-0.09388694912195206,
0.03510481119155884,
-0.06353336572647095,
-0.09397076070308685,
0.04975515604019165,
0.14176489412784576,
-0.007887247949838638,
0.014388883486390114,
0.009138648398220539,
-0.10401494801044464,
0.09202436357736588,
-0.07632429152727127,
0.09072955697774887,
0.1315353363752365,
0.036433279514312744,
0.05663469806313515,
0.09404279291629791,
-0.06847860664129257,
0.0275797750800848,
0.04602529853582382,
-0.03368883579969406,
0.04261724650859833,
-0.16752119362354279,
0.06583479791879654,
0.02015819028019905,
0.0025553822051733732,
-0.11520163714885712,
0.012712041847407818,
-0.046826496720314026,
-0.019764261320233345,
-0.010946191847324371,
-0.07614219933748245,
-0.13052235543727875,
0.008604509755969048,
0.0884973332285881,
0.03669226914644241,
0.05016118660569191,
-0.09340595453977585,
0.07244884222745895,
0.03883775696158409,
-0.10522144287824631,
0.08043178915977478,
-0.015332802198827267,
-0.010465444065630436,
-0.018246781080961227,
0.0719071552157402,
-0.07003972679376602,
0.016347812488675117,
0.017637545242905617,
0.01786297746002674,
-0.11208612471818924,
0.11164823919534683,
0.07187646627426147,
-0.053247686475515366,
-0.09478193521499634,
0.08572619408369064,
-0.04450945556163788,
-0.08251132071018219,
-0.09801910817623138,
-0.057651180773973465,
0.06863228231668472,
-0.12166183441877365,
-0.021098144352436066,
-0.010068295523524284,
-0.13265873491764069,
-0.04288245365023613,
-0.055249132215976715,
-0.06115671247243881,
-0.08723080158233643,
0.04311585798859596,
0.049761977046728134,
-0.10779473185539246,
-0.11630534380674362,
0.08648889511823654,
-0.04783114790916443,
-0.12431331723928452,
-0.04685012996196747,
-0.10573633760213852,
-0.14783091843128204,
0.09807385504245758,
-0.05969465151429176,
0.013650622218847275,
-0.09632135927677155,
0.010684318840503693,
0.030253848060965538,
0.07638727128505707,
0.07436154782772064,
0.06166904419660568,
-0.1510075479745865,
0.09324009716510773,
-0.02179896831512451,
-0.06130044907331467,
-0.014921218156814575,
0.10078549385070801,
0.11681441217660904,
-0.010820101015269756,
-0.03138936311006546,
-0.02669064886868,
0.022208431735634804,
0.0035896014887839556,
0.14646723866462708,
-0.08647937327623367,
0.022414766252040863,
-0.07825686037540436,
0.01068283524364233,
-0.024105563759803772,
-0.10526010394096375,
0.05844802036881447,
-0.11793258041143417,
0.1404877007007599,
-0.11202165484428406,
0.07653447985649109,
0.024144642055034637,
-0.11163143813610077,
-0.028748895972967148,
0.12130437046289444,
0.04748491197824478,
0.002054661512374878,
0.1760806292295456,
-0.07324787229299545,
-0.11228832602500916,
0.06114298850297928,
0.060446057468652725,
0.10431838780641556,
-0.13211935758590698,
0.050291337072849274,
-0.150564044713974,
0.0013471835991367698,
0.10091172158718109,
0.06855447590351105,
-0.02007385902106762,
0.05021028593182564,
0.08354402333498001,
-0.008769094944000244,
-0.0717058777809143,
-0.21730951964855194,
-0.09063180536031723,
-0.17975668609142303,
0.12863807380199432,
-0.06372185051441193,
-0.14682510495185852,
-0.17043757438659668,
0.030043352395296097,
-0.14880156517028809,
-0.038072630763053894,
-0.09703069180250168,
-0.011480329558253288,
-0.18733863532543182,
0.040887732058763504,
-0.03529589623212814,
-0.13240686058998108,
0.1529277116060257,
0.07243138551712036,
-0.020342236384749413,
0.1206066757440567,
0.022584205493330956,
0.14441591501235962,
0.09205947816371918,
-0.008600090630352497,
-0.05239468067884445,
0.15665073692798615,
0.22017808258533478,
-0.03315340727567673,
0.021091939881443977,
-0.07938976585865021,
-0.0684238150715828,
0.15057072043418884,
-0.027747437357902527,
0.13311636447906494,
-0.15425901114940643,
0.059910353273153305,
-0.07756419479846954,
0.01927966997027397,
0.09111888706684113,
-0.08993199467658997,
0.1035713404417038,
0.002013670513406396,
-0.21973076462745667,
-0.017039285972714424,
0.21971948444843292,
-0.014975843019783497,
0.04162630811333656,
0.23856331408023834,
-0.18143483996391296,
0.0006249054567888379,
0.0938476100564003,
-0.034841764718294144,
-0.0099036218598485,
-0.03505301848053932,
-0.12494086474180222,
0.011101122945547104,
0.03828325495123863,
0.07725904881954193,
-0.14701791107654572,
-0.02173595502972603,
0.05894172936677933,
0.16440162062644958,
0.04685720056295395,
-0.14878641068935394,
0.022457556799054146,
0.022036107257008553,
-0.01076429896056652,
-0.017323188483715057,
-0.10810317099094391,
-0.054477836936712265,
0.07878222316503525,
0.09588725119829178,
-0.0016464866930618882,
-0.11021879315376282,
-0.2059415727853775,
0.03804493322968483,
-0.0008366727270185947,
0.009706340730190277,
-0.10494295507669449,
-0.10308053344488144,
-0.15115952491760254,
-0.04254266247153282,
0.11164280772209167,
-0.2306428700685501,
0.05690879374742508,
-0.09459642320871353,
0.13314670324325562,
0.017395224422216415,
-0.04112495481967926,
0.019163014367222786,
-0.018915949389338493,
0.015656601637601852,
-0.00251242914237082,
0.06684320420026779,
-0.1515350490808487,
0.1563771814107895,
0.1466413289308548,
0.0288556981831789,
0.14580228924751282,
0.04373799264431,
0.06320948898792267,
-0.012374738231301308,
0.09799253940582275,
-0.14065346121788025,
-0.03253324702382088,
-0.07268162071704865,
0.05203660950064659,
0.06480344384908676,
-0.18949538469314575,
0.021341996267437935,
0.05568205937743187,
0.14363712072372437,
0.009196902625262737,
-0.22416692972183228,
0.1284341663122177,
0.024192219600081444,
0.08149013668298721,
0.008189259096980095,
0.19334180653095245,
0.03336932137608528,
0.12160876393318176,
-0.015025979839265347,
-0.16153232753276825,
-0.17583906650543213,
0.05497271940112114,
0.08609162271022797,
0.23549459874629974,
-0.18714909255504608,
0.16718637943267822,
-0.0017468304140493274,
-0.13583722710609436,
0.018136613070964813,
0.053934529423713684,
-0.12014805525541306,
0.02581924758851528,
-0.0802432969212532,
-0.14280761778354645,
-0.16810306906700134,
-0.09462246298789978,
0.07921824604272842,
-0.17725466191768646,
-0.07504579424858093,
-0.10211154818534851,
-0.038663387298583984,
-0.19078092277050018,
-0.17908985912799835,
0.1281883418560028,
-0.0543539933860302,
-0.05812368169426918,
-0.06067909300327301,
0.07293520122766495,
-0.07326043397188187,
-0.12673871219158173,
0.13457219302654266,
0.09345352649688721,
0.08156635612249374,
0.1263565570116043,
0.03518577292561531,
-0.03733221814036369,
-0.06579624861478806,
0.024807503446936607,
0.007032245397567749,
0.007594258524477482,
0.05232425034046173,
-0.11483830213546753,
-0.1407693326473236,
-0.02469409629702568,
0.014702181331813335,
-0.03850395604968071,
-0.06387121975421906,
-0.0706229954957962,
0.07622266560792923,
-0.03430189564824104,
0.15117144584655762,
-0.031397320330142975,
0.16190558671951294,
-0.013276745565235615,
-0.13448785245418549,
0.09536512941122055,
-0.012427150271832943,
0.11488527804613113,
0.02181248366832733,
-0.09902141988277435,
-0.04855918884277344,
0.030814222991466522,
-0.06012461334466934,
0.08330252021551132,
-0.12409551441669464,
-0.06776169687509537,
-0.10031389445066452,
0.1537291705608368,
-0.03905995562672615,
0.19959010183811188,
-0.06555942445993423,
-0.008047650568187237,
0.08864915370941162,
-0.09636369347572327,
0.06434186547994614,
-0.012438233010470867,
0.07796423137187958,
-0.08228577673435211,
-0.17254379391670227,
-0.008121526800096035,
-0.002046189270913601,
0.0651300773024559,
0.1417146772146225,
-0.04750949889421463,
-0.07288125902414322,
-0.04958660900592804,
-0.0506264865398407,
-0.04768658056855202,
-0.1241607591509819,
0.02144680544734001,
-0.03721305727958679,
0.038452547043561935,
-0.055974408984184265,
-0.05696208029985428,
0.16667324304580688,
0.08883804082870483,
-0.1547011435031891,
0.07007292658090591,
0.20467108488082886,
0.05018548667430878,
0.0882439836859703,
-0.03231476619839668,
-0.037271253764629364,
-0.047228243201971054,
0.0647076815366745,
0.16687345504760742,
-0.2003236562013626,
-0.08516999334096909,
-0.13133394718170166,
0.016725236549973488,
-0.19679684937000275,
0.07855992764234543,
0.06188644841313362,
-0.017062366008758545,
0.060042716562747955,
0.19676966965198517,
0.08656935393810272,
0.1577204465866089,
0.03275802358984947,
-0.1678943634033203,
-0.041737474501132965,
-0.005107571836560965,
-0.07731886208057404,
-0.09340353310108185,
-0.12802954018115997,
0.028424154967069626,
0.16628582775592804,
-0.07184405624866486,
0.03115321323275566,
0.06295373290777206,
-0.14864054322242737,
-0.028943462297320366,
0.05966793745756149,
-0.029704516753554344,
-0.04101783409714699,
-0.09923986345529556,
0.19830922782421112,
-0.13653047382831573,
0.1401512324810028,
-0.14699117839336395,
-0.05465201288461685,
-0.07952269166707993,
-0.09866168349981308,
0.05557826906442642,
0.18175452947616577,
0.19813625514507294,
-0.09335468709468842,
-0.10554821789264679,
-0.09483391791582108,
-0.05710604414343834,
-0.004250974394381046,
0.11270100623369217,
0.1810891479253769,
0.035048048943281174,
0.12732285261154175,
0.17132410407066345,
0.12142851203680038,
-0.1536553055047989,
0.011988961137831211,
0.05535859614610672,
0.057040344923734665,
0.11473824828863144,
-0.17069916427135468,
-0.15497906506061554,
-0.006286251358687878,
0.013699841685593128,
0.00984987523406744,
-0.1996496170759201,
0.01656280644237995,
-0.04565838351845741,
0.07419230043888092,
0.05835583060979843,
0.17384222149848938,
-0.02076486125588417,
0.03534696251153946,
0.14985105395317078,
-0.013953745365142822,
-0.07711803913116455,
-0.05991724878549576,
-0.15069611370563507,
0.010042954236268997,
0.06665168702602386,
-0.0028708213940262794,
-0.13582086563110352,
-0.03470638394355774,
-0.1305762678384781,
0.03315433859825134,
-0.01704723760485649,
-0.13598132133483887,
-0.05639225244522095,
-0.14814195036888123,
0.07456091046333313,
0.001755173783749342,
0.01692347414791584,
0.01499105989933014,
0.1003333330154419,
0.09531774371862411,
-0.1836109310388565,
-0.07414322346448898,
0.04784289374947548,
-0.023451561108231544,
0.09592980146408081,
0.13651898503303528,
0.06051275506615639,
-0.06779186427593231,
-0.207955464720726,
0.10823991894721985,
0.03287382796406746,
-0.1318475753068924,
-0.06538079679012299,
-0.05568023771047592,
0.024412792176008224,
-0.03554774820804596,
0.0014556708047166467,
0.07468466460704803,
0.14136333763599396,
-0.08732537180185318,
0.07576040923595428,
0.027051018550992012,
-0.07643163949251175,
0.1456509530544281,
-0.11225966364145279,
-0.10843399912118912,
-0.021952249109745026,
0.052116215229034424,
-0.014105906710028648,
-0.07538139075040817,
0.0009839244885370135,
0.0433446429669857,
0.037945542484521866,
-0.1261768490076065,
0.05365973338484764,
-0.11588446795940399,
0.1744353026151657,
0.07418932020664215,
-0.08748313784599304,
-0.15682993829250336,
0.08649066835641861,
-0.12007242441177368,
0.08234574645757675,
-0.07702931761741638,
0.08110171556472778,
0.011562211439013481,
0.10895345360040665,
0.0663132295012474,
0.0991644561290741,
0.13939489424228668,
-0.14068973064422607,
0.053825560957193375,
-0.061424676328897476,
-0.20957209169864655,
0.05945449322462082,
0.09895417839288712,
-0.1567903459072113,
-0.1142975240945816,
0.06176305189728737,
-0.05285676568746567,
0.062227051705121994,
-0.15822061896324158,
0.006857863161712885,
-0.053268224000930786,
0.062184955924749374,
0.005301619879901409,
0.06194321811199188,
0.05668812245130539,
0.10612167418003082,
-0.009811951778829098,
-0.181100532412529,
-0.05848723649978638,
-0.1400202065706253,
0.07029362767934799,
0.03818628564476967,
0.10467705130577087,
-0.0553935170173645,
0.03050556406378746,
0.15513963997364044,
-0.01504608616232872,
-0.002248612465336919,
0.10720544308423996,
0.06439010053873062,
0.09120030701160431,
-0.1540810912847519,
-0.09790387749671936,
0.1505734622478485,
0.1105884462594986,
0.0849355086684227,
0.06242978945374489,
0.08565171808004379,
0.20125088095664978,
0.07195662707090378,
0.10867951065301895,
-0.1462399959564209,
0.021637199446558952,
0.20046575367450714,
-0.07496049255132675,
-0.12630538642406464,
-0.10360438376665115,
0.09663607180118561,
-0.01651225984096527,
-0.13208478689193726,
0.015586062334477901,
0.07815368473529816,
-0.14127129316329956,
0.095194511115551,
-0.009338450618088245,
0.018615448847413063,
-0.16162090003490448,
0.021220823749899864,
0.08073387295007706,
0.0823143869638443,
-0.08522020280361176,
-0.16916000843048096,
0.008481559343636036,
0.14878568053245544,
0.06666843593120575,
-0.09728673100471497,
-0.10502786934375763,
0.09139544516801834,
-0.04508044943213463,
0.007057752925902605,
-0.10655362159013748,
0.043514326214790344,
0.11145686358213425,
0.004116273019462824,
0.053606193512678146,
-0.0224885493516922,
-0.1050453931093216,
0.1569911539554596,
-0.048270612955093384,
-0.09473995864391327,
-0.06146885082125664,
-0.066421277821064,
-0.01759021170437336,
0.017812319099903107,
0.09658148884773254,
0.2584174871444702,
-0.11736216396093369,
-0.11507586389780045,
0.03806585446000099,
-0.11754031479358673,
-0.09469685703516006,
-0.019574707373976707,
0.0457732230424881,
-0.09594495594501495,
0.14339178800582886,
-0.020174887031316757,
0.041358593851327896,
0.07869760692119598,
-0.08980684727430344,
0.05954064428806305,
-0.07194051146507263,
0.05353279411792755,
0.09071934223175049,
-0.08676248043775558,
-0.0749465599656105,
0.06942880153656006,
-0.08252792060375214,
0.03902385011315346,
-0.006491738837212324,
0.125177800655365,
-0.04572641849517822,
0.18514253199100494,
0.1682887077331543,
0.05230434983968735,
-0.04791165888309479,
0.0460507869720459,
0.11839704215526581,
0.03513810783624649,
0.08828791230916977,
0.20429924130439758,
-0.10314968228340149,
0.16823512315750122,
0.1280587762594223,
-0.1726495921611786,
-0.09115584194660187,
0.01299956999719143,
0.01774333231151104,
-0.0767236277461052,
-0.13937132060527802,
0.029759947210550308,
0.03735831752419472,
0.07529490441083908,
0.040899038314819336,
-0.15670152008533478,
0.02764987200498581,
-0.010125434026122093,
0.09199929237365723,
0.04332248494029045,
-0.13069090247154236,
-0.12736929953098297,
-0.1836962103843689,
0.14264142513275146,
0.024906616657972336,
-0.08768114447593689,
0.04835902899503708,
0.06147740036249161,
0.017520252615213394,
-0.15041416883468628,
0.13933630287647247,
0.14059489965438843,
-0.0016158469952642918,
-0.1683904230594635,
0.01662926748394966,
-0.15409493446350098,
-0.10594851523637772,
-0.03242073953151703,
-0.06370938569307327,
0.07678916305303574,
0.03229366987943649,
0.01896960288286209,
0.1251763105392456,
-0.0765986517071724,
0.09070468693971634,
0.05920494347810745,
-0.12205696851015091,
0.08887466788291931,
0.10489135980606079,
-0.11718786507844925,
-0.120779849588871,
0.017908919602632523,
0.045691270381212234,
-0.06873468309640884,
0.011494271457195282,
-0.055407702922821045,
-0.004656470380723476,
0.019627409055829048,
0.002694064984098077,
0.008228963240981102,
-0.19590240716934204,
0.0068548452109098434,
0.15351547300815582,
0.08265963941812515,
-0.19618827104568481,
0.026715856045484543,
-0.01212338637560606,
-0.055172450840473175,
0.13599736988544464,
0.08149438351392746,
0.06824033707380295,
-0.006317764986306429,
-0.10310763865709305,
0.1254507452249527,
0.061349064111709595,
0.049120303243398666,
-0.029263552278280258,
0.03678039461374283,
-0.04351266473531723,
0.1260814368724823,
0.02845372073352337,
-0.018680771812796593,
-0.1178930401802063,
0.18150968849658966,
-0.17586731910705566,
0.07105488330125809,
0.16568467020988464,
0.028179077431559563,
-0.009154892526566982,
-0.12367364019155502,
0.06612008810043335,
-0.016757000237703323,
-0.010454637929797173,
0.00029747048392891884,
-0.047652266919612885,
-0.18771053850650787,
-0.03023706190288067,
0.036763839423656464,
0.11749404668807983,
0.0052544353529810905,
0.16763144731521606,
0.07712718099355698,
-0.16059812903404236,
-0.13727480173110962,
0.025276988744735718,
-0.09066315740346909,
0.09544199705123901,
-0.0036076714750379324,
-0.03256159648299217,
0.12467990815639496,
0.043206747621297836,
0.027928674593567848,
-0.1503143161535263,
-0.10634655505418777,
-0.0707542672753334,
0.06427054107189178,
-0.08780466020107269,
0.07068347930908203,
-0.09084506332874298,
-0.07085010409355164,
-0.07567540556192398,
-0.09738683700561523,
-0.035588588565588,
-0.07211572676897049,
0.060424089431762695,
-0.06987284868955612,
-0.09037861227989197,
0.017250906676054,
0.03202936053276062,
-0.05392160266637802,
0.13330328464508057,
-0.19007651507854462,
0.06685291230678558,
0.04162704944610596,
-0.1565055549144745,
0.1219373270869255,
-0.1832263022661209,
-0.03425634652376175,
-0.05773317813873291,
0.05645037069916725,
0.03455077484250069,
0.10868039727210999,
0.12419705092906952,
-0.03435033559799194,
-0.0811304971575737,
0.019641531631350517,
-0.021442919969558716,
-0.04105948284268379,
-0.11824118345975876,
0.04615360125899315,
0.022922420874238014,
0.09484178572893143,
-0.08702903240919113,
-0.055499035865068436,
-0.09354982525110245,
0.10288231074810028,
-0.022236723452806473,
-0.07189461588859558,
0.013776034116744995,
-0.09835219383239746,
0.05902227759361267,
0.04014104604721069,
0.024783477187156677,
-0.11099208146333694,
-0.030063839629292488,
0.0901896134018898,
-0.16476258635520935,
0.03742625564336777,
-0.047973789274692535,
0.04286559671163559,
-0.02071109414100647,
-0.12510056793689728,
0.0656304880976677,
0.14341911673545837,
-0.13620388507843018,
0.0038562125992029905,
-0.058181390166282654,
0.026101885363459587,
-0.07843412458896637,
-0.08070269227027893,
0.14910103380680084,
0.08491784334182739,
-0.10829585045576096,
0.04424603655934334,
0.032621052116155624,
-0.06783874332904816,
0.08214602619409561,
0.06115824356675148,
0.020490538328886032,
-0.05208897590637207,
-0.11960682272911072,
-0.1158447340130806,
0.10092388093471527,
-0.1332213431596756,
0.19823463261127472,
-0.10452520847320557,
0.05834649130702019,
-0.12830442190170288,
-0.06431042402982712,
-0.13534942269325256,
0.0023523233830928802,
0.017641866579651833,
-0.09581062197685242,
-0.05797281488776207,
-0.0009488074574619532,
0.05100857466459274,
0.013453688472509384,
-0.006444795988500118,
-0.17313545942306519,
0.10622318834066391,
0.01864914409816265,
-0.08346252143383026,
0.15190371870994568,
-0.13999202847480774,
-0.0816735178232193,
-0.028791414573788643,
0.042137160897254944,
0.12718170881271362,
-0.02504962868988514,
0.09639029949903488,
0.02666766382753849,
-0.15561901032924652,
0.07433348149061203,
0.11746197193861008,
-0.058799926191568375,
-0.04662148654460907,
0.14004936814308167,
0.0169815830886364,
-0.029273131862282753,
0.05658522620797157,
0.019629741087555885,
-0.0671045109629631,
-0.012242424301803112,
0.10027790814638138,
-0.034286100417375565,
0.08085057139396667,
-0.008347734808921814,
-0.13727805018424988,
0.06624754518270493,
0.008299537003040314,
-0.04042167216539383,
-0.008645495399832726,
-0.056605614721775055,
-0.09784785658121109,
0.03511418029665947,
0.04480746388435364,
-0.08893898129463196,
-0.06475526094436646,
0.19575490057468414,
-0.06933435052633286,
0.08954876661300659,
-0.1034407764673233,
-0.020061969757080078,
0.03706982731819153,
-0.08758007735013962,
0.13368333876132965,
0.028670841827988625,
-0.05587558075785637,
-0.14396122097969055,
0.03226250782608986,
-0.11911016702651978,
-0.12448153644800186,
0.16010674834251404,
-0.033397603780031204,
0.10783983021974564,
0.00905090942978859,
0.2038491815328598,
0.10633016377687454,
-0.1103711649775505,
0.10472822934389114,
-0.0024602788034826517,
0.041143860667943954,
0.023805543780326843,
0.09765158593654633,
-0.09164861589670181,
0.1411743015050888,
0.10083883255720139,
-0.07111682742834091,
0.09439101070165634,
0.0269688218832016,
0.10631915926933289,
-0.0038279383443295956,
-0.08042429387569427,
0.12786054611206055,
0.08736367523670197,
0.08922833204269409,
-0.19828641414642334,
0.01697729155421257,
-0.10396069288253784,
0.03363359346985817,
-0.128998264670372,
-0.015681620687246323,
0.10054178535938263,
0.07657890021800995,
-0.016955217346549034,
0.008430877700448036,
0.03200719505548477,
-0.0728231817483902,
-0.013992853462696075,
0.06939174979925156,
0.05919027701020241,
0.009562505409121513,
-0.10462719947099686,
-0.1472705602645874,
0.11727123707532883,
-0.0519002228975296,
-0.1102839857339859,
0.057381898164749146,
-0.0010945253306999803,
-0.06313829869031906,
-0.10709857940673828,
-0.03128139302134514,
-0.21571117639541626,
0.2160559445619583,
0.11940615624189377,
-0.0041473195888102055,
0.1162455603480339,
0.018840856850147247,
-0.1162511557340622,
-0.03241546452045441,
0.03126804903149605,
-0.11221267282962799,
0.026986844837665558,
0.10406069457530975,
-0.03993087634444237,
0.08648557215929031,
-0.055310558527708054,
0.12687814235687256,
-0.1354862004518509,
0.15380346775054932,
0.18568263947963715,
0.22365491092205048,
0.059751372784376144,
-0.036882538348436356,
0.06593886017799377,
0.12307284772396088,
0.19039218127727509,
-0.0797731950879097,
-0.13028718531131744,
0.013561856001615524,
0.033280983567237854,
0.2150806486606598,
-0.03488151729106903,
-0.12002401798963547,
0.07935673743486404,
-0.059754159301519394,
-0.11030424386262894,
-0.08692088723182678,
0.030893471091985703,
0.04808562248945236,
-0.14038605988025665,
0.21280984580516815,
-0.09095700830221176,
-0.08316043764352798,
0.015720799565315247,
0.12442165613174438,
-0.044812630861997604,
0.13964514434337616,
0.03118443302810192,
-0.12392804771661758,
-0.031168539077043533,
-0.06034659594297409,
-0.0752687081694603,
-0.0006379908882081509,
0.15054166316986084,
-0.10474281758069992,
0.1649644523859024,
0.054338280111551285,
-0.17136025428771973,
-0.03030647151172161,
-0.05802511051297188,
0.028360946103930473,
-0.04936814680695534,
-0.051396071910858154,
0.0014176623662933707,
-0.10903379321098328,
0.056901443749666214,
-0.1568545401096344,
0.055091794580221176,
-0.012772791087627411,
0.08078256249427795,
0.10400360077619553,
-0.09864102303981781,
-0.038876887410879135,
0.0006035917904227972,
-0.028555115684866905,
-0.11571063846349716,
-0.028648298233747482,
0.061397988349199295,
-0.04245757311582565,
-0.08013259619474411,
0.14594925940036774,
-0.023839257657527924,
-0.05010563135147095,
0.0033360200468450785,
-0.05236421898007393,
0.07701966166496277,
0.16175054013729095,
-0.059578899294137955,
-0.13045479357242584,
0.008485177531838417,
0.02600584737956524,
-0.04192756116390228,
0.0320749469101429,
-0.10090692341327667,
0.15792733430862427,
0.14677172899246216,
-0.05480467900633812,
-0.016928771510720253,
0.11261925846338272,
-0.028580576181411743,
-0.08030093461275101,
0.06843902170658112,
0.05736275762319565,
-0.02186618559062481,
0.021074388176202774,
0.15346379578113556,
-0.0008511484484188259,
-0.136582612991333,
0.10065684467554092,
0.07464494556188583,
-0.023716580122709274,
0.1688648909330368,
0.0033096594270318747,
-0.06225503981113434,
0.07987133413553238,
0.11010757088661194,
-0.12835772335529327,
0.09534585475921631,
-0.029392801225185394,
0.08855822682380676,
0.05516621470451355,
0.19634096324443817,
-0.17248615622520447,
0.03681422397494316,
-0.08936899900436401,
-0.18112768232822418,
-0.042885925620794296,
-0.06588438898324966,
0.036682482808828354,
-0.07173940539360046,
0.05647556483745575,
0.11442729085683823,
-0.17603611946105957,
0.01426024455577135,
-0.11090074479579926,
0.03349417448043823,
0.035325512290000916,
-0.11967376619577408,
-0.03009677305817604,
-0.07632417976856232,
-0.10622044652700424,
-0.009938853792846203,
-0.03805261477828026,
0.10082662105560303,
-0.12357910722494125,
-0.1608504205942154,
-0.008598248474299908,
0.08506730198860168,
0.06341177225112915,
0.05163522809743881,
0.11508995294570923,
-0.05910900607705116,
-0.09936287999153137,
0.12382899969816208,
0.01591298170387745,
-0.2415114790201187,
0.08394718170166016,
-0.20130543410778046,
-0.12956809997558594,
-0.04525180906057358,
0.12292788177728653,
-0.09862563759088516,
0.18178553879261017,
-0.06241361051797867,
-0.07097440958023071,
-0.052234403789043427,
-0.1276061087846756,
0.030729565769433975,
0.13154250383377075,
-0.050844285637140274,
0.05665367469191551,
-0.07644213736057281,
-0.02124624326825142,
0.10633013397455215,
0.08849451690912247,
0.07905016094446182,
0.06721536070108414,
0.016319941729307175,
-0.029509034007787704,
-0.021243654191493988,
0.15665823221206665,
0.09528514742851257,
-0.056246738880872726,
0.14244228601455688,
0.018220433965325356,
0.040245696902275085,
0.017166879028081894,
0.09649018198251724,
0.07700406014919281,
0.029226090759038925,
-0.07134891301393509,
-0.0064864675514400005,
0.08587311208248138,
0.07100284844636917,
0.01805303990840912,
-0.03430033102631569,
0.0693017765879631,
-0.11584006994962692,
-0.08888153731822968,
-0.026084313169121742,
-0.010109241120517254,
0.24046391248703003,
-0.06749076396226883,
0.05494771897792816,
-0.09200454503297806,
0.031357888132333755,
-0.12192611396312714,
-0.14983543753623962,
0.04347911849617958,
0.12450738251209259,
-0.004559839144349098,
0.07528885453939438,
-0.09544768929481506,
0.08956250548362732,
0.14952518045902252,
0.01141788437962532,
0.04834768921136856,
-0.04447612166404724,
-0.004126363899558783,
-0.02690213918685913,
0.10891297459602356,
-0.15467508137226105,
0.10542528331279755,
-0.1006244346499443,
-0.049111247062683105,
0.23637151718139648,
-0.014869749546051025,
-0.0983109101653099,
0.08810916543006897,
-0.0070531368255615234,
0.18481969833374023,
0.12109285593032837,
-0.09845810383558273,
-0.10036841034889221,
-0.06738954782485962,
-0.10038711875677109,
0.0417814627289772,
-0.07705190032720566,
0.0005624963087029755,
0.00025578628992661834,
0.1501634120941162,
-0.006768535356968641,
0.016181757673621178,
0.035442840307950974,
0.03483130782842636,
-0.11133203655481339,
-0.03188415244221687,
-0.051550015807151794,
0.125636026263237,
0.1768324375152588,
0.06132466346025467,
-0.06481806933879852,
0.008042369037866592,
0.054218191653490067,
0.18990646302700043,
-0.026646027341485023,
0.0376732163131237,
0.1144392192363739,
-0.12082371115684509,
0.018660997971892357,
0.09724321961402893,
-0.06600569933652878,
0.11237704753875732,
-0.06913113594055176,
-0.0756838321685791,
-0.00346375466324389,
0.1165752187371254,
-0.06439027935266495,
-0.04974193498492241,
-0.09415222704410553,
0.04024898260831833,
0.020483795553445816,
-0.10403158515691757,
0.12271802127361298,
0.004453909117728472,
0.0725579634308815,
-0.08187998831272125,
0.11701219528913498,
-0.04143065959215164,
0.20470938086509705,
-0.07725561410188675,
0.007922746241092682,
-0.06274419277906418,
0.0631086528301239,
0.10279999673366547,
-0.1454588770866394,
-0.057620249688625336,
-0.04188286140561104,
0.09277670085430145,
-0.080755315721035,
0.05693500116467476,
0.13446205854415894,
0.016060182824730873,
0.0013947250554338098,
0.08762473613023758,
0.044658925384283066,
-0.13976071774959564,
0.029761262238025665,
-0.03627876937389374,
0.10228476673364639,
0.08375588059425354,
0.021492915228009224,
-0.011604877188801765,
0.030948499217629433,
0.06425613164901733,
-0.13464473187923431,
-0.2010876089334488,
-0.0056000701151788235,
-0.022694656625390053,
-0.029628921300172806,
0.00252392515540123,
-0.1258576661348343,
0.021946098655462265,
-0.09854108095169067,
0.047776397317647934,
0.08943989872932434,
-0.0007014397997409105,
-0.12851166725158691,
0.011464460752904415,
-0.18352006375789642,
-0.08035657554864883,
-0.17397746443748474,
0.09526845067739487,
0.12392620742321014,
-0.032958898693323135,
0.08134309202432632,
-0.03069228120148182,
-0.059393513947725296,
-0.00897175632417202,
-0.10511263459920883,
0.020196443423628807,
0.06870036572217941,
0.18891417980194092,
-0.01319421362131834,
-0.13699229061603546,
0.005156299564987421,
0.09647506475448608,
0.17313885688781738,
0.03451342135667801,
0.13091279566287994,
0.12086695432662964,
0.02296837978065014,
0.01615571416914463,
0.11172224581241608,
-0.13794147968292236,
0.008808184415102005,
0.05134875327348709,
0.07912055402994156,
0.07800851762294769,
-0.09058213233947754,
-0.0924699679017067,
0.029051335528492928,
0.11533911526203156,
0.12138586491346359,
-0.07371345907449722,
0.004602406639605761,
-0.10922196507453918,
0.010986787267029285,
-0.12485036998987198,
0.044749125838279724,
-0.04554270580410957,
0.02861121855676174,
-0.04037545621395111,
-0.05644230917096138,
0.10771702975034714,
-0.10183457285165787,
0.15036217868328094,
-0.026917750015854836,
-0.18068116903305054,
0.0931185930967331,
-0.059969812631607056,
0.15679576992988586,
0.14407625794410706,
0.12075287103652954,
-0.036417409777641296,
-0.1523563116788864,
-0.14129360020160675,
0.10082633048295975,
0.02325569838285446,
0.16228431463241577,
0.13447047770023346,
0.044008515775203705,
0.09319449216127396,
0.01932203397154808,
0.09927817434072495,
-0.05998815596103668,
-0.006595926359295845,
-0.1564745306968689,
0.019879713654518127,
0.19362066686153412,
-0.02074332721531391,
-0.1733459234237671,
-0.07819392532110214,
0.024183228611946106,
-0.08452505618333817,
0.056430406868457794,
0.16488979756832123,
-0.029444755986332893,
0.12443017214536667,
-0.019085722044110298,
0.009660505689680576,
-0.16839218139648438,
-0.017022207379341125,
-0.04649725183844566,
0.18760867416858673,
-0.0036716219037771225,
0.121328204870224,
-0.04764328524470329,
0.012620959430932999,
-0.013812781311571598,
0.06497848778963089,
0.02763960510492325,
-0.12498227506875992,
0.04802742227911949,
-0.0812448114156723,
-0.15663227438926697,
0.09266577661037445,
0.09783852845430374,
-0.10711505264043808,
0.025700831785798073,
-0.17941097915172577,
0.06808368116617203,
0.021020308136940002,
-0.02864045836031437,
0.047494806349277496,
-0.15246547758579254,
0.009472720324993134,
-0.12265265733003616,
0.09443341940641403,
-0.08886194974184036,
0.06020548939704895,
-0.0322878435254097,
0.05739942938089371,
0.07034927606582642,
0.11698383837938309,
0.0009753209305927157,
-0.031131330877542496,
-0.1203996017575264,
0.059345584362745285,
-0.01896914467215538,
0.12855292856693268,
0.0369720533490181,
-0.12323719263076782,
0.08552505075931549,
0.08754540234804153,
-0.03126305714249611,
0.06000882014632225,
-0.05038124695420265,
-0.07776437699794769,
0.09628629684448242,
0.11118301004171371,
0.03854646906256676,
-0.06626879423856735,
0.06787537038326263,
-0.04437078535556793,
-0.031229421496391296,
-0.0891551524400711,
-0.0998314917087555,
-0.04368452727794647,
-0.12558065354824066,
-0.09949060529470444,
0.03890802711248398,
0.029883425682783127,
-0.15174883604049683,
0.13827207684516907,
-0.09642880409955978,
0.11107112467288971,
-0.10795373469591141,
-0.09881801158189774,
0.02769562043249607,
-0.012182752601802349,
-0.1352914571762085,
-0.10133185237646103,
-0.0004329914809204638,
-0.05659322813153267,
0.1171141266822815,
0.15634985268115997,
-0.05511283129453659,
0.005929892882704735,
-0.11278112977743149,
-0.07613874971866608,
0.10522449761629105,
-0.1297043114900589,
0.09908950328826904,
-0.11417806893587112,
-0.056789252907037735,
0.049970388412475586,
0.05433766543865204,
0.018662771210074425,
-0.0808013528585434,
-0.03759750351309776,
-0.09725179523229599,
0.08318442851305008,
0.032897207885980606,
-0.12095782160758972,
-0.04001215100288391,
-0.07608582824468613,
-0.1867220252752304,
0.08046165108680725,
-0.012491179630160332,
-0.06465990096330643,
0.13874229788780212,
0.020879535004496574,
-0.03001866303384304,
-0.0009097839356400073,
0.018842728808522224,
0.022378822788596153,
-0.10780544579029083,
0.012836432084441185,
0.17958055436611176,
-0.03032842092216015,
-0.2033749520778656,
-0.08530755341053009,
0.06252995878458023,
-0.07237441092729568,
-0.014710799790918827,
0.1451786905527115,
-0.006887476425617933,
0.09416493028402328,
-0.08686765283346176,
0.18490135669708252,
-0.1169416606426239,
0.08468414843082428,
0.07975485920906067,
-0.017500193789601326,
-0.16883485019207,
0.02888835035264492,
-0.07048013061285019,
-0.08467312902212143,
-0.10547510534524918,
0.022930022329092026,
-0.022741297259926796,
-0.0022758825216442347,
-0.07651988416910172,
-0.059095434844493866,
0.01414889469742775,
-0.20150898396968842,
0.01817757450044155,
-0.090657539665699,
-0.044752590358257294,
-0.19138449430465698,
0.06075014919042587,
-0.1684001237154007,
-0.036103859543800354,
-0.1354568749666214,
-0.07604636996984482,
-0.023994101211428642,
-0.09326914697885513,
0.06989247351884842,
-0.06757350265979767,
0.06164548173546791,
0.04363314062356949,
0.00043367230682633817,
0.09181071817874908,
0.22988072037696838,
-0.22693279385566711,
0.02642570622265339,
0.12363361567258835,
-0.04935282841324806,
0.0162898451089859,
0.12336373329162598,
-0.05711137503385544,
-0.12037825584411621,
0.0795987993478775,
-0.020573526620864868,
-0.10721505433320999,
0.048211656510829926,
0.12448874115943909,
0.051719363778829575,
0.01690800115466118,
0.23888924717903137,
-0.002822708338499069,
0.11887186020612717,
0.06762777268886566,
0.00880180113017559,
0.044819124042987823,
0.09589631855487823,
0.045176614075899124,
-0.004908065777271986,
0.04268546774983406,
-0.030184855684638023,
0.12814019620418549,
0.0372731015086174,
-0.11408238857984543,
0.1348303258419037,
0.014576951041817665,
0.10975538194179535,
-0.09267707914113998,
-0.011371119879186153,
0.019707702100276947,
0.05840262770652771,
0.1238914504647255,
0.04286296293139458,
0.028043217957019806,
-0.10531959682703018,
0.051078617572784424,
-0.025611676275730133,
-0.06341921538114548,
-0.0018174895085394382,
-0.15547698736190796,
0.14190760254859924,
0.18121132254600525,
-0.08729958534240723,
0.05016574263572693,
-0.0571734644472599,
0.019680147990584373,
0.08857446163892746,
-0.09074421972036362,
-0.20398207008838654,
0.17432700097560883,
0.011494935490190983,
0.026634901762008667,
-0.10432197898626328,
-0.007192661985754967,
-0.09128503501415253,
-0.16884788870811462,
-0.11517830193042755,
-0.1398421823978424,
0.01099387276917696,
0.144036665558815,
0.0709867924451828,
0.007584935519844294,
0.12814025580883026,
0.13339154422283173,
-0.051267288625240326,
0.07789202034473419,
0.052348360419273376,
-0.049650639295578,
-0.1625976860523224,
0.013647417537868023,
-0.08022043853998184,
-0.18182362616062164,
0.037708379328250885,
0.03226137161254883,
0.01914869248867035,
0.034544687718153,
0.16089032590389252,
0.041432611644268036,
0.12260255217552185,
0.14667494595050812,
-0.0663234144449234,
0.006762031465768814,
0.08083231747150421,
-0.12414376437664032,
0.11176488548517227,
-0.21880868077278137,
-0.004420008510351181,
0.0438348613679409,
0.15983551740646362,
-0.09803850948810577,
0.1359032839536667,
0.01683165691792965,
-0.02262645587325096,
-0.0025515046436339617,
0.07514400780200958,
-0.14863088726997375,
0.003289816901087761,
0.210768461227417,
-0.10442202538251877,
0.1628635972738266,
-0.15889012813568115,
0.1505003720521927,
-0.04989796131849289,
-0.007582866586744785,
0.10586197674274445,
-0.11466056853532791,
0.09117744117975235,
0.025776391848921776,
0.1113116517663002,
-0.16002796590328217,
-0.04077581688761711,
0.010302508249878883,
0.017568906769156456,
0.005295731592923403,
0.06530626863241196,
0.14056654274463654,
-0.016542678698897362,
-0.10528897494077682,
0.05585061386227608,
0.03414225950837135,
-0.07972187548875809,
0.11536930501461029,
-0.11443672329187393,
0.16117973625659943,
0.026501042768359184,
-0.04073681682348251,
-0.0388641320168972,
-0.1435539424419403,
-0.07061973959207535,
0.04915416240692139,
-0.004426403436809778,
-0.03858860209584236,
0.04428112879395485,
0.17185135185718536,
0.043632254004478455,
-0.1785566806793213,
0.08968165516853333,
-0.04173307865858078,
-0.13310731947422028,
-0.048858270049095154,
0.019449131563305855,
-0.17379158735275269,
0.02713831327855587,
0.05122252553701401,
0.00693677319213748,
-0.1408507078886032,
0.04350263252854347,
0.0524173267185688,
-0.04472030699253082,
-0.011389673687517643,
0.06333532929420471,
-0.07443861663341522,
0.04206063598394394,
-0.10924720764160156,
-0.18724103271961212,
0.13696886599063873,
0.2009291648864746,
-0.019882291555404663,
-0.05672437697649002,
-0.07949978113174438,
-0.045520294457674026,
0.09212934225797653,
-0.11989808082580566,
0.08527116477489471,
-0.10918474197387695,
0.11780404299497604,
-0.08358082175254822,
0.05427121743559837,
-0.05680795758962631,
0.08564242720603943,
-0.12628985941410065,
-0.009378553368151188,
0.12245497107505798,
0.032319143414497375,
0.0011569395428523421,
0.030964065343141556,
-0.0017910539172589779,
-0.050016552209854126,
0.07563334703445435,
0.06188638508319855,
0.14589397609233856,
0.14398369193077087,
-0.03443324565887451,
-0.06172266602516174,
0.10032445937395096,
0.11876387149095535,
0.04409516975283623,
-0.18557901680469513,
-0.008140313439071178,
0.03900095075368881,
-0.05046688765287399,
0.11631941795349121,
-0.02550721913576126,
-0.03313570097088814,
0.06456860154867172,
0.05246616154909134,
-0.057109441608190536,
-0.09020449966192245,
-0.09100998193025589,
0.02386021800339222,
0.12740790843963623,
0.052012767642736435,
0.14629912376403809,
-0.15259703993797302,
-0.02668534778058529,
-0.022457795217633247,
-0.14956901967525482,
-0.14196869730949402,
0.0627303496003151,
0.07899511605501175,
-0.03057478368282318,
0.022960299625992775,
-0.05131179839372635,
-0.17515036463737488,
-0.015914900228381157,
-0.0980902686715126,
0.02264351211488247,
-0.0014392798766493797,
0.04807259142398834,
0.0003973659186158329,
0.1221836730837822,
-0.04632182791829109,
-0.07501784712076187,
0.10610264539718628,
-0.08089763671159744,
-0.11757712066173553,
-0.0857057198882103,
0.0569939911365509,
0.03948534280061722,
0.13212190568447113,
-0.05032910034060478,
0.17981380224227905,
-0.07219555228948593,
0.028461655601859093,
0.08649226278066635,
-0.10292119532823563,
-0.056821905076503754,
-0.03367732837796211,
0.18614576756954193,
-0.07074734568595886,
-0.14898967742919922,
0.10957946628332138,
-0.11308208853006363,
0.16229045391082764,
0.17529232800006866,
0.09504686295986176,
-0.22373954951763153,
0.009599246084690094,
0.14320018887519836,
-0.014001496136188507,
-0.009182283654808998,
0.02769366465508938,
0.0003817164688371122,
-0.11384941637516022,
-0.012336541898548603,
-0.1556098908185959,
0.05889175832271576,
0.03697662800550461,
0.06403283029794693,
0.08613764494657516,
0.08437230437994003,
0.011043584905564785,
-0.12102823704481125,
-0.15723274648189545,
0.1237676590681076,
-0.08555242419242859,
-0.06685589998960495,
0.026922492310404778,
-0.13264675438404083,
0.11087511479854584,
0.15992096066474915,
-0.13139031827449799,
-0.19593895971775055,
0.0857047587633133,
-0.21820999681949615,
0.046408891677856445,
0.03757689520716667,
-0.03375156968832016,
0.1562308371067047,
-0.08739829063415527,
0.050462450832128525,
0.006645741872489452,
0.013979291543364525,
0.018395429477095604,
0.04436775669455528,
0.1332404762506485,
0.0539558120071888,
0.04529855027794838,
0.03761204332113266,
0.14055296778678894,
-0.11078709363937378,
-0.020423658192157745,
0.05156795680522919,
0.15610258281230927,
0.0803113654255867,
-0.1297515481710434,
0.009166736155748367,
0.11708356440067291,
0.04680641368031502,
0.06110237166285515,
0.05585331842303276,
-0.11519867181777954,
0.16177894175052643,
-0.011755482293665409,
0.03351883590221405,
-0.015782488510012627,
-0.16435211896896362,
-0.05424896627664566,
-0.022254224866628647,
-0.03841262683272362,
-0.00287036900408566,
0.08755229413509369,
-0.1618497222661972,
0.09284711629152298,
-0.005147233139723539,
-0.12179505079984665,
-0.06592250615358353,
0.015834083780646324,
0.022811975330114365,
0.11526407301425934,
0.19907991588115692,
0.0746426060795784,
0.01800134778022766,
0.11381261050701141,
0.06492254137992859,
0.07935623824596405,
0.06533734500408173,
0.05844050645828247,
0.13357684016227722,
-0.013760821893811226,
0.12540969252586365,
0.06186860054731369,
0.014273429289460182,
-0.010671418160200119,
0.05779615044593811,
-0.00020593636145349592,
0.03047187812626362,
-0.07534243166446686,
0.05420875921845436,
-0.1011483296751976,
0.09464163333177567,
0.16570748388767242,
0.12824222445487976,
0.13495005667209625,
-0.025441547855734825,
-0.07217975705862045,
-0.13877369463443756,
0.10299563407897949,
0.08638328313827515,
-0.010376567021012306,
0.11748334765434265,
-0.043047815561294556,
-0.030936527997255325,
-0.17550426721572876,
-0.021649667993187904,
-0.003932126332074404,
0.03206390142440796,
-0.029865669086575508,
0.067342109978199,
-0.14221960306167603,
0.08004783093929291,
-0.003705310169607401,
-0.06650149822235107,
0.143487811088562,
0.005244511179625988,
0.039685387164354324,
0.11755770444869995,
-0.11803250014781952,
-0.09459152072668076,
-0.012878375127911568,
-0.010019706562161446,
-0.11542917042970657,
-0.045656029134988785,
-0.0005455196951515973,
-0.02103542909026146,
-0.08419501036405563,
-0.05281345546245575,
0.05729654058814049,
0.03384813293814659,
-0.01824292726814747,
0.056381598114967346,
0.06462327390909195,
0.030879618600010872,
0.057654205709695816,
-0.03257324919104576,
0.08331861346960068,
0.05269940197467804,
0.03887459263205528,
-0.003909470979124308,
0.06217017397284508,
-0.04458675906062126,
0.15606579184532166,
-0.03005862981081009,
0.049549851566553116,
-0.00533128809183836,
-0.01984299160540104,
0.009616185910999775,
0.10905011743307114,
0.017182204872369766,
0.07605956494808197,
0.041661906987428665,
0.121064193546772,
-0.14663895964622498,
-0.014766090549528599,
0.12166785448789597,
-0.08333338052034378,
0.013851635158061981,
-0.010823030024766922,
-0.10667402297258377,
-0.03490552306175232,
0.09416259080171585,
-0.0006395288510248065,
0.023030487820506096,
0.03563028201460838,
0.08887246996164322,
-0.03477383777499199,
-0.06602160632610321,
0.06823635846376419,
-0.051958635449409485,
0.016991233453154564,
-0.027186723425984383,
0.05139319971203804,
0.044116903096437454,
-0.06166461110115051,
-0.018486037850379944,
-0.029194887727499008,
-0.005588151514530182,
0.11165425181388855,
0.018383333459496498,
0.12841321527957916,
-0.1420171558856964,
-0.14899425208568573,
0.007489818148314953,
-0.1411523073911667,
0.010042321868240833,
0.10309749841690063,
-0.008978987112641335,
0.10363289713859558,
0.12297774106264114,
-0.0334613099694252,
0.12128881365060806,
-0.01795768365263939,
0.03695030137896538,
0.024037010967731476,
0.11838966608047485,
0.04442476108670235,
-0.053441666066646576,
0.02425559051334858,
-0.07347975671291351,
0.04847767949104309,
-0.08297723531723022,
0.05711943283677101,
0.017615914344787598,
0.05249045789241791,
-0.1576433777809143,
0.1075114980340004,
-0.10516183078289032,
0.020795950666069984,
0.021384108811616898,
-0.039907656610012054,
-0.026213428005576134,
-0.1484055072069168,
0.0357789471745491,
-0.1465684473514557,
-0.019403010606765747,
-0.1089523434638977,
-0.059720903635025024,
-0.06323661655187607,
-0.07549575716257095,
-0.1002100333571434,
-0.09952607750892639,
0.04532035440206528,
-0.12986420094966888,
0.09086903929710388,
0.09510651230812073,
0.030377788469195366,
0.027981922030448914,
-0.020677924156188965,
0.0895993709564209,
-0.07855428755283356,
0.061495304107666016,
-0.11907532811164856,
-0.06195966526865959,
-0.036939408630132675,
0.12403359264135361,
-0.008162473328411579,
0.03856300190091133,
0.17366190254688263,
-0.049646101891994476,
0.06889308243989944,
0.15198318660259247,
0.012356516905128956,
0.16012358665466309,
-0.04678378999233246,
0.04438663646578789,
-0.03842834383249283,
-0.018447037786245346,
0.02253771759569645,
0.05229564756155014,
-0.0863795056939125,
-0.11299674957990646,
0.15988565981388092,
0.04602081701159477,
-0.056311268359422684,
0.16759814321994781,
-0.06655710935592651,
0.07600127160549164,
-0.025247203186154366,
-0.04062908515334129,
0.1000482514500618,
-0.03757023438811302,
-0.09965792298316956,
0.014631950296461582,
0.0785469114780426,
-0.10755632072687149,
0.05361160263419151,
-0.07106472551822662,
-0.10173031687736511,
0.05588742345571518,
-0.1398819386959076,
-0.0653117224574089,
0.04666553810238838,
0.027364248409867287,
0.1331770122051239,
-0.11206777393817902,
0.10286605358123779,
0.041644807904958725,
-0.10233915597200394,
-0.06208372488617897,
0.014641345478594303,
-0.09112328290939331,
0.13723015785217285,
-0.08048141747713089,
-0.0365915447473526,
-0.19089782238006592,
0.00257363123819232,
-0.07010157406330109,
-0.1750928908586502,
-0.0002585684123914689,
0.0820310115814209,
0.04999742656946182,
0.06297998875379562,
0.11385688930749893,
0.07492867857217789,
0.061531148850917816,
0.11040664464235306,
-0.03040754795074463,
-0.07886621356010437,
-0.06406186521053314,
-0.009973810985684395,
0.09099177271127701,
-0.014150581322610378,
-0.08413876593112946,
0.09358681738376617,
-0.15824705362319946,
-0.040579963475465775,
0.16126388311386108,
0.09771048277616501,
0.02153080329298973,
0.15768882632255554,
-0.08861453831195831,
-0.09511099755764008,
-0.04809136688709259,
0.03593163564801216,
0.08856027573347092,
-0.1910013109445572,
0.11115840077400208,
0.058679163455963135,
0.021648723632097244,
-0.027581969276070595,
0.05388554930686951,
0.17952191829681396,
0.033405669033527374,
-0.17933744192123413,
-0.050593797117471695,
-0.02316942811012268,
-0.13722580671310425,
0.16492657363414764,
-0.02579689770936966,
-0.10429853945970535,
-0.06818469613790512,
0.1510721743106842,
-0.05721993371844292,
-0.12544576823711395,
-0.08388975262641907,
-0.03882496431469917,
-0.12462335079908371,
0.14444082975387573,
0.11625203490257263,
-0.10180585831403732,
0.06002657115459442,
-0.19079117476940155,
0.026530686765909195,
-0.012790688313543797,
0.025439497083425522,
-0.01360924169421196,
-0.01465761847794056,
-0.05947897210717201,
-0.007444730028510094,
0.11178790777921677,
-0.11527275294065475,
0.019942786544561386,
-0.018919045105576515,
0.09489024430513382,
-0.17366357147693634,
-0.14694826304912567,
0.008301954716444016,
-0.05836237594485283,
-0.025036856532096863,
0.03879961371421814,
-0.02836122363805771,
-0.0030046135652810335,
0.08871915191411972,
0.0414358414709568,
-0.17275786399841309,
-0.044312939047813416,
0.05748553201556206,
0.17265911400318146,
-0.05671115964651108,
0.13806232810020447,
0.08815079927444458,
-0.1567118912935257,
0.009598171338438988,
-0.027113480493426323,
-0.004927610978484154,
-0.15476132929325104,
0.09479288011789322,
0.05926387012004852,
-0.10771222412586212,
-0.06599118560552597,
0.056642837822437286,
0.010121800936758518,
0.1579374521970749,
-0.11229956150054932,
-0.13964389264583588,
0.12296104431152344,
-0.013921050354838371,
0.03716164082288742,
0.04033491015434265,
0.02893906831741333,
0.03450872004032135,
0.09295260161161423,
-0.13287517428398132,
-0.11441812664270401,
0.027575736865401268,
-0.06459518522024155,
-0.07252947986125946,
0.09648030996322632,
-0.014120327308773994,
-0.006330107804387808,
0.04097352921962738,
0.09893577545881271,
0.0871744304895401,
-0.09064362943172455,
-0.14456525444984436,
0.02487885393202305,
-0.15909168124198914,
-0.03625462204217911,
-0.10636159777641296,
0.05085695907473564,
-0.09298603981733322,
0.13774748146533966,
0.05025021731853485,
-0.17348133027553558,
-0.13460497558116913,
-0.12333518266677856,
0.0574050173163414,
-0.09195408225059509,
-0.040819257497787476,
0.06439850479364395,
-0.1455691158771515,
-0.043592989444732666,
0.05442911386489868,
-0.023610323667526245,
0.04952279105782509,
-0.10792090743780136,
0.059261493384838104,
-0.23573125898838043,
0.09814292192459106,
-0.0766570195555687,
0.2115832418203354,
0.05575883761048317,
0.09270262718200684,
-0.012045948766171932,
-0.025870613753795624,
0.03797680884599686,
0.008444680832326412,
0.002444791840389371,
0.18286725878715515,
0.0125856539234519,
0.014746015891432762,
-0.10395987331867218,
0.10315357893705368,
0.04330998659133911,
-0.003157367231324315,
0.09250465780496597,
0.08444476127624512,
-0.028069589287042618,
-0.010340824723243713,
0.03648684173822403,
0.07457461953163147,
0.06286480277776718,
-0.009994057938456535,
0.12515434622764587,
-0.026340052485466003,
-0.05098278447985649,
0.03067670203745365,
0.05552630499005318,
0.008955265395343304,
-0.11680819094181061,
-0.0002330995339434594,
0.09161190688610077,
0.00194385158829391,
0.07324410229921341,
-0.06983527541160583,
-0.06678830087184906,
0.06815362721681595,
-0.04230625554919243,
0.016510508954524994,
0.05266512185335159,
0.1156497523188591,
0.13838942348957062,
-0.0853702649474144,
0.08170162886381149,
0.08358047157526016,
-0.1411397010087967,
-0.09199726581573486,
0.08469980955123901,
0.06712855398654938,
0.11868886649608612,
0.17771250009536743,
-0.026716487482190132,
0.09596187621355057,
0.02104513719677925,
0.047227662056684494,
-0.14499008655548096,
-0.04543614387512207,
-0.03192516043782234,
-0.16372860968112946,
-0.0728876069188118,
-0.004361817613244057,
-0.07205865532159805,
0.12453978508710861,
-0.03662056848406792,
0.05656218156218529,
0.13240012526512146,
-0.0330723375082016,
-0.07888641953468323,
-0.14271363615989685,
0.02143985778093338,
0.09539451450109482,
-0.0114381592720747,
-0.028558405116200447,
-0.15443293750286102,
0.053721532225608826,
-0.09141308069229126,
0.15302841365337372,
-0.20681194961071014,
0.08638717234134674,
-0.02406741864979267,
0.06506837159395218,
-0.06119450554251671,
0.10300996899604797,
-0.05326513946056366,
-0.031236927956342697,
0.12993019819259644,
-0.037257205694913864,
0.08862652629613876,
0.10698554664850235,
0.17562982439994812,
0.008129293099045753,
-0.20501570403575897,
-0.034598615020513535,
0.1241755411028862,
0.11163703352212906,
-0.15250690281391144,
0.09403455257415771,
-0.02908279187977314,
-0.09773530811071396,
-0.03465183451771736,
0.1684105545282364,
-0.10066091269254684,
0.20237569510936737,
-0.0418180413544178,
0.05254693701863289,
0.13479918241500854,
-0.06816153228282928,
0.0653228759765625,
-0.08368082344532013,
-0.004250592552125454,
0.08676367998123169,
-0.02322205901145935,
0.017021048814058304,
0.04839077964425087,
-0.03965681418776512,
0.07278473675251007,
-0.08008184283971786,
0.12276776134967804,
0.04450848698616028,
0.12769639492034912,
-0.07782291620969772,
0.06780491769313812,
0.0339435450732708,
0.10252244770526886,
0.2358100712299347,
0.06841970980167389,
0.04989314451813698,
0.18210187554359436,
0.006118944846093655,
-0.03233475610613823,
0.013300273567438126,
-0.006497527007013559,
0.11623591929674149,
0.011313606053590775,
-0.06810535490512848,
-0.13422563672065735,
-0.06191142275929451,
0.08996691554784775,
-0.039179034531116486,
-0.09898392856121063,
-0.008374789729714394,
-0.17644600570201874,
-0.10163623094558716,
0.04969417676329613,
0.02537868171930313,
0.056166812777519226,
0.006042819935828447,
0.06306084990501404,
-0.094891257584095,
0.056058369576931,
-0.06359416246414185,
-0.07112657278776169,
0.03570615127682686,
0.11275327205657959,
0.05736273154616356,
0.06234360486268997,
0.024105163291096687,
0.11973743140697479,
-0.05638299137353897,
0.05606197938323021,
-0.09894634038209915,
-0.16718342900276184,
-0.12239143997430801,
-0.021894006058573723,
-0.1442708671092987,
0.07839009910821915,
0.047853436321020126,
0.023405399173498154,
0.11552905291318893,
-0.06217058748006821,
-0.16736528277397156,
0.1256859451532364,
0.082246333360672,
0.09578152000904083,
0.03555317223072052,
0.03129642829298973,
0.12358374893665314,
0.1584187000989914,
0.015425237827003002,
-0.014769051223993301,
0.10427410900592804,
0.12998250126838684,
-0.16094420850276947,
-0.00630858214572072,
-0.04745277017354965,
-0.11633393913507462,
-0.10869798064231873,
0.025793734937906265,
0.009356370195746422,
-0.2182304412126541,
-0.04722094535827637,
0.09042374789714813,
0.10276343673467636,
-0.025234902277588844,
0.13183163106441498,
-0.08177894353866577,
-0.15179912745952606,
0.04159926623106003,
-0.14610959589481354,
0.09636738151311874,
0.12399138510227203,
0.0023426897823810577,
0.17709790170192719,
0.020144930109381676,
0.045318782329559326,
-0.1420418918132782,
0.10285238176584244,
-0.0019987327978014946,
-0.1239117830991745,
-0.10271633416414261,
-0.09056656062602997,
0.16895221173763275,
0.10138756036758423,
-0.11505775898694992,
-0.004837490618228912,
0.07891695946455002,
-0.01882421411573887,
0.01589183881878853,
-0.06209377571940422,
0.11733949929475784,
0.0716758444905281,
-0.0248423982411623,
-0.04372161254286766,
0.05951502174139023,
-0.0673568993806839,
-0.021984785795211792,
-0.052454810589551926,
-0.12162768095731735,
0.04370248690247536,
-0.010539781302213669,
-0.08853139728307724,
-0.045074284076690674,
0.040506843477487564,
-0.05136905610561371,
-0.07870740443468094,
0.10935148596763611,
0.02784067764878273,
-0.0012370983604341745,
0.10080946981906891,
-0.04212697595357895,
0.07460060715675354,
-0.016260728240013123,
0.00886509008705616,
-0.14461316168308258,
0.09245380759239197,
0.014446298591792583,
0.12596724927425385,
-0.05112237110733986,
0.09309130907058716,
0.04005812853574753,
0.05297420918941498,
-0.05878342688083649,
0.01750224456191063,
-0.17110760509967804,
-0.04406949505209923,
0.015909509733319283,
0.07288412004709244,
0.025364099070429802,
0.09514374285936356,
-0.024578627198934555,
-0.044704630970954895,
0.014265635050833225,
0.13456377387046814,
-0.05488003417849541,
-0.08647403866052628,
-0.08488292992115021,
0.07162284106016159,
-0.008252260275185108,
0.11976242810487747,
-0.00140760384965688,
0.1494692713022232,
0.08818218111991882,
0.09612614661455154,
0.06593415141105652,
-0.07182342559099197,
-0.06612197309732437,
-0.18335290253162384,
-0.03351498767733574,
0.11474023759365082,
0.17580923438072205,
-0.06997846812009811,
0.0396784208714962,
0.012799551710486412,
0.07518050074577332,
0.11501641571521759,
-0.08216488361358643,
0.07890861481428146,
0.0818486213684082,
0.06054938584566116,
0.07525128126144409,
0.014312244951725006,
-0.0032603174913674593,
-0.11812318116426468,
0.03889535367488861,
-0.042336832731962204,
0.008527016267180443,
-0.14766910672187805,
-0.10264710336923599,
-0.02704748325049877,
-0.02372130937874317,
-0.1774839162826538,
-0.10293904691934586,
-0.019905708730220795,
-0.06294240802526474,
0.1189555898308754,
-0.0031220216769725084,
0.05002588406205177,
-0.030103331431746483,
-0.2149232178926468,
0.1166430190205574,
0.08733232319355011,
0.058095525950193405,
0.0344880186021328,
0.017915911972522736,
-0.038296233862638474,
0.01213173009455204,
0.19031327962875366,
-0.1045568585395813,
0.07299642264842987,
-0.06167096644639969,
0.022713677957654,
0.030529974028468132,
0.05771207436919212,
0.0770895704627037,
-0.09414320439100266,
0.1260121762752533,
0.04239128902554512,
0.09133410453796387,
0.17299050092697144,
-0.008012596517801285,
-0.010753529146313667,
0.0240239929407835,
-0.015117050148546696,
0.03442779555916786,
-0.13178664445877075,
0.048413243144750595,
-0.046977389603853226,
0.03089102916419506,
-0.09448710083961487,
-0.04525888338685036,
-0.08848409354686737,
-0.1252610683441162,
0.023555364459753036,
-0.14617374539375305,
0.04739125818014145,
-0.10682602971792221,
-0.09148252755403519,
0.15477260947227478,
0.07819981127977371,
-0.020384712144732475,
-0.2149202972650528,
0.13456770777702332,
-0.06824547797441483,
-0.011678622104227543,
0.1677514612674713,
0.11113417893648148,
-0.0887700542807579,
-0.11944632232189178,
-0.07242901623249054,
-0.10012590885162354,
0.00994162168353796,
-0.016439570114016533,
0.1363302320241928,
-0.08020225167274475,
0.005110832862555981,
0.12017999589443207,
-0.1387869268655777,
-0.1156306266784668,
0.036714471876621246,
-0.04938274249434471,
-0.14739330112934113,
-0.03710378706455231,
-0.16475266218185425,
-0.059589628130197525,
0.141334667801857,
-0.11664700508117676,
0.1970287710428238,
-0.018295936286449432,
0.05379219353199005,
-0.014448439702391624,
-0.019475078210234642,
-0.03484443947672844,
-0.01016721036285162,
0.16455486416816711,
0.15933169424533844,
-0.025579165667295456,
-0.02740071527659893,
-0.06300482153892517,
0.016161715611815453,
0.08745759725570679,
-0.14110946655273438,
0.07866694778203964,
-0.028417600318789482,
-0.1484779566526413,
-0.11670736223459244,
0.09020043164491653,
-0.002320862840861082,
-0.1657920926809311,
0.16791193187236786,
-0.027934392914175987,
-0.14846886694431305,
0.09667207300662994,
0.1280563920736313,
0.07299918681383133,
0.15855450928211212,
0.06287012249231339,
-0.1767410933971405,
-0.00881299190223217,
0.015613366849720478,
-0.003059295704588294,
0.050262752920389175,
-0.1790762096643448,
0.015592544339597225,
-0.0867602750658989,
0.05442852899432182,
-0.16119793057441711,
-0.08981353789567947,
-0.18812067806720734,
0.018000874668359756,
-0.15101489424705505,
0.04601256176829338,
-0.133323535323143,
-0.015322399325668812,
0.018877148628234863,
0.00021365127759054303,
0.1570422351360321,
-0.029856985434889793,
-0.12618115544319153,
0.00867010559886694,
0.053609076887369156,
0.16185222566127777,
-0.13173091411590576,
-0.28699493408203125,
0.17024478316307068,
-0.16388709843158722,
-0.07730013877153397,
0.13841313123703003,
-0.15937325358390808,
0.03251180425286293,
-0.03931330516934395,
-0.09242507070302963,
-0.1077166348695755,
0.16403691470623016,
0.13291656970977783,
-0.10786724090576172,
0.15356893837451935,
0.03398803994059563,
-0.08610273897647858,
0.0930505245923996,
0.025516914203763008,
-0.00215458357706666,
-0.10392168164253235,
-0.07256843149662018,
0.15084148943424225,
0.0722053125500679,
-0.15005634725093842,
0.12339304387569427,
-0.00018020498100668192,
0.04060220345854759,
0.09283442795276642,
0.18830116093158722,
-0.1351379156112671,
0.09296650439500809,
0.047361452132463455,
0.11442580074071884,
0.052047137171030045,
-0.16122373938560486,
-0.093536876142025,
0.06058656424283981,
-0.14352194964885712,
0.022210244089365005,
0.022264420986175537,
0.10804858058691025,
-0.09043814986944199,
-0.007506307680159807,
0.04344386234879494,
-0.19568677246570587,
-0.02829587459564209,
-0.13667501509189606,
-0.09545767307281494,
-0.12184501439332962,
0.06283016502857208,
-0.0582965686917305,
-0.017392661422491074,
-0.06021235138177872,
0.04679711535573006,
-0.11887146532535553,
-0.047562289983034134,
-0.15390002727508545,
0.048124730587005615,
-0.09752144664525986,
-0.11349458247423172,
0.035497888922691345,
0.09040821343660355,
-0.06816816329956055,
-0.010121888481080532,
0.14004208147525787,
0.001685618655756116,
0.05574275553226471,
0.09421669691801071,
0.06927474588155746,
-0.0798804983496666,
0.10154131054878235,
0.11965057998895645,
-0.03994124010205269,
0.14345401525497437,
0.07275646179914474,
-0.0877111479640007,
-0.08423949778079987,
-0.03321962058544159,
-0.11029033362865448,
0.07967592775821686,
-0.14996346831321716,
-0.016051383689045906,
-0.03797292709350586,
0.05629357695579529,
0.08313529938459396,
-0.002297106198966503,
-0.08422618359327316,
-0.10208452492952347,
0.044100161641836166,
-0.13751673698425293,
0.18022313714027405,
-0.0391995944082737,
-0.03301813453435898,
0.08762809634208679,
0.06274197995662689,
0.059018634259700775,
0.0389702208340168,
-0.07590310275554657,
-0.1064777597784996,
-0.055764198303222656,
-0.018485018983483315,
0.029087087139487267,
0.11139678210020065,
0.03697822242975235,
-0.04939398169517517,
0.04421022906899452,
0.11540625989437103,
-0.03466147556900978,
-0.03350986912846565,
0.15867315232753754,
-0.06482284516096115,
0.10537957400083542,
0.029917621985077858,
-0.03010798990726471,
0.026545532047748566,
-0.04532342404127121,
0.11030325293540955,
-0.054191507399082184,
-0.15197493135929108,
-0.0704604983329773,
-0.03658223897218704,
0.05904272198677063,
0.14098623394966125,
-0.09928407520055771,
-0.13407771289348602,
-0.05922345444560051,
-0.1398269236087799,
0.047065410763025284,
-0.08660856634378433,
-0.1346949338912964,
0.14234620332717896,
0.040122631937265396,
0.021861782297492027,
0.04946621507406235,
0.0034592067822813988,
-0.14853022992610931,
-0.043236419558525085,
-0.0008945353329181671,
-0.00577571103349328,
-0.0914902612566948,
-0.13533815741539001,
-0.03164263069629669,
0.026580261066555977,
0.0148723553866148,
0.01066652312874794,
-0.0311494842171669,
0.08024304360151291,
0.055695533752441406,
0.058713581413030624,
-0.01538967527449131,
-0.0894102230668068,
0.11034374684095383,
0.04944460093975067,
-0.016647279262542725,
-0.07504049688577652,
0.048333410173654556,
-0.00468274112790823,
-0.13881930708885193,
-0.0066694882698357105,
-0.14326339960098267,
0.0593571737408638,
0.07073190063238144,
-0.11801581084728241,
-0.010395988821983337,
0.10916559398174286,
0.019133202731609344,
0.10617824643850327,
0.014614619314670563,
-0.06047946587204933,
0.01845400594174862,
0.034135378897190094,
0.01364613976329565,
-0.11189436167478561,
-0.13137143850326538,
-0.0496538020670414,
0.16098375618457794,
0.13913653790950775,
-0.0884222462773323,
0.13754473626613617,
-0.12780120968818665,
0.11544472724199295,
0.10661029815673828,
-0.009112931787967682,
0.015415545552968979,
-0.06977669149637222,
0.1430089771747589,
-0.11908423155546188,
0.06745642423629761,
-0.14491428434848785,
0.06180812790989876,
-0.07000873237848282,
0.0025205733254551888,
-0.06504099816083908,
0.11302579194307327,
-0.05962817370891571,
0.04165321961045265,
-0.12095611542463303,
-0.13335086405277252,
0.011563771404325962,
-0.08086936175823212,
0.17405156791210175,
0.003887078957632184,
0.13654343783855438,
0.15271715819835663,
0.11741062998771667,
0.032129596918821335,
-0.08814512938261032,
0.0055059222504496574,
0.07818307727575302,
0.02638867497444153,
0.009203029796481133,
-0.04255087673664093,
-0.07833071053028107,
-0.14684611558914185,
0.15422172844409943,
-0.04537281021475792,
-0.16919349133968353,
0.015090033411979675,
0.0842457190155983,
0.1282958835363388,
0.10045959055423737,
0.17786909639835358,
-0.05554213374853134,
0.0666855126619339,
0.1956157386302948,
0.07656849175691605,
0.004210475366562605,
0.07406141608953476,
-0.017227359116077423,
0.05911653861403465,
0.03617837280035019,
0.0768885463476181,
-0.0984368845820427,
-0.007780733983963728,
0.00033988305949606,
0.13133402168750763,
0.1258707344532013,
-0.10651548951864243,
-0.05372464284300804,
0.060057125985622406,
0.18932196497917175,
-0.14322829246520996,
0.049072131514549255,
0.04467253014445305,
-0.01452891156077385,
0.06749936193227768,
-0.039874132722616196,
0.11839805543422699,
-0.054616767913103104,
-0.026840927079319954,
-0.028380561619997025,
-0.010708536021411419,
0.08869625627994537,
0.05092458799481392,
-0.1459716111421585,
0.0442202053964138,
-0.0990646630525589,
0.06042550131678581,
-0.07142756879329681,
-0.06249665468931198,
0.13706186413764954,
-0.054172005504369736,
0.021771062165498734,
-0.012196116149425507,
0.05998781695961952,
0.06477798521518707,
0.0035617935936897993,
0.034932397305965424,
-0.05691034346818924,
0.1263200044631958,
-0.05880695953965187,
-0.05699900537729263,
0.03500428423285484,
-0.01727270893752575,
0.19925318658351898,
-0.08586771041154861,
-0.07169771939516068,
-0.002734389854595065,
0.05852704495191574,
-0.011527052149176598,
-0.005904848221689463,
-0.1531560868024826,
-0.014581158757209778,
0.006698159500956535,
-0.05102710798382759,
-0.06794328987598419,
0.14418430626392365,
-0.2839865982532501,
0.13660934567451477,
0.032592907547950745,
0.08524468541145325,
0.032939836382865906,
0.01637297309935093,
0.0741020068526268,
-0.04557793587446213,
0.06430694460868835,
-0.11742176860570908,
-0.02682763896882534,
-0.0169749166816473,
-0.18412044644355774,
0.14502033591270447,
0.2118692398071289,
-0.008136923424899578,
0.0486704483628273,
0.007347118575125933,
-0.1575470268726349,
-0.06689805537462234,
-0.07119591534137726,
-0.11058705300092697,
0.01861528307199478,
0.10330142825841904,
-0.08640517294406891,
-0.13202820718288422,
0.12214095890522003,
0.13018465042114258,
-0.17164893448352814,
-0.205556258559227,
-0.146492138504982,
-0.1678100824356079,
0.10164730995893478,
-0.08724663406610489,
0.016665061935782433,
0.10522400587797165,
-0.04537505283951759,
0.14520852267742157,
0.11490044742822647,
-0.11492257565259933,
-0.051877301186323166,
0.12603606283664703,
0.0221053808927536,
0.021272743120789528,
-0.23657557368278503,
0.10896731913089752,
-0.08177720010280609,
0.17257444560527802,
0.16122420132160187,
-0.07663089781999588,
0.16955076158046722,
0.09474653005599976,
-0.0026418897323310375,
-0.07916128635406494,
-0.08482115715742111,
0.14542952179908752,
-0.06548850983381271,
-0.06465032696723938,
-0.04968329519033432,
0.09267126023769379,
-0.03604089096188545,
-0.18275880813598633,
0.1437208652496338,
0.0554470494389534,
0.037361301481723785,
0.08543079346418381,
0.06514405459165573,
0.055411409586668015,
-0.06606604903936386,
-0.019168389961123466,
-0.014720297418534756,
-0.00434896070510149,
-0.00793542806059122,
-0.011582770384848118,
-0.09708467125892639,
0.07388895004987717,
-0.10480694472789764,
-0.07312121987342834,
0.006180200260132551,
-0.03455847501754761,
-0.017364315688610077,
0.009771489538252354,
-0.0634176954627037,
0.05243251472711563,
0.14335952699184418,
-0.09674429893493652,
0.05416073277592659,
-0.0911177545785904,
-0.09755254536867142,
-0.035420000553131104,
0.05259883776307106,
0.07361830770969391,
-0.03328919783234596,
-0.13923871517181396,
-0.09564686566591263,
-0.0107910530641675,
0.10554895550012589,
0.19275391101837158,
-0.0356239378452301,
-0.11471838504076004,
-0.029678914695978165,
-0.05897155776619911,
0.03231818601489067,
0.014165278524160385,
0.15084315836429596,
0.028244255110621452,
0.09408283978700638,
0.06654556840658188,
0.04736902937293053,
-0.06626048684120178,
-0.023094087839126587,
-0.05042421072721481,
0.13706795871257782,
0.12991584837436676,
-0.08357186615467072,
0.08683212846517563,
-0.09014659374952316,
0.03412191942334175,
-0.08438138663768768,
-0.060358159244060516,
0.05437341332435608,
-0.06546526402235031,
0.06621488183736801,
0.10684309899806976,
0.03145693242549896,
0.2892674505710602,
0.13701899349689484,
-0.008757775649428368,
0.09622380137443542,
0.024657493457198143,
0.10644299536943436,
-0.007858275435864925,
-0.04082975536584854,
0.1743207424879074,
-0.09483522921800613,
-0.09915933758020401,
-0.22748737037181854,
-0.08107925951480865,
0.04459727928042412,
-0.08365646749734879,
-0.17310014367103577,
0.08203759044408798,
-0.043923478573560715,
0.11291537433862686,
0.042104899883270264,
-0.16028809547424316,
0.10671254992485046,
-0.10936641693115234,
0.14126500487327576,
-0.09696022421121597,
-0.02149670012295246,
-0.18791154026985168,
0.00431038299575448,
0.11597806215286255,
-0.01871505193412304,
-0.005975963547825813,
0.08402937650680542,
-0.015601029619574547,
0.10708126425743103,
-0.1674659103155136,
0.09604165703058243,
0.0660555362701416,
-0.0832330584526062,
-0.04936997592449188,
-0.07835328578948975,
-0.07751588523387909,
0.06686300784349442,
-0.07636299729347229,
0.05031190440058708,
0.02611893229186535,
0.05267316848039627,
-0.17943653464317322,
0.09962759166955948,
0.06629365682601929,
-0.12432921677827835,
-0.01518620178103447,
-0.05196245387196541,
0.1449328362941742,
0.08673028647899628,
0.03986115753650665,
-0.017587358132004738,
0.07426086813211441,
-0.0005070758052170277,
-0.18729589879512787,
-0.016008635982871056,
-0.0038166739977896214,
0.004061470273882151,
-0.09676073491573334,
0.11429017037153244,
0.06058421730995178,
-0.15532207489013672,
-0.015338439494371414,
0.03751685097813606,
-0.10166193544864655,
-0.03961685672402382,
0.08681203424930573,
-0.04700576514005661,
-0.18131162226200104,
0.0609879307448864,
0.025618374347686768,
0.0001418114552507177,
0.028004799038171768,
-0.042686983942985535,
0.24947726726531982,
-0.028043005615472794,
0.0074767195619642735,
-0.06514270603656769,
0.14289814233779907,
-0.10576923191547394,
0.10390374809503555,
-0.08996438980102539,
-0.08374705910682678,
-0.044917672872543335,
0.024743642657995224,
-0.03430420160293579,
0.010427786968648434,
0.19855768978595734,
0.032226528972387314,
0.036803338676691055,
-0.12241435796022415,
0.1595851480960846,
0.08857299387454987,
0.030797606334090233,
-0.11673596501350403,
0.0431579053401947,
-0.09936991333961487,
0.08018507063388824,
-0.005207640118896961,
-0.06671109050512314,
-0.006684605032205582,
0.023956691846251488,
-0.05613183230161667,
-0.040028639137744904,
-0.028960857540369034,
-0.00954761914908886,
0.11481994390487671,
0.11207547038793564,
-0.09770390391349792,
-0.02127932943403721,
-0.08051414787769318,
-0.08409383147954941,
-0.009325035847723484,
-0.046979907900094986,
-0.09134019911289215,
0.03231057897210121,
0.108223557472229,
0.05528966709971428,
-0.0404311902821064,
-0.01809808611869812,
-0.20588348805904388,
0.05873259902000427,
-0.16520956158638,
-0.003247541142627597,
-0.17958712577819824,
0.074066661298275,
-0.07796184718608856,
0.04599565640091896,
-0.013707509264349937,
-0.037490349262952805,
0.06062158942222595,
-0.039987046271562576,
0.06088284030556679,
-0.08467430621385574,
-0.05587838590145111,
-0.022435229271650314,
0.14109383523464203,
-0.007785784546285868,
0.011147447861731052,
-0.06260619312524796,
-0.028143571689724922,
0.09744814038276672,
-0.16143496334552765,
0.17103211581707,
-0.1484420895576477,
-0.09278015047311783,
0.106102354824543,
-0.006897459272295237,
0.08303546905517578,
-0.02917327918112278,
0.13347592949867249,
-0.07715345174074173,
0.08057457953691483,
-0.006290811579674482,
-0.05726999044418335,
-0.09401660412549973,
0.18560075759887695,
0.2432495504617691,
-0.04290643334388733,
-0.0033116003032773733,
0.027188975363969803,
-0.009412232786417007,
0.06687351316213608,
-0.11298292130231857,
0.004794316831976175,
-0.039521269500255585,
0.12573447823524475,
0.012420272454619408,
-0.08360107988119125,
-0.005038108676671982,
0.006735947914421558,
0.06160636618733406,
-0.05374651402235031,
0.013192662969231606,
0.06833591312170029,
-0.17282354831695557,
0.1146811917424202,
0.1270447075366974,
0.05964796617627144,
-0.09108859300613403,
0.18222106993198395,
0.15965597331523895,
0.17040877044200897,
-0.19582900404930115,
-0.18473760783672333,
0.14696581661701202,
0.101896733045578,
-0.020579928532242775,
-0.05484938621520996,
-0.035833925008773804,
-0.09543773531913757,
-0.20136359333992004,
0.05637640506029129,
-0.12468601763248444,
0.14491437375545502,
0.1550501137971878,
0.009227294474840164,
0.09874380379915237,
0.09608286619186401,
-0.1476476788520813,
-0.01355978474020958,
-0.009635046124458313,
-0.09726402908563614,
0.09341288357973099,
-0.21104881167411804,
0.09342467039823532,
0.08148404955863953,
-0.012860352173447609,
0.05566386878490448,
-0.061931710690259933,
0.026968277990818024,
0.1832318902015686,
-0.0023976864758878946,
-0.09036901593208313,
0.026344815269112587,
0.16065733134746552,
0.11802658438682556,
0.16693457961082458,
0.003970446530729532,
-0.11777878552675247,
-0.06709975004196167,
-0.07343561947345734,
-0.03606439754366875,
0.09400857985019684,
-0.00968285370618105,
-0.09370669722557068,
-0.039228685200214386,
-0.032753147184848785,
-0.09636393934488297,
0.032519325613975525,
-0.15247516334056854,
0.05426579341292381,
-0.1335737705230713,
-0.10075431317090988,
-0.05431762710213661,
0.028110826388001442,
0.21368302404880524,
-0.015491348691284657,
0.05723724886775017,
0.062483374029397964,
-0.07907357066869736,
0.09433114528656006,
0.08669549971818924,
0.12884359061717987,
-0.06039747595787048,
-0.19000941514968872,
0.0667303130030632,
-0.060676876455545425,
-0.055351465940475464,
-0.08216787874698639,
-0.013273983262479305,
-0.014713783748447895,
0.1412731260061264,
0.06098596751689911,
0.037094276398420334,
-0.08204393833875656,
0.0047396705485880375,
-0.07207880914211273,
-0.00675623957067728,
0.04827316477894783,
-0.003466762136667967,
0.10516451299190521,
0.05705374479293823,
0.04051429033279419,
0.0038784705102443695,
-0.015396755188703537,
-0.1433408558368683,
0.05713885277509689,
-0.253947913646698,
0.041564829647541046,
0.06714317947626114,
0.056571248918771744,
-0.006489587016403675,
-0.07693731784820557,
-0.08678971976041794,
0.11295986920595169,
0.04063711315393448,
0.06489001214504242,
-0.01727062650024891,
-0.015912244096398354,
0.10164058208465576,
-0.07037781924009323,
-0.1069614440202713,
0.07084044069051743,
0.026712855324149132,
-0.08942610025405884,
-0.09915741533041,
0.01620064117014408,
0.03509803116321564,
0.11751116812229156,
0.0025176957715302706,
0.06313875317573547,
-0.013744908384978771,
-0.015536211431026459,
-0.2070770412683487,
0.04336339980363846,
0.16480660438537598,
-0.12027662992477417,
-0.04244839400053024,
0.12983481585979462,
-0.1070408821105957,
0.015892107039690018,
0.010001045651733875,
-0.020782815292477608,
-0.025698121637105942,
-0.008316168561577797,
-0.09700050950050354,
0.04958384484052658,
-0.08783834427595139,
0.11565984785556793,
0.11980167031288147,
0.06993824988603592,
0.03315379470586777,
-0.09398357570171356,
0.12275896221399307,
-0.11334073543548584,
-0.04475690424442291,
-0.04985145851969719,
0.0911802276968956,
0.09195107966661453,
-0.008696377277374268,
-0.10493919253349304,
0.037716254591941833,
0.026203371584415436,
0.1178850382566452,
-0.06423244625329971,
-0.09122185409069061,
0.006368574220687151,
-0.09737878292798996,
0.05683649331331253,
0.04345610737800598,
-0.07881071418523788,
-0.08072217553853989,
-0.13611918687820435,
-0.045369766652584076,
-0.09024366736412048,
-0.1422433704137802,
-0.15066242218017578,
0.012653613463044167,
0.15443263947963715,
0.13760066032409668,
0.0013693778309971094,
-0.1344417780637741,
0.09354791790246964,
-0.11795523017644882,
-0.028838470578193665,
0.09692689776420593,
-0.1281442642211914,
0.11456875503063202,
-0.17863862216472626,
-0.047058794647455215,
0.14351212978363037,
0.014166959561407566,
-0.03490162640810013,
0.12382510304450989,
-0.08357204496860504,
-0.031333550810813904,
-0.13162019848823547,
-0.034929100424051285,
-0.08435781300067902,
0.3018248379230499,
-0.08493024110794067,
0.003805160289630294,
0.1178305521607399,
0.07258635759353638,
-0.13939809799194336,
0.25250449776649475,
-0.04188484326004982,
0.07851351052522659,
0.16425524652004242,
0.11070944368839264,
0.004453244619071484,
0.1160367801785469,
0.2105455994606018,
0.05921637639403343,
0.14199845492839813,
-0.037898920476436615,
-0.007130930665880442,
-0.02959609590470791,
0.21937987208366394,
0.20054735243320465,
-0.04681635648012161,
-0.01358141377568245,
-0.07569365203380585,
-0.042092520743608475,
0.009550167247653008,
-0.19086332619190216,
0.1369783580303192,
-0.06239673122763634,
-0.07132186740636826,
0.04594813659787178,
0.046456389129161835,
-0.024241020902991295,
0.025339994579553604,
-0.018609922379255295,
0.20979715883731842,
-0.011674094945192337,
-0.13163405656814575,
-0.1941394954919815,
-0.19224175810813904,
0.04437485337257385,
0.01846938580274582,
-0.0044259014539420605,
-0.08426380902528763,
-0.010145765729248524,
0.016271568834781647,
-0.1373957246541977,
-0.09002319723367691,
-0.06886954605579376,
0.0672440305352211,
-0.21616841852664948,
0.055663853883743286,
0.21695756912231445,
-0.24931873381137848,
-0.08256126940250397,
0.0745253786444664,
-0.08391144126653671,
0.12297184765338898,
0.004551551304757595,
0.13224110007286072,
-0.10050024837255478,
0.048137497156858444,
0.11237422376871109,
0.0090597253292799,
-0.029642295092344284,
-0.09642791748046875,
-0.06028298661112785,
0.04004288837313652,
0.13695867359638214,
-0.10738279670476913,
0.14856840670108795,
0.010409213602542877,
0.03577318787574768,
0.02038368210196495,
-0.11372693628072739,
-0.13647404313087463,
0.08909451216459274,
0.05795290693640709,
-0.007900288328528404,
0.04648534953594208,
0.05133868753910065,
0.04674283415079117,
-0.1006200909614563,
-0.18013037741184235,
0.18576104938983917,
0.00774303637444973,
0.1523120105266571,
-0.17424309253692627,
-0.07939107716083527,
0.22933082282543182,
-0.04050410911440849,
-0.1343356966972351,
0.18398529291152954,
-0.1290396749973297,
0.09126145392656326,
-0.14196419715881348,
0.09495491534471512,
0.02474774606525898,
-0.020657502114772797,
0.011441831476986408,
-0.00014411551819648594,
0.0028370986692607403,
0.05109352990984917,
-0.14147570729255676,
0.03787509351968765,
0.13716843724250793,
0.030255954712629318,
-0.1486750692129135,
0.04662197455763817,
-0.06583770364522934,
-0.07648501545190811,
-0.15836897492408752,
-0.01254801545292139,
-0.155785471200943,
-0.12291309982538223,
-0.12093275785446167,
-0.039236437529325485,
-0.09428997337818146,
0.050906307995319366,
0.15336985886096954,
0.004937844350934029,
0.10683216899633408,
0.07516199350357056,
-0.16208142042160034,
0.030742939561605453,
0.124874547123909,
-0.03509872406721115,
-0.06422500312328339,
-0.025067146867513657,
-0.047151897102594376,
-0.06072231009602547,
0.01817128248512745,
-0.026166781783103943,
0.05211828276515007,
0.047675762325525284,
-0.0877576395869255,
0.15867362916469574,
0.00922346580773592,
0.1403026431798935,
0.061903901398181915,
-0.08323463797569275,
-0.021910563111305237,
-0.016620351001620293,
0.02144676260650158,
0.04821666702628136,
0.1288394182920456,
-0.05865849554538727,
-0.1496441811323166,
0.07219646871089935,
0.09732221812009811,
0.02624833583831787,
0.1515057533979416,
0.15753211081027985,
0.02042178064584732,
-0.11462903022766113,
-0.12971773743629456,
0.029834933578968048,
0.08580130338668823,
0.07970956712961197,
-0.041455548256635666,
-0.09489057213068008,
0.005501169245690107,
-0.09385224431753159,
0.1067960187792778,
-0.16394056379795074,
-0.03073074296116829,
0.1544639617204666,
0.17847509682178497,
0.025284042581915855,
-0.07087968289852142,
0.03731665760278702,
0.0027620356995612383,
-0.07585718482732773,
-0.09487048536539078,
-0.006457509007304907,
-0.10399292409420013,
0.057599324733018875,
-0.056003689765930176,
-0.03544766083359718,
-0.14249956607818604,
-0.005131425801664591,
-0.05830571427941322,
0.0624069944024086,
-0.07239837199449539,
-0.0026749896351248026,
-0.007269433233886957,
0.04466083645820618,
0.14814138412475586,
0.020349564030766487,
0.03239952772855759,
-0.02356506884098053,
0.0029219812713563442,
-0.03925472870469093,
0.031210342422127724,
-0.04745443910360336,
-0.030390329658985138,
-0.030072877183556557,
-0.043387796729803085,
-0.13615605235099792,
0.01813679002225399,
0.14812442660331726,
-0.009888957254588604,
0.04248844459652901,
-0.03193359822034836,
-0.08620797842741013,
0.004682736936956644,
-0.07133813947439194,
0.14703726768493652,
0.12278371304273605,
-0.07925114780664444,
0.057152483612298965,
-0.15307128429412842,
-0.24826830625534058,
-0.045501358807086945,
-0.1517486870288849,
-0.05187278985977173,
-0.006823899690061808,
-0.12762464582920074,
3.095500142080709e-05,
0.13920046389102936,
0.036799296736717224,
-0.14433594048023224,
0.05694306641817093,
0.15198183059692383,
0.12543952465057373,
0.05643299221992493,
0.09916315972805023,
-0.17627161741256714,
0.10723547637462616,
-0.15190155804157257,
-0.10729850828647614,
0.021838704124093056,
-0.15048809349536896,
-0.025377316400408745,
0.19538311660289764,
0.06795065104961395,
-0.028805812820792198,
-0.17655929923057556,
-0.06944464892148972,
0.04808251932263374,
0.06378988921642303,
0.02446851134300232,
0.018319696187973022,
0.044789981096982956,
0.012348715215921402,
0.01149661373347044,
-0.09445253759622574,
-0.08734676241874695,
-0.01582241617143154,
0.0615978017449379,
-0.13262608647346497,
-0.123346246778965,
0.1051236018538475,
-0.03383398428559303,
-0.015743115916848183,
0.09351152181625366,
-0.05890451371669769,
0.1042967215180397,
0.059260230511426926,
0.19329315423965454,
-0.01707623526453972,
-0.1348414421081543,
-0.11849986761808395,
0.004933823365718126,
0.08968150615692139,
0.1355130672454834,
-0.0732412338256836,
0.07414397597312927,
0.11791502684354782,
0.08875187486410141,
-0.11456792801618576,
-0.012415516190230846,
-0.028161214664578438,
0.040250182151794434,
-0.06165921315550804,
0.12827734649181366,
-0.16055744886398315,
0.075558602809906,
-0.18766769766807556,
-0.16946323215961456,
0.001517865457572043,
0.10151876509189606,
-0.09846754372119904,
0.1895797997713089,
-0.051970552653074265,
0.11862786114215851,
-0.10704749077558517,
0.05541960895061493,
0.16235463321208954,
0.11065512895584106,
0.04806146398186684,
0.04651833325624466,
0.18642516434192657,
-0.1342107057571411,
-0.0128953130915761,
0.028006143867969513,
-0.059581510722637177,
-0.009983937256038189,
-0.03391522541642189,
-0.0007125119445845485,
0.11407794058322906,
-0.15321002900600433,
0.17149174213409424,
0.037043243646621704,
0.01165678072720766,
0.014908237382769585,
-0.006452526897192001,
-0.06697594374418259,
0.08569444715976715,
-0.02653641626238823,
0.07487068325281143,
0.0853859931230545,
0.14848284423351288,
-0.15498577058315277,
0.05599049851298332,
-0.07071469724178314,
0.06347373127937317,
-0.10251124948263168,
-0.03168221563100815,
-0.052669089287519455,
-0.02242719568312168,
-0.06403563171625137,
-0.1381336748600006,
0.03547566384077072,
0.12770260870456696,
0.032600488513708115,
0.10292459279298782,
-0.006723836995661259,
-0.002431299537420273,
0.050403304398059845,
-0.14472447335720062,
0.015016194432973862,
0.045755527913570404,
0.035226404666900635,
0.032087210565805435,
-0.02649299055337906,
-0.09626122564077377,
0.07618910819292068,
0.0768699198961258,
-0.12481483072042465,
-0.042014263570308685,
0.03084608167409897,
-1.2926088857057039e-06,
0.03019707463681698,
-0.027842417359352112,
0.03964325040578842,
0.04513043537735939,
0.012081545777618885,
0.04154091700911522,
0.08291658014059067,
0.07258046418428421,
-0.008783572353422642,
-0.1360897719860077,
0.08564095944166183,
-0.17247697710990906,
-0.12731288373470306,
-0.19338349997997284,
-0.0516253337264061,
-0.043835196644067764,
-0.09489445388317108,
-0.03024471364915371,
-0.025772711262106895,
0.026013294234871864,
0.000250734796281904,
0.06212783232331276,
-0.18435537815093994,
0.14115378260612488,
0.13791711628437042,
-0.14984609186649323,
0.08718200773000717,
-0.09080822020769119,
0.07959144562482834,
-0.06629040092229843,
-0.11263354867696762,
-0.148143470287323,
0.0007003966020420194,
0.02426241897046566,
0.002711788285523653,
-0.023581545799970627,
-0.02441626600921154,
-0.12388047575950623,
0.13574177026748657,
0.05003388226032257,
-0.05114021524786949,
0.0060585783794522285,
0.1025935485959053,
0.04521670192480087,
-0.09880098700523376,
-0.12474232912063599,
0.048368897289037704,
0.09202764928340912,
-0.029102813452482224,
-0.09829671680927277,
-0.030125528573989868,
0.09810733050107956,
0.06804438680410385,
0.039914295077323914,
0.05743879824876785,
-0.04562818631529808,
-0.08675023168325424,
0.06521546840667725,
-0.06973003596067429,
0.08354125916957855,
0.12682361900806427,
0.20085518062114716,
0.06095533072948456,
-0.10332439839839935,
0.18981382250785828,
-0.016635151579976082,
-0.01579839177429676,
0.06569564342498779,
0.17068831622600555,
-0.06221339479088783,
-0.07539383322000504,
-0.05531877279281616,
-0.06627075374126434,
0.047613758593797684,
-0.043131738901138306,
-0.025129441171884537,
0.011648891493678093,
0.12211882323026657,
0.07959586381912231,
-0.08879196643829346,
-0.012256617657840252,
0.11016315966844559,
0.05023515596985817,
0.05455384775996208,
-0.04039294272661209,
0.08043056726455688,
0.05593273416161537,
0.06947395950555801,
-0.03538885712623596,
0.027786551043391228,
0.15396808087825775,
-0.03335922211408615,
-0.09957021474838257,
-0.03962148725986481,
0.03698967769742012,
0.08598976582288742,
0.07275427877902985,
-0.01819000020623207,
-0.06292826682329178,
0.04132232069969177,
0.10528277605772018,
-0.0780692920088768,
0.15874619781970978,
-0.14626505970954895,
-0.0813407227396965,
-0.1545993685722351,
-0.014501547440886497,
-0.07207886129617691,
0.10190382599830627,
-0.026259426027536392,
0.01524856686592102,
0.015963289886713028,
0.037250276654958725,
-0.07340390235185623,
-0.14851489663124084,
-0.16966305673122406,
-0.00790040846914053,
-0.054241593927145004,
-0.06173704192042351,
0.09707044810056686,
0.011940312571823597,
0.04341382905840874,
0.14139172434806824,
0.09461529552936554,
-0.1253540962934494,
0.15767277777194977,
-0.08869238197803497,
0.08078278601169586,
-0.022466544061899185,
0.16402755677700043,
-0.024739757180213928,
0.2753763496875763,
0.14272357523441315,
0.029130032286047935,
-0.11125435680150986,
-0.018893174827098846,
0.14410075545310974,
0.053610410541296005,
0.016703980043530464,
0.20861972868442535,
0.07366281747817993,
0.14722275733947754,
-0.05331576615571976,
-0.15174949169158936,
-0.03252321481704712,
-0.14206093549728394,
-0.06998632848262787,
-0.039526838809251785,
-0.13411562144756317,
-0.0025199188385158777,
-0.03554354980587959,
0.030652882531285286,
-0.05744536221027374,
-0.12270444631576538,
-0.028415340930223465,
-0.014808797277510166,
0.23181214928627014,
0.04482124373316765,
-0.09569300711154938,
0.02807617001235485,
-0.03897259011864662,
0.12764757871627808,
0.012017663568258286,
0.045332036912441254,
0.09788135439157486,
-0.007875083014369011,
0.057325076311826706,
-0.16369354724884033,
-0.0459911935031414,
0.10291054099798203,
0.07828555256128311,
-0.12921573221683502,
0.05997240170836449,
-0.09438148885965347,
-0.14109259843826294,
-0.00880447868257761,
0.024655146524310112,
0.028814448043704033,
0.24797146022319794,
-0.013400678522884846,
0.04866524413228035,
0.12870503962039948,
-0.05078091844916344,
0.02376893348991871,
-0.08230923861265182,
0.22418400645256042,
0.010840218514204025,
-0.13795486092567444,
-0.08819118142127991,
0.051797669380903244,
-0.07393020391464233,
-0.08751335740089417,
-0.040293749421834946,
0.05510907247662544,
-0.024951182305812836,
-0.04222974553704262,
-0.019233960658311844,
0.02619067393243313,
-0.15872012078762054,
0.00910547561943531,
0.08688904345035553,
0.006657570134848356,
-0.17773085832595825,
-0.019211556762456894,
0.022965695708990097,
0.0698845311999321,
0.08059319853782654,
0.2042367309331894,
-0.0033617650624364614,
0.0706099420785904,
0.0709114670753479,
0.11182349920272827,
-0.03528186306357384,
0.05326582491397858,
0.03519599512219429,
0.09250235557556152,
0.0218987837433815,
0.01049430575221777,
0.14242486655712128,
-0.09591367840766907,
0.019501294940710068,
0.16913780570030212,
-0.024366460740566254,
-0.061384692788124084,
-0.10974712669849396,
0.03175904601812363,
-0.004931210074573755,
-0.21280910074710846,
0.006446725223213434,
0.17590288817882538,
0.04052922502160072,
0.1618167757987976,
-0.021646147593855858,
0.011369789019227028,
0.060942426323890686,
0.0184561088681221,
-0.1336684674024582,
-0.00673934631049633,
-0.0754089504480362,
0.042056310921907425,
-0.04764087498188019,
0.015198968350887299,
-0.028172634541988373,
0.03567809239029884,
-0.146779403090477,
0.033712130039930344,
-0.19034145772457123,
0.04688597843050957,
-0.019321320578455925,
0.04052458703517914,
-0.018072737380862236,
0.04194389283657074,
-0.087706558406353,
-0.08627109229564667,
0.07414094358682632,
-0.14593397080898285,
0.04338756948709488,
0.1639116257429123,
-0.06438680738210678,
0.015930842608213425,
-0.10100545734167099,
0.05410003662109375,
-0.07877516746520996,
0.11577577888965607,
0.06272158771753311,
-0.06219102442264557,
-0.051410429179668427,
0.011676959693431854,
-0.05801509693264961,
0.08927696943283081,
0.06623762845993042,
0.042000316083431244,
0.0941614955663681,
-0.15426494181156158,
0.0732688456773758,
0.07990344613790512,
0.10748153924942017,
-0.08338356763124466,
-0.08366090059280396,
0.0607246458530426,
0.013183600269258022,
-0.06963016837835312,
0.0358910858631134,
0.050976283848285675,
-0.12261588871479034,
0.07291670888662338,
0.07277694344520569,
-0.035811856389045715,
-0.03430279344320297,
-0.06038997694849968,
0.13137303292751312,
0.024494318291544914,
-0.029224809259176254,
0.0794811025261879,
-0.08371486514806747,
0.05972234532237053,
0.07094868272542953,
-0.03142588213086128,
0.16925951838493347,
0.017699094489216805,
-0.031563904136419296,
0.10398412495851517,
-0.056379154324531555,
0.09877379238605499,
-0.02133685164153576,
-0.020770223811268806,
-0.08474921435117722,
-0.017739957198500633,
0.08590729534626007,
0.09064939618110657,
0.0005727890529669821,
0.0946093276143074,
-0.006362257059663534,
-0.018004320561885834,
0.1669950783252716,
0.014884552918374538,
-0.01564633473753929,
0.01973329484462738,
0.04404061287641525,
0.03381066769361496,
-0.005627552978694439,
0.0643368661403656,
-0.11797909438610077,
-0.04264320060610771,
-0.09802545607089996,
-0.02298647165298462,
-0.1440303474664688,
0.16004112362861633,
0.026494372636079788,
0.06143295392394066,
-0.07810691744089127,
0.07401587069034576,
-0.09440556168556213,
0.03263953700661659,
0.15334798395633698,
0.09477736055850983,
-0.029052753001451492,
0.06110813841223717,
0.0992707759141922,
-0.13263487815856934,
-0.08383991569280624,
0.023458926007151604,
0.1137164756655693,
0.12201836705207825,
-0.07652769237756729,
0.08277972042560577,
-0.023404600098729134,
-0.08760256320238113,
-0.040812596678733826,
0.11157714575529099,
-0.10113640874624252,
0.10547000914812088,
-0.07974076271057129,
-0.08960813283920288,
0.0786544680595398,
0.03835389390587807,
-0.04625873640179634,
-0.05078275129199028,
0.2257044017314911,
-0.11417451500892639,
-0.16548287868499756,
-0.004466821905225515,
-0.01672324351966381,
-0.025299448519945145,
0.1487075388431549,
0.08348398655653,
-0.06457239389419556,
0.2419966608285904,
0.017698943614959717,
0.20038443803787231,
0.047035399824380875,
0.10104218125343323,
-0.09044940769672394,
-0.0031241297256201506,
0.04325603321194649,
-0.09372103959321976,
-0.03697047010064125,
0.009264240972697735,
-0.049174532294273376,
-0.1238265186548233,
-0.05242081359028816,
0.027186444029211998,
-0.08153922855854034,
-0.07271207123994827,
0.02169046364724636,
-0.01659776270389557,
0.06152588129043579,
0.05693720653653145,
0.1323976218700409,
-0.09812923520803452,
-0.06417488306760788,
0.06184471398591995,
-0.12440665066242218,
-0.006948384456336498,
0.0008781677461229265,
0.09053529053926468,
-0.08910487592220306,
-0.030235789716243744,
-0.025463007390499115,
0.03827045485377312,
0.17856857180595398,
-0.0361521877348423,
0.14413724839687347,
0.16687330603599548,
0.03407909721136093,
-0.07137162983417511,
-0.08680409938097,
0.14019925892353058,
-0.010656544007360935,
0.07926245033740997,
0.05984778702259064,
0.013415555469691753,
0.06728930026292801,
0.14391709864139557,
-0.13648374378681183,
-0.05371696129441261,
0.06342456489801407,
0.02505781129002571,
0.09573090821504593,
0.2574714422225952,
-0.07316891849040985,
0.08592954277992249,
0.0402088426053524,
-0.01236876379698515,
-0.05638778582215309,
-0.09649275988340378,
-0.17938269674777985,
0.009824729524552822,
-0.06564200669527054,
-0.09299038350582123,
0.05348270386457443,
0.15460757911205292,
-0.026540223509073257,
0.1162162572145462,
0.05004383623600006,
-0.011561370454728603,
-0.038387153297662735,
-0.12464259564876556,
0.08368588238954544,
0.07355412095785141,
-0.11829230189323425,
-0.023495111614465714,
0.06923985481262207,
-0.03894990310072899,
-0.03733319044113159,
0.1045515313744545,
-0.1909031718969345,
0.13210166990756989,
-0.2110721319913864,
-0.04027940332889557,
0.00765890022739768,
0.015721755102276802,
-0.04627643898129463,
-0.07958074659109116,
0.198833167552948,
0.15443797409534454,
0.07799451053142548,
-0.0722106322646141,
0.08379995077848434,
0.05236095190048218,
-0.003954023588448763,
0.061055365949869156,
0.001205375767312944,
-0.15663869678974152,
-0.1661691814661026,
-0.08503033965826035,
-0.11375308036804199,
0.03320905566215515,
0.03799831122159958,
0.1098630353808403,
0.025915103033185005,
0.08043214678764343,
0.004593100398778915,
0.04413844272494316,
0.15215063095092773,
-0.0914706364274025,
-0.17392753064632416,
-0.05734418332576752,
-0.021395396441221237,
-0.04102745279669762,
-0.1243254616856575,
0.06158917024731636,
-0.0866621732711792,
-0.004533588886260986,
-0.026225250214338303,
-0.15381617844104767,
0.06717970222234726,
-0.002850897377356887,
-0.23976580798625946,
-0.05889064446091652,
0.0265605878084898,
-0.09901699423789978,
-0.14090143144130707,
-0.29933249950408936,
0.06935146450996399,
-0.10208427906036377,
0.03503575548529625,
-0.0495954230427742,
-0.023854011669754982,
-0.09825722873210907,
-0.051121290773153305,
0.06667521595954895,
0.013009872287511826,
-0.018020248040556908,
0.236296609044075,
-0.023441392928361893,
-0.07522379606962204,
0.1367376297712326,
0.15340502560138702,
-0.02993953600525856,
-0.060591571033000946,
-0.061011042445898056,
0.08726061880588531,
0.07891281694173813,
0.17934097349643707,
0.07415081560611725,
-0.18611501157283783,
-0.19435924291610718,
0.05245723947882652,
0.016553737223148346,
0.010772337205708027,
-0.06642728298902512,
-0.007146304473280907,
-0.03181115910410881,
-0.0969691053032875,
0.13640142977237701,
0.058041684329509735,
0.042873919010162354,
-0.0025353545788675547,
0.042293060570955276,
0.07200127840042114,
0.1371566504240036,
-0.1633613109588623,
0.10029557347297668,
-0.07332254946231842,
0.1300947666168213,
0.004607106558978558,
-0.09451540559530258,
-0.08888998627662659,
0.16943538188934326,
-0.02082435041666031,
-0.012924248352646828,
-0.015051540918648243,
0.06482116132974625,
0.11111486703157425,
-0.029131727293133736,
-0.056800030171871185,
-0.030642524361610413,
-0.033701229840517044,
-0.026630165055394173,
0.18311722576618195,
0.13044700026512146,
-0.047895997762680054,
-0.09102064371109009,
0.0898442268371582,
0.008211254142224789,
-0.13650396466255188,
0.0036479851696640253,
-0.0021760864183306694,
-0.20243270695209503,
-0.048676274716854095,
0.07166427373886108,
0.004891077522188425,
0.16944405436515808,
-0.09772787243127823,
0.010721532627940178,
-0.10259731858968735,
-0.09359254688024521,
-0.07267921417951584,
-0.12981246411800385,
0.0024973179679363966,
-0.1414600908756256,
-0.03574948385357857,
-0.0383266806602478,
0.14076857268810272,
-0.10236918926239014,
0.037240445613861084,
0.0636667013168335,
0.05478816479444504,
0.07445032149553299,
0.0313556045293808,
-0.13078592717647552,
0.04940260201692581,
0.07508466392755508,
-0.04822172969579697,
0.07377424836158752,
0.0004295688995625824,
0.05506771057844162,
-0.19519451260566711,
-0.09462655335664749,
0.025902159512043,
-0.052511196583509445,
0.004960760939866304,
0.020768307149410248,
0.034507472068071365,
-0.032809168100357056,
0.10333183407783508,
-0.039839185774326324,
0.10529965162277222,
0.07411269843578339,
-0.07108698785305023,
0.046219706535339355,
-0.04490456357598305,
0.08007792383432388,
0.08794155716896057,
0.04309841990470886,
-0.04624731466174126,
0.2673896551132202,
-0.12670527398586273,
0.051488980650901794,
-0.034713149070739746,
0.12408795952796936,
0.12091630697250366,
0.0315045490860939,
-0.06262526661157608,
0.08028340339660645,
0.015406088903546333,
0.018313834443688393,
-0.092626191675663,
0.12661615014076233,
-0.06747914105653763,
0.16086344420909882,
-0.1143430843949318,
-0.04672956094145775,
0.09403148293495178,
-0.038556478917598724,
-0.07162240892648697,
0.014571164734661579,
-0.11661630123853683,
-0.12527909874916077,
-0.06337904930114746,
0.04364504665136337,
-0.07549044489860535,
-0.28626734018325806,
0.013242221437394619,
-0.09185676276683807,
-0.012753715738654137,
-0.13388824462890625,
-0.11341328173875809,
0.03176381438970566,
0.06060582026839256,
0.06459582597017288,
0.21790392696857452,
0.10038546472787857,
-0.18061181902885437,
0.0810251459479332,
0.190673366189003,
-0.09158371388912201,
0.15436647832393646,
0.14500707387924194,
0.14616668224334717,
-0.26684510707855225,
-0.0983121395111084,
0.025996776297688484,
-0.2584218978881836,
0.03989283740520477,
0.18544648587703705,
0.011563325300812721,
0.2199951857328415,
0.20228545367717743,
0.07816769927740097,
0.18997465074062347,
-0.11138506233692169,
0.11612452566623688,
-0.14381328225135803,
0.09263896942138672,
0.10702017694711685,
-0.06406643241643906,
-0.12610173225402832,
-0.04506145045161247,
0.1115565374493599,
0.027400601655244827,
0.05598679184913635,
0.24696937203407288,
-0.12349944561719894,
0.1393602192401886,
-0.03577181324362755,
-0.07717183232307434,
0.007776123471558094,
-0.0997999906539917,
0.01241049449890852,
0.17700675129890442,
-0.17471984028816223,
0.08334093540906906,
0.1466009020805359,
0.05726779252290726,
0.0156435277312994,
0.2125530242919922,
0.009669385850429535,
0.09155306220054626,
0.16582873463630676,
-0.03889387100934982,
-0.07733575999736786,
-0.15088142454624176,
0.07711093127727509,
0.16433434188365936,
-0.011824360117316246,
0.029385587200522423,
0.13868023455142975,
-0.13769251108169556,
0.12038003653287888,
0.025130420923233032,
-0.046317748725414276,
-0.19239850342273712,
-0.11758150905370712,
0.005870579741895199,
0.019222328439354897,
-0.19517482817173004,
-0.03770354017615318,
0.051614172756671906,
-0.025180965662002563,
0.0937427282333374,
-0.02050594985485077,
-0.13143089413642883,
-0.04903752729296684,
-0.016963746398687363,
-0.10991702228784561,
-0.1065535768866539,
0.0796976238489151,
-0.026706485077738762,
-0.10870912671089172,
0.024133963510394096,
-0.007539056707173586,
0.030583543702960014,
0.036360275000333786,
-0.06310317665338516,
0.07977662980556488,
-0.03134401515126228,
-0.049646712839603424,
-0.12242844700813293,
-0.023875979706645012,
-0.17826390266418457,
0.02503368631005287,
-0.09929852932691574,
0.060683149844408035,
-0.0043725850991904736,
0.10491388291120529,
-0.10796357691287994,
-0.05951644480228424,
-0.10167250782251358,
-0.16331817209720612,
-0.03473009914159775,
0.17667077481746674,
0.056767065078020096,
0.07379762083292007,
0.05175502970814705,
0.04605609178543091,
0.024093737825751305,
0.1483093500137329,
-0.14124570786952972,
0.09495159238576889,
-0.07117126882076263,
-0.12630236148834229,
0.19902488589286804,
0.025287287309765816,
0.0018026650650426745,
-0.19026830792427063,
-0.09371744841337204,
-0.028709154576063156,
-0.05789000168442726,
0.03878285735845566,
-0.026857808232307434,
-0.10583006590604782,
-0.08366609364748001,
-0.10154633969068527,
0.03654443845152855,
0.09221974015235901,
-0.05277286097407341,
0.02257099561393261,
0.0070937923155725,
0.006975656375288963,
0.13484534621238708,
-0.13618245720863342,
0.029923584312200546,
-0.06353029608726501,
0.17897939682006836,
0.033917129039764404,
-0.1814274936914444,
-0.09065323323011398,
-0.010768569074571133,
-0.04935583099722862,
-0.11130407452583313,
0.0433880053460598,
0.10264571756124496,
0.031637270003557205,
-0.10335574299097061,
-0.09872762858867645,
0.040037643164396286,
0.06561437994241714,
-0.09053625911474228,
-0.007331782951951027,
0.13733619451522827,
0.08886916935443878,
-0.09268946945667267,
-0.059487320482730865,
0.05823148414492607,
-0.03816023841500282,
0.014179070480167866,
0.10740630328655243,
-0.13793562352657318,
-0.0037071332335472107,
0.131564661860466,
-0.04875226318836212,
0.1557629257440567,
0.01952371932566166,
0.031309954822063446,
0.037082042545080185,
-0.19273987412452698,
-0.05472409725189209,
-0.10678477585315704,
0.11434122174978256,
-0.178620383143425,
0.018282655626535416,
-0.02906813658773899,
-0.029147470369935036,
-0.22002243995666504,
-0.06813253462314606,
0.0696769505739212,
-0.1528579741716385,
0.14710938930511475,
-0.12539042532444,
-0.18860650062561035,
-0.18017134070396423,
0.013713273219764233,
0.16804170608520508,
0.061829574406147,
-0.018185431137681007,
0.16074426472187042,
-0.13420726358890533,
-0.0725763812661171,
0.07922583073377609,
-0.07527168095111847,
0.10271693766117096,
0.1022515520453453,
-0.09591749310493469,
0.11245422065258026,
0.06491449475288391,
0.06053806468844414,
0.08992408961057663,
0.061645492911338806,
-0.04248712211847305,
-0.0883094072341919,
-0.07941435277462006,
-0.11586590856313705,
-0.00624280096963048,
0.022164542227983475,
0.1216738298535347,
0.0035709026269614697,
0.06287703663110733,
-0.03726935759186745,
-0.06410727649927139,
-0.11371562629938126,
-0.02148021198809147,
0.06243988126516342,
0.13217246532440186,
0.0625651553273201,
0.06523209065198898,
0.04979656636714935,
-0.034142691642045975,
-0.013424158096313477,
0.05586951598525047,
0.028706399723887444,
-0.08704937994480133,
-0.10347945243120193,
0.012628303840756416,
-0.013819274492561817,
-0.06680690497159958,
0.11139937490224838,
-0.05578908696770668,
0.023090476170182228,
0.07692062854766846,
0.13277436792850494,
-0.147680401802063,
-0.12251772731542587,
-0.011926726438105106,
-0.08943601697683334,
-0.01313694380223751,
-0.020745184272527695,
0.1616109311580658,
0.0036387962754815817,
-0.024172671139240265,
0.02203379198908806,
-0.10779087245464325,
0.07530757784843445,
-0.09455031156539917,
-0.1645544022321701,
0.07929767668247223,
0.07851839065551758,
0.048117030411958694,
0.09669417887926102,
-0.11188534647226334,
-0.13110734522342682,
0.02550155110657215,
-0.043760985136032104,
0.022563511505723,
0.056965991854667664,
0.04741518199443817,
-0.1083286926150322,
-0.006808246020227671,
0.13785475492477417,
-0.023031415417790413,
0.037116482853889465,
-0.11037588119506836,
-0.07046438753604889,
0.09614686667919159,
-0.14677491784095764,
-0.0534358024597168,
0.0727759301662445,
0.018202828243374825,
-0.0701245442032814,
0.04639098048210144,
-0.09427650272846222,
0.10673701018095016,
0.13803835213184357,
-0.12427673488855362,
0.036935754120349884,
0.06149803102016449,
-0.14628230035305023,
-0.03798322007060051,
-0.09721706062555313,
0.07900027185678482,
0.13846443593502045,
0.07393838465213776,
-0.056737612932920456,
0.17674055695533752,
-0.0005020591197535396,
0.037399932742118835,
0.13779810070991516,
0.07822300493717194,
-0.11752418428659439,
0.17785829305648804,
-0.07481135427951813,
0.008992866612970829,
-0.02771012857556343,
-0.06122730299830437,
0.045832935720682144,
0.04269048571586609,
-0.02469741553068161,
-0.07016134262084961,
0.1133413314819336,
0.005947232246398926,
-0.008455689065158367,
-0.10973414033651352,
-0.03220396861433983,
0.05027705803513527,
-0.10363461077213287,
-0.09554771333932877,
-0.08078612387180328,
-0.0766335129737854,
-0.16504549980163574,
-0.048441994935274124,
-0.06678280979394913,
0.0037967704702168703,
-0.12779340147972107,
-0.11377924680709839,
0.000664975552354008,
0.1540382355451584,
0.130621999502182,
-0.14389753341674805,
-0.07877057045698166,
0.0903562679886818,
-0.016993803903460503,
-0.06393574178218842,
-0.04064542427659035,
0.15112385153770447,
-0.12959176301956177,
-0.002413010224699974,
0.06631345301866531,
-0.07130160927772522,
0.015716752037405968,
0.16791437566280365,
0.15636587142944336,
0.16322444379329681,
-0.005278082564473152,
0.09705346077680588,
0.043028779327869415,
0.08075563609600067,
0.034669648855924606,
-0.016436396166682243,
0.08843203634023666,
-0.1329793781042099,
0.017492596060037613,
0.15620389580726624,
0.01941440813243389,
-0.07585085183382034,
0.028341613709926605,
-0.02550416626036167,
0.07006550580263138,
-0.03216613456606865,
-0.0032994323410093784,
-0.012948147021234035,
0.07835209369659424,
-0.13090366125106812,
-0.08679020404815674,
0.08486654609441757,
0.10459696501493454,
-0.10315487533807755,
-0.06875009834766388,
-0.08706550300121307,
-0.08455569297075272,
0.08546528965234756,
0.018517516553401947,
0.08386803418397903,
0.0866159200668335,
0.19246485829353333,
0.07396738231182098,
0.0823592022061348,
-0.04831499978899956,
0.11350098997354507,
-0.041333556175231934,
-0.18435724079608917,
0.1484443098306656,
-0.062483590096235275,
-0.023044152185320854,
-0.08392754197120667,
0.07763924449682236,
0.015707464888691902,
-0.018264180049300194,
-0.037649378180503845,
-0.10808425396680832,
-0.002986156614497304,
0.10258070379495621,
-0.04027092084288597,
-0.051289431750774384,
-0.1391018033027649,
0.049250807613134384,
0.0444052554666996,
-0.014661097899079323,
-0.11189190298318863,
0.030351100489497185,
0.19316767156124115,
-0.015134191140532494,
0.04134069010615349,
0.08982107788324356,
-0.016236022114753723,
-0.007280370686203241,
-0.005502045154571533,
-0.08548162877559662,
-0.10422016680240631,
-0.19053232669830322,
-0.007398760877549648,
0.03718182444572449,
-0.0718364492058754,
0.0573401041328907,
-0.07780861854553223,
-0.07986563444137573,
-0.006802600808441639,
0.017991935834288597,
0.07547228783369064,
-0.05943058803677559,
-0.034516558051109314,
0.19550639390945435,
0.07762663066387177,
0.037946298718452454,
0.0027714946772903204,
-0.08380836248397827,
0.024894092231988907,
-0.056580085307359695,
-0.07123862951993942,
-0.074895940721035,
-0.04073365032672882,
0.13194535672664642,
-0.1892729103565216,
-0.06072849780321121,
0.16043750941753387,
0.05716068297624588,
-0.11363333463668823,
0.05220647156238556,
-0.07941871136426926,
-0.0029976984951645136,
0.09837581217288971,
0.027108339592814445,
0.05904461070895195,
0.06696414947509766,
0.004982514772564173,
0.012561401352286339,
0.036058761179447174,
0.023511778563261032,
0.08616529405117035,
0.019268633797764778,
-0.07766840606927872,
-0.007425022777169943,
0.0920192152261734,
-0.05260720103979111,
0.07764288038015366,
0.07685539126396179,
0.137137770652771,
0.10485624521970749,
0.007642871234565973,
-0.010825704783201218,
-0.04185011610388756,
-0.1337481439113617,
-0.0012822760036215186,
0.05188427492976189,
-0.048808373510837555,
0.12853288650512695,
-0.045441046357154846,
0.06800485402345657,
0.06366347521543503,
0.0280810184776783,
0.1562841534614563,
-0.01843920908868313,
-0.1373133361339569,
0.04452621191740036,
-0.0049695298075675964,
-0.009097115136682987,
-0.08845756202936172,
0.028720084577798843,
-0.08748961240053177,
0.011440794914960861,
0.19219809770584106,
0.07271135598421097,
-0.03090410865843296,
-0.10579415410757065,
-0.14560523629188538,
0.04906151816248894,
0.15039728581905365,
0.08617154508829117,
-0.011646960861980915,
0.2439722865819931,
-0.03395533189177513,
0.10855144262313843,
-0.08155698329210281,
0.0255496297031641,
-0.09115704894065857,
-0.12264981865882874,
0.07580453902482986,
0.11429716646671295,
0.05780435726046562,
0.036056481301784515,
-0.05162527784705162,
-0.09937586635351181,
0.13224121928215027,
0.04386281222105026,
-0.15543897449970245,
0.1067577674984932,
-0.12573613226413727,
0.023422658443450928,
-0.06800089031457901,
0.10251934826374054,
0.06503726541996002,
0.038988906890153885,
-0.08134657889604568,
-0.06475837528705597,
0.05990074574947357,
-0.07845660299062729,
0.0818384662270546,
0.05920696631073952,
-0.0469573438167572,
-0.08430830389261246,
-0.002303843153640628,
-0.07971701771020889,
0.019585134461522102,
0.0710555836558342,
-0.10883963108062744,
0.07978655397891998,
0.04366040602326393,
-0.08394725620746613,
0.03225637227296829,
0.025538329035043716,
-0.030723880976438522,
0.09341679513454437,
0.046119574457407,
-0.11837383359670639,
0.09117292612791061,
0.0981859415769577,
-0.03893762826919556,
0.15029379725456238,
0.06874370574951172,
-0.05155080184340477,
0.0983596220612526,
-0.07816328853368759,
0.0012471198569983244,
-0.08867404609918594,
0.032956160604953766,
-0.019095323979854584,
0.13074500858783722,
-0.07373809069395065,
-0.06227844953536987,
0.07877916842699051,
0.003930538427084684,
-0.047545552253723145,
-0.003420447465032339,
-0.0467427559196949,
0.022554753348231316,
-0.12870199978351593,
0.062359876930713654,
0.07960744947195053,
-0.14378009736537933,
-0.15695682168006897,
-0.02977593056857586,
0.026043863967061043,
-0.04834408685564995,
-0.11616948246955872,
-0.1745777279138565,
0.06737672537565231,
0.02635178342461586,
0.042128127068281174
# 42 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c4_weight);
# 40 "c_cnn/top.cpp"

 const data_t c5_weight[84*10]={

# 1 "c_cnn/param/fc2.weight.h" 1
-0.11132485419511795,
-0.0964389517903328,
0.0809573158621788,
-0.009679711423814297,
0.09352012723684311,
-0.1427432894706726,
-0.10378728061914444,
0.2088107466697693,
0.0019405590137466788,
-0.018132280558347702,
-0.18975885212421417,
-0.17754384875297546,
-0.1207972839474678,
0.1545412540435791,
-0.07192004472017288,
0.1253625452518463,
-0.12362926453351974,
0.10933814942836761,
-0.10309585928916931,
0.003542880993336439,
-0.08666937798261642,
0.07561812549829483,
-0.15414689481258392,
-0.012154565192759037,
-0.047732625156641006,
0.18519704043865204,
0.0815381407737732,
0.01850930042564869,
-0.1711501181125641,
-0.12350481748580933,
0.17182639241218567,
0.1039041057229042,
0.13232368230819702,
0.16127292811870575,
-0.05932629108428955,
0.1694176346063614,
0.0301744993776083,
0.017562033608555794,
-0.1940811425447464,
-0.11399833112955093,
-0.12480887770652771,
0.0449666753411293,
-0.008570803329348564,
-0.038745541125535965,
0.15423506498336792,
0.10094417631626129,
0.17259348928928375,
0.12338709086179733,
-0.07892117649316788,
0.039067525416612625,
0.10239823162555695,
-0.05371304601430893,
-0.21297428011894226,
-0.18784134089946747,
-0.009592685848474503,
-0.17245587706565857,
-0.11303360015153885,
-0.06520771235227585,
-0.188948392868042,
0.010473146103322506,
-0.1616496741771698,
-0.13612766563892365,
0.05189976468682289,
0.09032214432954788,
0.01864568144083023,
0.12239635735750198,
-0.07278008759021759,
0.08016661554574966,
0.11427401006221771,
0.10165485739707947,
0.14695532619953156,
-0.16537566483020782,
0.16941222548484802,
-0.01714695617556572,
0.05678076669573784,
-0.18859684467315674,
-0.12891390919685364,
-0.05691401660442352,
0.1378307193517685,
-0.06997476518154144,
0.1441170871257782,
0.028591277077794075,
0.11324001103639603,
-0.06938072293996811,
0.11063164472579956,
-0.148079052567482,
-0.11335168778896332,
-0.11380266398191452,
0.1677481234073639,
-0.07638051360845566,
0.01978760026395321,
0.0969204381108284,
-0.07698983699083328,
-0.17330631613731384,
-0.11610383540391922,
-0.13226649165153503,
0.15203377604484558,
-0.027445152401924133,
-0.10075820982456207,
-0.08102820813655853,
0.1561012864112854,
0.09311565011739731,
-0.14487546682357788,
-0.06489288806915283,
0.05649435520172119,
0.037494465708732605,
-0.02434307150542736,
-0.14101125299930573,
-0.19062437117099762,
0.1335047036409378,
-0.2168261557817459,
-0.18856936693191528,
0.06203176826238632,
0.09040848910808563,
-0.052195433527231216,
-0.011412455700337887,
-0.11602608114480972,
-0.038919802755117416,
-0.16000038385391235,
0.15611311793327332,
0.10236739367246628,
0.16884417831897736,
0.09460793435573578,
0.13229671120643616,
0.1346801370382309,
-0.13675636053085327,
0.09510742127895355,
0.15843011438846588,
-0.08805254846811295,
-0.10978774726390839,
0.0012738986406475306,
-0.09133248031139374,
-0.06726887822151184,
0.1662510484457016,
0.14785431325435638,
-0.18548007309436798,
-0.1505410373210907,
-0.04838002845644951,
0.13608300685882568,
-0.08560138195753098,
0.1722860187292099,
-0.05218183621764183,
0.013624588958919048,
0.04236598685383797,
-0.03277850151062012,
0.1201070174574852,
-0.16075675189495087,
0.18992362916469574,
0.14163674414157867,
-0.019824953749775887,
0.003313362132757902,
0.01290513388812542,
-0.13724271953105927,
-0.14226552844047546,
-0.00252135400660336,
0.1348387449979782,
-0.11010929942131042,
-0.20761540532112122,
-0.09928493201732635,
-0.06194979324936867,
-0.05772260203957558,
0.18955886363983154,
0.09893091022968292,
-0.03330635651946068,
0.08616974949836731,
0.07625902444124222,
0.17764343321323395,
0.09770803898572922,
0.06409765034914017,
0.08763635158538818,
0.17228759825229645,
0.1664472222328186,
-0.11648689210414886,
-0.1499389111995697,
0.04655676707625389,
0.15010972321033478,
-0.023856783285737038,
0.043582674115896225,
-0.059485577046871185,
0.02527509815990925,
-0.1715037226676941,
-0.08055967092514038,
0.07879392802715302,
-0.0465473011136055,
0.08804207295179367,
-0.10770633816719055,
-0.1495252102613449,
-0.10183792561292648,
-0.11458931118249893,
0.18399418890476227,
0.12601430714130402,
0.05196188762784004,
0.05016136169433594,
-0.07046480476856232,
-0.047973934561014175,
0.10259836912155151,
0.07003410160541534,
0.07548868656158447,
-0.10505182296037674,
0.012887498363852501,
-0.10938096791505814,
-0.008779854513704777,
-0.1324312686920166,
-0.12810203433036804,
0.14205609261989594,
-0.16675527393817902,
-0.13895951211452484,
0.1631079912185669,
0.08786165714263916,
-0.018478358164429665,
-0.14340436458587646,
0.11411077529191971,
-0.0342145599424839,
0.17674650251865387,
0.16474686563014984,
-0.06882934272289276,
-0.12995123863220215,
0.17326770722866058,
0.12084507197141647,
0.07734270393848419,
-0.05850324034690857,
0.05941573530435562,
0.08768820017576218,
0.1514360010623932,
0.06294925510883331,
-0.1534169465303421,
-0.05418641120195389,
0.06526385992765427,
-0.05717088282108307,
-0.11329454183578491,
-0.0013029322726652026,
-0.15460394322872162,
-0.035194944590330124,
0.018635230138897896,
0.1019241139292717,
0.0657278373837471,
-0.1506848931312561,
0.10714095830917358,
-0.17753712832927704,
-0.17692029476165771,
0.007949096150696278,
-0.07350507378578186,
0.0705714225769043,
-0.10230686515569687,
-0.14206400513648987,
0.04551694169640541,
0.15220710635185242,
-0.08558766543865204,
0.18170833587646484,
-0.04260444641113281,
0.007654861081391573,
-0.05557860806584358,
-0.15516023337841034,
0.1034424751996994,
-0.08878957480192184,
-0.023854654282331467,
-0.046014297753572464,
-0.13940398395061493,
0.15703840553760529,
0.0979144349694252,
-0.14907903969287872,
0.09153901040554047,
0.029939066618680954,
0.0019951502326875925,
-0.1361212581396103,
-0.08087711036205292,
-0.10178127884864807,
-0.06223779544234276,
-0.1501435488462448,
-0.026525942608714104,
0.06813400983810425,
-0.006820583250373602,
-0.137002632021904,
-0.019655730575323105,
0.03345820680260658,
0.07042039185762405,
0.013203250244259834,
0.15901373326778412,
0.1793648600578308,
0.1019730493426323,
-0.049183961004018784,
-0.16516056656837463,
-0.13689586520195007,
-0.17445474863052368,
-0.034331608563661575,
-0.16435407102108002,
0.030994875356554985,
-0.07303358614444733,
-0.13023321330547333,
0.04648866131901741,
0.12123771756887436,
-0.1848084032535553,
0.08678900450468063,
-0.011886419728398323,
0.09796155989170074,
0.10938943177461624,
-0.1351548731327057,
0.12506860494613647,
0.05482066795229912,
-0.12017770856618881,
0.04267792031168938,
0.0474182553589344,
-0.054419390857219696,
-0.038256701081991196,
0.014255625195801258,
0.053322356194257736,
0.09055280685424805,
0.06242172047495842,
0.1794590801000595,
-0.020715903490781784,
-0.001392406178638339,
-0.06740088760852814,
0.18808825314044952,
-0.05191219598054886,
0.026447031646966934,
0.06519512087106705,
-0.11689261347055435,
-0.18294845521450043,
0.08579107373952866,
-0.17284633219242096,
-0.0011051017791032791,
-0.16343922913074493,
0.13704898953437805,
0.10866756737232208,
0.02699430286884308,
0.11193808913230896,
0.10243348777294159,
0.1281726062297821,
-0.06393758207559586,
-0.026093054562807083,
-0.17189639806747437,
0.0933971256017685,
-0.094805508852005,
0.05170394480228424,
-0.06541486084461212,
0.16772004961967468,
0.17513234913349152,
0.059318657964468,
0.04755571857094765,
0.028254205361008644,
-0.06916038691997528,
0.08529740571975708,
-0.14704036712646484,
-0.09588280320167542,
-0.12857607007026672,
0.023669958114624023,
0.17765341699123383,
0.04899022355675697,
0.060481566935777664,
0.13175587356090546,
-0.06673721224069595,
0.03475787118077278,
0.007773239631205797,
0.10161963105201721,
0.10519871860742569,
0.017511485144495964,
0.1587303876876831,
-0.1105719730257988,
-0.00702318362891674,
-0.10842142254114151,
0.011970910243690014,
-0.009161618538200855,
0.09114906191825867,
-0.12942156195640564,
0.09617923200130463,
0.1501062512397766,
0.083831287920475,
0.06478186696767807,
-0.14804217219352722,
0.1515233814716339,
-0.1499568670988083,
0.004535151179879904,
0.040218785405159,
0.1567632406949997,
0.12221943587064743,
-0.05882538855075836,
0.1789429634809494,
0.1391514390707016,
0.09717443585395813,
-0.12906083464622498,
0.14005348086357117,
-0.09200388193130493,
-0.14375412464141846,
-0.01963389664888382,
-0.1796601414680481,
-0.07245317846536636,
0.15564866364002228,
-0.1446867734193802,
0.04391506314277649,
0.011525490321218967,
-0.06083077937364578,
0.09238880127668381,
-0.03597702085971832,
0.18326006829738617,
-0.03667062520980835,
0.08987995237112045,
-0.1730538010597229,
0.19783055782318115,
-0.07098866999149323,
0.03926074504852295,
0.2128107249736786,
0.002619053702801466,
-0.14585494995117188,
-0.014028429053723812,
-0.03082541562616825,
0.11949240416288376,
-0.03402313217520714,
0.09322752058506012,
-0.1535767763853073,
0.01387341134250164,
0.12634144723415375,
0.030645646154880524,
0.1514967381954193,
0.202503502368927,
0.07130518555641174,
0.08816865086555481,
-0.16829107701778412,
-0.10017311573028564,
-0.037770312279462814,
-0.10265380889177322,
-0.10869337618350983,
0.13187821209430695,
-0.16107165813446045,
-0.10770124197006226,
0.03719523921608925,
-0.004176067654043436,
0.12795214354991913,
-0.15863864123821259,
0.026599660515785217,
0.037613824009895325,
0.06157897412776947,
-0.10163556784391403,
-0.10472934693098068,
0.09413468837738037,
-0.143610879778862,
-0.18620461225509644,
-0.03334932029247284,
0.08134615421295166,
0.17259161174297333,
0.11268894374370575,
-0.11337760090827942,
-0.03928108140826225,
-0.12382090836763382,
0.03839609771966934,
-0.21384170651435852,
-0.10306099057197571,
-0.12034593522548676,
0.12342586368322372,
0.00775992963463068,
-0.009123844094574451,
-0.15599583089351654,
-0.1533791571855545,
-0.03668510913848877,
0.041788820177316666,
0.05512077733874321,
-0.0661412701010704,
0.002795736538246274,
-0.028781281784176826,
0.03377619758248329,
-0.14745275676250458,
-0.17397737503051758,
-0.10986994206905365,
-0.11928201466798782,
-0.09521689265966415,
-0.11367296427488327,
-0.04525880515575409,
0.12009797245264053,
0.04712378606200218,
0.19629551470279694,
-0.148542121052742,
-0.015583080239593983,
0.022895941510796547,
0.1451462060213089,
-0.11907636374235153,
-0.12169652432203293,
-0.025902599096298218,
-0.040536705404520035,
-0.14921851456165314,
-0.012762841768562794,
-0.0821281373500824,
-0.028870048001408577,
0.1395145207643509,
0.07034914940595627,
-0.073686882853508,
-0.116902656853199,
-0.013518726453185081,
0.1807110607624054,
0.1685183197259903,
0.13743166625499725,
-0.14025834202766418,
-0.07555186003446579,
0.05109642073512077,
0.050436876714229584,
0.17649570107460022,
-0.09282621741294861,
0.1974782645702362,
0.15771658718585968,
-0.0678282156586647,
0.07776839286088943,
0.1573367565870285,
-0.0341758169233799,
-0.06864739209413528,
0.14512567222118378,
-0.10052122175693512,
-0.10738535970449448,
0.08723826706409454,
-0.015800774097442627,
0.04751443862915039,
0.20099914073944092,
0.12137971818447113,
0.0938873365521431,
-0.19742457568645477,
0.14730587601661682,
0.1834271401166916,
0.09597615897655487,
0.014016260392963886,
-0.08863617479801178,
-0.02438218519091606,
0.039675138890743256,
0.1261093020439148,
-0.04378476366400719,
0.14002658426761627,
-0.1323905736207962,
0.06319967657327652,
0.10414186865091324,
-0.12315325438976288,
-0.02796034887433052,
0.19053012132644653,
-0.16847866773605347,
0.1231224313378334,
-0.07544717937707901,
-0.15803228318691254,
-0.013642602600157261,
0.16009336709976196,
0.06816048175096512,
0.12022729963064194,
0.10300097614526749,
0.15608835220336914,
-0.17642566561698914,
0.021589595824480057,
-0.10383518785238266,
-0.14255571365356445,
-0.1304095983505249,
0.024300994351506233,
-0.11782413721084595,
0.018724976107478142,
-0.15640921890735626,
-0.028931476175785065,
-0.16723941266536713,
0.1735062301158905,
-0.10810434818267822,
0.19240139424800873,
0.06065874546766281,
0.1771976202726364,
0.11101240664720535,
0.14064186811447144,
0.037609633058309555,
-0.2398294359445572,
0.19997423887252808,
0.1373523622751236,
-0.018779708072543144,
-0.0011795664904639125,
-0.0469566211104393,
0.1512461155653,
-0.14019781351089478,
0.15727552771568298,
-0.0323721282184124,
0.1261557638645172,
0.07559847831726074,
-0.03482191637158394,
-0.10761739313602448,
0.20279963314533234,
0.06982389092445374,
0.12826737761497498,
-0.006444942206144333,
-0.13642752170562744,
0.08317573368549347,
-0.1044420599937439,
-0.1644451916217804,
0.09386450052261353,
0.01036741491407156,
0.17154066264629364,
-0.03493781387805939,
0.1827356070280075,
-0.026772331446409225,
0.058255694806575775,
0.05469280481338501,
-0.004748951643705368,
0.17603962123394012,
-0.1984872817993164,
0.0012627153191715479,
-0.035287532955408096,
-0.07535989582538605,
0.027219438925385475,
0.14468379318714142,
0.00674374308437109,
-0.10933906584978104,
-0.12689238786697388,
-0.19534611701965332,
0.012231077067553997,
-0.155668243765831,
-0.14400483667850494,
-0.058056630194187164,
0.08074723184108734,
-0.06250103563070297,
-0.13707509636878967,
0.0751468613743782,
0.09409451484680176,
0.10782266408205032,
0.10892194509506226,
0.033720266073942184,
0.1295548975467682,
-0.003608113620430231,
-0.08481801301240921,
-0.056323956698179245,
0.08887913823127747,
0.040170881897211075,
-0.1275470107793808,
-0.16374970972537994,
0.09474413096904755,
0.09294529259204865,
-0.037276607006788254,
0.13364706933498383,
0.08121390640735626,
-0.13592666387557983,
0.01845378801226616,
0.17107334733009338,
0.1403961479663849,
0.1532834768295288,
-0.16758829355239868,
0.03295600414276123,
-0.06493712961673737,
0.10277121514081955,
-0.1703518182039261,
-0.1451534628868103,
-0.0564599484205246,
-0.12613409757614136,
0.035759713500738144,
-0.12347276508808136,
0.1295149177312851,
0.14535890519618988,
-0.07404875755310059,
-0.022682232782244682,
-0.10301444679498672,
-0.12293639779090881,
-0.033675309270620346,
0.08140843361616135,
-0.15520603954792023,
-0.11695828288793564,
0.014380361884832382,
-0.17775925993919373,
0.033487532287836075,
0.08007997274398804,
-0.012826476246118546,
-0.12280421704053879,
-0.046903591603040695,
-0.17858843505382538,
0.010548003949224949,
0.03620403632521629,
0.1022837832570076,
0.11453446000814438,
-0.06759179383516312,
0.03773773834109306,
-0.16453151404857635,
-0.013445023447275162,
-0.11299742758274078,
0.15137895941734314,
-0.19725458323955536,
0.12148414552211761,
0.019067874178290367,
-0.14849425852298737,
0.07243689894676208,
-0.13502413034439087,
0.1186927855014801,
0.052578527480363846,
0.025545315816998482,
-0.1233232319355011,
0.0730021744966507,
-0.06142308562994003,
-0.14283707737922668,
-0.15408043563365936,
0.08712930977344513,
0.10214488953351974,
-0.05131467431783676,
0.06020659580826759,
0.13977372646331787,
0.06992015987634659,
0.046445462852716446,
0.10728400200605392,
0.14003148674964905,
-0.17363981902599335,
-0.0467430017888546,
0.05927432328462601,
0.06708349287509918,
0.06236417219042778,
-0.17406782507896423,
-0.06136880815029144,
-0.05581635609269142,
-0.09636153280735016,
0.08258164674043655,
-0.07671801000833511,
0.04757057502865791,
0.05985390767455101,
0.07363570481538773,
-0.0077875531278550625,
-0.1521167755126953,
0.12273278087377548,
-0.03280378878116608,
0.12138134241104126,
0.03751487657427788,
-0.16654764115810394,
0.13747279345989227,
-0.0008463069098070264,
-0.01797308772802353,
0.1344572901725769,
-0.06105620786547661,
-0.15803220868110657,
-0.10461772978305817,
-0.10151393711566925,
-0.11786012351512909,
0.009131722152233124,
-0.052738990634679794,
-0.12213926762342453,
0.13741397857666016,
-0.19380664825439453,
0.08668924868106842,
-0.07137755304574966,
0.053057488054037094,
-0.17784740030765533,
-0.12635888159275055,
0.0629260241985321,
0.038107678294181824,
0.050901491194963455,
-0.12622101604938507,
0.09702053666114807,
-0.04949652776122093,
-0.16737571358680725,
0.013354815542697906,
0.025158844888210297,
0.020483342930674553,
0.05272314324975014,
-0.12071993947029114,
0.14032168686389923,
-0.12447544187307358,
-0.07743434607982635,
-0.07749933749437332,
0.09687267243862152,
0.0240843053907156,
-0.1003112867474556,
-0.06193501874804497,
0.02114059403538704,
0.11724140495061874,
0.0038144083227962255,
0.17799994349479675,
0.11634597182273865,
0.11294323951005936,
0.04619510471820831,
0.09740126878023148,
0.1199616938829422,
-0.1354660838842392,
-0.03013305738568306,
0.11937805265188217,
-0.11864011734724045,
0.05384686961770058,
0.10919202119112015,
-0.027760924771428108,
0.03613465279340744,
0.11312967538833618,
0.12465254962444305,
-0.055449821054935455,
0.015105381608009338,
0.07518205791711807,
-0.0331876203417778,
-0.16889360547065735,
0.13206671178340912,
-0.0001562147808726877,
0.09257613122463226,
-0.11023744195699692,
-0.09418713301420212,
-0.004846652504056692,
0.056385260075330734,
0.016446365043520927,
0.008136831223964691,
-0.023143794387578964,
0.09064358472824097,
-0.16586725413799286,
0.14509513974189758,
-0.08513172715902328,
0.15054535865783691,
-0.08633221685886383,
0.007381513249129057,
0.09939920902252197,
-0.12134011089801788,
-0.058688685297966,
0.045737165957689285,
-0.04044008255004883,
0.1566949337720871,
0.015312210656702518,
0.09924830496311188,
-0.020136380568146706,
0.10333767533302307,
-0.06539074331521988,
-0.1402040272951126,
-0.07238934189081192,
0.016044750809669495,
-0.07244925945997238,
0.08153039962053299,
-0.08917579054832458,
0.08806733042001724,
0.11710482090711594,
-0.10787328332662582,
-0.15251651406288147,
-0.07289031147956848,
0.0472017340362072,
0.07610981911420822,
-0.10037059336900711,
-0.06983517110347748,
-0.031081510707736015,
0.09058204293251038,
-0.13752493262290955,
0.133365198969841,
0.039940569549798965,
-0.07565048336982727,
-0.10768267512321472,
0.17370717227458954,
0.038068611174821854,
0.12293653935194016,
0.10959416627883911,
-0.11323872953653336,
0.13528145849704742,
-0.07085561007261276,
0.019522424787282944,
-0.047569844871759415,
-0.1426057666540146,
-0.17385323345661163,
-0.20801863074302673,
-0.1311044692993164,
-0.09169991314411163,
0.021131819114089012,
-0.12189114838838577
# 45 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c5_weight);
# 43 "c_cnn/top.cpp"

# 54 "c_cnn/top.cpp"
 const data_t c1_bias[6]={

# 1 "c_cnn/param/conv1.bias.h" 1
-0.22433681786060333,
0.1557483971118927,
0.0994548574090004,
-0.009787130169570446,
-0.0848965272307396,
-0.13892722129821777
# 56 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c1_bias);
# 54 "c_cnn/top.cpp"

 const data_t c2_bias[16]={

# 1 "c_cnn/param/conv2.bias.h" 1
-0.15692934393882751,
-0.04568833112716675,
-0.04304107278585434,
-0.04001461714506149,
-0.10417811572551727,
0.00420110858976841,
-0.14050306379795074,
-0.1250005066394806,
-0.14576004445552826,
-0.13430629670619965,
-0.033515773713588715,
-0.03621969744563103,
-0.013981291092932224,
-0.10629429668188095,
-0.06412111967802048,
-0.0032533789053559303
# 59 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c2_bias);
# 57 "c_cnn/top.cpp"

 const data_t c3_bias[120]={

# 1 "c_cnn/param/conv3.bias.h" 1
0.04036170244216919,
-0.032980091869831085,
-0.004295690450817347,
-0.03915916010737419,
-0.04766996204853058,
-0.020352711901068687,
0.03459601476788521,
-0.03504807502031326,
0.06995665282011032,
0.035157084465026855,
-0.05692102760076523,
0.03994587063789368,
0.0009740182431414723,
-0.06011449545621872,
-0.0572836771607399,
-0.08106841892004013,
-0.02494862489402294,
-0.05185236781835556,
-0.07486645132303238,
-0.0011546496534720063,
-0.015071156434714794,
-0.07026910036802292,
-0.040596116334199905,
0.006284703034907579,
0.0112228374928236,
-0.0044377706944942474,
0.08328394591808319,
0.022496771067380905,
0.015419546514749527,
0.039716657251119614,
0.029831573367118835,
-0.045750632882118225,
0.02905609831213951,
-0.030374718829989433,
-0.06276078522205353,
0.02370070479810238,
0.07130207121372223,
0.05637741461396217,
-0.08491344004869461,
-0.02218383364379406,
-0.02089456468820572,
0.03872140124440193,
0.04235849902033806,
0.01664309948682785,
0.0231852438300848,
-0.024270890280604362,
-0.07982440292835236,
0.02951980009675026,
0.0009130629478022456,
0.03635895997285843,
0.0023355495650321245,
-0.018643101677298546,
0.03280041739344597,
0.017564035952091217,
-0.0611397959291935,
-0.0455913320183754,
-0.062353089451789856,
0.07036460191011429,
0.04112799093127251,
-0.050206370651721954,
-0.03375674784183502,
0.028988322243094444,
-0.038729116320610046,
0.0007596079958602786,
-0.0047835675068199635,
-0.007870208472013474,
0.10150492936372757,
-0.009928892366588116,
-0.07432534545660019,
0.01627006195485592,
-0.007336854003369808,
-0.04374479502439499,
0.028441492468118668,
0.08311323076486588,
0.03287963941693306,
0.013970283791422844,
0.04969899728894234,
0.05789269506931305,
-0.041525986045598984,
0.0451216846704483,
0.002731609856709838,
-0.047930099070072174,
-0.02039429359138012,
0.043307192623615265,
0.012228785082697868,
0.053620729595422745,
0.010448545217514038,
0.05283602699637413,
0.020407769829034805,
0.0134350610896945,
-0.01613682508468628,
0.0016251261113211513,
0.03569072484970093,
-0.05530884489417076,
0.035926010459661484,
-0.03342265263199806,
-0.01606539823114872,
-0.0714225023984909,
-0.0070128245279192924,
-0.004015898797661066,
-0.006500501185655594,
0.04392498359084129,
-0.010717297904193401,
-0.07636788487434387,
-0.015945104882121086,
-0.01108487881720066,
0.020760398358106613,
0.04176308214664459,
-0.03867415711283684,
0.03625032305717468,
-0.04577396810054779,
-0.05201178789138794,
0.01583881862461567,
-0.014817163348197937,
-0.03641710802912712,
0.013117911294102669,
-0.021020855754613876,
-0.00984239298850298,
0.034318048506975174,
-0.03656681254506111
# 62 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c3_bias);
# 60 "c_cnn/top.cpp"

 const data_t c4_bias[84]={

# 1 "c_cnn/param/fc1.bias.h" 1
0.07052642852067947,
0.03806121274828911,
-0.06836605072021484,
0.07551892846822739,
-0.07567068189382553,
-0.03642521798610687,
-0.03313283249735832,
0.019421225413680077,
-0.0945872813463211,
0.025195062160491943,
-0.0005334296729415655,
-0.029649950563907623,
-0.0035588531754910946,
0.09029914438724518,
0.01801598258316517,
0.0015800391556695104,
-0.04857122525572777,
-0.03289338946342468,
-0.017861532047390938,
-0.004785498604178429,
0.05878704413771629,
0.1312432885169983,
0.02195814624428749,
-0.02262367494404316,
0.044262710958719254,
0.005216152872890234,
0.03306654095649719,
0.04774048924446106,
-0.05752525478601456,
-0.05998219549655914,
0.03290921822190285,
0.013697407208383083,
-0.031326647847890854,
-0.013552128337323666,
-0.0077058603055775166,
-0.012709585949778557,
-0.0356588251888752,
0.023964308202266693,
-0.03557936102151871,
-0.031746577471494675,
-0.019622191786766052,
-0.029319923371076584,
-0.03626282140612602,
0.018954824656248093,
0.06225716695189476,
-0.08372415602207184,
-0.038088109344244,
-0.07946047186851501,
0.028035912662744522,
0.05652101710438728,
0.0011401179945096374,
-0.02263939380645752,
0.036946188658475876,
-0.050357215106487274,
-0.10341310501098633,
-0.02177773416042328,
0.017849354073405266,
-0.04251675307750702,
0.03613622486591339,
0.009675372391939163,
-0.06187259778380394,
-0.058585137128829956,
-0.04664771631360054,
0.05471804365515709,
-0.022021114826202393,
0.006415151990950108,
-0.047383565455675125,
0.018958700820803642,
0.06315945833921432,
-0.002801487222313881,
-0.04096221178770065,
-0.05738382413983345,
0.06615399569272995,
-0.06284373998641968,
-0.050236668437719345,
-0.0473967082798481,
0.007214192766696215,
0.032637905329465866,
-0.0012842066353186965,
0.025969233363866806,
0.07594101876020432,
0.026114698499441147,
0.04400641471147537,
0.03943698853254318
# 65 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c4_bias);
# 63 "c_cnn/top.cpp"

 const data_t c5_bias[10]={

# 1 "c_cnn/param/fc2.bias.h" 1
0.01594187505543232,
0.015339134261012077,
-0.06505493074655533,
-0.10399392247200012,
0.03999228775501251,
-0.03378674387931824,
-0.04007761925458908,
-0.010524222627282143,
0.07450241595506668,
0.07871648669242859
# 68 "c_cnn/top.cpp" 2
 };
_ssdm_SpecConstant(c5_bias);
# 66 "c_cnn/top.cpp"

# 77 "c_cnn/top.cpp"
 conv(in, c1_weight, c1_bias, c1_output, CONV1_WIN, CONV1_WIN, CONV1_CHIN, CONV1_CHOUT, CONV1_SIZE, CONV1_SIZE, S, C1_P);
 max_pool_2D(c1_output, p1_output, MAXP1_CHIN, MAXP1_WIN, MAXP1_HIN);

 conv(p1_output, c2_weight, c2_bias, c2_output, CONV2_WIN, CONV2_WIN, CONV2_CHIN, CONV2_CHOUT, CONV2_SIZE, CONV2_SIZE, S, C2_P);
 max_pool_2D(c2_output, p2_output,MAXP2_CHIN, MAXP2_WIN, MAXP2_HIN);

 conv(p2_output, c3_weight, c3_bias, c3_output, CONV3_WIN, CONV3_WIN, CONV3_CHIN, CONV3_CHOUT, CONV3_SIZE, CONV3_SIZE, S, C3_P);

 conv(c3_output, c4_weight, c4_bias, c4_output, FC_CONV_SIZE, FC_CONV_SIZE, FC1_CHIN, FC1_CHOUT, FC_CONV_SIZE, FC_CONV_SIZE, S, FC_P);
 conv(c4_output, c5_weight, c5_bias, c5_output, FC_CONV_SIZE, FC_CONV_SIZE, FC2_CHIN, FC2_CHOUT, FC_CONV_SIZE, FC_CONV_SIZE, S, FC_P);
 result = find_index(c5_output, FC2_CHOUT);

}
