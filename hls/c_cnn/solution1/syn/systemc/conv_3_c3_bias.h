// ==============================================================
// File generated on Mon May 13 18:06:56 +0800 2024
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_3_c3_bias_H__
#define __conv_3_c3_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_3_c3_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_3_c3_bias_ram) {
        ram[0] = "0b00111101001001010101001001010000";
        ram[1] = "0b10111101000001110001011000100010";
        ram[2] = "0b10111011100011001100001011011101";
        ram[3] = "0b10111101001000000110010101011011";
        ram[4] = "0b10111101010000110100000110010100";
        ram[5] = "0b10111100101001101011101010111011";
        ram[6] = "0b00111101000011011011010010001101";
        ram[7] = "0b10111101000011111000111010010010";
        ram[8] = "0b00111101100011110100010101101111";
        ram[9] = "0b00111101000100000000000011100000";
        ram[10] = "0b10111101011010010010011000000110";
        ram[11] = "0b00111101001000111001111001001000";
        ram[12] = "0b00111010011111110101010101000010";
        ram[13] = "0b10111101011101100011101010011110";
        ram[14] = "0b10111101011010101010001001001010";
        ram[15] = "0b10111101101001100000011100110011";
        ram[16] = "0b10111100110011000110000100001111";
        ram[17] = "0b10111101010101000110001100100110";
        ram[18] = "0b10111101100110010101001110010101";
        ram[19] = "0b10111010100101110101011110011101";
        ram[20] = "0b10111100011101101110110100000011";
        ram[21] = "0b10111101100011111110100100111111";
        ram[22] = "0b10111101001001100100100000011101";
        ram[23] = "0b00111011110011011110111111101001";
        ram[24] = "0b00111100001101111101111111111110";
        ram[25] = "0b10111011100100010110101010111000";
        ram[26] = "0b00111101101010101001000011000110";
        ram[27] = "0b00111100101110000100101100100110";
        ram[28] = "0b00111100011111001010001001000100";
        ram[29] = "0b00111101001000101010110111101111";
        ram[30] = "0b00111100111101000110000101011000";
        ram[31] = "0b10111101001110110110010100000100";
        ram[32] = "0b00111100111011100000011100001110";
        ram[33] = "0b10111100111110001101010001100111";
        ram[34] = "0b10111101100000001000100010111010";
        ram[35] = "0b00111100110000100010011111111011";
        ram[36] = "0b00111101100100100000011011010010";
        ram[37] = "0b00111101011001101110110000000001";
        ram[38] = "0b10111101101011011110011100011001";
        ram[39] = "0b10111100101101011011101011011111";
        ram[40] = "0b10111100101010110010101100010100";
        ram[41] = "0b00111101000111101001101001010101";
        ram[42] = "0b00111101001011011000000000011011";
        ram[43] = "0b00111100100010000101011100011100";
        ram[44] = "0b00111100101111011110111011111011";
        ram[45] = "0b10111100110001101101001110111111";
        ram[46] = "0b10111101101000110111101011111010";
        ram[47] = "0b00111100111100011101001110000010";
        ram[48] = "0b00111010011011110101101010011110";
        ram[49] = "0b00111101000101001110110100100010";
        ram[50] = "0b00111011000110010001000000000101";
        ram[51] = "0b10111100100110001011100101101011";
        ram[52] = "0b00111101000001100101100110111011";
        ram[53] = "0b00111100100011111110001001110100";
        ram[54] = "0b10111101011110100110110110111001";
        ram[55] = "0b10111101001110101011110111111010";
        ram[56] = "0b10111101011111110110010111110100";
        ram[57] = "0b00111101100100000001101101010001";
        ram[58] = "0b00111101001010000111010111010011";
        ram[59] = "0b10111101010011011010010100110010";
        ram[60] = "0b10111101000010100100010010000100";
        ram[61] = "0b00111100111011010111100011101011";
        ram[62] = "0b10111101000111101010001001101100";
        ram[63] = "0b00111010010001110010000001101110";
        ram[64] = "0b10111011100111001011111101111001";
        ram[65] = "0b10111100000000001111001000001100";
        ram[66] = "0b00111101110011111110000111010001";
        ram[67] = "0b10111100001000101010110011001011";
        ram[68] = "0b10111101100110000011011111100011";
        ram[69] = "0b00111100100001010100100011001011";
        ram[70] = "0b10111011111100000110100111111110";
        ram[71] = "0b10111101001100110010110110111110";
        ram[72] = "0b00111100111010001111111000100010";
        ram[73] = "0b00111101101010100011011101000101";
        ram[74] = "0b00111101000001101010110011001101";
        ram[75] = "0b00111100011001001110001110011110";
        ram[76] = "0b00111101010010111001000100101101";
        ram[77] = "0b00111101011011010010000011100100";
        ram[78] = "0b10111101001010100001011100100111";
        ram[79] = "0b00111101001110001101000110000100";
        ram[80] = "0b00111011001100110000010011001111";
        ram[81] = "0b10111101010001000101001001011010";
        ram[82] = "0b10111100101001110001000111101111";
        ram[83] = "0b00111101001100010110001011100010";
        ram[84] = "0b00111100010010000101101100111110";
        ram[85] = "0b00111101010110111010000101101001";
        ram[86] = "0b00111100001010110011000001100000";
        ram[87] = "0b00111101010110000110101010010111";
        ram[88] = "0b00111100101001110010111000110010";
        ram[89] = "0b00111100010111000001111010111011";
        ram[90] = "0b10111100100001000011000101100000";
        ram[91] = "0b00111010110101010000001000101111";
        ram[92] = "0b00111101000100100011000001110000";
        ram[93] = "0b10111101011000101000101110000111";
        ram[94] = "0b00111101000100110010011100100111";
        ram[95] = "0b10111101000010001110011000110001";
        ram[96] = "0b10111100100000111001101110010101";
        ram[97] = "0b10111101100100100100010111110110";
        ram[98] = "0b10111011111001011100101111010110";
        ram[99] = "0b10111011100000111001011111001101";
        ram[100] = "0b10111011110101010000001000101000";
        ram[101] = "0b00111101001100111110101010101111";
        ram[102] = "0b10111100001011111001011110011011";
        ram[103] = "0b10111101100111000110011011000100";
        ram[104] = "0b10111100100000101001111101001111";
        ram[105] = "0b10111100001101011001110101011010";
        ram[106] = "0b00111100101010100001000110110110";
        ram[107] = "0b00111101001010110000111111000100";
        ram[108] = "0b10111101000111100110100011001011";
        ram[109] = "0b00111101000101000111101100111000";
        ram[110] = "0b10111101001110110111110101111100";
        ram[111] = "0b10111101010101010000101001010000";
        ram[112] = "0b00111100100000011100000001101001";
        ram[113] = "0b10111100011100101100001110110000";
        ram[114] = "0b10111101000101010010101000011011";
        ram[115] = "0b00111100010101101110110010000010";
        ram[116] = "0b10111100101011000011001111101110";
        ram[117] = "0b10111100001000010100000111111101";
        ram[118] = "0b00111101000011001001000100010101";
        ram[119] = "0b10111101000101011100011100010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_3_c3_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_3_c3_bias_ram* meminst;


SC_CTOR(conv_3_c3_bias) {
meminst = new conv_3_c3_bias_ram("conv_3_c3_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_3_c3_bias() {
    delete meminst;
}


};//endmodule
#endif
