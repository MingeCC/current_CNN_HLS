// ==============================================================
// File generated on Mon May 13 18:06:56 +0800 2024
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_4_c4_bias_H__
#define __conv_4_c4_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_4_c4_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_4_c4_bias_ram) {
        ram[0] = "0b00111101100100000111000000101001";
        ram[1] = "0b00111101000110111110011000010011";
        ram[2] = "0b10111101100011000000001110000000";
        ram[3] = "0b00111101100110101010100110101011";
        ram[4] = "0b10111101100110101111100100111011";
        ram[5] = "0b10111101000101010011001010011100";
        ram[6] = "0b10111101000001111011011001001011";
        ram[7] = "0b00111100100111110001100101000011";
        ram[8] = "0b10111101110000011011011011111010";
        ram[9] = "0b00111100110011100110010111100000";
        ram[10] = "0b10111010000010111101010111011100";
        ram[11] = "0b10111100111100101110010001110100";
        ram[12] = "0b10111011011010010011101110100110";
        ram[13] = "0b00111101101110001110111011000010";
        ram[14] = "0b00111100100100111001011001000001";
        ram[15] = "0b00111010110011110001100101010001";
        ram[16] = "0b10111101010001101111001010011111";
        ram[17] = "0b10111101000001101011101100111000";
        ram[18] = "0b10111100100100100101001001011001";
        ram[19] = "0b10111011100111001100111110101100";
        ram[20] = "0b00111101011100001100101010101111";
        ram[21] = "0b00111110000001100110010010100100";
        ram[22] = "0b00111100101100111110000110010010";
        ram[23] = "0b10111100101110010101010101001001";
        ram[24] = "0b00111101001101010100110011010001";
        ram[25] = "0b00111011101010101110110001000011";
        ram[26] = "0b00111101000001110111000011001000";
        ram[27] = "0b00111101010000111000101110001000";
        ram[28] = "0b10111101011010111001111110011010";
        ram[29] = "0b10111101011101011010111111100100";
        ram[30] = "0b00111101000001101100101111010001";
        ram[31] = "0b00111100011000000110101100010111";
        ram[32] = "0b10111101000000000101000001011111";
        ram[33] = "0b10111100010111100000100110111111";
        ram[34] = "0b10111011111111001000000101110001";
        ram[35] = "0b10111100010100000011101111011110";
        ram[36] = "0b10111101000100100000111011111101";
        ram[37] = "0b00111100110001000101000011001100";
        ram[38] = "0b10111101000100011011101110101010";
        ram[39] = "0b10111101000000100000100010110011";
        ram[40] = "0b10111100101000001011111010111000";
        ram[41] = "0b10111100111100000011000001010110";
        ram[42] = "0b10111101000101001000100001010011";
        ram[43] = "0b00111100100110110100011100100110";
        ram[44] = "0b00111101011111110000000101011111";
        ram[45] = "0b10111101101010110111011110010010";
        ram[46] = "0b10111101000111000000001001000111";
        ram[47] = "0b10111101101000101011110000101100";
        ram[48] = "0b00111100111001011010101110010010";
        ram[49] = "0b00111101011001111000001010010101";
        ram[50] = "0b00111010100101010111000000000011";
        ram[51] = "0b10111100101110010111011001000000";
        ram[52] = "0b00111101000101110101010011100011";
        ram[53] = "0b10111101010011100100001101011110";
        ram[54] = "0b10111101110100111100101001000000";
        ram[55] = "0b10111100101100100110011100111000";
        ram[56] = "0b00111100100100100011100011001111";
        ram[57] = "0b10111101001011100010011000001100";
        ram[58] = "0b00111101000101000000001110010100";
        ram[59] = "0b00111100000111101000010101110100";
        ram[60] = "0b10111101011111010110111000011111";
        ram[61] = "0b10111101011011111111011011111000";
        ram[62] = "0b10111101001111110001000110101101";
        ram[63] = "0b00111101011000000010000000000111";
        ram[64] = "0b10111100101101000110010110100000";
        ram[65] = "0b00111011110100100011011000110010";
        ram[66] = "0b10111101010000100001010101000101";
        ram[67] = "0b00111100100110110100111101000111";
        ram[68] = "0b00111101100000010101100110111111";
        ram[69] = "0b10111011001101111001100100101000";
        ram[70] = "0b10111101001001111100011111111110";
        ram[71] = "0b10111101011010110000101101001101";
        ram[72] = "0b00111101100001110111101110111111";
        ram[73] = "0b10111101100000001011010000111000";
        ram[74] = "0b10111101010011011100010011110111";
        ram[75] = "0b10111101010000100010001100001101";
        ram[76] = "0b00111011111011000110010100001001";
        ram[77] = "0b00111101000001011010111101010011";
        ram[78] = "0b10111010101010000101001011010011";
        ram[79] = "0b00111100110101001011110101101110";
        ram[80] = "0b00111101100110111000011011110111";
        ram[81] = "0b00111100110101011110111001111110";
        ram[82] = "0b00111101001101000100000000010010";
        ram[83] = "0b00111101001000011000100010101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_4_c4_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_4_c4_bias_ram* meminst;


SC_CTOR(conv_4_c4_bias) {
meminst = new conv_4_c4_bias_ram("conv_4_c4_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_4_c4_bias() {
    delete meminst;
}


};//endmodule
#endif
