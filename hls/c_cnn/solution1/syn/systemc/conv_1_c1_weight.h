// ==============================================================
// File generated on Mon May 13 18:06:53 +0800 2024
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_1_c1_weight_H__
#define __conv_1_c1_weight_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_1_c1_weight_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 150;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_1_c1_weight_ram) {
        ram[0] = "0b00111011110100100011110001110011";
        ram[1] = "0b10111110001111011001011110000010";
        ram[2] = "0b10111110010100101101100011100110";
        ram[3] = "0b10111110000011101100111000011010";
        ram[4] = "0b10111110000010101110110010101011";
        ram[5] = "0b00111100111010001001101001011001";
        ram[6] = "0b00111101110010001011111001001001";
        ram[7] = "0b10111110000110001000110101010110";
        ram[8] = "0b10111110011101100101000100010101";
        ram[9] = "0b10111101100110011111110101010000";
        ram[10] = "0b10111101100101110001100101100100";
        ram[11] = "0b10111101100101000010011010111100";
        ram[12] = "0b00111101001110100111111101011111";
        ram[13] = "0b10111110000101110110101011000011";
        ram[14] = "0b10111100110001100100011100011000";
        ram[15] = "0b10111101101100010011100011001100";
        ram[16] = "0b00111101010110011101111000001111";
        ram[17] = "0b00111110010101111000101111100010";
        ram[18] = "0b00111101011001000001110101011101";
        ram[19] = "0b00111101011100010111011110100110";
        ram[20] = "0b00111110100000011001101111111011";
        ram[21] = "0b00111101000100001101101001111111";
        ram[22] = "0b00111110001001010011110000100011";
        ram[23] = "0b00111110101001100001101110001101";
        ram[24] = "0b00111110000111100000010110010011";
        ram[25] = "0b00111101000000001010100101110110";
        ram[26] = "0b10111101101011000000010100010011";
        ram[27] = "0b00111101110010111111010100010011";
        ram[28] = "0b10111101010010101101010000101000";
        ram[29] = "0b00111100101010100001100100000101";
        ram[30] = "0b10111110000010000101100111000110";
        ram[31] = "0b10111101010111101010000001111011";
        ram[32] = "0b10111110001010100011011101100111";
        ram[33] = "0b10111101000110101110110100010000";
        ram[34] = "0b00111110010010111111110011111111";
        ram[35] = "0b10111110001000101010100100100000";
        ram[36] = "0b10111101000001111001000010100010";
        ram[37] = "0b10111110010111101101000010100101";
        ram[38] = "0b10111110010000110110101110001100";
        ram[39] = "0b00111110011010100000001011011100";
        ram[40] = "0b10111110000010101000010000010100";
        ram[41] = "0b10111101001110101011100000101101";
        ram[42] = "0b10111110010000010101000111011011";
        ram[43] = "0b10111101000110001010001101101000";
        ram[44] = "0b00111110101000001111000000011001";
        ram[45] = "0b00111100101110011110011100100001";
        ram[46] = "0b10111110000010101110010010111010";
        ram[47] = "0b10111101000101111000011000101101";
        ram[48] = "0b00111110001001101010010011010101";
        ram[49] = "0b00111110100010010110011001100000";
        ram[50] = "0b00111110000011011100001010101010";
        ram[51] = "0b10111101101011010010001001001010";
        ram[52] = "0b00111101111011001111010010111100";
        ram[53] = "0b10111101111000011110101000101000";
        ram[54] = "0b10111100111010001011100001011101";
        ram[55] = "0b10111101101000100100111000110100";
        ram[56] = "0b00111110100101110000001011011100";
        ram[57] = "0b00111110001001111110011001101000";
        ram[58] = "0b10111110101000010110000010001011";
        ram[59] = "0b10111110100100100011101100001000";
        ram[60] = "0b00111101010100100011110100100001";
        ram[61] = "0b00111101101001001100011100010100";
        ram[62] = "0b00111110101110101111011010111011";
        ram[63] = "0b00111101011100101010000111101010";
        ram[64] = "0b10111110101010001001101001011111";
        ram[65] = "0b10111110001100110100111110100000";
        ram[66] = "0b00111101010110000010111011111001";
        ram[67] = "0b00111101111001100111100111110001";
        ram[68] = "0b00111110100001101100100101000111";
        ram[69] = "0b10111110010110001100001011000001";
        ram[70] = "0b00111101001000010111101011111000";
        ram[71] = "0b10111110000010110111001001011010";
        ram[72] = "0b00111110001100010101010110001010";
        ram[73] = "0b00111110100100100010010110011000";
        ram[74] = "0b00111110010000000111111101010101";
        ram[75] = "0b00111110010001101101100011100000";
        ram[76] = "0b10111101000000000100000011000101";
        ram[77] = "0b00111101110110110101110010110111";
        ram[78] = "0b10111110010011000000110001000100";
        ram[79] = "0b00111100010110000010001101001101";
        ram[80] = "0b10111100111101010011001000011101";
        ram[81] = "0b00111110001000011111001011011100";
        ram[82] = "0b00111101101111111010111000111010";
        ram[83] = "0b00111110101000101000101110111000";
        ram[84] = "0b10111101001001111000010001010100";
        ram[85] = "0b00111101111111110101111100010110";
        ram[86] = "0b00111110010011110111110010101001";
        ram[87] = "0b00111110101001100110011010000111";
        ram[88] = "0b00111110011111011011000110000000";
        ram[89] = "0b00111110011100110111010111101000";
        ram[90] = "0b10111101100110010110011110000010";
        ram[91] = "0b10111110001101110010000000101100";
        ram[92] = "0b10111101011001100001101111000111";
        ram[93] = "0b10111101111100000011101110010110";
        ram[94] = "0b00111101101111000001111111011101";
        ram[95] = "0b10111110101010100110011011101010";
        ram[96] = "0b10111110100100100101000101100011";
        ram[97] = "0b10111110100101001100111111111101";
        ram[98] = "0b10111110010100011100101100000100";
        ram[99] = "0b00111101010111110001100001111010";
        ram[100] = "0b00111101100011010011111101010100";
        ram[101] = "0b00111100101011001000111011011010";
        ram[102] = "0b10111101011110011101100010101110";
        ram[103] = "0b10111100101101011110111111010111";
        ram[104] = "0b00111110000100110001101001101111";
        ram[105] = "0b10111110100100010010100100111010";
        ram[106] = "0b10111110100100001001010100010010";
        ram[107] = "0b10111110011111001000000111101000";
        ram[108] = "0b00111101101110001011010101000101";
        ram[109] = "0b00111110001010000111101101010011";
        ram[110] = "0b10111101111010101101000101101011";
        ram[111] = "0b00111101101011101111000110101110";
        ram[112] = "0b00111110010000000100000111101101";
        ram[113] = "0b00111101000010001011101101000100";
        ram[114] = "0b10111101101011000001010110101110";
        ram[115] = "0b00111110100100000001110100011001";
        ram[116] = "0b00111110000111101100111001110010";
        ram[117] = "0b00111110010011101111111100000010";
        ram[118] = "0b10111101001111100010011100111001";
        ram[119] = "0b10111100010000111000101011110001";
        ram[120] = "0b00111100111001001000011000100010";
        ram[121] = "0b00111101001011101111100100011100";
        ram[122] = "0b10111110001010001010010111011111";
        ram[123] = "0b10111110001101100010111000110100";
        ram[124] = "0b00111101100100010001011000101111";
        ram[125] = "0b10111101011000101010011100000011";
        ram[126] = "0b00111110010000011111000000011011";
        ram[127] = "0b00111110011101011101001000001111";
        ram[128] = "0b00111110010101000100001110110101";
        ram[129] = "0b10111101000101000011101110110011";
        ram[130] = "0b00111110001001100101111010001010";
        ram[131] = "0b00111101110001000100101010010111";
        ram[132] = "0b00111110001110101111001010011010";
        ram[133] = "0b10111101000100111000000100000111";
        ram[134] = "0b10111100111101010100011110101100";
        ram[135] = "0b00111100011110100010100101111000";
        ram[136] = "0b00111110011011100000111111110101";
        ram[137] = "0b00111110001000001110101001110000";
        ram[138] = "0b10111110001111010001000000001010";
        ram[139] = "0b10111110011101001000001011000110";
        ram[140] = "0b00111110010110100000011110000101";
        ram[141] = "0b10111101010110110011111110000010";
        ram[142] = "0b00111100101111111110111011101011";
        ram[143] = "0b10111101100101101001110100001010";
        ram[144] = "0b10111101010001101000010100000000";
        ram[145] = "0b10111101000011110101101010011101";
        ram[146] = "0b00111101011110100011011000011011";
        ram[147] = "0b00111011110101110001001001110100";
        ram[148] = "0b10111101100011001111001010101010";
        ram[149] = "0b10111110100011010110011001001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_1_c1_weight) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 150;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_1_c1_weight_ram* meminst;


SC_CTOR(conv_1_c1_weight) {
meminst = new conv_1_c1_weight_ram("conv_1_c1_weight_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_1_c1_weight() {
    delete meminst;
}


};//endmodule
#endif
