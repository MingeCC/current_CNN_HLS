// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_net,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=43.750000,HLS_SYN_LAT=486577,HLS_SYN_TPT=none,HLS_SYN_MEM=202,HLS_SYN_DSP=25,HLS_SYN_FF=4454,HLS_SYN_LUT=10638,HLS_VERSION=2018_3}" *)

module top_net (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_r;
wire   [31:0] result;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond_i_fu_317_p2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state19;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state24;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [29:0] result3_reg_349;
reg   [29:0] in1_reg_354;
wire    ap_CS_fsm_state15;
reg   [31:0] gmem_addr_reg_364;
wire    ap_CS_fsm_state16;
wire   [31:0] c5_output_q0;
wire   [31:0] max_index_cast1_fu_313_p1;
reg   [31:0] max_index_cast1_reg_375;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_state17_io;
wire   [3:0] i_fu_328_p2;
reg   [3:0] i_reg_388;
wire   [31:0] max_index_1_fu_334_p3;
wire    ap_CS_fsm_state18;
wire   [31:0] max_value_2_fu_341_p3;
reg   [12:0] c1_output_address0;
reg    c1_output_ce0;
reg    c1_output_we0;
wire   [31:0] c1_output_q0;
reg    c1_output_ce1;
wire   [31:0] c1_output_q1;
reg   [10:0] p1_output_address0;
reg    p1_output_ce0;
reg    p1_output_we0;
wire   [31:0] p1_output_q0;
reg   [10:0] c2_output_address0;
reg    c2_output_ce0;
reg    c2_output_we0;
wire   [31:0] c2_output_q0;
reg    c2_output_ce1;
wire   [31:0] c2_output_q1;
reg   [8:0] p2_output_address0;
reg    p2_output_ce0;
reg    p2_output_we0;
wire   [31:0] p2_output_q0;
reg   [6:0] c3_output_address0;
reg    c3_output_ce0;
reg    c3_output_we0;
wire   [31:0] c3_output_q0;
reg   [6:0] c4_output_address0;
reg    c4_output_ce0;
reg    c4_output_we0;
wire   [31:0] c4_output_q0;
reg   [3:0] c5_output_address0;
reg    c5_output_ce0;
reg    c5_output_we0;
wire    grp_conv_1_fu_212_ap_start;
wire    grp_conv_1_fu_212_ap_done;
wire    grp_conv_1_fu_212_ap_idle;
wire    grp_conv_1_fu_212_ap_ready;
wire    grp_conv_1_fu_212_m_axi_in_r_AWVALID;
wire   [31:0] grp_conv_1_fu_212_m_axi_in_r_AWADDR;
wire   [0:0] grp_conv_1_fu_212_m_axi_in_r_AWID;
wire   [31:0] grp_conv_1_fu_212_m_axi_in_r_AWLEN;
wire   [2:0] grp_conv_1_fu_212_m_axi_in_r_AWSIZE;
wire   [1:0] grp_conv_1_fu_212_m_axi_in_r_AWBURST;
wire   [1:0] grp_conv_1_fu_212_m_axi_in_r_AWLOCK;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_AWCACHE;
wire   [2:0] grp_conv_1_fu_212_m_axi_in_r_AWPROT;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_AWQOS;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_AWREGION;
wire   [0:0] grp_conv_1_fu_212_m_axi_in_r_AWUSER;
wire    grp_conv_1_fu_212_m_axi_in_r_WVALID;
wire   [31:0] grp_conv_1_fu_212_m_axi_in_r_WDATA;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_WSTRB;
wire    grp_conv_1_fu_212_m_axi_in_r_WLAST;
wire   [0:0] grp_conv_1_fu_212_m_axi_in_r_WID;
wire   [0:0] grp_conv_1_fu_212_m_axi_in_r_WUSER;
wire    grp_conv_1_fu_212_m_axi_in_r_ARVALID;
wire   [31:0] grp_conv_1_fu_212_m_axi_in_r_ARADDR;
wire   [0:0] grp_conv_1_fu_212_m_axi_in_r_ARID;
wire   [31:0] grp_conv_1_fu_212_m_axi_in_r_ARLEN;
wire   [2:0] grp_conv_1_fu_212_m_axi_in_r_ARSIZE;
wire   [1:0] grp_conv_1_fu_212_m_axi_in_r_ARBURST;
wire   [1:0] grp_conv_1_fu_212_m_axi_in_r_ARLOCK;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_ARCACHE;
wire   [2:0] grp_conv_1_fu_212_m_axi_in_r_ARPROT;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_ARQOS;
wire   [3:0] grp_conv_1_fu_212_m_axi_in_r_ARREGION;
wire   [0:0] grp_conv_1_fu_212_m_axi_in_r_ARUSER;
wire    grp_conv_1_fu_212_m_axi_in_r_RREADY;
wire    grp_conv_1_fu_212_m_axi_in_r_BREADY;
wire   [12:0] grp_conv_1_fu_212_output_r_address0;
wire    grp_conv_1_fu_212_output_r_ce0;
wire    grp_conv_1_fu_212_output_r_we0;
wire   [31:0] grp_conv_1_fu_212_output_r_d0;
wire    grp_conv_2_fu_225_ap_start;
wire    grp_conv_2_fu_225_ap_done;
wire    grp_conv_2_fu_225_ap_idle;
wire    grp_conv_2_fu_225_ap_ready;
wire   [10:0] grp_conv_2_fu_225_in_r_address0;
wire    grp_conv_2_fu_225_in_r_ce0;
wire   [10:0] grp_conv_2_fu_225_output_r_address0;
wire    grp_conv_2_fu_225_output_r_ce0;
wire    grp_conv_2_fu_225_output_r_we0;
wire   [31:0] grp_conv_2_fu_225_output_r_d0;
wire    grp_conv_3_fu_235_ap_start;
wire    grp_conv_3_fu_235_ap_done;
wire    grp_conv_3_fu_235_ap_idle;
wire    grp_conv_3_fu_235_ap_ready;
wire   [8:0] grp_conv_3_fu_235_in_r_address0;
wire    grp_conv_3_fu_235_in_r_ce0;
wire   [6:0] grp_conv_3_fu_235_output_r_address0;
wire    grp_conv_3_fu_235_output_r_ce0;
wire    grp_conv_3_fu_235_output_r_we0;
wire   [31:0] grp_conv_3_fu_235_output_r_d0;
wire    grp_conv_4_fu_245_ap_start;
wire    grp_conv_4_fu_245_ap_done;
wire    grp_conv_4_fu_245_ap_idle;
wire    grp_conv_4_fu_245_ap_ready;
wire   [6:0] grp_conv_4_fu_245_in_r_address0;
wire    grp_conv_4_fu_245_in_r_ce0;
wire   [6:0] grp_conv_4_fu_245_output_r_address0;
wire    grp_conv_4_fu_245_output_r_ce0;
wire    grp_conv_4_fu_245_output_r_we0;
wire   [31:0] grp_conv_4_fu_245_output_r_d0;
wire    grp_conv_5_fu_255_ap_start;
wire    grp_conv_5_fu_255_ap_done;
wire    grp_conv_5_fu_255_ap_idle;
wire    grp_conv_5_fu_255_ap_ready;
wire   [6:0] grp_conv_5_fu_255_in_r_address0;
wire    grp_conv_5_fu_255_in_r_ce0;
wire   [3:0] grp_conv_5_fu_255_output_r_address0;
wire    grp_conv_5_fu_255_output_r_ce0;
wire    grp_conv_5_fu_255_output_r_we0;
wire   [31:0] grp_conv_5_fu_255_output_r_d0;
wire    grp_max_pool_2D_1_fu_265_ap_start;
wire    grp_max_pool_2D_1_fu_265_ap_done;
wire    grp_max_pool_2D_1_fu_265_ap_idle;
wire    grp_max_pool_2D_1_fu_265_ap_ready;
wire   [12:0] grp_max_pool_2D_1_fu_265_in_r_address0;
wire    grp_max_pool_2D_1_fu_265_in_r_ce0;
wire   [12:0] grp_max_pool_2D_1_fu_265_in_r_address1;
wire    grp_max_pool_2D_1_fu_265_in_r_ce1;
wire   [10:0] grp_max_pool_2D_1_fu_265_output_r_address0;
wire    grp_max_pool_2D_1_fu_265_output_r_ce0;
wire    grp_max_pool_2D_1_fu_265_output_r_we0;
wire   [31:0] grp_max_pool_2D_1_fu_265_output_r_d0;
wire    grp_max_pool_2D_fu_271_ap_start;
wire    grp_max_pool_2D_fu_271_ap_done;
wire    grp_max_pool_2D_fu_271_ap_idle;
wire    grp_max_pool_2D_fu_271_ap_ready;
wire   [10:0] grp_max_pool_2D_fu_271_in_r_address0;
wire    grp_max_pool_2D_fu_271_in_r_ce0;
wire   [10:0] grp_max_pool_2D_fu_271_in_r_address1;
wire    grp_max_pool_2D_fu_271_in_r_ce1;
wire   [8:0] grp_max_pool_2D_fu_271_output_r_address0;
wire    grp_max_pool_2D_fu_271_output_r_ce0;
wire    grp_max_pool_2D_fu_271_output_r_we0;
wire   [31:0] grp_max_pool_2D_fu_271_output_r_d0;
reg   [31:0] max_index_i_reg_178;
reg   [31:0] max_value1_i_reg_191;
reg   [3:0] max_index_reg_201;
reg    grp_conv_1_fu_212_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_conv_2_fu_225_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_conv_3_fu_235_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_conv_4_fu_245_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_conv_5_fu_255_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_max_pool_2D_1_fu_265_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_max_pool_2D_fu_271_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_i_fu_323_p1;
wire   [63:0] tmp_fu_304_p1;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire   [0:0] tmp_i_5_fu_277_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_conv_1_fu_212_ap_start_reg = 1'b0;
#0 grp_conv_2_fu_225_ap_start_reg = 1'b0;
#0 grp_conv_3_fu_235_ap_start_reg = 1'b0;
#0 grp_conv_4_fu_245_ap_start_reg = 1'b0;
#0 grp_conv_5_fu_255_ap_start_reg = 1'b0;
#0 grp_max_pool_2D_1_fu_265_ap_start_reg = 1'b0;
#0 grp_max_pool_2D_fu_271_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

top_net_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
top_net_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_r(in_r),
    .result(result)
);

top_net_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
top_net_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(grp_conv_1_fu_212_m_axi_in_r_ARADDR),
    .I_ARID(grp_conv_1_fu_212_m_axi_in_r_ARID),
    .I_ARLEN(grp_conv_1_fu_212_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_conv_1_fu_212_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_conv_1_fu_212_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_conv_1_fu_212_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_conv_1_fu_212_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_conv_1_fu_212_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_conv_1_fu_212_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_conv_1_fu_212_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_conv_1_fu_212_m_axi_in_r_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_364),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(max_index_i_reg_178),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

top_net_c1_output #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
c1_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c1_output_address0),
    .ce0(c1_output_ce0),
    .we0(c1_output_we0),
    .d0(grp_conv_1_fu_212_output_r_d0),
    .q0(c1_output_q0),
    .address1(grp_max_pool_2D_1_fu_265_in_r_address1),
    .ce1(c1_output_ce1),
    .q1(c1_output_q1)
);

top_net_p1_output #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
p1_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p1_output_address0),
    .ce0(p1_output_ce0),
    .we0(p1_output_we0),
    .d0(grp_max_pool_2D_1_fu_265_output_r_d0),
    .q0(p1_output_q0)
);

top_net_c2_output #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
c2_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c2_output_address0),
    .ce0(c2_output_ce0),
    .we0(c2_output_we0),
    .d0(grp_conv_2_fu_225_output_r_d0),
    .q0(c2_output_q0),
    .address1(grp_max_pool_2D_fu_271_in_r_address1),
    .ce1(c2_output_ce1),
    .q1(c2_output_q1)
);

top_net_p2_output #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
p2_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p2_output_address0),
    .ce0(p2_output_ce0),
    .we0(p2_output_we0),
    .d0(grp_max_pool_2D_fu_271_output_r_d0),
    .q0(p2_output_q0)
);

top_net_c3_output #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c3_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c3_output_address0),
    .ce0(c3_output_ce0),
    .we0(c3_output_we0),
    .d0(grp_conv_3_fu_235_output_r_d0),
    .q0(c3_output_q0)
);

top_net_c4_output #(
    .DataWidth( 32 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
c4_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c4_output_address0),
    .ce0(c4_output_ce0),
    .we0(c4_output_we0),
    .d0(grp_conv_4_fu_245_output_r_d0),
    .q0(c4_output_q0)
);

top_net_c5_output #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
c5_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_output_address0),
    .ce0(c5_output_ce0),
    .we0(c5_output_we0),
    .d0(grp_conv_5_fu_255_output_r_d0),
    .q0(c5_output_q0)
);

conv_1 grp_conv_1_fu_212(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_1_fu_212_ap_start),
    .ap_done(grp_conv_1_fu_212_ap_done),
    .ap_idle(grp_conv_1_fu_212_ap_idle),
    .ap_ready(grp_conv_1_fu_212_ap_ready),
    .m_axi_in_r_AWVALID(grp_conv_1_fu_212_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_conv_1_fu_212_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_conv_1_fu_212_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_conv_1_fu_212_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_conv_1_fu_212_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_conv_1_fu_212_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_conv_1_fu_212_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_conv_1_fu_212_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_conv_1_fu_212_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_conv_1_fu_212_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_conv_1_fu_212_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_conv_1_fu_212_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_conv_1_fu_212_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_conv_1_fu_212_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_conv_1_fu_212_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_conv_1_fu_212_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_conv_1_fu_212_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_conv_1_fu_212_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_conv_1_fu_212_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(gmem_ARREADY),
    .m_axi_in_r_ARADDR(grp_conv_1_fu_212_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_conv_1_fu_212_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_conv_1_fu_212_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_conv_1_fu_212_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_conv_1_fu_212_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_conv_1_fu_212_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_conv_1_fu_212_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_conv_1_fu_212_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_conv_1_fu_212_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_conv_1_fu_212_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_conv_1_fu_212_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(gmem_RVALID),
    .m_axi_in_r_RREADY(grp_conv_1_fu_212_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(gmem_RDATA),
    .m_axi_in_r_RLAST(gmem_RLAST),
    .m_axi_in_r_RID(gmem_RID),
    .m_axi_in_r_RUSER(gmem_RUSER),
    .m_axi_in_r_RRESP(gmem_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_conv_1_fu_212_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .in_offset(in1_reg_354),
    .output_r_address0(grp_conv_1_fu_212_output_r_address0),
    .output_r_ce0(grp_conv_1_fu_212_output_r_ce0),
    .output_r_we0(grp_conv_1_fu_212_output_r_we0),
    .output_r_d0(grp_conv_1_fu_212_output_r_d0)
);

conv_2 grp_conv_2_fu_225(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_2_fu_225_ap_start),
    .ap_done(grp_conv_2_fu_225_ap_done),
    .ap_idle(grp_conv_2_fu_225_ap_idle),
    .ap_ready(grp_conv_2_fu_225_ap_ready),
    .in_r_address0(grp_conv_2_fu_225_in_r_address0),
    .in_r_ce0(grp_conv_2_fu_225_in_r_ce0),
    .in_r_q0(p1_output_q0),
    .output_r_address0(grp_conv_2_fu_225_output_r_address0),
    .output_r_ce0(grp_conv_2_fu_225_output_r_ce0),
    .output_r_we0(grp_conv_2_fu_225_output_r_we0),
    .output_r_d0(grp_conv_2_fu_225_output_r_d0)
);

conv_3 grp_conv_3_fu_235(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_3_fu_235_ap_start),
    .ap_done(grp_conv_3_fu_235_ap_done),
    .ap_idle(grp_conv_3_fu_235_ap_idle),
    .ap_ready(grp_conv_3_fu_235_ap_ready),
    .in_r_address0(grp_conv_3_fu_235_in_r_address0),
    .in_r_ce0(grp_conv_3_fu_235_in_r_ce0),
    .in_r_q0(p2_output_q0),
    .output_r_address0(grp_conv_3_fu_235_output_r_address0),
    .output_r_ce0(grp_conv_3_fu_235_output_r_ce0),
    .output_r_we0(grp_conv_3_fu_235_output_r_we0),
    .output_r_d0(grp_conv_3_fu_235_output_r_d0)
);

conv_4 grp_conv_4_fu_245(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_4_fu_245_ap_start),
    .ap_done(grp_conv_4_fu_245_ap_done),
    .ap_idle(grp_conv_4_fu_245_ap_idle),
    .ap_ready(grp_conv_4_fu_245_ap_ready),
    .in_r_address0(grp_conv_4_fu_245_in_r_address0),
    .in_r_ce0(grp_conv_4_fu_245_in_r_ce0),
    .in_r_q0(c3_output_q0),
    .output_r_address0(grp_conv_4_fu_245_output_r_address0),
    .output_r_ce0(grp_conv_4_fu_245_output_r_ce0),
    .output_r_we0(grp_conv_4_fu_245_output_r_we0),
    .output_r_d0(grp_conv_4_fu_245_output_r_d0)
);

conv_5 grp_conv_5_fu_255(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_5_fu_255_ap_start),
    .ap_done(grp_conv_5_fu_255_ap_done),
    .ap_idle(grp_conv_5_fu_255_ap_idle),
    .ap_ready(grp_conv_5_fu_255_ap_ready),
    .in_r_address0(grp_conv_5_fu_255_in_r_address0),
    .in_r_ce0(grp_conv_5_fu_255_in_r_ce0),
    .in_r_q0(c4_output_q0),
    .output_r_address0(grp_conv_5_fu_255_output_r_address0),
    .output_r_ce0(grp_conv_5_fu_255_output_r_ce0),
    .output_r_we0(grp_conv_5_fu_255_output_r_we0),
    .output_r_d0(grp_conv_5_fu_255_output_r_d0)
);

max_pool_2D_1 grp_max_pool_2D_1_fu_265(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pool_2D_1_fu_265_ap_start),
    .ap_done(grp_max_pool_2D_1_fu_265_ap_done),
    .ap_idle(grp_max_pool_2D_1_fu_265_ap_idle),
    .ap_ready(grp_max_pool_2D_1_fu_265_ap_ready),
    .in_r_address0(grp_max_pool_2D_1_fu_265_in_r_address0),
    .in_r_ce0(grp_max_pool_2D_1_fu_265_in_r_ce0),
    .in_r_q0(c1_output_q0),
    .in_r_address1(grp_max_pool_2D_1_fu_265_in_r_address1),
    .in_r_ce1(grp_max_pool_2D_1_fu_265_in_r_ce1),
    .in_r_q1(c1_output_q1),
    .output_r_address0(grp_max_pool_2D_1_fu_265_output_r_address0),
    .output_r_ce0(grp_max_pool_2D_1_fu_265_output_r_ce0),
    .output_r_we0(grp_max_pool_2D_1_fu_265_output_r_we0),
    .output_r_d0(grp_max_pool_2D_1_fu_265_output_r_d0)
);

max_pool_2D grp_max_pool_2D_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pool_2D_fu_271_ap_start),
    .ap_done(grp_max_pool_2D_fu_271_ap_done),
    .ap_idle(grp_max_pool_2D_fu_271_ap_idle),
    .ap_ready(grp_max_pool_2D_fu_271_ap_ready),
    .in_r_address0(grp_max_pool_2D_fu_271_in_r_address0),
    .in_r_ce0(grp_max_pool_2D_fu_271_in_r_ce0),
    .in_r_q0(c2_output_q0),
    .in_r_address1(grp_max_pool_2D_fu_271_in_r_address1),
    .in_r_ce1(grp_max_pool_2D_fu_271_in_r_ce1),
    .in_r_q1(c2_output_q1),
    .output_r_address0(grp_max_pool_2D_fu_271_output_r_address0),
    .output_r_ce0(grp_max_pool_2D_fu_271_output_r_ce0),
    .output_r_we0(grp_max_pool_2D_fu_271_output_r_we0),
    .output_r_d0(grp_max_pool_2D_fu_271_output_r_d0)
);

top_net_fcmp_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
top_net_fcmp_32nsdEe_U41(
    .din0(c5_output_q0),
    .din1(max_value1_i_reg_191),
    .opcode(5'd2),
    .dout(tmp_i_5_fu_277_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) & (exitcond_i_fu_317_p2 == 1'd1))) begin
            if ((1'b0 == ap_block_state17_io)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_1_fu_212_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_conv_1_fu_212_ap_start_reg <= 1'b1;
        end else if ((grp_conv_1_fu_212_ap_ready == 1'b1)) begin
            grp_conv_1_fu_212_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_2_fu_225_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_conv_2_fu_225_ap_start_reg <= 1'b1;
        end else if ((grp_conv_2_fu_225_ap_ready == 1'b1)) begin
            grp_conv_2_fu_225_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_3_fu_235_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_conv_3_fu_235_ap_start_reg <= 1'b1;
        end else if ((grp_conv_3_fu_235_ap_ready == 1'b1)) begin
            grp_conv_3_fu_235_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_4_fu_245_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_conv_4_fu_245_ap_start_reg <= 1'b1;
        end else if ((grp_conv_4_fu_245_ap_ready == 1'b1)) begin
            grp_conv_4_fu_245_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_5_fu_255_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_conv_5_fu_255_ap_start_reg <= 1'b1;
        end else if ((grp_conv_5_fu_255_ap_ready == 1'b1)) begin
            grp_conv_5_fu_255_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pool_2D_1_fu_265_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_max_pool_2D_1_fu_265_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_2D_1_fu_265_ap_ready == 1'b1)) begin
            grp_max_pool_2D_1_fu_265_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pool_2D_fu_271_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_max_pool_2D_fu_271_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_2D_fu_271_ap_ready == 1'b1)) begin
            grp_max_pool_2D_fu_271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        max_index_i_reg_178 <= max_index_1_fu_334_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        max_index_i_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        max_index_reg_201 <= i_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        max_index_reg_201 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        max_value1_i_reg_191 <= max_value_2_fu_341_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        max_value1_i_reg_191 <= c5_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_reg_364[29 : 0] <= tmp_fu_304_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (exitcond_i_fu_317_p2 == 1'd0))) begin
        i_reg_388 <= i_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in1_reg_354 <= {{in_r[31:2]}};
        result3_reg_349 <= {{result[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
        max_index_cast1_reg_375[3 : 0] <= max_index_cast1_fu_313_p1[3 : 0];
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c1_output_address0 = grp_max_pool_2D_1_fu_265_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_output_address0 = grp_conv_1_fu_212_output_r_address0;
    end else begin
        c1_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c1_output_ce0 = grp_max_pool_2D_1_fu_265_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_output_ce0 = grp_conv_1_fu_212_output_r_ce0;
    end else begin
        c1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c1_output_ce1 = grp_max_pool_2D_1_fu_265_in_r_ce1;
    end else begin
        c1_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_output_we0 = grp_conv_1_fu_212_output_r_we0;
    end else begin
        c1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_output_address0 = grp_max_pool_2D_fu_271_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c2_output_address0 = grp_conv_2_fu_225_output_r_address0;
    end else begin
        c2_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_output_ce0 = grp_max_pool_2D_fu_271_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c2_output_ce0 = grp_conv_2_fu_225_output_r_ce0;
    end else begin
        c2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_output_ce1 = grp_max_pool_2D_fu_271_in_r_ce1;
    end else begin
        c2_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c2_output_we0 = grp_conv_2_fu_225_output_r_we0;
    end else begin
        c2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c3_output_address0 = grp_conv_4_fu_245_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c3_output_address0 = grp_conv_3_fu_235_output_r_address0;
    end else begin
        c3_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c3_output_ce0 = grp_conv_4_fu_245_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c3_output_ce0 = grp_conv_3_fu_235_output_r_ce0;
    end else begin
        c3_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c3_output_we0 = grp_conv_3_fu_235_output_r_we0;
    end else begin
        c3_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        c4_output_address0 = grp_conv_5_fu_255_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        c4_output_address0 = grp_conv_4_fu_245_output_r_address0;
    end else begin
        c4_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        c4_output_ce0 = grp_conv_5_fu_255_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        c4_output_ce0 = grp_conv_4_fu_245_output_r_ce0;
    end else begin
        c4_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c4_output_we0 = grp_conv_4_fu_245_output_r_we0;
    end else begin
        c4_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        c5_output_address0 = tmp_i_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        c5_output_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        c5_output_address0 = grp_conv_5_fu_255_output_r_address0;
    end else begin
        c5_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)))) begin
        c5_output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        c5_output_ce0 = grp_conv_5_fu_255_output_r_ce0;
    end else begin
        c5_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        c5_output_we0 = grp_conv_5_fu_255_output_r_we0;
    end else begin
        c5_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        gmem_ARVALID = grp_conv_1_fu_212_m_axi_in_r_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17) & (exitcond_i_fu_317_p2 == 1'd1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        gmem_RREADY = grp_conv_1_fu_212_m_axi_in_r_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (exitcond_i_fu_317_p2 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p1_output_address0 = grp_max_pool_2D_1_fu_265_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p1_output_address0 = grp_conv_2_fu_225_in_r_address0;
    end else begin
        p1_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p1_output_ce0 = grp_max_pool_2D_1_fu_265_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p1_output_ce0 = grp_conv_2_fu_225_in_r_ce0;
    end else begin
        p1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p1_output_we0 = grp_max_pool_2D_1_fu_265_output_r_we0;
    end else begin
        p1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p2_output_address0 = grp_max_pool_2D_fu_271_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p2_output_address0 = grp_conv_3_fu_235_in_r_address0;
    end else begin
        p2_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p2_output_ce0 = grp_max_pool_2D_fu_271_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p2_output_ce0 = grp_conv_3_fu_235_in_r_ce0;
    end else begin
        p2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p2_output_we0 = grp_max_pool_2D_fu_271_output_r_we0;
    end else begin
        p2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_conv_1_fu_212_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_max_pool_2D_1_fu_265_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_conv_2_fu_225_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_max_pool_2D_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_conv_3_fu_235_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_conv_4_fu_245_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_conv_5_fu_255_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (exitcond_i_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (exitcond_i_fu_317_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state19 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (exitcond_i_fu_317_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_i_fu_317_p2 = ((max_index_reg_201 == 4'd10) ? 1'b1 : 1'b0);

assign grp_conv_1_fu_212_ap_start = grp_conv_1_fu_212_ap_start_reg;

assign grp_conv_2_fu_225_ap_start = grp_conv_2_fu_225_ap_start_reg;

assign grp_conv_3_fu_235_ap_start = grp_conv_3_fu_235_ap_start_reg;

assign grp_conv_4_fu_245_ap_start = grp_conv_4_fu_245_ap_start_reg;

assign grp_conv_5_fu_255_ap_start = grp_conv_5_fu_255_ap_start_reg;

assign grp_max_pool_2D_1_fu_265_ap_start = grp_max_pool_2D_1_fu_265_ap_start_reg;

assign grp_max_pool_2D_fu_271_ap_start = grp_max_pool_2D_fu_271_ap_start_reg;

assign i_fu_328_p2 = (max_index_reg_201 + 4'd1);

assign max_index_1_fu_334_p3 = ((tmp_i_5_fu_277_p2[0:0] === 1'b1) ? max_index_cast1_reg_375 : max_index_i_reg_178);

assign max_index_cast1_fu_313_p1 = max_index_reg_201;

assign max_value_2_fu_341_p3 = ((tmp_i_5_fu_277_p2[0:0] === 1'b1) ? c5_output_q0 : max_value1_i_reg_191);

assign tmp_fu_304_p1 = result3_reg_349;

assign tmp_i_fu_323_p1 = max_index_reg_201;

always @ (posedge ap_clk) begin
    gmem_addr_reg_364[31:30] <= 2'b00;
    max_index_cast1_reg_375[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //top_net
