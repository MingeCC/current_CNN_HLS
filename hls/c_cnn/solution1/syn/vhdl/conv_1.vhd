-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c1_weight_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_weight_ce0 : STD_LOGIC;
    signal c1_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c1_bias_ce0 : STD_LOGIC;
    signal c1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten10_reg_1334 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal exitcond_flatten10_reg_1334_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten8_reg_243 : STD_LOGIC_VECTOR (4 downto 0);
    signal cin_reg_254 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_265 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_reg_276 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_buffer_2_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_cast_fu_334_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_1255 : STD_LOGIC_VECTOR (32 downto 0);
    signal indvar_flatten_next1_5_fu_410_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next1_5_reg_1263 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten9_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten9_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c1_bias_load_mid2_v_fu_474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal c1_bias_load_mid2_v_reg_1273 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_mid2_fu_551_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_1285 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_cast_mid2_fu_563_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_cast_mid2_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_46_mid2_fu_603_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_mid2_reg_1298 : STD_LOGIC_VECTOR (13 downto 0);
    signal c1_bias_load_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal h_cast_mid2_cast_fu_611_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_cast_mid2_cast_reg_1308 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_cast3_fu_614_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast3_reg_1314 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast_fu_617_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_cast_reg_1319 : STD_LOGIC_VECTOR (5 downto 0);
    signal yi_mid_fu_620_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal yi_mid_reg_1324 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp6_mid_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_mid_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_in_r_ARREADY : STD_LOGIC;
    signal ap_predicate_op184_readreq_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_predicate_op195_read_state12 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten10_reg_1334_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1334_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1334_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1334_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1334_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1334_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1334_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_776_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_52_cast_mid2_fu_810_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_cast_mid2_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_mid2_fu_949_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_mid2_reg_1348_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast9_mid2_v_fu_1052_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal y_mid2_fu_1074_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_cond2_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1364_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_addr41_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_1162_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_fu_1174_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_addr41_read_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal w_1_fu_1237_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal indvar_flatten_next1_4_fu_1248_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal indvar_flatten6_reg_187 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_reg_198 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_209 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_reg_221 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_cin_phi_fu_258_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_output_buffer_2_phi_fu_291_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_input_buffer1_phi_fu_314_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buffer_fu_1220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_input_buffer1_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_bias_load_mid2_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_in_r_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_338_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_350_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_346_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_cast3_fu_368_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_fu_362_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_fu_372_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_fu_386_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_378_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_394_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal cout_s_fu_430_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_mid1_fu_436_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_mid1_fu_448_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_mid1_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_mid1_fu_456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_mid1_fu_460_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_mid_fu_495_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_mid_fu_487_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_mid_fu_503_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_mid_fu_507_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_fu_398_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_8_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid_fu_422_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_mid_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_539_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_mid2_fu_466_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_cast3_mid1_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_mid1_fu_571_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_mid1_fu_585_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_mid1_fu_577_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_mid1_fu_593_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_mid1_fu_597_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_mid3_fu_513_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid_12_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_cast_fu_652_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_fu_660_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_fu_681_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_cast_fu_687_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal yi_fu_691_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_cast_fu_656_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_716_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_722_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_738_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_cast1_fu_665_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_cast_fu_677_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_fu_748_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_cast_fu_754_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_669_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten11_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_s_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_cast_mid1_fu_802_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_mid1_fu_822_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_cast1_mid2_fu_827_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl4_mid1_fu_843_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_52_cast_mid1_fu_806_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_mid_fu_859_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_mid_fu_872_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_mid_fu_864_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_mid_fu_880_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_mid_fu_884_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_742_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_cast_mid1_fu_839_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid_fu_898_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_758_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp6_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_mid_fu_788_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_937_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_mid1_fu_961_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_cast_mid1_fu_967_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal yi_mid1_fu_971_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_976_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_cast_mid2_cas_fu_818_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_mid1_fu_996_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_mid1_fu_1010_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_mid1_fu_1002_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_mid1_fu_1018_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_mid1_fu_1022_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_mid3_fu_890_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_cast1_mid2_ca_fu_835_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_cast_mid1_fu_957_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_mid1_fu_1036_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_cast_mid1_fu_1042_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_mid2_fu_851_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_10_fu_1046_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_mid244_v_fu_904_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_mid1_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_mid3_fu_912_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1082_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp4_cast_fu_1088_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xi_fu_1092_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_1101_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev8_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_mid2_fu_1066_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_cast_fu_1097_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_mid2_fu_1028_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_fu_1133_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_cast_fu_1139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_cast_fu_1143_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_1147_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal indvar_flatten_op_fu_1168_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_mid2_v_fu_1185_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast9_mid2_fu_1182_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_cast8_fu_1196_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_fu_1199_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_cast_fu_1205_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_cast_mid2_fu_1192_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_1209_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_1224_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_cast_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten63_op_fu_1242_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_231 : BOOLEAN;
    signal ap_condition_1046 : BOOLEAN;

    component top_net_fadd_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_fmul_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_c1_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_c1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c1_weight_U : component conv_1_c1_weight
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c1_weight_address0,
        ce0 => c1_weight_ce0,
        q0 => c1_weight_q0);

    c1_bias_U : component conv_1_c1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c1_bias_address0,
        ce0 => c1_bias_ce0,
        q0 => c1_bias_q0);

    top_net_fadd_32nsbkb_U1 : component top_net_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_321_p0,
        din1 => grp_fu_321_p1,
        dout => grp_fu_321_p2);

    top_net_fmul_32nscud_U2 : component top_net_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => c1_weight_q0,
        din1 => ap_phi_mux_input_buffer1_phi_fu_314_p4,
        dout => tmp_68_fu_327_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_in_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_1046)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_in_r_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_input_buffer1_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_231)) then
                if (((or_cond2_fu_1127_p2 = ap_const_lv1_0) and (exitcond_flatten10_fu_770_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_input_buffer1_reg_310 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter0_input_buffer1_reg_310;
                end if;
            end if; 
        end if;
    end process;

    cin_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_reg_1334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                cin_reg_254 <= tmp_52_cast_mid2_reg_1343;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cin_reg_254 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    cout_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                cout_reg_198 <= c1_bias_load_mid2_v_reg_1273;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cout_reg_198 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                h_reg_221 <= h_cast_mid2_reg_1292;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_221 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvar_flatten6_reg_187 <= indvar_flatten_next1_5_reg_1263;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten6_reg_187 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvar_flatten7_reg_209 <= indvar_flatten_next1_4_fu_1248_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_reg_209 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten8_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten8_reg_243 <= indvar_flatten_next1_fu_776_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten8_reg_243 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_265 <= indvar_flatten_next_fu_1174_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_265 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    output_buffer_2_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_reg_1334_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
                output_buffer_2_reg_287 <= grp_fu_321_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                output_buffer_2_reg_287 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_reg_232 <= w_1_fu_1237_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_reg_232 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_reg_299 <= x_1_fu_1162_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_reg_299 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                y_reg_276 <= y_mid2_fu_1074_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_reg_276 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter1_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter2_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter3_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter4_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter5_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter6_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter7_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter9_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter8_input_buffer1_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                c1_bias_load_mid2_v_reg_1273 <= c1_bias_load_mid2_v_fu_474_p3;
                exitcond_flatten9_reg_1268 <= exitcond_flatten9_fu_416_p2;
                h_cast_mid2_reg_1292 <= h_cast_mid2_fu_563_p3;
                    tmp_46_mid2_reg_1298(13 downto 2) <= tmp_46_mid2_fu_603_p3(13 downto 2);
                w_mid2_reg_1285 <= w_mid2_fu_551_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c1_bias_load_reg_1303 <= c1_bias_q0;
                    h_cast_mid2_cast_reg_1308(4 downto 0) <= h_cast_mid2_cast_fu_611_p1(4 downto 0);
                tmp6_mid_reg_1329 <= tmp6_mid_fu_646_p2;
                    w_cast3_reg_1314(4 downto 0) <= w_cast3_fu_614_p1(4 downto 0);
                    w_cast_reg_1319(4 downto 0) <= w_cast_fu_617_p1(4 downto 0);
                yi_mid_reg_1324 <= yi_mid_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten10_reg_1334 <= exitcond_flatten10_fu_770_p2;
                exitcond_flatten10_reg_1334_pp0_iter1_reg <= exitcond_flatten10_reg_1334;
                or_cond2_reg_1364_pp0_iter1_reg <= or_cond2_reg_1364;
                tmp_cast9_mid2_v_reg_1353_pp0_iter1_reg <= tmp_cast9_mid2_v_reg_1353;
                x_mid2_reg_1348_pp0_iter1_reg <= x_mid2_reg_1348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten10_reg_1334_pp0_iter2_reg <= exitcond_flatten10_reg_1334_pp0_iter1_reg;
                exitcond_flatten10_reg_1334_pp0_iter3_reg <= exitcond_flatten10_reg_1334_pp0_iter2_reg;
                exitcond_flatten10_reg_1334_pp0_iter4_reg <= exitcond_flatten10_reg_1334_pp0_iter3_reg;
                exitcond_flatten10_reg_1334_pp0_iter5_reg <= exitcond_flatten10_reg_1334_pp0_iter4_reg;
                exitcond_flatten10_reg_1334_pp0_iter6_reg <= exitcond_flatten10_reg_1334_pp0_iter5_reg;
                exitcond_flatten10_reg_1334_pp0_iter7_reg <= exitcond_flatten10_reg_1334_pp0_iter6_reg;
                exitcond_flatten10_reg_1334_pp0_iter8_reg <= exitcond_flatten10_reg_1334_pp0_iter7_reg;
                or_cond2_reg_1364_pp0_iter2_reg <= or_cond2_reg_1364_pp0_iter1_reg;
                or_cond2_reg_1364_pp0_iter3_reg <= or_cond2_reg_1364_pp0_iter2_reg;
                or_cond2_reg_1364_pp0_iter4_reg <= or_cond2_reg_1364_pp0_iter3_reg;
                or_cond2_reg_1364_pp0_iter5_reg <= or_cond2_reg_1364_pp0_iter4_reg;
                or_cond2_reg_1364_pp0_iter6_reg <= or_cond2_reg_1364_pp0_iter5_reg;
                or_cond2_reg_1364_pp0_iter7_reg <= or_cond2_reg_1364_pp0_iter6_reg;
                or_cond2_reg_1364_pp0_iter8_reg <= or_cond2_reg_1364_pp0_iter7_reg;
                tmp_cast9_mid2_v_reg_1353_pp0_iter2_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter1_reg;
                tmp_cast9_mid2_v_reg_1353_pp0_iter3_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter2_reg;
                tmp_cast9_mid2_v_reg_1353_pp0_iter4_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter3_reg;
                tmp_cast9_mid2_v_reg_1353_pp0_iter5_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter4_reg;
                tmp_cast9_mid2_v_reg_1353_pp0_iter6_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter5_reg;
                tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter6_reg;
                x_mid2_reg_1348_pp0_iter2_reg <= x_mid2_reg_1348_pp0_iter1_reg;
                x_mid2_reg_1348_pp0_iter3_reg <= x_mid2_reg_1348_pp0_iter2_reg;
                x_mid2_reg_1348_pp0_iter4_reg <= x_mid2_reg_1348_pp0_iter3_reg;
                x_mid2_reg_1348_pp0_iter5_reg <= x_mid2_reg_1348_pp0_iter4_reg;
                x_mid2_reg_1348_pp0_iter6_reg <= x_mid2_reg_1348_pp0_iter5_reg;
                x_mid2_reg_1348_pp0_iter7_reg <= x_mid2_reg_1348_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op195_read_state12 = ap_const_boolean_1))) then
                in_addr41_read_reg_1384 <= m_axi_in_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond2_fu_1127_p2 = ap_const_lv1_1))) then
                in_addr41_reg_1368 <= sum_cast_fu_1152_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next1_5_reg_1263 <= indvar_flatten_next1_5_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond2_reg_1364 <= or_cond2_fu_1127_p2;
                tmp_cast9_mid2_v_reg_1353 <= tmp_cast9_mid2_v_fu_1052_p3;
                x_mid2_reg_1348 <= x_mid2_fu_949_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    sext_cast_reg_1255(29 downto 0) <= sext_cast_fu_334_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten10_fu_770_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_52_cast_mid2_reg_1343 <= tmp_52_cast_mid2_fu_810_p3;
            end if;
        end if;
    end process;
    sext_cast_reg_1255(32 downto 30) <= "000";
    tmp_46_mid2_reg_1298(1 downto 0) <= "00";
    h_cast_mid2_cast_reg_1308(5) <= '0';
    w_cast3_reg_1314(13 downto 5) <= "000000000";
    w_cast_reg_1319(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_state2, exitcond_flatten_fu_404_p2, exitcond_flatten10_fu_770_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_404_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten10_fu_770_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten10_fu_770_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_in_r_RVALID, ap_enable_reg_pp0_iter8, ap_predicate_op195_read_state12)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_in_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op195_read_state12 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_in_r_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state5_io, ap_predicate_op195_read_state12)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_in_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op195_read_state12 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_in_r_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state5_io, ap_predicate_op195_read_state12)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_in_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op195_read_state12 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter8_assign_proc : process(m_axi_in_r_RVALID, ap_predicate_op195_read_state12)
    begin
                ap_block_state12_pp0_stage0_iter8 <= ((m_axi_in_r_RVALID = ap_const_logic_0) and (ap_predicate_op195_read_state12 = ap_const_boolean_1));
    end process;

        ap_block_state13_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(ap_sig_ioackin_m_axi_in_r_ARREADY, ap_predicate_op184_readreq_state5)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0) and (ap_predicate_op184_readreq_state5 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1046_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op184_readreq_state5)
    begin
                ap_condition_1046 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op184_readreq_state5 = ap_const_boolean_1));
    end process;


    ap_condition_231_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_231 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten10_fu_770_p2)
    begin
        if ((exitcond_flatten10_fu_770_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten_fu_404_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_404_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cin_phi_fu_258_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten10_reg_1334, cin_reg_254, tmp_52_cast_mid2_reg_1343)
    begin
        if (((exitcond_flatten10_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_cin_phi_fu_258_p4 <= tmp_52_cast_mid2_reg_1343;
        else 
            ap_phi_mux_cin_phi_fu_258_p4 <= cin_reg_254;
        end if; 
    end process;


    ap_phi_mux_input_buffer1_phi_fu_314_p4_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten10_reg_1334_pp0_iter8_reg, or_cond2_reg_1364_pp0_iter8_reg, ap_enable_reg_pp0_iter9, input_buffer_fu_1220_p1, ap_phi_reg_pp0_iter9_input_buffer1_reg_310)
    begin
        if (((exitcond_flatten10_reg_1334_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (or_cond2_reg_1364_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_input_buffer1_phi_fu_314_p4 <= input_buffer_fu_1220_p1;
        else 
            ap_phi_mux_input_buffer1_phi_fu_314_p4 <= ap_phi_reg_pp0_iter9_input_buffer1_reg_310;
        end if; 
    end process;

    ap_phi_mux_output_buffer_2_phi_fu_291_p4 <= output_buffer_2_reg_287;
    ap_phi_reg_pp0_iter0_input_buffer1_reg_310 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op184_readreq_state5_assign_proc : process(exitcond_flatten10_reg_1334, or_cond2_reg_1364)
    begin
                ap_predicate_op184_readreq_state5 <= ((exitcond_flatten10_reg_1334 = ap_const_lv1_0) and (or_cond2_reg_1364 = ap_const_lv1_1));
    end process;


    ap_predicate_op195_read_state12_assign_proc : process(exitcond_flatten10_reg_1334_pp0_iter7_reg, or_cond2_reg_1364_pp0_iter7_reg)
    begin
                ap_predicate_op195_read_state12 <= ((exitcond_flatten10_reg_1334_pp0_iter7_reg = ap_const_lv1_0) and (or_cond2_reg_1364_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_404_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_404_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_in_r_ARREADY_assign_proc : process(m_axi_in_r_ARREADY, ap_reg_ioackin_m_axi_in_r_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_in_r_ARREADY <= m_axi_in_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    c1_bias_address0 <= c1_bias_load_mid2_fu_482_p1(3 - 1 downto 0);

    c1_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_bias_ce0 <= ap_const_logic_1;
        else 
            c1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c1_bias_load_mid2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_bias_load_mid2_v_fu_474_p3),64));
    c1_bias_load_mid2_v_fu_474_p3 <= 
        cout_s_fu_430_p2 when (exitcond_flatten9_fu_416_p2(0) = '1') else 
        cout_reg_198;
    c1_weight_address0 <= tmp_67_fu_1215_p1(8 - 1 downto 0);

    c1_weight_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            c1_weight_ce0 <= ap_const_logic_1;
        else 
            c1_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_cin_phi_fu_258_p4),3));
    cin_cast_mid1_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_s_fu_796_p2),3));
    cin_s_fu_796_p2 <= (ap_phi_mux_cin_phi_fu_258_p4 xor ap_const_lv1_1);
    cout_s_fu_430_p2 <= std_logic_vector(unsigned(cout_reg_198) + unsigned(ap_const_lv3_1));
    exitcond1_mid_fu_533_p2 <= (not_exitcond_flatten_8_fu_521_p2 and exitcond_fu_527_p2);
    exitcond2_fu_925_p2 <= "1" when (x_reg_299 = ap_const_lv3_5) else "0";
    exitcond_flatten10_fu_770_p2 <= "1" when (indvar_flatten8_reg_243 = ap_const_lv5_19) else "0";
    exitcond_flatten11_fu_782_p2 <= "1" when (indvar_flatten_reg_265 = ap_const_lv6_19) else "0";
    exitcond_flatten9_fu_416_p2 <= "1" when (indvar_flatten7_reg_209 = ap_const_lv10_310) else "0";
    exitcond_flatten_fu_404_p2 <= "1" when (indvar_flatten6_reg_187 = ap_const_lv13_1260) else "0";
    exitcond_fu_527_p2 <= "1" when (w_reg_232 = ap_const_lv5_1C) else "0";
    exitcond_mid_fu_931_p2 <= (not_exitcond_flatten_fu_919_p2 and exitcond2_fu_925_p2);

    grp_fu_321_p0_assign_proc : process(ap_block_pp0_stage0, c1_bias_load_reg_1303, ap_enable_reg_pp0_iter9, ap_CS_fsm_state14, tmp_68_fu_327_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_321_p0 <= c1_bias_load_reg_1303;
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_321_p0 <= tmp_68_fu_327_p2;
        else 
            grp_fu_321_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_321_p1_assign_proc : process(ap_block_pp0_stage0, output_buffer_2_reg_287, ap_enable_reg_pp0_iter9, ap_CS_fsm_state14, ap_phi_mux_output_buffer_2_phi_fu_291_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_321_p1 <= output_buffer_2_reg_287;
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_321_p1 <= ap_phi_mux_output_buffer_2_phi_fu_291_p4;
        else 
            grp_fu_321_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_539_p2 <= std_logic_vector(unsigned(h_mid_fu_422_p3) + unsigned(ap_const_lv5_1));
    h_cast3_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_221),9));
    h_cast3_mid1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_fu_539_p2),9));
    h_cast_mid2_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_cast_mid2_reg_1292),6));
    h_cast_mid2_fu_563_p3 <= 
        h_1_fu_539_p2 when (exitcond1_mid_fu_533_p2(0) = '1') else 
        h_mid_fu_422_p3;
    h_mid_fu_422_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten9_fu_416_p2(0) = '1') else 
        h_reg_221;

    in_r_blk_n_AR_assign_proc : process(m_axi_in_r_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten10_reg_1334, or_cond2_reg_1364)
    begin
        if (((exitcond_flatten10_reg_1334 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond2_reg_1364 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_r_blk_n_AR <= m_axi_in_r_ARREADY;
        else 
            in_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_r_blk_n_R_assign_proc : process(m_axi_in_r_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, exitcond_flatten10_reg_1334_pp0_iter7_reg, or_cond2_reg_1364_pp0_iter7_reg)
    begin
        if (((exitcond_flatten10_reg_1334_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (or_cond2_reg_1364_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten63_op_fu_1242_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_209) + unsigned(ap_const_lv10_1));
    indvar_flatten_next1_4_fu_1248_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten9_reg_1268(0) = '1') else 
        indvar_flatten63_op_fu_1242_p2;
    indvar_flatten_next1_5_fu_410_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_187) + unsigned(ap_const_lv13_1));
    indvar_flatten_next1_fu_776_p2 <= std_logic_vector(unsigned(indvar_flatten8_reg_243) + unsigned(ap_const_lv5_1));
    indvar_flatten_next_fu_1174_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        indvar_flatten_op_fu_1168_p2;
    indvar_flatten_op_fu_1168_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_265) + unsigned(ap_const_lv6_1));
    input_buffer_fu_1220_p1 <= in_addr41_read_reg_1384;
    m_axi_in_r_ARADDR <= in_addr41_reg_1368;
    m_axi_in_r_ARBURST <= ap_const_lv2_0;
    m_axi_in_r_ARCACHE <= ap_const_lv4_0;
    m_axi_in_r_ARID <= ap_const_lv1_0;
    m_axi_in_r_ARLEN <= ap_const_lv32_1;
    m_axi_in_r_ARLOCK <= ap_const_lv2_0;
    m_axi_in_r_ARPROT <= ap_const_lv3_0;
    m_axi_in_r_ARQOS <= ap_const_lv4_0;
    m_axi_in_r_ARREGION <= ap_const_lv4_0;
    m_axi_in_r_ARSIZE <= ap_const_lv3_0;
    m_axi_in_r_ARUSER <= ap_const_lv1_0;

    m_axi_in_r_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op184_readreq_state5, ap_reg_ioackin_m_axi_in_r_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op184_readreq_state5 = ap_const_boolean_1))) then 
            m_axi_in_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_in_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_AWADDR <= ap_const_lv32_0;
    m_axi_in_r_AWBURST <= ap_const_lv2_0;
    m_axi_in_r_AWCACHE <= ap_const_lv4_0;
    m_axi_in_r_AWID <= ap_const_lv1_0;
    m_axi_in_r_AWLEN <= ap_const_lv32_0;
    m_axi_in_r_AWLOCK <= ap_const_lv2_0;
    m_axi_in_r_AWPROT <= ap_const_lv3_0;
    m_axi_in_r_AWQOS <= ap_const_lv4_0;
    m_axi_in_r_AWREGION <= ap_const_lv4_0;
    m_axi_in_r_AWSIZE <= ap_const_lv3_0;
    m_axi_in_r_AWUSER <= ap_const_lv1_0;
    m_axi_in_r_AWVALID <= ap_const_logic_0;
    m_axi_in_r_BREADY <= ap_const_logic_0;

    m_axi_in_r_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_predicate_op195_read_state12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_predicate_op195_read_state12 = ap_const_boolean_1))) then 
            m_axi_in_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_WDATA <= ap_const_lv32_0;
    m_axi_in_r_WID <= ap_const_lv1_0;
    m_axi_in_r_WLAST <= ap_const_logic_0;
    m_axi_in_r_WSTRB <= ap_const_lv4_0;
    m_axi_in_r_WUSER <= ap_const_lv1_0;
    m_axi_in_r_WVALID <= ap_const_logic_0;
    not_exitcond_flatten_8_fu_521_p2 <= (exitcond_flatten9_fu_416_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_fu_919_p2 <= (exitcond_flatten11_fu_782_p2 xor ap_const_lv1_1);
    or_cond2_fu_1127_p2 <= (tmp6_mid2_fu_1066_p3 and tmp5_fu_1121_p2);
    output_r_address0 <= tmp_57_fu_1232_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= grp_fu_321_p2;

    output_r_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_350_p3),9));
    p_shl1_cast_mid1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_448_p3),9));
    p_shl1_fu_350_p3 <= (cout_reg_198 & ap_const_lv2_0);
    p_shl1_mid1_fu_448_p3 <= (cout_s_fu_430_p2 & ap_const_lv2_0);
    p_shl2_fu_378_p3 <= (tmp_45_fu_372_p2 & ap_const_lv5_0);
    p_shl2_mid1_fu_577_p3 <= (tmp_45_mid1_fu_571_p2 & ap_const_lv5_0);
    p_shl2_mid_fu_487_p3 <= (tmp_42_mid1_fu_460_p2 & ap_const_lv5_0);
        p_shl3_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_fu_386_p3),14));

        p_shl3_cast_mid1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_mid1_fu_585_p3),14));

        p_shl3_cast_mid_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_mid_fu_495_p3),14));

    p_shl3_fu_386_p3 <= (tmp_45_fu_372_p2 & ap_const_lv2_0);
    p_shl3_mid1_fu_585_p3 <= (tmp_45_mid1_fu_571_p2 & ap_const_lv2_0);
    p_shl3_mid_fu_495_p3 <= (tmp_42_mid1_fu_460_p2 & ap_const_lv2_0);
    p_shl4_fu_669_p3 <= (tmp_53_fu_660_p2 & ap_const_lv2_0);
    p_shl4_mid1_fu_843_p3 <= (tmp_53_mid1_fu_822_p2 & ap_const_lv2_0);
    p_shl4_mid2_fu_851_p3 <= 
        p_shl4_mid1_fu_843_p3 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        p_shl4_fu_669_p3;
    p_shl7_cast_mid2_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_cast_mid2_v_fu_1185_p3),8));
    p_shl7_cast_mid2_v_fu_1185_p3 <= (tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg & ap_const_lv2_0);
    p_shl8_fu_722_p3 <= (tmp_61_fu_716_p2 & ap_const_lv5_0);
    p_shl8_mid1_fu_1002_p3 <= (tmp_61_mid1_fu_996_p2 & ap_const_lv5_0);
    p_shl8_mid_fu_864_p3 <= (tmp_61_mid_fu_859_p2 & ap_const_lv5_0);
        p_shl9_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_fu_730_p3),11));

        p_shl9_cast_mid1_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_mid1_fu_1010_p3),11));

        p_shl9_cast_mid_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_mid_fu_872_p3),11));

    p_shl9_fu_730_p3 <= (tmp_61_fu_716_p2 & ap_const_lv2_0);
    p_shl9_mid1_fu_1010_p3 <= (tmp_61_mid1_fu_996_p2 & ap_const_lv2_0);
    p_shl9_mid_fu_872_p3 <= (tmp_61_mid_fu_859_p2 & ap_const_lv2_0);
    p_shl_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_338_p3),9));
    p_shl_cast_mid1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_436_p3),9));
    p_shl_fu_338_p3 <= (cout_reg_198 & ap_const_lv5_0);
    p_shl_mid1_fu_436_p3 <= (cout_s_fu_430_p2 & ap_const_lv5_0);
    rev1_fu_634_p2 <= (tmp_9_fu_626_p3 xor ap_const_lv1_1);
    rev5_fu_984_p2 <= (tmp_11_fu_976_p3 xor ap_const_lv1_1);
    rev8_fu_1109_p2 <= (tmp_12_fu_1101_p3 xor ap_const_lv1_1);
    rev_fu_704_p2 <= (tmp_10_fu_696_p3 xor ap_const_lv1_1);
    sext_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_offset),33));
    sum_cast_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1147_p2),64));
    sum_fu_1147_p2 <= std_logic_vector(unsigned(sext_cast_reg_1255) + unsigned(tmp_67_cast_fu_1143_p1));
        tmp2_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_681_p2),6));

        tmp2_cast_mid1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_mid1_fu_961_p2),6));

    tmp2_fu_681_p2 <= std_logic_vector(unsigned(y_reg_276) + unsigned(ap_const_lv3_6));
    tmp2_mid1_fu_961_p2 <= std_logic_vector(unsigned(y_mid_fu_788_p3) + unsigned(ap_const_lv3_7));
    tmp3_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_748_p2),5));
    tmp3_cast_mid1_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_mid1_fu_1036_p2),5));
    tmp3_fu_748_p2 <= std_logic_vector(unsigned(tmp_53_cast1_fu_665_p1) + unsigned(y_cast_fu_677_p1));
    tmp3_mid1_fu_1036_p2 <= std_logic_vector(unsigned(tmp_53_cast1_mid2_ca_fu_835_p1) + unsigned(y_cast_mid1_fu_957_p1));
        tmp4_cast_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_1082_p2),6));

    tmp4_fu_1082_p2 <= std_logic_vector(unsigned(x_mid2_fu_949_p3) + unsigned(ap_const_lv3_6));
    tmp5_fu_1121_p2 <= (tmp_64_fu_1115_p2 and rev8_fu_1109_p2);
    tmp6_fu_764_p2 <= (tmp_s_fu_710_p2 and rev_fu_704_p2);
    tmp6_mid1_fu_1060_p2 <= (tmp_mid1_fu_990_p2 and rev5_fu_984_p2);
    tmp6_mid2_fu_1066_p3 <= 
        tmp6_mid1_fu_1060_p2 when (exitcond_mid_fu_931_p2(0) = '1') else 
        tmp6_mid3_fu_912_p3;
    tmp6_mid3_fu_912_p3 <= 
        tmp6_mid_reg_1329 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        tmp6_fu_764_p2;
    tmp6_mid_fu_646_p2 <= (tmp_mid_12_fu_640_p2 and rev1_fu_634_p2);
    tmp7_cast_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_1199_p2),8));
    tmp7_fu_1199_p2 <= std_logic_vector(unsigned(tmp_cast9_mid2_fu_1182_p1) + unsigned(x_cast8_fu_1196_p1));
    tmp_10_fu_696_p3 <= yi_fu_691_p2(5 downto 5);
    tmp_11_fu_976_p3 <= yi_mid1_fu_971_p2(5 downto 5);
    tmp_12_fu_1101_p3 <= xi_fu_1092_p2(5 downto 5);
    tmp_14_fu_545_p2 <= (exitcond_flatten9_fu_416_p2 or exitcond1_mid_fu_533_p2);
    tmp_15_fu_943_p2 <= (exitcond_mid_fu_931_p2 or exitcond_flatten11_fu_782_p2);
    tmp_42_fu_362_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_346_p1) - unsigned(p_shl1_cast_fu_358_p1));
    tmp_42_mid1_fu_460_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_444_p1) - unsigned(p_shl1_cast_mid1_fu_456_p1));
    tmp_42_mid2_fu_466_p3 <= 
        tmp_42_mid1_fu_460_p2 when (exitcond_flatten9_fu_416_p2(0) = '1') else 
        tmp_42_fu_362_p2;
    tmp_45_fu_372_p2 <= std_logic_vector(unsigned(h_cast3_fu_368_p1) + unsigned(tmp_42_fu_362_p2));
    tmp_45_mid1_fu_571_p2 <= std_logic_vector(unsigned(tmp_42_mid2_fu_466_p3) + unsigned(h_cast3_mid1_fu_559_p1));
    tmp_46_fu_398_p2 <= std_logic_vector(unsigned(p_shl2_fu_378_p3) - unsigned(p_shl3_cast_fu_394_p1));
    tmp_46_mid1_fu_597_p2 <= std_logic_vector(unsigned(p_shl2_mid1_fu_577_p3) - unsigned(p_shl3_cast_mid1_fu_593_p1));
    tmp_46_mid2_fu_603_p3 <= 
        tmp_46_mid1_fu_597_p2 when (exitcond1_mid_fu_533_p2(0) = '1') else 
        tmp_46_mid3_fu_513_p3;
    tmp_46_mid3_fu_513_p3 <= 
        tmp_46_mid_fu_507_p2 when (exitcond_flatten9_fu_416_p2(0) = '1') else 
        tmp_46_fu_398_p2;
    tmp_46_mid_fu_507_p2 <= std_logic_vector(unsigned(p_shl2_mid_fu_487_p3) - unsigned(p_shl3_cast_mid_fu_503_p1));
    tmp_52_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_cin_phi_fu_258_p4),6));
    tmp_52_cast_mid1_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_s_fu_796_p2),6));
    tmp_52_cast_mid2_cas_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_cast_mid2_fu_810_p3),6));
    tmp_52_cast_mid2_fu_810_p3 <= 
        cin_s_fu_796_p2 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        ap_phi_mux_cin_phi_fu_258_p4;
    tmp_53_cast1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_660_p2),4));
    tmp_53_cast1_mid2_ca_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_cast1_mid2_fu_827_p3),4));
    tmp_53_cast1_mid2_fu_827_p3 <= 
        tmp_53_mid1_fu_822_p2 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        tmp_53_fu_660_p2;
    tmp_53_cast_mid1_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_mid1_fu_822_p2),5));
    tmp_53_fu_660_p2 <= std_logic_vector(unsigned(c1_bias_load_mid2_v_reg_1273) + unsigned(cin_cast_fu_652_p1));
    tmp_53_mid1_fu_822_p2 <= std_logic_vector(unsigned(c1_bias_load_mid2_v_reg_1273) + unsigned(cin_cast_mid1_fu_802_p1));
        tmp_56_cast_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_1224_p2),32));

    tmp_56_fu_1224_p2 <= std_logic_vector(unsigned(tmp_46_mid2_reg_1298) + unsigned(w_cast3_reg_1314));
    tmp_57_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_cast_fu_1228_p1),64));
    tmp_61_fu_716_p2 <= std_logic_vector(unsigned(tmp_52_cast_fu_656_p1) + unsigned(yi_fu_691_p2));
    tmp_61_mid1_fu_996_p2 <= std_logic_vector(unsigned(tmp_52_cast_mid2_cas_fu_818_p1) + unsigned(yi_mid1_fu_971_p2));
    tmp_61_mid_fu_859_p2 <= std_logic_vector(unsigned(tmp_52_cast_mid1_fu_806_p1) + unsigned(yi_mid_reg_1324));
    tmp_62_fu_742_p2 <= std_logic_vector(unsigned(p_shl8_fu_722_p3) - unsigned(p_shl9_cast_fu_738_p1));
    tmp_62_mid1_fu_1022_p2 <= std_logic_vector(unsigned(p_shl8_mid1_fu_1002_p3) - unsigned(p_shl9_cast_mid1_fu_1018_p1));
    tmp_62_mid2_fu_1028_p3 <= 
        tmp_62_mid1_fu_1022_p2 when (exitcond_mid_fu_931_p2(0) = '1') else 
        tmp_62_mid3_fu_890_p3;
    tmp_62_mid3_fu_890_p3 <= 
        tmp_62_mid_fu_884_p2 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        tmp_62_fu_742_p2;
    tmp_62_mid_fu_884_p2 <= std_logic_vector(unsigned(p_shl8_mid_fu_864_p3) - unsigned(p_shl9_cast_mid_fu_880_p1));
    tmp_64_fu_1115_p2 <= "1" when (signed(xi_fu_1092_p2) < signed(ap_const_lv6_1C)) else "0";
    tmp_65_fu_1133_p2 <= std_logic_vector(signed(xi_cast_fu_1097_p1) + signed(tmp_62_mid2_fu_1028_p3));
        tmp_66_cast_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_fu_1133_p2),32));

    tmp_66_fu_1209_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_1205_p1) + unsigned(p_shl7_cast_mid2_fu_1192_p1));
    tmp_67_cast_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_cast_fu_1139_p1),33));
    tmp_67_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_1209_p2),64));
    tmp_9_fu_626_p3 <= yi_mid_fu_620_p2(5 downto 5);
    tmp_cast9_mid244_v_fu_904_p3 <= 
        tmp_mid_fu_898_p2 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        tmp_fu_758_p2;
    tmp_cast9_mid2_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg),6));
    tmp_cast9_mid2_v_fu_1052_p3 <= 
        tmp_mid1_10_fu_1046_p2 when (exitcond_mid_fu_931_p2(0) = '1') else 
        tmp_cast9_mid244_v_fu_904_p3;
    tmp_fu_758_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_754_p1) + unsigned(p_shl4_fu_669_p3));
    tmp_mid1_10_fu_1046_p2 <= std_logic_vector(unsigned(tmp3_cast_mid1_fu_1042_p1) + unsigned(p_shl4_mid2_fu_851_p3));
    tmp_mid1_fu_990_p2 <= "1" when (signed(yi_mid1_fu_971_p2) < signed(ap_const_lv6_1C)) else "0";
    tmp_mid_12_fu_640_p2 <= "1" when (signed(yi_mid_fu_620_p2) < signed(ap_const_lv6_1C)) else "0";
    tmp_mid_fu_898_p2 <= std_logic_vector(unsigned(tmp_53_cast_mid1_fu_839_p1) + unsigned(p_shl4_mid1_fu_843_p3));
    tmp_s_fu_710_p2 <= "1" when (signed(yi_fu_691_p2) < signed(ap_const_lv6_1C)) else "0";
    w_1_fu_1237_p2 <= std_logic_vector(unsigned(w_mid2_reg_1285) + unsigned(ap_const_lv5_1));
    w_cast3_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_mid2_reg_1285),14));
    w_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_mid2_reg_1285),6));
    w_mid2_fu_551_p3 <= 
        ap_const_lv5_0 when (tmp_14_fu_545_p2(0) = '1') else 
        w_reg_232;
    x_1_fu_1162_p2 <= std_logic_vector(unsigned(x_mid2_fu_949_p3) + unsigned(ap_const_lv3_1));
    x_cast8_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_mid2_reg_1348_pp0_iter7_reg),6));
    x_mid2_fu_949_p3 <= 
        ap_const_lv3_0 when (tmp_15_fu_943_p2(0) = '1') else 
        x_reg_299;
        xi_cast_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xi_fu_1092_p2),11));

    xi_fu_1092_p2 <= std_logic_vector(signed(tmp4_cast_fu_1088_p1) + signed(w_cast_reg_1319));
    y_1_fu_937_p2 <= std_logic_vector(unsigned(y_mid_fu_788_p3) + unsigned(ap_const_lv3_1));
    y_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_276),4));
    y_cast_mid1_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_fu_937_p2),4));
    y_mid2_fu_1074_p3 <= 
        y_1_fu_937_p2 when (exitcond_mid_fu_931_p2(0) = '1') else 
        y_mid_fu_788_p3;
    y_mid_fu_788_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten11_fu_782_p2(0) = '1') else 
        y_reg_276;
    yi_fu_691_p2 <= std_logic_vector(signed(tmp2_cast_fu_687_p1) + signed(h_cast_mid2_cast_reg_1308));
    yi_mid1_fu_971_p2 <= std_logic_vector(signed(tmp2_cast_mid1_fu_967_p1) + signed(h_cast_mid2_cast_reg_1308));
    yi_mid_fu_620_p2 <= std_logic_vector(unsigned(h_cast_mid2_cast_fu_611_p1) + unsigned(ap_const_lv6_3E));
end behav;
