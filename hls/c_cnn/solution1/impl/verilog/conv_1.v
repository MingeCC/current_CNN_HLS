// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY,
        m_axi_in_r_AWADDR,
        m_axi_in_r_AWID,
        m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID,
        m_axi_in_r_WREADY,
        m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST,
        m_axi_in_r_WID,
        m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY,
        m_axi_in_r_ARADDR,
        m_axi_in_r_ARID,
        m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID,
        m_axi_in_r_RREADY,
        m_axi_in_r_RDATA,
        m_axi_in_r_RLAST,
        m_axi_in_r_RID,
        m_axi_in_r_RUSER,
        m_axi_in_r_RRESP,
        m_axi_in_r_BVALID,
        m_axi_in_r_BREADY,
        m_axi_in_r_BRESP,
        m_axi_in_r_BID,
        m_axi_in_r_BUSER,
        in_offset,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state14 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_in_r_AWVALID;
input   m_axi_in_r_AWREADY;
output  [31:0] m_axi_in_r_AWADDR;
output  [0:0] m_axi_in_r_AWID;
output  [31:0] m_axi_in_r_AWLEN;
output  [2:0] m_axi_in_r_AWSIZE;
output  [1:0] m_axi_in_r_AWBURST;
output  [1:0] m_axi_in_r_AWLOCK;
output  [3:0] m_axi_in_r_AWCACHE;
output  [2:0] m_axi_in_r_AWPROT;
output  [3:0] m_axi_in_r_AWQOS;
output  [3:0] m_axi_in_r_AWREGION;
output  [0:0] m_axi_in_r_AWUSER;
output   m_axi_in_r_WVALID;
input   m_axi_in_r_WREADY;
output  [31:0] m_axi_in_r_WDATA;
output  [3:0] m_axi_in_r_WSTRB;
output   m_axi_in_r_WLAST;
output  [0:0] m_axi_in_r_WID;
output  [0:0] m_axi_in_r_WUSER;
output   m_axi_in_r_ARVALID;
input   m_axi_in_r_ARREADY;
output  [31:0] m_axi_in_r_ARADDR;
output  [0:0] m_axi_in_r_ARID;
output  [31:0] m_axi_in_r_ARLEN;
output  [2:0] m_axi_in_r_ARSIZE;
output  [1:0] m_axi_in_r_ARBURST;
output  [1:0] m_axi_in_r_ARLOCK;
output  [3:0] m_axi_in_r_ARCACHE;
output  [2:0] m_axi_in_r_ARPROT;
output  [3:0] m_axi_in_r_ARQOS;
output  [3:0] m_axi_in_r_ARREGION;
output  [0:0] m_axi_in_r_ARUSER;
input   m_axi_in_r_RVALID;
output   m_axi_in_r_RREADY;
input  [31:0] m_axi_in_r_RDATA;
input   m_axi_in_r_RLAST;
input  [0:0] m_axi_in_r_RID;
input  [0:0] m_axi_in_r_RUSER;
input  [1:0] m_axi_in_r_RRESP;
input   m_axi_in_r_BVALID;
output   m_axi_in_r_BREADY;
input  [1:0] m_axi_in_r_BRESP;
input  [0:0] m_axi_in_r_BID;
input  [0:0] m_axi_in_r_BUSER;
input  [29:0] in_offset;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_in_r_ARVALID;
reg m_axi_in_r_RREADY;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] c1_weight_address0;
reg    c1_weight_ce0;
wire   [31:0] c1_weight_q0;
wire   [2:0] c1_bias_address0;
reg    c1_bias_ce0;
wire   [31:0] c1_bias_q0;
reg    in_r_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten10_reg_1334;
reg   [0:0] or_cond2_reg_1364;
reg    in_r_blk_n_R;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter7_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter7_reg;
reg   [4:0] indvar_flatten8_reg_243;
reg   [0:0] cin_reg_254;
reg   [5:0] indvar_flatten_reg_265;
reg   [2:0] y_reg_276;
reg   [31:0] output_buffer_2_reg_287;
reg   [2:0] x_reg_299;
wire   [32:0] sext_cast_fu_334_p1;
reg   [32:0] sext_cast_reg_1255;
wire   [12:0] indvar_flatten_next1_5_fu_410_p2;
reg   [12:0] indvar_flatten_next1_5_reg_1263;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten9_fu_416_p2;
reg   [0:0] exitcond_flatten9_reg_1268;
wire   [0:0] exitcond_flatten_fu_404_p2;
wire   [2:0] c1_bias_load_mid2_v_fu_474_p3;
reg   [2:0] c1_bias_load_mid2_v_reg_1273;
wire   [4:0] w_mid2_fu_551_p3;
reg   [4:0] w_mid2_reg_1285;
wire   [4:0] h_cast_mid2_fu_563_p3;
reg   [4:0] h_cast_mid2_reg_1292;
wire   [13:0] tmp_46_mid2_fu_603_p3;
reg   [13:0] tmp_46_mid2_reg_1298;
reg   [31:0] c1_bias_load_reg_1303;
wire    ap_CS_fsm_state3;
wire   [5:0] h_cast_mid2_cast_fu_611_p1;
reg   [5:0] h_cast_mid2_cast_reg_1308;
wire   [13:0] w_cast3_fu_614_p1;
reg   [13:0] w_cast3_reg_1314;
wire   [5:0] w_cast_fu_617_p1;
reg   [5:0] w_cast_reg_1319;
wire   [5:0] yi_mid_fu_620_p2;
reg   [5:0] yi_mid_reg_1324;
wire   [0:0] tmp6_mid_fu_646_p2;
reg   [0:0] tmp6_mid_reg_1329;
wire   [0:0] exitcond_flatten10_fu_770_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_in_r_ARREADY;
reg    ap_predicate_op184_readreq_state5;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
reg    ap_predicate_op195_read_state12;
reg    ap_block_state12_pp0_stage0_iter8;
wire    ap_block_state13_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter1_reg;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter2_reg;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter3_reg;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter4_reg;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter5_reg;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter6_reg;
reg   [0:0] exitcond_flatten10_reg_1334_pp0_iter8_reg;
wire   [4:0] indvar_flatten_next1_fu_776_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_52_cast_mid2_fu_810_p3;
reg   [0:0] tmp_52_cast_mid2_reg_1343;
wire   [2:0] x_mid2_fu_949_p3;
reg   [2:0] x_mid2_reg_1348;
reg   [2:0] x_mid2_reg_1348_pp0_iter1_reg;
reg   [2:0] x_mid2_reg_1348_pp0_iter2_reg;
reg   [2:0] x_mid2_reg_1348_pp0_iter3_reg;
reg   [2:0] x_mid2_reg_1348_pp0_iter4_reg;
reg   [2:0] x_mid2_reg_1348_pp0_iter5_reg;
reg   [2:0] x_mid2_reg_1348_pp0_iter6_reg;
reg   [2:0] x_mid2_reg_1348_pp0_iter7_reg;
wire   [4:0] tmp_cast9_mid2_v_fu_1052_p3;
reg   [4:0] tmp_cast9_mid2_v_reg_1353;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter1_reg;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter2_reg;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter3_reg;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter4_reg;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter5_reg;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter6_reg;
reg   [4:0] tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg;
wire   [2:0] y_mid2_fu_1074_p3;
wire   [0:0] or_cond2_fu_1127_p2;
reg   [0:0] or_cond2_reg_1364_pp0_iter1_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter2_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter3_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter4_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter5_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter6_reg;
reg   [0:0] or_cond2_reg_1364_pp0_iter8_reg;
reg   [31:0] in_addr41_reg_1368;
wire   [2:0] x_1_fu_1162_p2;
wire   [5:0] indvar_flatten_next_fu_1174_p3;
reg   [31:0] in_addr41_read_reg_1384;
wire   [31:0] grp_fu_321_p2;
reg    ap_enable_reg_pp0_iter9;
wire   [4:0] w_1_fu_1237_p2;
wire    ap_CS_fsm_state14;
wire   [9:0] indvar_flatten_next1_4_fu_1248_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [12:0] indvar_flatten6_reg_187;
reg   [2:0] cout_reg_198;
reg   [9:0] indvar_flatten7_reg_209;
reg   [4:0] h_reg_221;
reg   [4:0] w_reg_232;
reg   [0:0] ap_phi_mux_cin_phi_fu_258_p4;
wire   [31:0] ap_phi_mux_output_buffer_2_phi_fu_291_p4;
reg   [31:0] ap_phi_mux_input_buffer1_phi_fu_314_p4;
wire   [31:0] input_buffer_fu_1220_p1;
reg   [31:0] ap_phi_reg_pp0_iter9_input_buffer1_reg_310;
wire   [31:0] ap_phi_reg_pp0_iter0_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter1_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter2_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter3_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter4_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter5_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter6_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter7_input_buffer1_reg_310;
reg   [31:0] ap_phi_reg_pp0_iter8_input_buffer1_reg_310;
wire   [63:0] c1_bias_load_mid2_fu_482_p1;
wire   [63:0] tmp_67_fu_1215_p1;
wire   [63:0] tmp_57_fu_1232_p1;
wire   [63:0] sum_cast_fu_1152_p1;
reg    ap_reg_ioackin_m_axi_in_r_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] grp_fu_321_p0;
wire   [31:0] tmp_68_fu_327_p2;
reg   [31:0] grp_fu_321_p1;
wire   [7:0] p_shl_fu_338_p3;
wire   [4:0] p_shl1_fu_350_p3;
wire   [8:0] p_shl_cast_fu_346_p1;
wire   [8:0] p_shl1_cast_fu_358_p1;
wire   [8:0] h_cast3_fu_368_p1;
wire   [8:0] tmp_42_fu_362_p2;
wire   [8:0] tmp_45_fu_372_p2;
wire   [10:0] p_shl3_fu_386_p3;
wire   [13:0] p_shl2_fu_378_p3;
wire  signed [13:0] p_shl3_cast_fu_394_p1;
wire   [2:0] cout_s_fu_430_p2;
wire   [7:0] p_shl_mid1_fu_436_p3;
wire   [4:0] p_shl1_mid1_fu_448_p3;
wire   [8:0] p_shl_cast_mid1_fu_444_p1;
wire   [8:0] p_shl1_cast_mid1_fu_456_p1;
wire   [8:0] tmp_42_mid1_fu_460_p2;
wire   [10:0] p_shl3_mid_fu_495_p3;
wire   [13:0] p_shl2_mid_fu_487_p3;
wire  signed [13:0] p_shl3_cast_mid_fu_503_p1;
wire   [13:0] tmp_46_mid_fu_507_p2;
wire   [13:0] tmp_46_fu_398_p2;
wire   [0:0] exitcond_fu_527_p2;
wire   [0:0] not_exitcond_flatten_8_fu_521_p2;
wire   [4:0] h_mid_fu_422_p3;
wire   [0:0] exitcond1_mid_fu_533_p2;
wire   [0:0] tmp_14_fu_545_p2;
wire   [4:0] h_1_fu_539_p2;
wire   [8:0] tmp_42_mid2_fu_466_p3;
wire   [8:0] h_cast3_mid1_fu_559_p1;
wire   [8:0] tmp_45_mid1_fu_571_p2;
wire   [10:0] p_shl3_mid1_fu_585_p3;
wire   [13:0] p_shl2_mid1_fu_577_p3;
wire  signed [13:0] p_shl3_cast_mid1_fu_593_p1;
wire   [13:0] tmp_46_mid1_fu_597_p2;
wire   [13:0] tmp_46_mid3_fu_513_p3;
wire   [0:0] tmp_9_fu_626_p3;
wire   [0:0] tmp_mid_12_fu_640_p2;
wire   [0:0] rev1_fu_634_p2;
wire   [2:0] cin_cast_fu_652_p1;
wire   [2:0] tmp_53_fu_660_p2;
wire   [2:0] tmp2_fu_681_p2;
wire  signed [5:0] tmp2_cast_fu_687_p1;
wire   [5:0] yi_fu_691_p2;
wire   [0:0] tmp_10_fu_696_p3;
wire   [5:0] tmp_52_cast_fu_656_p1;
wire   [5:0] tmp_61_fu_716_p2;
wire   [7:0] p_shl9_fu_730_p3;
wire   [10:0] p_shl8_fu_722_p3;
wire  signed [10:0] p_shl9_cast_fu_738_p1;
wire   [3:0] tmp_53_cast1_fu_665_p1;
wire   [3:0] y_cast_fu_677_p1;
wire   [3:0] tmp3_fu_748_p2;
wire   [4:0] tmp3_cast_fu_754_p1;
wire   [4:0] p_shl4_fu_669_p3;
wire   [0:0] tmp_s_fu_710_p2;
wire   [0:0] rev_fu_704_p2;
wire   [0:0] exitcond_flatten11_fu_782_p2;
wire   [0:0] cin_s_fu_796_p2;
wire   [2:0] cin_cast_mid1_fu_802_p1;
wire   [2:0] tmp_53_mid1_fu_822_p2;
wire   [2:0] tmp_53_cast1_mid2_fu_827_p3;
wire   [4:0] p_shl4_mid1_fu_843_p3;
wire   [5:0] tmp_52_cast_mid1_fu_806_p1;
wire   [5:0] tmp_61_mid_fu_859_p2;
wire   [7:0] p_shl9_mid_fu_872_p3;
wire   [10:0] p_shl8_mid_fu_864_p3;
wire  signed [10:0] p_shl9_cast_mid_fu_880_p1;
wire   [10:0] tmp_62_mid_fu_884_p2;
wire   [10:0] tmp_62_fu_742_p2;
wire   [4:0] tmp_53_cast_mid1_fu_839_p1;
wire   [4:0] tmp_mid_fu_898_p2;
wire   [4:0] tmp_fu_758_p2;
wire   [0:0] tmp6_fu_764_p2;
wire   [0:0] exitcond2_fu_925_p2;
wire   [0:0] not_exitcond_flatten_fu_919_p2;
wire   [2:0] y_mid_fu_788_p3;
wire   [0:0] exitcond_mid_fu_931_p2;
wire   [0:0] tmp_15_fu_943_p2;
wire   [2:0] y_1_fu_937_p2;
wire   [2:0] tmp2_mid1_fu_961_p2;
wire  signed [5:0] tmp2_cast_mid1_fu_967_p1;
wire   [5:0] yi_mid1_fu_971_p2;
wire   [0:0] tmp_11_fu_976_p3;
wire   [5:0] tmp_52_cast_mid2_cas_fu_818_p1;
wire   [5:0] tmp_61_mid1_fu_996_p2;
wire   [7:0] p_shl9_mid1_fu_1010_p3;
wire   [10:0] p_shl8_mid1_fu_1002_p3;
wire  signed [10:0] p_shl9_cast_mid1_fu_1018_p1;
wire   [10:0] tmp_62_mid1_fu_1022_p2;
wire   [10:0] tmp_62_mid3_fu_890_p3;
wire   [3:0] tmp_53_cast1_mid2_ca_fu_835_p1;
wire   [3:0] y_cast_mid1_fu_957_p1;
wire   [3:0] tmp3_mid1_fu_1036_p2;
wire   [4:0] tmp3_cast_mid1_fu_1042_p1;
wire   [4:0] p_shl4_mid2_fu_851_p3;
wire   [4:0] tmp_mid1_10_fu_1046_p2;
wire   [4:0] tmp_cast9_mid244_v_fu_904_p3;
wire   [0:0] tmp_mid1_fu_990_p2;
wire   [0:0] rev5_fu_984_p2;
wire   [0:0] tmp6_mid1_fu_1060_p2;
wire   [0:0] tmp6_mid3_fu_912_p3;
wire   [2:0] tmp4_fu_1082_p2;
wire  signed [5:0] tmp4_cast_fu_1088_p1;
wire  signed [5:0] xi_fu_1092_p2;
wire   [0:0] tmp_12_fu_1101_p3;
wire   [0:0] tmp_64_fu_1115_p2;
wire   [0:0] rev8_fu_1109_p2;
wire   [0:0] tmp6_mid2_fu_1066_p3;
wire   [0:0] tmp5_fu_1121_p2;
wire  signed [10:0] xi_cast_fu_1097_p1;
wire   [10:0] tmp_62_mid2_fu_1028_p3;
wire   [10:0] tmp_65_fu_1133_p2;
wire  signed [31:0] tmp_66_cast_fu_1139_p1;
wire   [32:0] tmp_67_cast_fu_1143_p1;
wire   [32:0] sum_fu_1147_p2;
wire   [5:0] indvar_flatten_op_fu_1168_p2;
wire   [6:0] p_shl7_cast_mid2_v_fu_1185_p3;
wire   [5:0] tmp_cast9_mid2_fu_1182_p1;
wire   [5:0] x_cast8_fu_1196_p1;
wire   [5:0] tmp7_fu_1199_p2;
wire   [7:0] tmp7_cast_fu_1205_p1;
wire   [7:0] p_shl7_cast_mid2_fu_1192_p1;
wire   [7:0] tmp_66_fu_1209_p2;
wire   [13:0] tmp_56_fu_1224_p2;
wire  signed [31:0] tmp_56_cast_fu_1228_p1;
wire   [9:0] indvar_flatten63_op_fu_1242_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_231;
reg    ap_condition_1046;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_reg_ioackin_m_axi_in_r_ARREADY = 1'b0;
end

conv_1_c1_weight #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
c1_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_weight_address0),
    .ce0(c1_weight_ce0),
    .q0(c1_weight_q0)
);

conv_1_c1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
c1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_bias_address0),
    .ce0(c1_bias_ce0),
    .q0(c1_bias_q0)
);

top_net_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fadd_32nsbkb_U1(
    .din0(grp_fu_321_p0),
    .din1(grp_fu_321_p1),
    .dout(grp_fu_321_p2)
);

top_net_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_net_fmul_32nscud_U2(
    .din0(c1_weight_q0),
    .din1(ap_phi_mux_input_buffer1_phi_fu_314_p4),
    .dout(tmp_68_fu_327_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_in_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1046)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_in_r_ARREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_in_r_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_in_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_231)) begin
        if (((or_cond2_fu_1127_p2 == 1'd0) & (exitcond_flatten10_fu_770_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_input_buffer1_reg_310 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter0_input_buffer1_reg_310;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_reg_1334 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cin_reg_254 <= tmp_52_cast_mid2_reg_1343;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cin_reg_254 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cout_reg_198 <= c1_bias_load_mid2_v_reg_1273;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cout_reg_198 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        h_reg_221 <= h_cast_mid2_reg_1292;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_221 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        indvar_flatten6_reg_187 <= indvar_flatten_next1_5_reg_1263;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten6_reg_187 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        indvar_flatten7_reg_209 <= indvar_flatten_next1_4_fu_1248_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_209 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten8_reg_243 <= indvar_flatten_next1_fu_776_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten8_reg_243 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_265 <= indvar_flatten_next_fu_1174_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_265 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_reg_1334_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        output_buffer_2_reg_287 <= grp_fu_321_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_2_reg_287 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_reg_232 <= w_1_fu_1237_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_reg_232 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_299 <= x_1_fu_1162_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_299 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_reg_276 <= y_mid2_fu_1074_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_276 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter1_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter2_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter3_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_phi_reg_pp0_iter5_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter4_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_reg_pp0_iter6_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter5_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_phi_reg_pp0_iter7_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter6_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_phi_reg_pp0_iter8_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter7_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_phi_reg_pp0_iter9_input_buffer1_reg_310 <= ap_phi_reg_pp0_iter8_input_buffer1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c1_bias_load_mid2_v_reg_1273 <= c1_bias_load_mid2_v_fu_474_p3;
        exitcond_flatten9_reg_1268 <= exitcond_flatten9_fu_416_p2;
        h_cast_mid2_reg_1292 <= h_cast_mid2_fu_563_p3;
        tmp_46_mid2_reg_1298[13 : 2] <= tmp_46_mid2_fu_603_p3[13 : 2];
        w_mid2_reg_1285 <= w_mid2_fu_551_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c1_bias_load_reg_1303 <= c1_bias_q0;
        h_cast_mid2_cast_reg_1308[4 : 0] <= h_cast_mid2_cast_fu_611_p1[4 : 0];
        tmp6_mid_reg_1329 <= tmp6_mid_fu_646_p2;
        w_cast3_reg_1314[4 : 0] <= w_cast3_fu_614_p1[4 : 0];
        w_cast_reg_1319[4 : 0] <= w_cast_fu_617_p1[4 : 0];
        yi_mid_reg_1324 <= yi_mid_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten10_reg_1334 <= exitcond_flatten10_fu_770_p2;
        exitcond_flatten10_reg_1334_pp0_iter1_reg <= exitcond_flatten10_reg_1334;
        or_cond2_reg_1364_pp0_iter1_reg <= or_cond2_reg_1364;
        tmp_cast9_mid2_v_reg_1353_pp0_iter1_reg <= tmp_cast9_mid2_v_reg_1353;
        x_mid2_reg_1348_pp0_iter1_reg <= x_mid2_reg_1348;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten10_reg_1334_pp0_iter2_reg <= exitcond_flatten10_reg_1334_pp0_iter1_reg;
        exitcond_flatten10_reg_1334_pp0_iter3_reg <= exitcond_flatten10_reg_1334_pp0_iter2_reg;
        exitcond_flatten10_reg_1334_pp0_iter4_reg <= exitcond_flatten10_reg_1334_pp0_iter3_reg;
        exitcond_flatten10_reg_1334_pp0_iter5_reg <= exitcond_flatten10_reg_1334_pp0_iter4_reg;
        exitcond_flatten10_reg_1334_pp0_iter6_reg <= exitcond_flatten10_reg_1334_pp0_iter5_reg;
        exitcond_flatten10_reg_1334_pp0_iter7_reg <= exitcond_flatten10_reg_1334_pp0_iter6_reg;
        exitcond_flatten10_reg_1334_pp0_iter8_reg <= exitcond_flatten10_reg_1334_pp0_iter7_reg;
        or_cond2_reg_1364_pp0_iter2_reg <= or_cond2_reg_1364_pp0_iter1_reg;
        or_cond2_reg_1364_pp0_iter3_reg <= or_cond2_reg_1364_pp0_iter2_reg;
        or_cond2_reg_1364_pp0_iter4_reg <= or_cond2_reg_1364_pp0_iter3_reg;
        or_cond2_reg_1364_pp0_iter5_reg <= or_cond2_reg_1364_pp0_iter4_reg;
        or_cond2_reg_1364_pp0_iter6_reg <= or_cond2_reg_1364_pp0_iter5_reg;
        or_cond2_reg_1364_pp0_iter7_reg <= or_cond2_reg_1364_pp0_iter6_reg;
        or_cond2_reg_1364_pp0_iter8_reg <= or_cond2_reg_1364_pp0_iter7_reg;
        tmp_cast9_mid2_v_reg_1353_pp0_iter2_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter1_reg;
        tmp_cast9_mid2_v_reg_1353_pp0_iter3_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter2_reg;
        tmp_cast9_mid2_v_reg_1353_pp0_iter4_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter3_reg;
        tmp_cast9_mid2_v_reg_1353_pp0_iter5_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter4_reg;
        tmp_cast9_mid2_v_reg_1353_pp0_iter6_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter5_reg;
        tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg <= tmp_cast9_mid2_v_reg_1353_pp0_iter6_reg;
        x_mid2_reg_1348_pp0_iter2_reg <= x_mid2_reg_1348_pp0_iter1_reg;
        x_mid2_reg_1348_pp0_iter3_reg <= x_mid2_reg_1348_pp0_iter2_reg;
        x_mid2_reg_1348_pp0_iter4_reg <= x_mid2_reg_1348_pp0_iter3_reg;
        x_mid2_reg_1348_pp0_iter5_reg <= x_mid2_reg_1348_pp0_iter4_reg;
        x_mid2_reg_1348_pp0_iter6_reg <= x_mid2_reg_1348_pp0_iter5_reg;
        x_mid2_reg_1348_pp0_iter7_reg <= x_mid2_reg_1348_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op195_read_state12 == 1'b1))) begin
        in_addr41_read_reg_1384 <= m_axi_in_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond2_fu_1127_p2 == 1'd1))) begin
        in_addr41_reg_1368 <= sum_cast_fu_1152_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next1_5_reg_1263 <= indvar_flatten_next1_5_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond2_reg_1364 <= or_cond2_fu_1127_p2;
        tmp_cast9_mid2_v_reg_1353 <= tmp_cast9_mid2_v_fu_1052_p3;
        x_mid2_reg_1348 <= x_mid2_fu_949_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_cast_reg_1255[29 : 0] <= sext_cast_fu_334_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten10_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_52_cast_mid2_reg_1343 <= tmp_52_cast_mid2_fu_810_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten10_fu_770_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_404_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten10_reg_1334 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cin_phi_fu_258_p4 = tmp_52_cast_mid2_reg_1343;
    end else begin
        ap_phi_mux_cin_phi_fu_258_p4 = cin_reg_254;
    end
end

always @ (*) begin
    if (((exitcond_flatten10_reg_1334_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (or_cond2_reg_1364_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_input_buffer1_phi_fu_314_p4 = input_buffer_fu_1220_p1;
    end else begin
        ap_phi_mux_input_buffer1_phi_fu_314_p4 = ap_phi_reg_pp0_iter9_input_buffer1_reg_310;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_404_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_in_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_in_r_ARREADY = m_axi_in_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_in_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_bias_ce0 = 1'b1;
    end else begin
        c1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        c1_weight_ce0 = 1'b1;
    end else begin
        c1_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_321_p0 = c1_bias_load_reg_1303;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_321_p0 = tmp_68_fu_327_p2;
    end else begin
        grp_fu_321_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_321_p1 = output_buffer_2_reg_287;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_321_p1 = ap_phi_mux_output_buffer_2_phi_fu_291_p4;
    end else begin
        grp_fu_321_p1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_flatten10_reg_1334 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond2_reg_1364 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_r_blk_n_AR = m_axi_in_r_ARREADY;
    end else begin
        in_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten10_reg_1334_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (or_cond2_reg_1364_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_r_blk_n_R = m_axi_in_r_RVALID;
    end else begin
        in_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_in_r_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op184_readreq_state5 == 1'b1))) begin
        m_axi_in_r_ARVALID = 1'b1;
    end else begin
        m_axi_in_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op195_read_state12 == 1'b1))) begin
        m_axi_in_r_RREADY = 1'b1;
    end else begin
        m_axi_in_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_404_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten10_fu_770_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten10_fu_770_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_in_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op195_read_state12 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_in_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op195_read_state12 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_in_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_predicate_op195_read_state12 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter8 = ((m_axi_in_r_RVALID == 1'b0) & (ap_predicate_op195_read_state12 == 1'b1));
end

assign ap_block_state13_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_m_axi_in_r_ARREADY == 1'b0) & (ap_predicate_op184_readreq_state5 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1046 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op184_readreq_state5 == 1'b1));
end

always @ (*) begin
    ap_condition_231 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_output_buffer_2_phi_fu_291_p4 = output_buffer_2_reg_287;

assign ap_phi_reg_pp0_iter0_input_buffer1_reg_310 = 'bx;

always @ (*) begin
    ap_predicate_op184_readreq_state5 = ((exitcond_flatten10_reg_1334 == 1'd0) & (or_cond2_reg_1364 == 1'd1));
end

always @ (*) begin
    ap_predicate_op195_read_state12 = ((exitcond_flatten10_reg_1334_pp0_iter7_reg == 1'd0) & (or_cond2_reg_1364_pp0_iter7_reg == 1'd1));
end

assign c1_bias_address0 = c1_bias_load_mid2_fu_482_p1;

assign c1_bias_load_mid2_fu_482_p1 = c1_bias_load_mid2_v_fu_474_p3;

assign c1_bias_load_mid2_v_fu_474_p3 = ((exitcond_flatten9_fu_416_p2[0:0] === 1'b1) ? cout_s_fu_430_p2 : cout_reg_198);

assign c1_weight_address0 = tmp_67_fu_1215_p1;

assign cin_cast_fu_652_p1 = ap_phi_mux_cin_phi_fu_258_p4;

assign cin_cast_mid1_fu_802_p1 = cin_s_fu_796_p2;

assign cin_s_fu_796_p2 = (ap_phi_mux_cin_phi_fu_258_p4 ^ 1'd1);

assign cout_s_fu_430_p2 = (cout_reg_198 + 3'd1);

assign exitcond1_mid_fu_533_p2 = (not_exitcond_flatten_8_fu_521_p2 & exitcond_fu_527_p2);

assign exitcond2_fu_925_p2 = ((x_reg_299 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_flatten10_fu_770_p2 = ((indvar_flatten8_reg_243 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_flatten11_fu_782_p2 = ((indvar_flatten_reg_265 == 6'd25) ? 1'b1 : 1'b0);

assign exitcond_flatten9_fu_416_p2 = ((indvar_flatten7_reg_209 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_404_p2 = ((indvar_flatten6_reg_187 == 13'd4704) ? 1'b1 : 1'b0);

assign exitcond_fu_527_p2 = ((w_reg_232 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_931_p2 = (not_exitcond_flatten_fu_919_p2 & exitcond2_fu_925_p2);

assign h_1_fu_539_p2 = (h_mid_fu_422_p3 + 5'd1);

assign h_cast3_fu_368_p1 = h_reg_221;

assign h_cast3_mid1_fu_559_p1 = h_1_fu_539_p2;

assign h_cast_mid2_cast_fu_611_p1 = h_cast_mid2_reg_1292;

assign h_cast_mid2_fu_563_p3 = ((exitcond1_mid_fu_533_p2[0:0] === 1'b1) ? h_1_fu_539_p2 : h_mid_fu_422_p3);

assign h_mid_fu_422_p3 = ((exitcond_flatten9_fu_416_p2[0:0] === 1'b1) ? 5'd0 : h_reg_221);

assign indvar_flatten63_op_fu_1242_p2 = (indvar_flatten7_reg_209 + 10'd1);

assign indvar_flatten_next1_4_fu_1248_p3 = ((exitcond_flatten9_reg_1268[0:0] === 1'b1) ? 10'd1 : indvar_flatten63_op_fu_1242_p2);

assign indvar_flatten_next1_5_fu_410_p2 = (indvar_flatten6_reg_187 + 13'd1);

assign indvar_flatten_next1_fu_776_p2 = (indvar_flatten8_reg_243 + 5'd1);

assign indvar_flatten_next_fu_1174_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_1168_p2);

assign indvar_flatten_op_fu_1168_p2 = (indvar_flatten_reg_265 + 6'd1);

assign input_buffer_fu_1220_p1 = in_addr41_read_reg_1384;

assign m_axi_in_r_ARADDR = in_addr41_reg_1368;

assign m_axi_in_r_ARBURST = 2'd0;

assign m_axi_in_r_ARCACHE = 4'd0;

assign m_axi_in_r_ARID = 1'd0;

assign m_axi_in_r_ARLEN = 32'd1;

assign m_axi_in_r_ARLOCK = 2'd0;

assign m_axi_in_r_ARPROT = 3'd0;

assign m_axi_in_r_ARQOS = 4'd0;

assign m_axi_in_r_ARREGION = 4'd0;

assign m_axi_in_r_ARSIZE = 3'd0;

assign m_axi_in_r_ARUSER = 1'd0;

assign m_axi_in_r_AWADDR = 32'd0;

assign m_axi_in_r_AWBURST = 2'd0;

assign m_axi_in_r_AWCACHE = 4'd0;

assign m_axi_in_r_AWID = 1'd0;

assign m_axi_in_r_AWLEN = 32'd0;

assign m_axi_in_r_AWLOCK = 2'd0;

assign m_axi_in_r_AWPROT = 3'd0;

assign m_axi_in_r_AWQOS = 4'd0;

assign m_axi_in_r_AWREGION = 4'd0;

assign m_axi_in_r_AWSIZE = 3'd0;

assign m_axi_in_r_AWUSER = 1'd0;

assign m_axi_in_r_AWVALID = 1'b0;

assign m_axi_in_r_BREADY = 1'b0;

assign m_axi_in_r_WDATA = 32'd0;

assign m_axi_in_r_WID = 1'd0;

assign m_axi_in_r_WLAST = 1'b0;

assign m_axi_in_r_WSTRB = 4'd0;

assign m_axi_in_r_WUSER = 1'd0;

assign m_axi_in_r_WVALID = 1'b0;

assign not_exitcond_flatten_8_fu_521_p2 = (exitcond_flatten9_fu_416_p2 ^ 1'd1);

assign not_exitcond_flatten_fu_919_p2 = (exitcond_flatten11_fu_782_p2 ^ 1'd1);

assign or_cond2_fu_1127_p2 = (tmp6_mid2_fu_1066_p3 & tmp5_fu_1121_p2);

assign output_r_address0 = tmp_57_fu_1232_p1;

assign output_r_d0 = grp_fu_321_p2;

assign p_shl1_cast_fu_358_p1 = p_shl1_fu_350_p3;

assign p_shl1_cast_mid1_fu_456_p1 = p_shl1_mid1_fu_448_p3;

assign p_shl1_fu_350_p3 = {{cout_reg_198}, {2'd0}};

assign p_shl1_mid1_fu_448_p3 = {{cout_s_fu_430_p2}, {2'd0}};

assign p_shl2_fu_378_p3 = {{tmp_45_fu_372_p2}, {5'd0}};

assign p_shl2_mid1_fu_577_p3 = {{tmp_45_mid1_fu_571_p2}, {5'd0}};

assign p_shl2_mid_fu_487_p3 = {{tmp_42_mid1_fu_460_p2}, {5'd0}};

assign p_shl3_cast_fu_394_p1 = $signed(p_shl3_fu_386_p3);

assign p_shl3_cast_mid1_fu_593_p1 = $signed(p_shl3_mid1_fu_585_p3);

assign p_shl3_cast_mid_fu_503_p1 = $signed(p_shl3_mid_fu_495_p3);

assign p_shl3_fu_386_p3 = {{tmp_45_fu_372_p2}, {2'd0}};

assign p_shl3_mid1_fu_585_p3 = {{tmp_45_mid1_fu_571_p2}, {2'd0}};

assign p_shl3_mid_fu_495_p3 = {{tmp_42_mid1_fu_460_p2}, {2'd0}};

assign p_shl4_fu_669_p3 = {{tmp_53_fu_660_p2}, {2'd0}};

assign p_shl4_mid1_fu_843_p3 = {{tmp_53_mid1_fu_822_p2}, {2'd0}};

assign p_shl4_mid2_fu_851_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? p_shl4_mid1_fu_843_p3 : p_shl4_fu_669_p3);

assign p_shl7_cast_mid2_fu_1192_p1 = p_shl7_cast_mid2_v_fu_1185_p3;

assign p_shl7_cast_mid2_v_fu_1185_p3 = {{tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg}, {2'd0}};

assign p_shl8_fu_722_p3 = {{tmp_61_fu_716_p2}, {5'd0}};

assign p_shl8_mid1_fu_1002_p3 = {{tmp_61_mid1_fu_996_p2}, {5'd0}};

assign p_shl8_mid_fu_864_p3 = {{tmp_61_mid_fu_859_p2}, {5'd0}};

assign p_shl9_cast_fu_738_p1 = $signed(p_shl9_fu_730_p3);

assign p_shl9_cast_mid1_fu_1018_p1 = $signed(p_shl9_mid1_fu_1010_p3);

assign p_shl9_cast_mid_fu_880_p1 = $signed(p_shl9_mid_fu_872_p3);

assign p_shl9_fu_730_p3 = {{tmp_61_fu_716_p2}, {2'd0}};

assign p_shl9_mid1_fu_1010_p3 = {{tmp_61_mid1_fu_996_p2}, {2'd0}};

assign p_shl9_mid_fu_872_p3 = {{tmp_61_mid_fu_859_p2}, {2'd0}};

assign p_shl_cast_fu_346_p1 = p_shl_fu_338_p3;

assign p_shl_cast_mid1_fu_444_p1 = p_shl_mid1_fu_436_p3;

assign p_shl_fu_338_p3 = {{cout_reg_198}, {5'd0}};

assign p_shl_mid1_fu_436_p3 = {{cout_s_fu_430_p2}, {5'd0}};

assign rev1_fu_634_p2 = (tmp_9_fu_626_p3 ^ 1'd1);

assign rev5_fu_984_p2 = (tmp_11_fu_976_p3 ^ 1'd1);

assign rev8_fu_1109_p2 = (tmp_12_fu_1101_p3 ^ 1'd1);

assign rev_fu_704_p2 = (tmp_10_fu_696_p3 ^ 1'd1);

assign sext_cast_fu_334_p1 = in_offset;

assign sum_cast_fu_1152_p1 = sum_fu_1147_p2;

assign sum_fu_1147_p2 = (sext_cast_reg_1255 + tmp_67_cast_fu_1143_p1);

assign tmp2_cast_fu_687_p1 = $signed(tmp2_fu_681_p2);

assign tmp2_cast_mid1_fu_967_p1 = $signed(tmp2_mid1_fu_961_p2);

assign tmp2_fu_681_p2 = ($signed(y_reg_276) + $signed(3'd6));

assign tmp2_mid1_fu_961_p2 = ($signed(y_mid_fu_788_p3) + $signed(3'd7));

assign tmp3_cast_fu_754_p1 = tmp3_fu_748_p2;

assign tmp3_cast_mid1_fu_1042_p1 = tmp3_mid1_fu_1036_p2;

assign tmp3_fu_748_p2 = (tmp_53_cast1_fu_665_p1 + y_cast_fu_677_p1);

assign tmp3_mid1_fu_1036_p2 = (tmp_53_cast1_mid2_ca_fu_835_p1 + y_cast_mid1_fu_957_p1);

assign tmp4_cast_fu_1088_p1 = $signed(tmp4_fu_1082_p2);

assign tmp4_fu_1082_p2 = ($signed(x_mid2_fu_949_p3) + $signed(3'd6));

assign tmp5_fu_1121_p2 = (tmp_64_fu_1115_p2 & rev8_fu_1109_p2);

assign tmp6_fu_764_p2 = (tmp_s_fu_710_p2 & rev_fu_704_p2);

assign tmp6_mid1_fu_1060_p2 = (tmp_mid1_fu_990_p2 & rev5_fu_984_p2);

assign tmp6_mid2_fu_1066_p3 = ((exitcond_mid_fu_931_p2[0:0] === 1'b1) ? tmp6_mid1_fu_1060_p2 : tmp6_mid3_fu_912_p3);

assign tmp6_mid3_fu_912_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? tmp6_mid_reg_1329 : tmp6_fu_764_p2);

assign tmp6_mid_fu_646_p2 = (tmp_mid_12_fu_640_p2 & rev1_fu_634_p2);

assign tmp7_cast_fu_1205_p1 = tmp7_fu_1199_p2;

assign tmp7_fu_1199_p2 = (tmp_cast9_mid2_fu_1182_p1 + x_cast8_fu_1196_p1);

assign tmp_10_fu_696_p3 = yi_fu_691_p2[32'd5];

assign tmp_11_fu_976_p3 = yi_mid1_fu_971_p2[32'd5];

assign tmp_12_fu_1101_p3 = xi_fu_1092_p2[32'd5];

assign tmp_14_fu_545_p2 = (exitcond_flatten9_fu_416_p2 | exitcond1_mid_fu_533_p2);

assign tmp_15_fu_943_p2 = (exitcond_mid_fu_931_p2 | exitcond_flatten11_fu_782_p2);

assign tmp_42_fu_362_p2 = (p_shl_cast_fu_346_p1 - p_shl1_cast_fu_358_p1);

assign tmp_42_mid1_fu_460_p2 = (p_shl_cast_mid1_fu_444_p1 - p_shl1_cast_mid1_fu_456_p1);

assign tmp_42_mid2_fu_466_p3 = ((exitcond_flatten9_fu_416_p2[0:0] === 1'b1) ? tmp_42_mid1_fu_460_p2 : tmp_42_fu_362_p2);

assign tmp_45_fu_372_p2 = (h_cast3_fu_368_p1 + tmp_42_fu_362_p2);

assign tmp_45_mid1_fu_571_p2 = (tmp_42_mid2_fu_466_p3 + h_cast3_mid1_fu_559_p1);

assign tmp_46_fu_398_p2 = ($signed(p_shl2_fu_378_p3) - $signed(p_shl3_cast_fu_394_p1));

assign tmp_46_mid1_fu_597_p2 = ($signed(p_shl2_mid1_fu_577_p3) - $signed(p_shl3_cast_mid1_fu_593_p1));

assign tmp_46_mid2_fu_603_p3 = ((exitcond1_mid_fu_533_p2[0:0] === 1'b1) ? tmp_46_mid1_fu_597_p2 : tmp_46_mid3_fu_513_p3);

assign tmp_46_mid3_fu_513_p3 = ((exitcond_flatten9_fu_416_p2[0:0] === 1'b1) ? tmp_46_mid_fu_507_p2 : tmp_46_fu_398_p2);

assign tmp_46_mid_fu_507_p2 = ($signed(p_shl2_mid_fu_487_p3) - $signed(p_shl3_cast_mid_fu_503_p1));

assign tmp_52_cast_fu_656_p1 = ap_phi_mux_cin_phi_fu_258_p4;

assign tmp_52_cast_mid1_fu_806_p1 = cin_s_fu_796_p2;

assign tmp_52_cast_mid2_cas_fu_818_p1 = tmp_52_cast_mid2_fu_810_p3;

assign tmp_52_cast_mid2_fu_810_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? cin_s_fu_796_p2 : ap_phi_mux_cin_phi_fu_258_p4);

assign tmp_53_cast1_fu_665_p1 = tmp_53_fu_660_p2;

assign tmp_53_cast1_mid2_ca_fu_835_p1 = tmp_53_cast1_mid2_fu_827_p3;

assign tmp_53_cast1_mid2_fu_827_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? tmp_53_mid1_fu_822_p2 : tmp_53_fu_660_p2);

assign tmp_53_cast_mid1_fu_839_p1 = tmp_53_mid1_fu_822_p2;

assign tmp_53_fu_660_p2 = (c1_bias_load_mid2_v_reg_1273 + cin_cast_fu_652_p1);

assign tmp_53_mid1_fu_822_p2 = (c1_bias_load_mid2_v_reg_1273 + cin_cast_mid1_fu_802_p1);

assign tmp_56_cast_fu_1228_p1 = $signed(tmp_56_fu_1224_p2);

assign tmp_56_fu_1224_p2 = (tmp_46_mid2_reg_1298 + w_cast3_reg_1314);

assign tmp_57_fu_1232_p1 = $unsigned(tmp_56_cast_fu_1228_p1);

assign tmp_61_fu_716_p2 = (tmp_52_cast_fu_656_p1 + yi_fu_691_p2);

assign tmp_61_mid1_fu_996_p2 = (tmp_52_cast_mid2_cas_fu_818_p1 + yi_mid1_fu_971_p2);

assign tmp_61_mid_fu_859_p2 = (tmp_52_cast_mid1_fu_806_p1 + yi_mid_reg_1324);

assign tmp_62_fu_742_p2 = ($signed(p_shl8_fu_722_p3) - $signed(p_shl9_cast_fu_738_p1));

assign tmp_62_mid1_fu_1022_p2 = ($signed(p_shl8_mid1_fu_1002_p3) - $signed(p_shl9_cast_mid1_fu_1018_p1));

assign tmp_62_mid2_fu_1028_p3 = ((exitcond_mid_fu_931_p2[0:0] === 1'b1) ? tmp_62_mid1_fu_1022_p2 : tmp_62_mid3_fu_890_p3);

assign tmp_62_mid3_fu_890_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? tmp_62_mid_fu_884_p2 : tmp_62_fu_742_p2);

assign tmp_62_mid_fu_884_p2 = ($signed(p_shl8_mid_fu_864_p3) - $signed(p_shl9_cast_mid_fu_880_p1));

assign tmp_64_fu_1115_p2 = (($signed(xi_fu_1092_p2) < $signed(6'd28)) ? 1'b1 : 1'b0);

assign tmp_65_fu_1133_p2 = ($signed(xi_cast_fu_1097_p1) + $signed(tmp_62_mid2_fu_1028_p3));

assign tmp_66_cast_fu_1139_p1 = $signed(tmp_65_fu_1133_p2);

assign tmp_66_fu_1209_p2 = (tmp7_cast_fu_1205_p1 + p_shl7_cast_mid2_fu_1192_p1);

assign tmp_67_cast_fu_1143_p1 = $unsigned(tmp_66_cast_fu_1139_p1);

assign tmp_67_fu_1215_p1 = tmp_66_fu_1209_p2;

assign tmp_9_fu_626_p3 = yi_mid_fu_620_p2[32'd5];

assign tmp_cast9_mid244_v_fu_904_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? tmp_mid_fu_898_p2 : tmp_fu_758_p2);

assign tmp_cast9_mid2_fu_1182_p1 = tmp_cast9_mid2_v_reg_1353_pp0_iter7_reg;

assign tmp_cast9_mid2_v_fu_1052_p3 = ((exitcond_mid_fu_931_p2[0:0] === 1'b1) ? tmp_mid1_10_fu_1046_p2 : tmp_cast9_mid244_v_fu_904_p3);

assign tmp_fu_758_p2 = (tmp3_cast_fu_754_p1 + p_shl4_fu_669_p3);

assign tmp_mid1_10_fu_1046_p2 = (tmp3_cast_mid1_fu_1042_p1 + p_shl4_mid2_fu_851_p3);

assign tmp_mid1_fu_990_p2 = (($signed(yi_mid1_fu_971_p2) < $signed(6'd28)) ? 1'b1 : 1'b0);

assign tmp_mid_12_fu_640_p2 = (($signed(yi_mid_fu_620_p2) < $signed(6'd28)) ? 1'b1 : 1'b0);

assign tmp_mid_fu_898_p2 = (tmp_53_cast_mid1_fu_839_p1 + p_shl4_mid1_fu_843_p3);

assign tmp_s_fu_710_p2 = (($signed(yi_fu_691_p2) < $signed(6'd28)) ? 1'b1 : 1'b0);

assign w_1_fu_1237_p2 = (w_mid2_reg_1285 + 5'd1);

assign w_cast3_fu_614_p1 = w_mid2_reg_1285;

assign w_cast_fu_617_p1 = w_mid2_reg_1285;

assign w_mid2_fu_551_p3 = ((tmp_14_fu_545_p2[0:0] === 1'b1) ? 5'd0 : w_reg_232);

assign x_1_fu_1162_p2 = (x_mid2_fu_949_p3 + 3'd1);

assign x_cast8_fu_1196_p1 = x_mid2_reg_1348_pp0_iter7_reg;

assign x_mid2_fu_949_p3 = ((tmp_15_fu_943_p2[0:0] === 1'b1) ? 3'd0 : x_reg_299);

assign xi_cast_fu_1097_p1 = xi_fu_1092_p2;

assign xi_fu_1092_p2 = ($signed(tmp4_cast_fu_1088_p1) + $signed(w_cast_reg_1319));

assign y_1_fu_937_p2 = (y_mid_fu_788_p3 + 3'd1);

assign y_cast_fu_677_p1 = y_reg_276;

assign y_cast_mid1_fu_957_p1 = y_1_fu_937_p2;

assign y_mid2_fu_1074_p3 = ((exitcond_mid_fu_931_p2[0:0] === 1'b1) ? y_1_fu_937_p2 : y_mid_fu_788_p3);

assign y_mid_fu_788_p3 = ((exitcond_flatten11_fu_782_p2[0:0] === 1'b1) ? 3'd0 : y_reg_276);

assign yi_fu_691_p2 = ($signed(tmp2_cast_fu_687_p1) + $signed(h_cast_mid2_cast_reg_1308));

assign yi_mid1_fu_971_p2 = ($signed(tmp2_cast_mid1_fu_967_p1) + $signed(h_cast_mid2_cast_reg_1308));

assign yi_mid_fu_620_p2 = ($signed(h_cast_mid2_cast_fu_611_p1) + $signed(6'd62));

always @ (posedge ap_clk) begin
    sext_cast_reg_1255[32:30] <= 3'b000;
    tmp_46_mid2_reg_1298[1:0] <= 2'b00;
    h_cast_mid2_cast_reg_1308[5] <= 1'b0;
    w_cast3_reg_1314[13:5] <= 9'b000000000;
    w_cast_reg_1319[5] <= 1'b0;
end

endmodule //conv_1
