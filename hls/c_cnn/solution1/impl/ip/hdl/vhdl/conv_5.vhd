-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c5_weight_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c5_weight_ce0 : STD_LOGIC;
    signal c5_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c5_bias_ce0 : STD_LOGIC;
    signal c5_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten5_reg_172 : STD_LOGIC_VECTOR (6 downto 0);
    signal cin_reg_183 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_194 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_buffer_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next4_fu_259_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next4_reg_511 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_mid2_v_v_fu_277_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_mid2_v_v_reg_524 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_mid2_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_mid2_reg_536 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c5_bias_load_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_cast9_mid2_cast_fu_346_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_cast9_mid2_cast_reg_546 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_mid2_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid2_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten5_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten5_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next5_fu_364_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp4_mid2_v_v_fu_400_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_mid2_v_v_reg_566 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_mid2_v_v_fu_429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_cast_mid2_v_v_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_478_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar_flatten_next3_fu_501_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal indvar_flatten3_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten4_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal h_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_cin_phi_fu_187_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_y_phi_fu_209_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_x_phi_fu_232_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_bias_load_mid2_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_s_fu_271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal not_exitcond_flatten_2_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_mid2_fu_310_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal not_exitcond_flatten_3_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_not_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_mid_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_cast9_mid_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_cast9_mid2_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_s_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_mid2_v_fu_408_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_not_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_mid_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_mid_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_cast_mid2_v_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_cast_mid2_fu_442_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_446_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_cast_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_mid2_fu_412_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_472_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_26_fu_486_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten23_op_fu_495_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_25_mid2_fu_310_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component top_net_fadd_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_fmul_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_5_c5_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_5_c5_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c5_weight_U : component conv_5_c5_weight
    generic map (
        DataWidth => 32,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c5_weight_address0,
        ce0 => c5_weight_ce0,
        q0 => c5_weight_q0);

    c5_bias_U : component conv_5_c5_bias
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c5_bias_address0,
        ce0 => c5_bias_ce0,
        q0 => c5_bias_q0);

    top_net_fadd_32nsbkb_U35 : component top_net_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_240_p0,
        din1 => output_buffer_2_reg_216,
        dout => grp_fu_240_p2);

    top_net_fmul_32nscud_U36 : component top_net_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => in_r_q0,
        din1 => c5_weight_q0,
        dout => tmp_33_fu_246_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cin_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                cin_reg_183 <= tmp4_mid2_v_v_reg_566;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cin_reg_183 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    cout_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                cout_reg_123 <= tmp_25_mid2_v_v_reg_524;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cout_reg_123 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    h_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                h_reg_146 <= h_mid2_reg_551;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_146 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten3_reg_112 <= indvar_flatten_next4_reg_511;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten3_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten4_reg_134 <= indvar_flatten_next3_fu_501_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten4_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten5_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten5_reg_172 <= indvar_flatten_next5_fu_364_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten5_reg_172 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_194 <= indvar_flatten_next_fu_478_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_194 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    output_buffer_2_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                output_buffer_2_reg_216 <= grp_fu_240_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                output_buffer_2_reg_216 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                w_reg_158 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_reg_158 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_228 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_reg_228 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    y_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_reg_205 <= tmp1_cast_mid2_v_v_reg_571;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_reg_205 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c5_bias_load_reg_541 <= c5_bias_q0;
                    h_cast9_mid2_cast_reg_546(0) <= h_cast9_mid2_cast_fu_346_p1(0);
                h_mid2_reg_551 <= h_mid2_fu_350_p3;
                    tmp_25_mid2_reg_536(9 downto 2) <= tmp_25_mid2_fu_310_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten5_reg_557 <= exitcond_flatten5_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                exitcond_flatten_reg_516 <= exitcond_flatten_fu_265_p2;
                tmp_25_mid2_v_v_reg_524 <= tmp_25_mid2_v_v_fu_277_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next4_reg_511 <= indvar_flatten_next4_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp1_cast_mid2_v_v_reg_571 <= tmp1_cast_mid2_v_v_fu_429_p3;
                tmp4_mid2_v_v_reg_566 <= tmp4_mid2_v_v_fu_400_p3;
            end if;
        end if;
    end process;
    tmp_25_mid2_reg_536(1 downto 0) <= "00";
    h_cast9_mid2_cast_reg_546(3 downto 1) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten4_fu_253_p2, exitcond_flatten5_fu_358_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten4_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_flatten5_fu_358_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_flatten5_fu_358_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten5_fu_358_p2)
    begin
        if ((exitcond_flatten5_fu_358_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten4_fu_253_p2)
    begin
        if ((((exitcond_flatten4_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cin_phi_fu_187_p4_assign_proc : process(cin_reg_183, exitcond_flatten5_reg_557, ap_CS_fsm_pp0_stage0, tmp4_mid2_v_v_reg_566, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_cin_phi_fu_187_p4 <= tmp4_mid2_v_v_reg_566;
        else 
            ap_phi_mux_cin_phi_fu_187_p4 <= cin_reg_183;
        end if; 
    end process;


    ap_phi_mux_x_phi_fu_232_p4_assign_proc : process(x_reg_228, exitcond_flatten5_reg_557, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_x_phi_fu_232_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_x_phi_fu_232_p4 <= x_reg_228;
        end if; 
    end process;


    ap_phi_mux_y_phi_fu_209_p4_assign_proc : process(y_reg_205, exitcond_flatten5_reg_557, ap_CS_fsm_pp0_stage0, tmp1_cast_mid2_v_v_reg_571, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten5_reg_557 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_y_phi_fu_209_p4 <= tmp1_cast_mid2_v_v_reg_571;
        else 
            ap_phi_mux_y_phi_fu_209_p4 <= y_reg_205;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten4_fu_253_p2)
    begin
        if (((exitcond_flatten4_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c5_bias_address0 <= c5_bias_load_mid2_fu_285_p1(4 - 1 downto 0);

    c5_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c5_bias_ce0 <= ap_const_logic_1;
        else 
            c5_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c5_bias_load_mid2_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_mid2_v_v_fu_277_p3),64));
    c5_weight_address0 <= tmp_32_fu_467_p1(10 - 1 downto 0);

    c5_weight_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            c5_weight_ce0 <= ap_const_logic_1;
        else 
            c5_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_s_fu_394_p2 <= std_logic_vector(unsigned(ap_phi_mux_cin_phi_fu_187_p4) + unsigned(ap_const_lv7_1));
    cout_s_fu_271_p2 <= std_logic_vector(unsigned(cout_reg_123) + unsigned(ap_const_lv4_1));
    exitcond_flatten1_fu_370_p2 <= "1" when (indvar_flatten_reg_194 = ap_const_lv2_1) else "0";
    exitcond_flatten4_fu_253_p2 <= "1" when (indvar_flatten3_reg_112 = ap_const_lv4_A) else "0";
    exitcond_flatten5_fu_358_p2 <= "1" when (indvar_flatten5_reg_172 = ap_const_lv7_54) else "0";
    exitcond_flatten_fu_265_p2 <= "1" when (indvar_flatten4_reg_134 = ap_const_lv2_1) else "0";

    grp_fu_240_p0_assign_proc : process(c5_bias_load_reg_541, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_block_pp0_stage0, tmp_33_fu_246_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_240_p0 <= c5_bias_load_reg_541;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_240_p0 <= tmp_33_fu_246_p2;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_333_p2 <= (h_not_fu_327_p2 or exitcond_flatten_reg_516);
    h_cast9_mid2_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_cast9_mid2_fu_338_p3),4));
    h_cast9_mid2_fu_338_p3 <= 
        h_1_fu_333_p2 when (w_mid_fu_301_p2(0) = '1') else 
        h_cast9_mid_fu_321_p2;
    h_cast9_mid_fu_321_p2 <= (not_exitcond_flatten_3_fu_316_p2 and h_reg_146);
    h_mid2_fu_350_p3 <= 
        h_1_fu_333_p2 when (w_mid_fu_301_p2(0) = '1') else 
        h_mid_fu_295_p2;
    h_mid_fu_295_p2 <= (not_exitcond_flatten_2_fu_290_p2 and h_reg_146);
    h_not_fu_327_p2 <= (h_reg_146 xor ap_const_lv1_1);
    in_r_address0 <= tmp_30_fu_452_p1(7 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten23_op_fu_495_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_134) + unsigned(ap_const_lv2_1));
    indvar_flatten_next3_fu_501_p3 <= 
        ap_const_lv2_1 when (exitcond_flatten_reg_516(0) = '1') else 
        indvar_flatten23_op_fu_495_p2;
    indvar_flatten_next4_fu_259_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_112) + unsigned(ap_const_lv4_1));
    indvar_flatten_next5_fu_364_p2 <= std_logic_vector(unsigned(indvar_flatten5_reg_172) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_478_p3 <= 
        ap_const_lv2_1 when (exitcond_flatten1_fu_370_p2(0) = '1') else 
        indvar_flatten_op_fu_472_p2;
    indvar_flatten_op_fu_472_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_194) + unsigned(ap_const_lv2_1));
    not_exitcond_flatten_2_fu_290_p2 <= (exitcond_flatten_reg_516 xor ap_const_lv1_1);
    not_exitcond_flatten_3_fu_316_p2 <= (exitcond_flatten_reg_516 xor ap_const_lv1_1);
    not_exitcond_flatten_fu_376_p2 <= (exitcond_flatten1_fu_370_p2 xor ap_const_lv1_1);
    output_r_address0 <= tmp_27_fu_490_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= grp_fu_240_p2;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_mid2_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_cast_mid2_v_fu_437_p2),7));
    tmp1_cast_mid2_v_fu_437_p2 <= (tmp1_cast_mid2_v_v_fu_429_p3 xor h_mid2_reg_551);
    tmp1_cast_mid2_v_v_fu_429_p3 <= 
        y_1_fu_423_p2 when (x_mid_fu_388_p2(0) = '1') else 
        y_mid_fu_382_p2;
    tmp4_mid2_fu_412_p2 <= std_logic_vector(unsigned(tmp4_mid2_v_fu_408_p1) + unsigned(tmp_25_mid2_reg_536));
    tmp4_mid2_v_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_mid2_v_v_fu_400_p3),10));
    tmp4_mid2_v_v_fu_400_p3 <= 
        cin_s_fu_394_p2 when (exitcond_flatten1_fu_370_p2(0) = '1') else 
        ap_phi_mux_cin_phi_fu_187_p4;
    tmp5_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_cast_mid2_v_v_fu_429_p3),10));
    tmp_25_mid2_fu_310_p0 <= tmp_25_mid2_fu_310_p00(4 - 1 downto 0);
    tmp_25_mid2_fu_310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_mid2_v_v_reg_524),10));
    tmp_25_mid2_fu_310_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_mid2_fu_310_p0) * unsigned(ap_const_lv10_54), 10));
    tmp_25_mid2_v_v_fu_277_p3 <= 
        cout_s_fu_271_p2 when (exitcond_flatten_fu_265_p2(0) = '1') else 
        cout_reg_123;
    tmp_26_fu_486_p2 <= std_logic_vector(unsigned(tmp_25_mid2_v_v_reg_524) + unsigned(h_cast9_mid2_cast_reg_546));
    tmp_27_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_486_p2),64));
    tmp_29_fu_446_p2 <= std_logic_vector(unsigned(tmp4_mid2_v_v_fu_400_p3) + unsigned(tmp1_cast_mid2_fu_442_p1));
    tmp_30_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_446_p2),64));
    tmp_31_fu_461_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_457_p1) + unsigned(tmp4_mid2_fu_412_p2));
    tmp_32_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_461_p2),64));
    w_mid_fu_301_p2 <= (w_reg_158 and not_exitcond_flatten_2_fu_290_p2);
    x_mid_fu_388_p2 <= (not_exitcond_flatten_fu_376_p2 and ap_phi_mux_x_phi_fu_232_p4);
    y_1_fu_423_p2 <= (y_not_fu_417_p2 or exitcond_flatten1_fu_370_p2);
    y_mid_fu_382_p2 <= (not_exitcond_flatten_fu_376_p2 and ap_phi_mux_y_phi_fu_209_p4);
    y_not_fu_417_p2 <= (ap_phi_mux_y_phi_fu_209_p4 xor ap_const_lv1_1);
end behav;
