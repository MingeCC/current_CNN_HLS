-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten2_reg_145 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_156 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_178 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_189 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten2_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next2_fu_228_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next2_reg_637 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_cast9_mid2_v_fu_254_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast9_mid2_v_reg_642 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_mid2_fu_330_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_mid2_reg_648 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast8_mid2_fu_338_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_cast8_mid2_reg_654 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_384_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_reg_660 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_reg_665 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_459_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_675 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_502_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_reg_685 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_508_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_reg_691 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next_fu_520_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal max_val_1_fu_532_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal max_val_1_reg_707 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal max_val_4_fu_547_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal max_val_4_reg_722 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp5_fu_592_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_reg_737 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_fu_598_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_1_reg_743 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten2_phi_fu_149_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_160_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_j_phi_fu_182_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_n_phi_fu_193_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal max_val_1_cast_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal max_val_4_cast_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_5_cast_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_24_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_208_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_248_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_cast_mid2_v_fu_262_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_cast_mid2_v_fu_274_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_216_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid_fu_240_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_318_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_mid1_fu_346_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_cast_mid_fu_284_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_cast_mid2_fu_354_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_mid1_fu_366_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_mid_fu_292_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_mid2_fu_372_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_fu_388_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_cast_fu_396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast_mid2_fu_270_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_430_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_422_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_cast_mid2_cast_fu_362_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_442_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_cast_mid2_cast_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_cast_mid2_fu_280_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_484_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_476_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_492_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_op_fu_514_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_5_fu_564_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_575_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast9_mid2_fu_558_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_582_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_cast7_fu_561_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_586_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast8_mid2_cast_fu_603_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_fu_609_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_cast_fu_606_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_616_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component top_net_fcmp_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_net_fcmp_32nsdEe_U20 : component top_net_fcmp_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_200_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_156 <= i_cast9_mid2_v_reg_642;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_156 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten2_reg_145 <= indvar_flatten_next2_reg_637;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten2_reg_145 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_167 <= indvar_flatten_next_reg_697;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_167 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_178 <= j_cast8_mid2_reg_654;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_178 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    n_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n_reg_189 <= n_1_reg_743;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_reg_189 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten2_reg_633 <= exitcond_flatten2_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_cast9_mid2_v_reg_642 <= i_cast9_mid2_v_fu_254_p3;
                indvar_flatten_next_reg_697 <= indvar_flatten_next_fu_520_p3;
                j_cast8_mid2_reg_654 <= j_cast8_mid2_fu_338_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next2_reg_637 <= indvar_flatten_next2_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                max_val_1_reg_707 <= max_val_1_fu_532_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                max_val_4_reg_722 <= max_val_4_fu_547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                n_1_reg_743 <= n_1_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                n_mid2_reg_648 <= n_mid2_fu_330_p3;
                    tmp_12_reg_665(10 downto 1) <= tmp_12_fu_448_p2(10 downto 1);
                    tmp_14_reg_675(10 downto 1) <= tmp_14_fu_459_p2(10 downto 1);
                    tmp_18_reg_685(10 downto 1) <= tmp_18_fu_502_p2(10 downto 1);
                tmp_1_reg_660 <= tmp_1_fu_384_p1;
                    tmp_20_reg_691(10 downto 1) <= tmp_20_fu_508_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp5_reg_737 <= tmp5_fu_592_p2;
            end if;
        end if;
    end process;
    tmp_12_reg_665(0) <= '0';
    tmp_14_reg_675(0) <= '1';
    tmp_18_reg_685(0) <= '0';
    tmp_20_reg_691(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten2_fu_222_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten2_fu_222_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten2_fu_222_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten2_fu_222_p2)
    begin
        if ((exitcond_flatten2_fu_222_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_160_p4_assign_proc : process(i_reg_156, exitcond_flatten2_reg_633, ap_CS_fsm_pp0_stage0, i_cast9_mid2_v_reg_642, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_160_p4 <= i_cast9_mid2_v_reg_642;
        else 
            ap_phi_mux_i_phi_fu_160_p4 <= i_reg_156;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten2_phi_fu_149_p4_assign_proc : process(indvar_flatten2_reg_145, exitcond_flatten2_reg_633, ap_CS_fsm_pp0_stage0, indvar_flatten_next2_reg_637, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten2_phi_fu_149_p4 <= indvar_flatten_next2_reg_637;
        else 
            ap_phi_mux_indvar_flatten2_phi_fu_149_p4 <= indvar_flatten2_reg_145;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_171_p4_assign_proc : process(indvar_flatten_reg_167, exitcond_flatten2_reg_633, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_697, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_171_p4 <= indvar_flatten_next_reg_697;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_171_p4 <= indvar_flatten_reg_167;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_182_p4_assign_proc : process(j_reg_178, exitcond_flatten2_reg_633, ap_CS_fsm_pp0_stage0, j_cast8_mid2_reg_654, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_182_p4 <= j_cast8_mid2_reg_654;
        else 
            ap_phi_mux_j_phi_fu_182_p4 <= j_reg_178;
        end if; 
    end process;


    ap_phi_mux_n_phi_fu_193_p4_assign_proc : process(n_reg_189, exitcond_flatten2_reg_633, ap_CS_fsm_pp0_stage0, n_1_reg_743, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_n_phi_fu_193_p4 <= n_1_reg_743;
        else 
            ap_phi_mux_n_phi_fu_193_p4 <= n_reg_189;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten2_fu_222_p2 <= "1" when (ap_phi_mux_indvar_flatten2_phi_fu_149_p4 = ap_const_lv9_190) else "0";
    exitcond_flatten_fu_234_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_171_p4 = ap_const_lv8_50) else "0";
    exitcond_fu_306_p2 <= "1" when (ap_phi_mux_n_phi_fu_193_p4 = ap_const_lv5_10) else "0";
    exitcond_mid_fu_312_p2 <= (not_exitcond_flatten_fu_300_p2 and exitcond_fu_306_p2);

    grp_fu_200_p0_assign_proc : process(in_r_q0, in_r_q1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_200_p0 <= in_r_q0;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_200_p0 <= in_r_q1;
        else 
            grp_fu_200_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_200_p1_assign_proc : process(in_r_q0, in_r_q1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_200_p1 <= in_r_q1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_200_p1 <= in_r_q0;
        else 
            grp_fu_200_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_cast9_mid2_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast9_mid2_v_reg_642),7));
    i_cast9_mid2_v_fu_254_p3 <= 
        i_s_fu_248_p2 when (exitcond_flatten_fu_234_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_160_p4;
    i_s_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i_phi_fu_160_p4));

    in_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, tmp_13_fu_454_p1, tmp_19_fu_528_p1, ap_block_pp0_stage1, tmp_21_fu_543_p1, ap_block_pp0_stage2, max_val_5_cast_fu_570_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                in_r_address0 <= max_val_5_cast_fu_570_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                in_r_address0 <= tmp_21_fu_543_p1(11 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                in_r_address0 <= tmp_19_fu_528_p1(11 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                in_r_address0 <= tmp_13_fu_454_p1(11 - 1 downto 0);
            else 
                in_r_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            in_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, tmp_15_fu_465_p1, ap_block_pp0_stage1, max_val_1_cast_fu_538_p1, ap_block_pp0_stage2, max_val_4_cast_fu_553_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                in_r_address1 <= max_val_4_cast_fu_553_p1(11 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                in_r_address1 <= max_val_1_cast_fu_538_p1(11 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                in_r_address1 <= tmp_15_fu_465_p1(11 - 1 downto 0);
            else 
                in_r_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            in_r_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next2_fu_228_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten2_phi_fu_149_p4) + unsigned(ap_const_lv9_1));
    indvar_flatten_next_fu_520_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten_fu_234_p2(0) = '1') else 
        indvar_flatten_op_fu_514_p2;
    indvar_flatten_op_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_171_p4));
    j_1_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid_fu_240_p3));
    j_cast8_mid2_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast8_mid2_reg_654),9));
    j_cast8_mid2_fu_338_p3 <= 
        j_1_fu_318_p2 when (exitcond_mid_fu_312_p2(0) = '1') else 
        j_mid_fu_240_p3;
    j_mid_fu_240_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_234_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_182_p4;
    max_val_1_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_1_fu_532_p3),64));
    max_val_1_fu_532_p3 <= 
        tmp_14_reg_675 when (grp_fu_200_p2(0) = '1') else 
        tmp_12_reg_665;
    max_val_4_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_4_fu_547_p3),64));
    max_val_4_fu_547_p3 <= 
        tmp_18_reg_685 when (grp_fu_200_p2(0) = '1') else 
        max_val_1_reg_707;
    max_val_5_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_5_fu_564_p3),64));
    max_val_5_fu_564_p3 <= 
        tmp_20_reg_691 when (grp_fu_200_p2(0) = '1') else 
        max_val_4_reg_722;
    n_1_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(n_mid2_reg_648));
    n_cast7_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_mid2_reg_648),7));
    n_mid2_fu_330_p3 <= 
        ap_const_lv5_0 when (tmp_fu_324_p2(0) = '1') else 
        ap_phi_mux_n_phi_fu_193_p4;
    not_exitcond_flatten_fu_300_p2 <= (exitcond_flatten_fu_234_p2 xor ap_const_lv1_1);
    output_r_address0 <= tmp_24_fu_628_p1(9 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= in_r_q0;

    output_r_we0_assign_proc : process(exitcond_flatten2_reg_633, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_484_p3),11));
    p_shl1_fu_484_p3 <= (tmp_16_fu_470_p2 & ap_const_lv1_0);
    p_shl2_fu_422_p3 <= (tmp_10_fu_416_p2 & ap_const_lv3_0);
    p_shl3_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_430_p3),11));
    p_shl3_fu_430_p3 <= (tmp_10_fu_416_p2 & ap_const_lv1_0);
    p_shl4_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_388_p3),8));
    p_shl4_fu_388_p3 <= (tmp_1_fu_384_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_400_p2),8));
    p_shl6_fu_609_p3 <= (tmp5_reg_737 & ap_const_lv2_0);
    p_shl7_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_575_p3),7));
    p_shl7_fu_575_p3 <= (tmp_1_reg_660 & ap_const_lv2_0);
    p_shl_fu_476_p3 <= (tmp_16_fu_470_p2 & ap_const_lv3_0);
    tmp3_fu_586_p2 <= std_logic_vector(unsigned(i_cast9_mid2_fu_558_p1) + unsigned(p_shl7_cast_fu_582_p1));
    tmp4_fu_616_p2 <= std_logic_vector(unsigned(j_cast8_mid2_cast_fu_603_p1) + unsigned(p_shl6_fu_609_p3));
    tmp5_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_reg_737),9));
    tmp5_fu_592_p2 <= std_logic_vector(unsigned(n_cast7_fu_561_p1) + unsigned(tmp3_fu_586_p2));
    tmp_10_fu_416_p2 <= std_logic_vector(unsigned(tmp_4_cast_mid2_fu_270_p1) + unsigned(tmp_9_fu_410_p2));
    tmp_11_fu_442_p2 <= std_logic_vector(unsigned(p_shl2_fu_422_p3) + unsigned(p_shl3_cast_fu_438_p1));
    tmp_12_fu_448_p2 <= std_logic_vector(unsigned(tmp_7_cast_mid2_cast_fu_362_p1) + unsigned(tmp_11_fu_442_p2));
    tmp_13_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_448_p2),64));
    tmp_14_fu_459_p2 <= std_logic_vector(unsigned(tmp_8_cast_mid2_cast_fu_380_p1) + unsigned(tmp_11_fu_442_p2));
    tmp_15_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_459_p2),64));
    tmp_16_fu_470_p2 <= std_logic_vector(unsigned(tmp_5_cast_mid2_fu_280_p1) + unsigned(tmp_9_fu_410_p2));
    tmp_17_fu_496_p2 <= std_logic_vector(unsigned(p_shl_fu_476_p3) + unsigned(p_shl1_cast_fu_492_p1));
    tmp_18_fu_502_p2 <= std_logic_vector(unsigned(tmp_7_cast_mid2_cast_fu_362_p1) + unsigned(tmp_17_fu_496_p2));
    tmp_19_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_685),64));
    tmp_1_fu_384_p1 <= n_mid2_fu_330_p3(4 - 1 downto 0);
    tmp_20_fu_508_p2 <= std_logic_vector(unsigned(tmp_8_cast_mid2_cast_fu_380_p1) + unsigned(tmp_17_fu_496_p2));
    tmp_21_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_691),64));
    tmp_23_fu_622_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_606_p1) + unsigned(tmp4_fu_616_p2));
    tmp_24_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_622_p2),64));
    tmp_2_fu_400_p2 <= std_logic_vector(shift_left(unsigned(n_mid2_fu_330_p3),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_4_cast_mid2_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_cast_mid2_v_fu_262_p3),8));
    tmp_4_cast_mid2_v_fu_262_p3 <= (i_cast9_mid2_v_fu_254_p3 & ap_const_lv1_0);
    tmp_5_cast_mid2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_cast_mid2_v_fu_274_p2),8));
    tmp_5_cast_mid2_v_fu_274_p2 <= (tmp_4_cast_mid2_v_fu_262_p3 or ap_const_lv4_1);
    tmp_7_cast_mid2_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_mid2_fu_354_p3),11));
    tmp_7_cast_mid2_fu_354_p3 <= 
        tmp_7_mid1_fu_346_p3 when (exitcond_mid_fu_312_p2(0) = '1') else 
        tmp_7_cast_mid_fu_284_p3;
    tmp_7_cast_mid_fu_284_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_234_p2(0) = '1') else 
        tmp_7_fu_208_p3;
    tmp_7_fu_208_p3 <= (ap_phi_mux_j_phi_fu_182_p4 & ap_const_lv1_0);
    tmp_7_mid1_fu_346_p3 <= (j_1_fu_318_p2 & ap_const_lv1_0);
    tmp_8_cast_mid2_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast_mid2_fu_372_p3),11));
    tmp_8_cast_mid2_fu_372_p3 <= 
        tmp_8_mid1_fu_366_p2 when (exitcond_mid_fu_312_p2(0) = '1') else 
        tmp_8_cast_mid_fu_292_p3;
    tmp_8_cast_mid_fu_292_p3 <= 
        ap_const_lv4_1 when (exitcond_flatten_fu_234_p2(0) = '1') else 
        tmp_8_fu_216_p2;
    tmp_8_fu_216_p2 <= (tmp_7_fu_208_p3 or ap_const_lv4_1);
    tmp_8_mid1_fu_366_p2 <= (tmp_7_mid1_fu_346_p3 or ap_const_lv4_1);
    tmp_9_fu_410_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_396_p1) + unsigned(p_shl5_cast_fu_406_p1));
    tmp_fu_324_p2 <= (exitcond_mid_fu_312_p2 or exitcond_flatten_fu_234_p2);
end behav;
