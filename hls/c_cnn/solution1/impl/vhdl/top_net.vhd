-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_net is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of top_net is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_net,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=43.750000,HLS_SYN_LAT=486577,HLS_SYN_TPT=none,HLS_SYN_MEM=202,HLS_SYN_DSP=25,HLS_SYN_FF=4454,HLS_SYN_LUT=10638,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r : STD_LOGIC_VECTOR (31 downto 0);
    signal result : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond_i_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal result3_reg_349 : STD_LOGIC_VECTOR (29 downto 0);
    signal in1_reg_354 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_addr_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal c5_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_cast1_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_cast1_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_block_state17_io : BOOLEAN;
    signal i_fu_328_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_index_1_fu_334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal max_value_2_fu_341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_output_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal c1_output_ce0 : STD_LOGIC;
    signal c1_output_we0 : STD_LOGIC;
    signal c1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_output_ce1 : STD_LOGIC;
    signal c1_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal p1_output_ce0 : STD_LOGIC;
    signal p1_output_we0 : STD_LOGIC;
    signal p1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal c2_output_ce0 : STD_LOGIC;
    signal c2_output_we0 : STD_LOGIC;
    signal c2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_output_ce1 : STD_LOGIC;
    signal c2_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p2_output_ce0 : STD_LOGIC;
    signal p2_output_we0 : STD_LOGIC;
    signal p2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c3_output_ce0 : STD_LOGIC;
    signal c3_output_we0 : STD_LOGIC;
    signal c3_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c4_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c4_output_ce0 : STD_LOGIC;
    signal c4_output_we0 : STD_LOGIC;
    signal c4_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c5_output_ce0 : STD_LOGIC;
    signal c5_output_we0 : STD_LOGIC;
    signal grp_conv_1_fu_212_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_212_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_212_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_212_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_212_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_conv_1_fu_212_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_conv_1_fu_212_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_conv_1_fu_212_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_conv_1_fu_212_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_fu_212_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_conv_1_fu_212_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_conv_1_fu_212_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_1_fu_212_output_r_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_212_output_r_we0 : STD_LOGIC;
    signal grp_conv_1_fu_212_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_2_fu_225_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_225_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_225_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_225_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_225_in_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_225_in_r_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_225_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_225_output_r_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_225_output_r_we0 : STD_LOGIC;
    signal grp_conv_2_fu_225_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_3_fu_235_ap_start : STD_LOGIC;
    signal grp_conv_3_fu_235_ap_done : STD_LOGIC;
    signal grp_conv_3_fu_235_ap_idle : STD_LOGIC;
    signal grp_conv_3_fu_235_ap_ready : STD_LOGIC;
    signal grp_conv_3_fu_235_in_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv_3_fu_235_in_r_ce0 : STD_LOGIC;
    signal grp_conv_3_fu_235_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_3_fu_235_output_r_ce0 : STD_LOGIC;
    signal grp_conv_3_fu_235_output_r_we0 : STD_LOGIC;
    signal grp_conv_3_fu_235_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_245_ap_start : STD_LOGIC;
    signal grp_conv_4_fu_245_ap_done : STD_LOGIC;
    signal grp_conv_4_fu_245_ap_idle : STD_LOGIC;
    signal grp_conv_4_fu_245_ap_ready : STD_LOGIC;
    signal grp_conv_4_fu_245_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_4_fu_245_in_r_ce0 : STD_LOGIC;
    signal grp_conv_4_fu_245_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_4_fu_245_output_r_ce0 : STD_LOGIC;
    signal grp_conv_4_fu_245_output_r_we0 : STD_LOGIC;
    signal grp_conv_4_fu_245_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_5_fu_255_ap_start : STD_LOGIC;
    signal grp_conv_5_fu_255_ap_done : STD_LOGIC;
    signal grp_conv_5_fu_255_ap_idle : STD_LOGIC;
    signal grp_conv_5_fu_255_ap_ready : STD_LOGIC;
    signal grp_conv_5_fu_255_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_5_fu_255_in_r_ce0 : STD_LOGIC;
    signal grp_conv_5_fu_255_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_5_fu_255_output_r_ce0 : STD_LOGIC;
    signal grp_conv_5_fu_255_output_r_we0 : STD_LOGIC;
    signal grp_conv_5_fu_255_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_2D_1_fu_265_ap_start : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_ap_done : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_ap_idle : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_ap_ready : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_in_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pool_2D_1_fu_265_in_r_ce0 : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_in_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pool_2D_1_fu_265_in_r_ce1 : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2D_1_fu_265_output_r_ce0 : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_output_r_we0 : STD_LOGIC;
    signal grp_max_pool_2D_1_fu_265_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_2D_fu_271_ap_start : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_ap_done : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_ap_idle : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_ap_ready : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_in_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2D_fu_271_in_r_ce0 : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_in_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2D_fu_271_in_r_ce1 : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2D_fu_271_output_r_ce0 : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_output_r_we0 : STD_LOGIC;
    signal grp_max_pool_2D_fu_271_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_i_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value1_i_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_1_fu_212_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_conv_2_fu_225_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_conv_3_fu_235_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_conv_4_fu_245_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_conv_5_fu_255_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_max_pool_2D_1_fu_265_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_max_pool_2D_fu_271_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_i_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal tmp_i_5_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pool_2D_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pool_2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_fcmp_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_net_c1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_p1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_c2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_p2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_c3_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_c4_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_c5_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        result : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_net_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_net_AXILiteS_s_axi_U : component top_net_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_r => in_r,
        result => result);

    top_net_gmem_m_axi_U : component top_net_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_conv_1_fu_212_m_axi_in_r_ARADDR,
        I_ARID => grp_conv_1_fu_212_m_axi_in_r_ARID,
        I_ARLEN => grp_conv_1_fu_212_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_conv_1_fu_212_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_conv_1_fu_212_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_conv_1_fu_212_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_conv_1_fu_212_m_axi_in_r_ARQOS,
        I_ARPROT => grp_conv_1_fu_212_m_axi_in_r_ARPROT,
        I_ARUSER => grp_conv_1_fu_212_m_axi_in_r_ARUSER,
        I_ARBURST => grp_conv_1_fu_212_m_axi_in_r_ARBURST,
        I_ARREGION => grp_conv_1_fu_212_m_axi_in_r_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_364,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => max_index_i_reg_178,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    c1_output_U : component top_net_c1_output
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c1_output_address0,
        ce0 => c1_output_ce0,
        we0 => c1_output_we0,
        d0 => grp_conv_1_fu_212_output_r_d0,
        q0 => c1_output_q0,
        address1 => grp_max_pool_2D_1_fu_265_in_r_address1,
        ce1 => c1_output_ce1,
        q1 => c1_output_q1);

    p1_output_U : component top_net_p1_output
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p1_output_address0,
        ce0 => p1_output_ce0,
        we0 => p1_output_we0,
        d0 => grp_max_pool_2D_1_fu_265_output_r_d0,
        q0 => p1_output_q0);

    c2_output_U : component top_net_c2_output
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c2_output_address0,
        ce0 => c2_output_ce0,
        we0 => c2_output_we0,
        d0 => grp_conv_2_fu_225_output_r_d0,
        q0 => c2_output_q0,
        address1 => grp_max_pool_2D_fu_271_in_r_address1,
        ce1 => c2_output_ce1,
        q1 => c2_output_q1);

    p2_output_U : component top_net_p2_output
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p2_output_address0,
        ce0 => p2_output_ce0,
        we0 => p2_output_we0,
        d0 => grp_max_pool_2D_fu_271_output_r_d0,
        q0 => p2_output_q0);

    c3_output_U : component top_net_c3_output
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c3_output_address0,
        ce0 => c3_output_ce0,
        we0 => c3_output_we0,
        d0 => grp_conv_3_fu_235_output_r_d0,
        q0 => c3_output_q0);

    c4_output_U : component top_net_c4_output
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c4_output_address0,
        ce0 => c4_output_ce0,
        we0 => c4_output_we0,
        d0 => grp_conv_4_fu_245_output_r_d0,
        q0 => c4_output_q0);

    c5_output_U : component top_net_c5_output
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_output_address0,
        ce0 => c5_output_ce0,
        we0 => c5_output_we0,
        d0 => grp_conv_5_fu_255_output_r_d0,
        q0 => c5_output_q0);

    grp_conv_1_fu_212 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_1_fu_212_ap_start,
        ap_done => grp_conv_1_fu_212_ap_done,
        ap_idle => grp_conv_1_fu_212_ap_idle,
        ap_ready => grp_conv_1_fu_212_ap_ready,
        m_axi_in_r_AWVALID => grp_conv_1_fu_212_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_conv_1_fu_212_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_conv_1_fu_212_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_conv_1_fu_212_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_conv_1_fu_212_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_conv_1_fu_212_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_conv_1_fu_212_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_conv_1_fu_212_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_conv_1_fu_212_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_conv_1_fu_212_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_conv_1_fu_212_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_conv_1_fu_212_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_conv_1_fu_212_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_conv_1_fu_212_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_conv_1_fu_212_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_conv_1_fu_212_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_conv_1_fu_212_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_conv_1_fu_212_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_conv_1_fu_212_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => gmem_ARREADY,
        m_axi_in_r_ARADDR => grp_conv_1_fu_212_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_conv_1_fu_212_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_conv_1_fu_212_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_conv_1_fu_212_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_conv_1_fu_212_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_conv_1_fu_212_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_conv_1_fu_212_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_conv_1_fu_212_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_conv_1_fu_212_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_conv_1_fu_212_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_conv_1_fu_212_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => gmem_RVALID,
        m_axi_in_r_RREADY => grp_conv_1_fu_212_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => gmem_RDATA,
        m_axi_in_r_RLAST => gmem_RLAST,
        m_axi_in_r_RID => gmem_RID,
        m_axi_in_r_RUSER => gmem_RUSER,
        m_axi_in_r_RRESP => gmem_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_conv_1_fu_212_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        in_offset => in1_reg_354,
        output_r_address0 => grp_conv_1_fu_212_output_r_address0,
        output_r_ce0 => grp_conv_1_fu_212_output_r_ce0,
        output_r_we0 => grp_conv_1_fu_212_output_r_we0,
        output_r_d0 => grp_conv_1_fu_212_output_r_d0);

    grp_conv_2_fu_225 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_2_fu_225_ap_start,
        ap_done => grp_conv_2_fu_225_ap_done,
        ap_idle => grp_conv_2_fu_225_ap_idle,
        ap_ready => grp_conv_2_fu_225_ap_ready,
        in_r_address0 => grp_conv_2_fu_225_in_r_address0,
        in_r_ce0 => grp_conv_2_fu_225_in_r_ce0,
        in_r_q0 => p1_output_q0,
        output_r_address0 => grp_conv_2_fu_225_output_r_address0,
        output_r_ce0 => grp_conv_2_fu_225_output_r_ce0,
        output_r_we0 => grp_conv_2_fu_225_output_r_we0,
        output_r_d0 => grp_conv_2_fu_225_output_r_d0);

    grp_conv_3_fu_235 : component conv_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_3_fu_235_ap_start,
        ap_done => grp_conv_3_fu_235_ap_done,
        ap_idle => grp_conv_3_fu_235_ap_idle,
        ap_ready => grp_conv_3_fu_235_ap_ready,
        in_r_address0 => grp_conv_3_fu_235_in_r_address0,
        in_r_ce0 => grp_conv_3_fu_235_in_r_ce0,
        in_r_q0 => p2_output_q0,
        output_r_address0 => grp_conv_3_fu_235_output_r_address0,
        output_r_ce0 => grp_conv_3_fu_235_output_r_ce0,
        output_r_we0 => grp_conv_3_fu_235_output_r_we0,
        output_r_d0 => grp_conv_3_fu_235_output_r_d0);

    grp_conv_4_fu_245 : component conv_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_4_fu_245_ap_start,
        ap_done => grp_conv_4_fu_245_ap_done,
        ap_idle => grp_conv_4_fu_245_ap_idle,
        ap_ready => grp_conv_4_fu_245_ap_ready,
        in_r_address0 => grp_conv_4_fu_245_in_r_address0,
        in_r_ce0 => grp_conv_4_fu_245_in_r_ce0,
        in_r_q0 => c3_output_q0,
        output_r_address0 => grp_conv_4_fu_245_output_r_address0,
        output_r_ce0 => grp_conv_4_fu_245_output_r_ce0,
        output_r_we0 => grp_conv_4_fu_245_output_r_we0,
        output_r_d0 => grp_conv_4_fu_245_output_r_d0);

    grp_conv_5_fu_255 : component conv_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_5_fu_255_ap_start,
        ap_done => grp_conv_5_fu_255_ap_done,
        ap_idle => grp_conv_5_fu_255_ap_idle,
        ap_ready => grp_conv_5_fu_255_ap_ready,
        in_r_address0 => grp_conv_5_fu_255_in_r_address0,
        in_r_ce0 => grp_conv_5_fu_255_in_r_ce0,
        in_r_q0 => c4_output_q0,
        output_r_address0 => grp_conv_5_fu_255_output_r_address0,
        output_r_ce0 => grp_conv_5_fu_255_output_r_ce0,
        output_r_we0 => grp_conv_5_fu_255_output_r_we0,
        output_r_d0 => grp_conv_5_fu_255_output_r_d0);

    grp_max_pool_2D_1_fu_265 : component max_pool_2D_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_2D_1_fu_265_ap_start,
        ap_done => grp_max_pool_2D_1_fu_265_ap_done,
        ap_idle => grp_max_pool_2D_1_fu_265_ap_idle,
        ap_ready => grp_max_pool_2D_1_fu_265_ap_ready,
        in_r_address0 => grp_max_pool_2D_1_fu_265_in_r_address0,
        in_r_ce0 => grp_max_pool_2D_1_fu_265_in_r_ce0,
        in_r_q0 => c1_output_q0,
        in_r_address1 => grp_max_pool_2D_1_fu_265_in_r_address1,
        in_r_ce1 => grp_max_pool_2D_1_fu_265_in_r_ce1,
        in_r_q1 => c1_output_q1,
        output_r_address0 => grp_max_pool_2D_1_fu_265_output_r_address0,
        output_r_ce0 => grp_max_pool_2D_1_fu_265_output_r_ce0,
        output_r_we0 => grp_max_pool_2D_1_fu_265_output_r_we0,
        output_r_d0 => grp_max_pool_2D_1_fu_265_output_r_d0);

    grp_max_pool_2D_fu_271 : component max_pool_2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_2D_fu_271_ap_start,
        ap_done => grp_max_pool_2D_fu_271_ap_done,
        ap_idle => grp_max_pool_2D_fu_271_ap_idle,
        ap_ready => grp_max_pool_2D_fu_271_ap_ready,
        in_r_address0 => grp_max_pool_2D_fu_271_in_r_address0,
        in_r_ce0 => grp_max_pool_2D_fu_271_in_r_ce0,
        in_r_q0 => c2_output_q0,
        in_r_address1 => grp_max_pool_2D_fu_271_in_r_address1,
        in_r_ce1 => grp_max_pool_2D_fu_271_in_r_ce1,
        in_r_q1 => c2_output_q1,
        output_r_address0 => grp_max_pool_2D_fu_271_output_r_address0,
        output_r_ce0 => grp_max_pool_2D_fu_271_output_r_ce0,
        output_r_we0 => grp_max_pool_2D_fu_271_output_r_we0,
        output_r_d0 => grp_max_pool_2D_fu_271_output_r_d0);

    top_net_fcmp_32nsdEe_U41 : component top_net_fcmp_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => c5_output_q0,
        din1 => max_value1_i_reg_191,
        opcode => ap_const_lv5_2,
        dout => tmp_i_5_fu_277_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i_fu_317_p2 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_state17_io)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_1_fu_212_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_1_fu_212_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_conv_1_fu_212_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_212_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_212_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_225_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_2_fu_225_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_conv_2_fu_225_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_225_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_225_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_3_fu_235_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_3_fu_235_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_conv_3_fu_235_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_3_fu_235_ap_ready = ap_const_logic_1)) then 
                    grp_conv_3_fu_235_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_4_fu_245_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_4_fu_245_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_conv_4_fu_245_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_4_fu_245_ap_ready = ap_const_logic_1)) then 
                    grp_conv_4_fu_245_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_5_fu_255_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_5_fu_255_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_conv_5_fu_255_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_5_fu_255_ap_ready = ap_const_logic_1)) then 
                    grp_conv_5_fu_255_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2D_1_fu_265_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_2D_1_fu_265_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_max_pool_2D_1_fu_265_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2D_1_fu_265_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2D_1_fu_265_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2D_fu_271_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_2D_fu_271_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_max_pool_2D_fu_271_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2D_fu_271_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2D_fu_271_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    max_index_i_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                max_index_i_reg_178 <= max_index_1_fu_334_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                max_index_i_reg_178 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    max_index_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                max_index_reg_201 <= i_reg_388;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                max_index_reg_201 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    max_value1_i_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                max_value1_i_reg_191 <= max_value_2_fu_341_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                max_value1_i_reg_191 <= c5_output_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    gmem_addr_reg_364(29 downto 0) <= tmp_fu_304_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i_fu_317_p2 = ap_const_lv1_0))) then
                i_reg_388 <= i_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in1_reg_354 <= in_r(31 downto 2);
                result3_reg_349 <= result(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    max_index_cast1_reg_375(3 downto 0) <= max_index_cast1_fu_313_p1(3 downto 0);
            end if;
        end if;
    end process;
    gmem_addr_reg_364(31 downto 30) <= "00";
    max_index_cast1_reg_375(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, exitcond_i_fu_317_p2, ap_CS_fsm_state19, ap_CS_fsm_state24, gmem_BVALID, ap_block_state17_io, grp_conv_1_fu_212_ap_done, grp_conv_2_fu_225_ap_done, grp_conv_3_fu_235_ap_done, grp_conv_4_fu_245_ap_done, grp_conv_5_fu_255_ap_done, grp_max_pool_2D_1_fu_265_ap_done, grp_max_pool_2D_fu_271_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv_1_fu_212_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_max_pool_2D_1_fu_265_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_conv_2_fu_225_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_max_pool_2D_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_conv_3_fu_235_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_conv_4_fu_245_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_conv_5_fu_255_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i_fu_317_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state17_io_assign_proc : process(exitcond_i_fu_317_p2, ap_sig_ioackin_gmem_AWREADY)
    begin
                ap_block_state17_io <= ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (exitcond_i_fu_317_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    c1_output_address0_assign_proc : process(grp_conv_1_fu_212_output_r_address0, grp_max_pool_2D_1_fu_265_in_r_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c1_output_address0 <= grp_max_pool_2D_1_fu_265_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_output_address0 <= grp_conv_1_fu_212_output_r_address0;
        else 
            c1_output_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    c1_output_ce0_assign_proc : process(grp_conv_1_fu_212_output_r_ce0, grp_max_pool_2D_1_fu_265_in_r_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c1_output_ce0 <= grp_max_pool_2D_1_fu_265_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_output_ce0 <= grp_conv_1_fu_212_output_r_ce0;
        else 
            c1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_output_ce1_assign_proc : process(grp_max_pool_2D_1_fu_265_in_r_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c1_output_ce1 <= grp_max_pool_2D_1_fu_265_in_r_ce1;
        else 
            c1_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c1_output_we0_assign_proc : process(grp_conv_1_fu_212_output_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_output_we0 <= grp_conv_1_fu_212_output_r_we0;
        else 
            c1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_output_address0_assign_proc : process(grp_conv_2_fu_225_output_r_address0, grp_max_pool_2D_fu_271_in_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c2_output_address0 <= grp_max_pool_2D_fu_271_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c2_output_address0 <= grp_conv_2_fu_225_output_r_address0;
        else 
            c2_output_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    c2_output_ce0_assign_proc : process(grp_conv_2_fu_225_output_r_ce0, grp_max_pool_2D_fu_271_in_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c2_output_ce0 <= grp_max_pool_2D_fu_271_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c2_output_ce0 <= grp_conv_2_fu_225_output_r_ce0;
        else 
            c2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_output_ce1_assign_proc : process(grp_max_pool_2D_fu_271_in_r_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c2_output_ce1 <= grp_max_pool_2D_fu_271_in_r_ce1;
        else 
            c2_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c2_output_we0_assign_proc : process(grp_conv_2_fu_225_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c2_output_we0 <= grp_conv_2_fu_225_output_r_we0;
        else 
            c2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_output_address0_assign_proc : process(grp_conv_3_fu_235_output_r_address0, grp_conv_4_fu_245_in_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c3_output_address0 <= grp_conv_4_fu_245_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c3_output_address0 <= grp_conv_3_fu_235_output_r_address0;
        else 
            c3_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    c3_output_ce0_assign_proc : process(grp_conv_3_fu_235_output_r_ce0, grp_conv_4_fu_245_in_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c3_output_ce0 <= grp_conv_4_fu_245_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c3_output_ce0 <= grp_conv_3_fu_235_output_r_ce0;
        else 
            c3_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_output_we0_assign_proc : process(grp_conv_3_fu_235_output_r_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c3_output_we0 <= grp_conv_3_fu_235_output_r_we0;
        else 
            c3_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c4_output_address0_assign_proc : process(grp_conv_4_fu_245_output_r_address0, grp_conv_5_fu_255_in_r_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            c4_output_address0 <= grp_conv_5_fu_255_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c4_output_address0 <= grp_conv_4_fu_245_output_r_address0;
        else 
            c4_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    c4_output_ce0_assign_proc : process(grp_conv_4_fu_245_output_r_ce0, grp_conv_5_fu_255_in_r_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            c4_output_ce0 <= grp_conv_5_fu_255_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c4_output_ce0 <= grp_conv_4_fu_245_output_r_ce0;
        else 
            c4_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c4_output_we0_assign_proc : process(grp_conv_4_fu_245_output_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c4_output_we0 <= grp_conv_4_fu_245_output_r_we0;
        else 
            c4_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_output_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state15, grp_conv_5_fu_255_output_r_address0, ap_CS_fsm_state14, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c5_output_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c5_output_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            c5_output_address0 <= grp_conv_5_fu_255_output_r_address0;
        else 
            c5_output_address0 <= "XXXX";
        end if; 
    end process;


    c5_output_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state15, ap_block_state17_io, grp_conv_5_fu_255_output_r_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            c5_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            c5_output_ce0 <= grp_conv_5_fu_255_output_r_ce0;
        else 
            c5_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_output_we0_assign_proc : process(grp_conv_5_fu_255_output_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            c5_output_we0 <= grp_conv_5_fu_255_output_r_we0;
        else 
            c5_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_317_p2 <= "1" when (max_index_reg_201 = ap_const_lv4_A) else "0";

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_conv_1_fu_212_m_axi_in_r_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_ARVALID <= grp_conv_1_fu_212_m_axi_in_r_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state17, exitcond_i_fu_317_p2, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i_fu_317_p2 = ap_const_lv1_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state24, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_conv_1_fu_212_m_axi_in_r_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_RREADY <= grp_conv_1_fu_212_m_axi_in_r_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state19, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state17, exitcond_i_fu_317_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i_fu_317_p2 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_conv_1_fu_212_ap_start <= grp_conv_1_fu_212_ap_start_reg;
    grp_conv_2_fu_225_ap_start <= grp_conv_2_fu_225_ap_start_reg;
    grp_conv_3_fu_235_ap_start <= grp_conv_3_fu_235_ap_start_reg;
    grp_conv_4_fu_245_ap_start <= grp_conv_4_fu_245_ap_start_reg;
    grp_conv_5_fu_255_ap_start <= grp_conv_5_fu_255_ap_start_reg;
    grp_max_pool_2D_1_fu_265_ap_start <= grp_max_pool_2D_1_fu_265_ap_start_reg;
    grp_max_pool_2D_fu_271_ap_start <= grp_max_pool_2D_fu_271_ap_start_reg;
    i_fu_328_p2 <= std_logic_vector(unsigned(max_index_reg_201) + unsigned(ap_const_lv4_1));
    max_index_1_fu_334_p3 <= 
        max_index_cast1_reg_375 when (tmp_i_5_fu_277_p2(0) = '1') else 
        max_index_i_reg_178;
    max_index_cast1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_reg_201),32));
    max_value_2_fu_341_p3 <= 
        c5_output_q0 when (tmp_i_5_fu_277_p2(0) = '1') else 
        max_value1_i_reg_191;

    p1_output_address0_assign_proc : process(grp_conv_2_fu_225_in_r_address0, grp_max_pool_2D_1_fu_265_output_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p1_output_address0 <= grp_max_pool_2D_1_fu_265_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p1_output_address0 <= grp_conv_2_fu_225_in_r_address0;
        else 
            p1_output_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    p1_output_ce0_assign_proc : process(grp_conv_2_fu_225_in_r_ce0, grp_max_pool_2D_1_fu_265_output_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p1_output_ce0 <= grp_max_pool_2D_1_fu_265_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p1_output_ce0 <= grp_conv_2_fu_225_in_r_ce0;
        else 
            p1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p1_output_we0_assign_proc : process(grp_max_pool_2D_1_fu_265_output_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p1_output_we0 <= grp_max_pool_2D_1_fu_265_output_r_we0;
        else 
            p1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p2_output_address0_assign_proc : process(grp_conv_3_fu_235_in_r_address0, grp_max_pool_2D_fu_271_output_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p2_output_address0 <= grp_max_pool_2D_fu_271_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p2_output_address0 <= grp_conv_3_fu_235_in_r_address0;
        else 
            p2_output_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    p2_output_ce0_assign_proc : process(grp_conv_3_fu_235_in_r_ce0, grp_max_pool_2D_fu_271_output_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p2_output_ce0 <= grp_max_pool_2D_fu_271_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p2_output_ce0 <= grp_conv_3_fu_235_in_r_ce0;
        else 
            p2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p2_output_we0_assign_proc : process(grp_max_pool_2D_fu_271_output_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p2_output_we0 <= grp_max_pool_2D_fu_271_output_r_we0;
        else 
            p2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result3_reg_349),64));
    tmp_i_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_reg_201),64));
end behav;
