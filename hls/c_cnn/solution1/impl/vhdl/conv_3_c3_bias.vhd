-- ==============================================================
-- File generated on Mon May 13 18:06:56 +0800 2024
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_3_c3_bias_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_3_c3_bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001010101001001010000", 
    1 => "10111101000001110001011000100010", 
    2 => "10111011100011001100001011011101", 
    3 => "10111101001000000110010101011011", 
    4 => "10111101010000110100000110010100", 
    5 => "10111100101001101011101010111011", 
    6 => "00111101000011011011010010001101", 
    7 => "10111101000011111000111010010010", 
    8 => "00111101100011110100010101101111", 
    9 => "00111101000100000000000011100000", 
    10 => "10111101011010010010011000000110", 
    11 => "00111101001000111001111001001000", 
    12 => "00111010011111110101010101000010", 
    13 => "10111101011101100011101010011110", 
    14 => "10111101011010101010001001001010", 
    15 => "10111101101001100000011100110011", 
    16 => "10111100110011000110000100001111", 
    17 => "10111101010101000110001100100110", 
    18 => "10111101100110010101001110010101", 
    19 => "10111010100101110101011110011101", 
    20 => "10111100011101101110110100000011", 
    21 => "10111101100011111110100100111111", 
    22 => "10111101001001100100100000011101", 
    23 => "00111011110011011110111111101001", 
    24 => "00111100001101111101111111111110", 
    25 => "10111011100100010110101010111000", 
    26 => "00111101101010101001000011000110", 
    27 => "00111100101110000100101100100110", 
    28 => "00111100011111001010001001000100", 
    29 => "00111101001000101010110111101111", 
    30 => "00111100111101000110000101011000", 
    31 => "10111101001110110110010100000100", 
    32 => "00111100111011100000011100001110", 
    33 => "10111100111110001101010001100111", 
    34 => "10111101100000001000100010111010", 
    35 => "00111100110000100010011111111011", 
    36 => "00111101100100100000011011010010", 
    37 => "00111101011001101110110000000001", 
    38 => "10111101101011011110011100011001", 
    39 => "10111100101101011011101011011111", 
    40 => "10111100101010110010101100010100", 
    41 => "00111101000111101001101001010101", 
    42 => "00111101001011011000000000011011", 
    43 => "00111100100010000101011100011100", 
    44 => "00111100101111011110111011111011", 
    45 => "10111100110001101101001110111111", 
    46 => "10111101101000110111101011111010", 
    47 => "00111100111100011101001110000010", 
    48 => "00111010011011110101101010011110", 
    49 => "00111101000101001110110100100010", 
    50 => "00111011000110010001000000000101", 
    51 => "10111100100110001011100101101011", 
    52 => "00111101000001100101100110111011", 
    53 => "00111100100011111110001001110100", 
    54 => "10111101011110100110110110111001", 
    55 => "10111101001110101011110111111010", 
    56 => "10111101011111110110010111110100", 
    57 => "00111101100100000001101101010001", 
    58 => "00111101001010000111010111010011", 
    59 => "10111101010011011010010100110010", 
    60 => "10111101000010100100010010000100", 
    61 => "00111100111011010111100011101011", 
    62 => "10111101000111101010001001101100", 
    63 => "00111010010001110010000001101110", 
    64 => "10111011100111001011111101111001", 
    65 => "10111100000000001111001000001100", 
    66 => "00111101110011111110000111010001", 
    67 => "10111100001000101010110011001011", 
    68 => "10111101100110000011011111100011", 
    69 => "00111100100001010100100011001011", 
    70 => "10111011111100000110100111111110", 
    71 => "10111101001100110010110110111110", 
    72 => "00111100111010001111111000100010", 
    73 => "00111101101010100011011101000101", 
    74 => "00111101000001101010110011001101", 
    75 => "00111100011001001110001110011110", 
    76 => "00111101010010111001000100101101", 
    77 => "00111101011011010010000011100100", 
    78 => "10111101001010100001011100100111", 
    79 => "00111101001110001101000110000100", 
    80 => "00111011001100110000010011001111", 
    81 => "10111101010001000101001001011010", 
    82 => "10111100101001110001000111101111", 
    83 => "00111101001100010110001011100010", 
    84 => "00111100010010000101101100111110", 
    85 => "00111101010110111010000101101001", 
    86 => "00111100001010110011000001100000", 
    87 => "00111101010110000110101010010111", 
    88 => "00111100101001110010111000110010", 
    89 => "00111100010111000001111010111011", 
    90 => "10111100100001000011000101100000", 
    91 => "00111010110101010000001000101111", 
    92 => "00111101000100100011000001110000", 
    93 => "10111101011000101000101110000111", 
    94 => "00111101000100110010011100100111", 
    95 => "10111101000010001110011000110001", 
    96 => "10111100100000111001101110010101", 
    97 => "10111101100100100100010111110110", 
    98 => "10111011111001011100101111010110", 
    99 => "10111011100000111001011111001101", 
    100 => "10111011110101010000001000101000", 
    101 => "00111101001100111110101010101111", 
    102 => "10111100001011111001011110011011", 
    103 => "10111101100111000110011011000100", 
    104 => "10111100100000101001111101001111", 
    105 => "10111100001101011001110101011010", 
    106 => "00111100101010100001000110110110", 
    107 => "00111101001010110000111111000100", 
    108 => "10111101000111100110100011001011", 
    109 => "00111101000101000111101100111000", 
    110 => "10111101001110110111110101111100", 
    111 => "10111101010101010000101001010000", 
    112 => "00111100100000011100000001101001", 
    113 => "10111100011100101100001110110000", 
    114 => "10111101000101010010101000011011", 
    115 => "00111100010101101110110010000010", 
    116 => "10111100101011000011001111101110", 
    117 => "10111100001000010100000111111101", 
    118 => "00111101000011001001000100010101", 
    119 => "10111101000101011100011100010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_3_c3_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_3_c3_bias is
    component conv_3_c3_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_3_c3_bias_rom_U :  component conv_3_c3_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


